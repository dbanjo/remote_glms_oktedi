DROP TABLE STRANG.DETAILRS CASCADE CONSTRAINTS;

CREATE TABLE STRANG.DETAILRS
(
  ITEMNO              NUMBER                    NOT NULL,
  LOGNO               VARCHAR2(15 BYTE),
  HAWB_HAWBNO         NUMBER,
  CAMOV_SEAL          VARCHAR2(20 BYTE),
  DETAILDESC          VARCHAR2(90 BYTE),
  HAZARD              VARCHAR2(120 BYTE),
  ECN                 VARCHAR2(15 BYTE),
  SA                  VARCHAR2(1 BYTE)          NOT NULL,
  CL                  VARCHAR2(1 BYTE)          NOT NULL,
  PKTPE_PACKTYPE      VARCHAR2(4 BYTE)          NOT NULL,
  OWNER               VARCHAR2(1 BYTE)          NOT NULL,
  PARTVOLUME          NUMBER(15,3)              NOT NULL,
  PARTWEIGHT          NUMBER(15,1)              NOT NULL,
  QTY                 NUMBER(15)                NOT NULL,
  MOVEMENT_NO         VARCHAR2(40 BYTE),
  DELIVERYNO          NUMBER                    NOT NULL,
  ENTRY_NO            NUMBER,
  LINE_NO             NUMBER,
  PRIMARY_ROWID       ROWID,
  SITE_OWNER          VARCHAR2(100 BYTE),
  DATE_MODIFIED       DATE,
  WAREHOUSE           VARCHAR2(20 BYTE),
  HANDLING_UNIT       NUMBER(10),
  ENTRY_NO_COM        NUMBER,
  IO                  VARCHAR2(1 BYTE),
  SA_2                VARCHAR2(1 BYTE),
  CL_2                VARCHAR2(1 BYTE),
  MOVEMENT_NO_2       VARCHAR2(40 BYTE),
  CAMOV_SEAL_2        VARCHAR2(20 BYTE),
  HAWB_HAWBNO_2       NUMBER,
  LOCAL_LINE_NO       NUMBER,
  DAN                 VARCHAR2(20 BYTE),
  HB                  VARCHAR2(100 BYTE),
  RFTS                VARCHAR2(20 BYTE),
  LEGS_2              VARCHAR2(30 BYTE),
  LNGTH               NUMBER,
  WIDTH               NUMBER,
  HEIGHT              NUMBER,
  DIM_CALC_QTY        NUMBER(15),
  SMP_NO              VARCHAR2(100 BYTE),
  SMP_CHECK           VARCHAR2(1 BYTE),
  MODIFIED_BY         VARCHAR2(50 BYTE),
  CONNOTE             VARCHAR2(50 BYTE),
  DISPATCH_DATE       TIMESTAMP(6),
  ON_HOLD_START_DT    DATE,
  ON_HOLD_STARTED_BY  VARCHAR2(100 BYTE),
  ON_HOLD_END_DT      DATE,
  ON_HOLD_END_BY      VARCHAR2(100 BYTE)
)
TABLESPACE PICTION_MED_1
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          34176K
            NEXT             32K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           )
LOGGING 
NOCOMPRESS 
NOCACHE;

COMMENT ON COLUMN STRANG.DETAILRS.ITEMNO IS 'Item number';

COMMENT ON COLUMN STRANG.DETAILRS.LOGNO IS 'Log number';

COMMENT ON COLUMN STRANG.DETAILRS.HAWB_HAWBNO IS 'HAWB number';

COMMENT ON COLUMN STRANG.DETAILRS.CAMOV_SEAL IS 'Container seal';

COMMENT ON COLUMN STRANG.DETAILRS.DETAILDESC IS 'Item description';

COMMENT ON COLUMN STRANG.DETAILRS.HAZARD IS 'Item hazard details';

COMMENT ON COLUMN STRANG.DETAILRS.ECN IS 'Export clearance number';

COMMENT ON COLUMN STRANG.DETAILRS.SA IS 'Sea or Air freight';

COMMENT ON COLUMN STRANG.DETAILRS.CL IS 'Containerised or Loose';

COMMENT ON COLUMN STRANG.DETAILRS.PKTPE_PACKTYPE IS 'Package type';

COMMENT ON COLUMN STRANG.DETAILRS.OWNER IS 'Owner privileges';

COMMENT ON COLUMN STRANG.DETAILRS.PARTVOLUME IS 'Part volume details';

COMMENT ON COLUMN STRANG.DETAILRS.PARTWEIGHT IS 'Part weight details';

COMMENT ON COLUMN STRANG.DETAILRS.QTY IS 'Quantity';


CREATE UNIQUE INDEX STRANG.I_DETAILRS_3 ON STRANG.DETAILRS
(ITEMNO, DELIVERYNO)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          8448K
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

ALTER TABLE STRANG.DETAILRS ADD (
  CONSTRAINT AVCON_47379_CL_000
  CHECK (CL IN ('L', 'C'))
  ENABLE VALIDATE
,  CONSTRAINT AVCON_47379_ITEMN_000
  CHECK (ITEMNO BETWEEN 1 AND 999.99)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_47379_PARTV_000
  CHECK (PARTVOLUME BETWEEN 0 AND 9999.999)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_47379_PARTW_000
  CHECK (PARTWEIGHT BETWEEN 0 AND 9999999.9)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_47379_QTY_000
  CHECK (QTY BETWEEN 1 AND 99999)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_47379_SA_000
  CHECK (SA IN ('S', 'A'))
  ENABLE VALIDATE
,  CONSTRAINT AVCON_58039_CL_000
  CHECK (CL IN ('C', 'L'))
  ENABLE VALIDATE
,  CONSTRAINT AVCON_58039_ITEMN_000
  CHECK (ITEMNO BETWEEN 1 AND 999.99)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_58039_PARTV_000
  CHECK (PARTVOLUME BETWEEN 0 AND 9999.999)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_58039_PARTW_000
  CHECK (PARTWEIGHT BETWEEN 0 AND 9999999.9)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_58039_QTY_000
  CHECK (QTY BETWEEN 1 AND 99999)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_58039_SA_000
  CHECK (SA IN ('S', 'A'))
  ENABLE VALIDATE);


CREATE INDEX SYS.I_DELIVERY_7 ON STRANG.DETAILRS
(ENTRY_NO_COM)
LOGGING
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           );

CREATE INDEX STRANG.I_DETAILRS_1 ON STRANG.DETAILRS
(DELIVERYNO, LOGNO)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          11776K
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

CREATE INDEX STRANG.I_DETAILRS_2 ON STRANG.DETAILRS
(MOVEMENT_NO, PARTWEIGHT, PARTVOLUME)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          13M
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

CREATE INDEX STRANG.I_DETAILRS_4 ON STRANG.DETAILRS
(ENTRY_NO, PKTPE_PACKTYPE)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          14080K
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

CREATE INDEX STRANG.I_DETAILRS_5 ON STRANG.DETAILRS
(LOGNO, DELIVERYNO)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          11M
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

CREATE INDEX STRANG.I_DETAILRS_6 ON STRANG.DETAILRS
(MOVEMENT_NO, ENTRY_NO_COM, CAMOV_SEAL)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          512K
            NEXT             512K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

CREATE OR REPLACE TRIGGER STRANG.T_DETAILRS 
 after insert or update or delete
 ON STRANG.DETAILRS
 for each row
declare

 mod_type	varchar2(20);
 rid		rowid;
 pk1		varchar2(4000);
 pk2		varchar2(4000);

begin

 if nvl(global_site.disable_trigger,FALSE) then return; end if;
 if inserting
  then
   mod_type := 'I';
   rid := :NEW.ROWID;
   pk1 := :NEW.deliveryno;
   pk2 := :NEW.itemno;
 elsif updating
  then
   mod_type := 'U';
   rid := :OLD.ROWID;
   pk1 := :NEW.deliveryno;
   pk2 := :NEW.itemno;
 else
   if global_site.get_name is null then global_site.set_name; end if;
   mod_type := 'D';
   rid := :OLD.ROWID;
   pk1 := :OLD.deliveryno;
   pk2 := :OLD.itemno;
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','SITE_OWNER',rid,sysdate,mod_type,:OLD.SITE_OWNER,:NEW.SITE_OWNER,pk1,pk2);
   return;
 end if;

 if global_site.get_name is null then global_site.set_name; end if;

 if not((:OLD.DELIVERYNO = :NEW.DELIVERYNO) and (:OLD.DELIVERYNO is not null and :NEW.DELIVERYNO is not null)) and not (:OLD.DELIVERYNO is null and :NEW.DELIVERYNO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','DELIVERYNO',rid,sysdate,mod_type,:OLD.DELIVERYNO,:NEW.DELIVERYNO,:OLD.DELIVERYNO,:OLD.itemno);
 end if;

 if not((:OLD.itemno = :NEW.itemno) and (:OLD.itemno is not null and :NEW.itemno is not null)) and not (:OLD.itemno is null and :NEW.itemno is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','ITEMNO',rid,sysdate,mod_type,:OLD.itemno,:NEW.itemno,:OLD.DELIVERYNO,:OLD.itemno);
 end if;

 if not((:OLD.logno = :NEW.logno) and (:OLD.logno is not null and :NEW.logno is not null)) and not (:OLD.logno is null and :NEW.logno is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','LOGNO',rid,sysdate,mod_type,:OLD.logno,:NEW.logno,pk1,pk2);
 end if;

 if not((:OLD.HAWB_HAWBNO = :NEW.HAWB_HAWBNO) and (:OLD.HAWB_HAWBNO is not null and :NEW.HAWB_HAWBNO is not null)) and not (:OLD.HAWB_HAWBNO is null and :NEW.HAWB_HAWBNO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','HAWB_HAWBNO',rid,sysdate,mod_type,:OLD.HAWB_HAWBNO,:NEW.HAWB_HAWBNO,pk1,pk2);
 end if;

 if not((:OLD.CAMOV_SEAL = :NEW.CAMOV_SEAL) and (:OLD.CAMOV_SEAL is not null and :NEW.CAMOV_SEAL is not null)) and not (:OLD.CAMOV_SEAL is null and :NEW.CAMOV_SEAL is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','CAMOV_SEAL',rid,sysdate,mod_type,:OLD.CAMOV_SEAL,:NEW.CAMOV_SEAL,pk1,pk2);
 end if;

 if not((:OLD.DETAILDESC = :NEW.DETAILDESC) and (:OLD.DETAILDESC is not null and :NEW.DETAILDESC is not null)) and not (:OLD.DETAILDESC is null and :NEW.DETAILDESC is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','DETAILDESC',rid,sysdate,mod_type,:OLD.DETAILDESC,:NEW.DETAILDESC,pk1,pk2);
 end if;

 if not((:OLD.HAZARD = :NEW.HAZARD) and (:OLD.HAZARD is not null and :NEW.HAZARD is not null)) and not (:OLD.HAZARD is null and :NEW.HAZARD is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','HAZARD',rid,sysdate,mod_type,:OLD.HAZARD,:NEW.HAZARD,pk1,pk2);
 end if;

 if not((:OLD.ECN = :NEW.ECN) and (:OLD.ECN is not null and :NEW.ECN is not null)) and not (:OLD.ECN is null and :NEW.ECN is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','ECN',rid,sysdate,mod_type,:OLD.ECN,:NEW.ECN,pk1,pk2);
 end if;

 if not((:OLD.SA = :NEW.SA) and (:OLD.SA is not null and :NEW.SA is not null)) and not (:OLD.SA is null and :NEW.SA is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','SA',rid,sysdate,mod_type,:OLD.SA,:NEW.SA,pk1,pk2);
 end if;

 if not((:OLD.CL = :NEW.CL) and (:OLD.CL is not null and :NEW.CL is not null)) and not (:OLD.CL is null and :NEW.CL is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','CL',rid,sysdate,mod_type,:OLD.CL,:NEW.CL,pk1,pk2);
 end if;

 if not((:OLD.PKTPE_PACKTYPE = :NEW.PKTPE_PACKTYPE) and (:OLD.PKTPE_PACKTYPE is not null and :NEW.PKTPE_PACKTYPE is not null)) and not (:OLD.PKTPE_PACKTYPE is null and :NEW.PKTPE_PACKTYPE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','PKTPE_PACKTYPE',rid,sysdate,mod_type,:OLD.PKTPE_PACKTYPE,:NEW.PKTPE_PACKTYPE,pk1,pk2);
 end if;

 if not((:OLD.OWNER = :NEW.OWNER) and (:OLD.OWNER is not null and :NEW.OWNER is not null)) and not (:OLD.OWNER is null and :NEW.OWNER is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','OWNER',rid,sysdate,mod_type,:OLD.OWNER,:NEW.OWNER,pk1,pk2);
 end if;

 if not((:OLD.PARTVOLUME = :NEW.PARTVOLUME) and (:OLD.PARTVOLUME is not null and :NEW.PARTVOLUME is not null)) and not (:OLD.PARTVOLUME is null and :NEW.PARTVOLUME is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','PARTVOLUME',rid,sysdate,mod_type,:OLD.PARTVOLUME,:NEW.PARTVOLUME,pk1,pk2);
 end if;

 if not((:OLD.PARTWEIGHT = :NEW.PARTWEIGHT) and (:OLD.PARTWEIGHT is not null and :NEW.PARTWEIGHT is not null)) and not (:OLD.PARTWEIGHT is null and :NEW.PARTWEIGHT is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','PARTWEIGHT',rid,sysdate,mod_type,:OLD.PARTWEIGHT,:NEW.PARTWEIGHT,pk1,pk2);
 end if;

 if not((:OLD.QTY = :NEW.QTY) and (:OLD.QTY is not null and :NEW.QTY is not null)) and not (:OLD.QTY is null and :NEW.QTY is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','QTY',rid,sysdate,mod_type,:OLD.QTY,:NEW.QTY,pk1,pk2);
 end if;

 if not((:OLD.MOVEMENT_NO = :NEW.MOVEMENT_NO) and (:OLD.MOVEMENT_NO is not null and :NEW.MOVEMENT_NO is not null)) and not (:OLD.MOVEMENT_NO is null and :NEW.MOVEMENT_NO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','MOVEMENT_NO',rid,sysdate,mod_type,:OLD.MOVEMENT_NO,:NEW.MOVEMENT_NO,pk1,pk2);
 end if;

 if not((:OLD.ENTRY_NO = :NEW.ENTRY_NO) and (:OLD.ENTRY_NO is not null and :NEW.ENTRY_NO is not null)) and not (:OLD.ENTRY_NO is null and :NEW.ENTRY_NO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','ENTRY_NO',rid,sysdate,mod_type,:OLD.ENTRY_NO,:NEW.ENTRY_NO,pk1,pk2);
 end if;

 if not((:OLD.LINE_NO = :NEW.LINE_NO) and (:OLD.LINE_NO is not null and :NEW.LINE_NO is not null)) and not (:OLD.LINE_NO is null and :NEW.LINE_NO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','LINE_NO',rid,sysdate,mod_type,:OLD.LINE_NO,:NEW.LINE_NO,pk1,pk2);
 end if;

 if not((:OLD.SITE_OWNER = :NEW.SITE_OWNER) and (:OLD.SITE_OWNER is not null and :NEW.SITE_OWNER is not null)) and not (:OLD.SITE_OWNER is null and :NEW.SITE_OWNER is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'DETAILRS','SITE_OWNER',rid,sysdate,mod_type,:OLD.SITE_OWNER,:NEW.SITE_OWNER,pk1,pk2);
 end if;

end t_detailrs;
/


CREATE OR REPLACE TRIGGER STRANG.T_DETAILRS_B 
 before insert or update
 ON STRANG.DETAILRS
 for each row
DISABLE
declare

begin

 if nvl(global_site.disable_trigger,FALSE) then return; end if;
 if global_site.disable_trigger is NULL or :NEW.date_modified is NULL
  then
   :NEW.date_modified := sysdate;
 end if;
 if global_site.get_name is null then global_site.set_name; end if;
 if :NEW.site_owner is not null then return; end if;
 if inserting
  then
   :NEW.site_owner := global_site.site_name;
 elsif updating
  then
   :NEW.site_owner := global_site.site_name;
 end if;

end t_detailrs_b;
/


ALTER TABLE STRANG.DETAILRS ADD (
  CONSTRAINT F_DETAILRS 
  FOREIGN KEY (DELIVERYNO) 
  REFERENCES STRANG.RECEIVALS (DELIVERYNO)
  ENABLE VALIDATE);

GRANT DELETE, INSERT, SELECT, UPDATE ON STRANG.DETAILRS TO STX1;

GRANT ALTER, DELETE, INDEX, INSERT, REFERENCES, SELECT, UPDATE, ON COMMIT REFRESH, QUERY REWRITE, DEBUG, FLASHBACK ON STRANG.DETAILRS TO WEBSYS;
