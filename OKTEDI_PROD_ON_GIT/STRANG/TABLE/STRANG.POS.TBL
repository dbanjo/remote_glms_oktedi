DROP TABLE STRANG.POS CASCADE CONSTRAINTS;

CREATE TABLE STRANG.POS
(
  RECNO                     NUMBER(3)           NOT NULL,
  INVENTORYNO               VARCHAR2(12 BYTE),
  PO                        VARCHAR2(15 BYTE)   NOT NULL,
  SUPINV                    VARCHAR2(15 BYTE),
  AMOUNT                    NUMBER(15,2),
  QTY                       NUMBER(15,3),
  UNIT_UNITUSED             VARCHAR2(8 BYTE),
  CTRY_COUNTRYCODE          VARCHAR2(3 BYTE)    DEFAULT 'AUS'                 NOT NULL,
  GSTC_GSTCODE              VARCHAR2(4 BYTE),
  GST                       NUMBER(15,2),
  TAMOUNT                   NUMBER(15,2),
  DELIVERYNO                NUMBER,
  PRIMARY_ROWID             ROWID,
  SITE_OWNER                VARCHAR2(100 BYTE),
  DATE_MODIFIED             DATE,
  PO_ITEM_NO                NUMBER(5),
  PO_WAREHOUSE              VARCHAR2(20 BYTE),
  PO_WAYBILL_TYPE           VARCHAR2(4 BYTE),
  OFF_SITE_RECEIPT          DATE,
  EXCISE_QTY                NUMBER,
  EXCISE_UNIT               VARCHAR2(11 BYTE),
  SAP_DELNO                 NUMBER(8),
  SAP_DELNO_ITEM            NUMBER(15),
  GRN                       NUMBER(10),
  ENTRY_ITEM                NUMBER(38),
  DELIVERY_CHARGE           NUMBER(15,2),
  SAP_DELNO_QTY             NUMBER(15,3),
  ORIGINAL_TAMOUNT          NUMBER(15,2),
  ORIGINAL_DELIVERY_CHARGE  NUMBER(15,2),
  STATE                     VARCHAR2(20 BYTE),
  AHECC                     VARCHAR2(20 BYTE),
  PO_POOL_LOOKUP            VARCHAR2(1 BYTE),
  GRN_ITEM                  NUMBER(15),
  CRITICAL_FLAG             VARCHAR2(1 BYTE),
  MANUAL_GRN                VARCHAR2(1 BYTE),
  SAP_DELNO_UNIT            VARCHAR2(8 BYTE),
  GRN_STATUS                NUMBER(15),
  SHIPPING_TEXT             VARCHAR2(30 BYTE),
  SAP_DELNO_OPEN_QTY        NUMBER(15,3),
  SAP_DELNO_ORIGINAL_QTY    NUMBER(15,3),
  FREIGHT_MODE              VARCHAR2(30 BYTE),
  IO                        VARCHAR2(1 BYTE),
  PREQ_ITEM                 VARCHAR2(1000 BYTE),
  PREQ_NAME                 VARCHAR2(1000 BYTE),
  PREQ_NO                   VARCHAR2(1000 BYTE),
  TARIFF_GROUP              VARCHAR2(100 BYTE),
  TARIFF_CATEGORY           VARCHAR2(100 BYTE),
  WAREHOUSE_PLANT           VARCHAR2(100 BYTE)
)
TABLESPACE PICTION_MED_1
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          39616K
            NEXT             32K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           )
LOGGING 
NOCOMPRESS 
NOCACHE;

COMMENT ON COLUMN STRANG.POS.RECNO IS 'Record number';

COMMENT ON COLUMN STRANG.POS.INVENTORYNO IS 'Inventory number';

COMMENT ON COLUMN STRANG.POS.PO IS 'Purchase Order number';

COMMENT ON COLUMN STRANG.POS.SUPINV IS 'Supplier Invoice';

COMMENT ON COLUMN STRANG.POS.AMOUNT IS 'Amount';

COMMENT ON COLUMN STRANG.POS.QTY IS 'Number';

COMMENT ON COLUMN STRANG.POS.UNIT_UNITUSED IS 'Unit code';

COMMENT ON COLUMN STRANG.POS.CTRY_COUNTRYCODE IS 'Country code';

COMMENT ON COLUMN STRANG.POS.GSTC_GSTCODE IS 'GST Code';

COMMENT ON COLUMN STRANG.POS.GST IS 'GST';


CREATE UNIQUE INDEX STRANG.P_POS ON STRANG.POS
(DELIVERYNO, RECNO)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          14592K
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

ALTER TABLE STRANG.POS ADD (
  CONSTRAINT AVCON_47385_AMOUN_000
  CHECK (AMOUNT BETWEEN 0 AND 9999999.99)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_47385_GST_000
  CHECK (GST BETWEEN 0 AND 9999999.99)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_47385_QTY_000
  CHECK (QTY BETWEEN 1 AND 999999.9)
  DISABLE NOVALIDATE
,  CONSTRAINT AVCON_58045_AMOUN_000
  CHECK (AMOUNT BETWEEN 0 AND 9999999.99)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_58045_GST_000
  CHECK (GST BETWEEN 0 AND 9999999.99)
  ENABLE VALIDATE
,  CONSTRAINT AVCON_58045_QTY_000
  CHECK (qty between 0 and 99999999.9)
  ENABLE VALIDATE
,  CONSTRAINT P_POS
  PRIMARY KEY
  (DELIVERYNO, RECNO)
  USING INDEX STRANG.P_POS
  ENABLE VALIDATE);


CREATE INDEX STRANG.I_POS_3 ON STRANG.POS
(DELIVERYNO, TAMOUNT)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          16M
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

CREATE INDEX STRANG.I_POS_4 ON STRANG.POS
(INVENTORYNO, DELIVERYNO)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          18M
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

CREATE OR REPLACE TRIGGER STRANG.T_POS 
 after insert or update or delete
 ON STRANG.POS
 for each row
DISABLE
declare

 mod_type	varchar2(20);
 rid		rowid;
 pk1		varchar2(4000);
 pk2		varchar2(4000);

begin

 if nvl(global_site.disable_trigger,FALSE) then return; end if;
 if inserting
  then
   mod_type := 'I';
   rid := :NEW.ROWID;
   pk1 := :NEW.deliveryno;
   pk2 := :NEW.recno;
 elsif updating
  then
   mod_type := 'U';
   rid := :OLD.ROWID;
   pk1 := :NEW.deliveryno;
   pk2 := :NEW.recno;
 else
   if global_site.get_name is null then global_site.set_name; end if;
   mod_type := 'D';
   rid := :OLD.ROWID;
   pk1 := :OLD.deliveryno;
   pk2 := :OLD.recno;
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','SITE_OWNER',rid,sysdate,mod_type,:OLD.SITE_OWNER,:NEW.SITE_OWNER,pk1,pk2);
   return;
 end if;

 if global_site.get_name is null then global_site.set_name; end if;
 if not((:OLD.DELIVERYNO = :NEW.DELIVERYNO) and (:OLD.DELIVERYNO is not null and :NEW.DELIVERYNO is not null)) and not (:OLD.DELIVERYNO is null and :NEW.DELIVERYNO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','DELIVERYNO',rid,sysdate,mod_type,:OLD.DELIVERYNO,:NEW.DELIVERYNO,:OLD.DELIVERYNO,:OLD.RECNO);
 end if;

 if not((:OLD.RECNO = :NEW.RECNO) and (:OLD.RECNO is not null and :NEW.RECNO is not null)) and not (:OLD.RECNO is null and :NEW.RECNO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','RECNO',rid,sysdate,mod_type,:OLD.RECNO,:NEW.RECNO,:OLD.DELIVERYNO,:OLD.RECNO);
 end if;

 if not((:OLD.INVENTORYNO = :NEW.INVENTORYNO) and (:OLD.INVENTORYNO is not null and :NEW.INVENTORYNO is not null)) and not (:OLD.INVENTORYNO is null and :NEW.INVENTORYNO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','INVENTORYNO',rid,sysdate,mod_type,:OLD.INVENTORYNO,:NEW.INVENTORYNO,pk1,pk2);
 end if;

 if not((:OLD.PO = :NEW.PO) and (:OLD.PO is not null and :NEW.PO is not null)) and not (:OLD.PO is null and :NEW.PO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','PO',rid,sysdate,mod_type,:OLD.PO,:NEW.PO,pk1,pk2);
 end if;

 if not((:OLD.SUPINV = :NEW.SUPINV) and (:OLD.SUPINV is not null and :NEW.SUPINV is not null)) and not (:OLD.SUPINV is null and :NEW.SUPINV is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','SUPINV',rid,sysdate,mod_type,:OLD.SUPINV,:NEW.SUPINV,pk1,pk2);
 end if;

 if not((:OLD.AMOUNT = :NEW.AMOUNT) and (:OLD.AMOUNT is not null and :NEW.AMOUNT is not null)) and not (:OLD.AMOUNT is null and :NEW.AMOUNT is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','AMOUNT',rid,sysdate,mod_type,:OLD.AMOUNT,:NEW.AMOUNT,pk1,pk2);
 end if;

 if not((:OLD.QTY = :NEW.QTY) and (:OLD.QTY is not null and :NEW.QTY is not null)) and not (:OLD.QTY is null and :NEW.QTY is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','QTY',rid,sysdate,mod_type,:OLD.QTY,:NEW.QTY,pk1,pk2);
 end if;

 if not((:OLD.UNIT_UNITUSED = :NEW.UNIT_UNITUSED) and (:OLD.UNIT_UNITUSED is not null and :NEW.UNIT_UNITUSED is not null)) and not (:OLD.UNIT_UNITUSED is null and :NEW.UNIT_UNITUSED is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','UNIT_UNITUSED',rid,sysdate,mod_type,:OLD.UNIT_UNITUSED,:NEW.UNIT_UNITUSED,pk1,pk2);
 end if;

 if not((:OLD.CTRY_COUNTRYCODE = :NEW.CTRY_COUNTRYCODE) and (:OLD.CTRY_COUNTRYCODE is not null and :NEW.CTRY_COUNTRYCODE is not null)) and not (:OLD.CTRY_COUNTRYCODE is null and :NEW.CTRY_COUNTRYCODE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','CTRY_COUNTRYCODE',rid,sysdate,mod_type,:OLD.CTRY_COUNTRYCODE,:NEW.CTRY_COUNTRYCODE,pk1,pk2);
 end if;

 if not((:OLD.GSTC_GSTCODE = :NEW.GSTC_GSTCODE) and (:OLD.GSTC_GSTCODE is not null and :NEW.GSTC_GSTCODE is not null)) and not (:OLD.GSTC_GSTCODE is null and :NEW.GSTC_GSTCODE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','GSTC_GSTCODE',rid,sysdate,mod_type,:OLD.GSTC_GSTCODE,:NEW.GSTC_GSTCODE,pk1,pk2);
 end if;

 if not((:OLD.GST = :NEW.GST) and (:OLD.GST is not null and :NEW.GST is not null)) and not (:OLD.GST is null and :NEW.GST is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','GST',rid,sysdate,mod_type,:OLD.GST,:NEW.GST,pk1,pk2);
 end if;

 if not((:OLD.TAMOUNT = :NEW.TAMOUNT) and (:OLD.TAMOUNT is not null and :NEW.TAMOUNT is not null)) and not (:OLD.TAMOUNT is null and :NEW.TAMOUNT is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','TAMOUNT',rid,sysdate,mod_type,:OLD.TAMOUNT,:NEW.TAMOUNT,pk1,pk2);
 end if;

 if not((:OLD.SITE_OWNER = :NEW.SITE_OWNER) and (:OLD.SITE_OWNER is not null and :NEW.SITE_OWNER is not null)) and not (:OLD.SITE_OWNER is null and :NEW.SITE_OWNER is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'POS','SITE_OWNER',rid,sysdate,mod_type,:OLD.SITE_OWNER,:NEW.SITE_OWNER,pk1,pk2);
 end if;


end t_pos;
/


CREATE OR REPLACE TRIGGER STRANG.T_POS_B 
 before insert or update
 ON STRANG.POS
 for each row
DISABLE
declare

begin

 if nvl(global_site.disable_trigger,FALSE) then return; end if;
 if global_site.disable_trigger is NULL or :NEW.date_modified is NULL
  then
   :NEW.date_modified := sysdate;
 end if;
 if global_site.get_name is null then global_site.set_name; end if;
 if :NEW.site_owner is not null then return; end if;
 if inserting
  then
   :NEW.site_owner := global_site.site_name;
 elsif updating
  then
   :NEW.site_owner := global_site.site_name;
 end if;

end t_pos_b;
/


ALTER TABLE STRANG.POS ADD (
  CONSTRAINT F_POS 
  FOREIGN KEY (DELIVERYNO) 
  REFERENCES STRANG.RECEIVALS (DELIVERYNO)
  ENABLE VALIDATE);

GRANT DELETE, INSERT, SELECT, UPDATE ON STRANG.POS TO STX1;

GRANT ALTER, DELETE, INDEX, INSERT, REFERENCES, SELECT, UPDATE, ON COMMIT REFRESH, QUERY REWRITE, DEBUG, FLASHBACK ON STRANG.POS TO WEBSYS;
