DROP TABLE STRANG.MOVEMENTS CASCADE CONSTRAINTS;

CREATE TABLE STRANG.MOVEMENTS
(
  INVOICENO                      VARCHAR2(10 BYTE),
  MOVEMENT_NO                    VARCHAR2(40 BYTE) NOT NULL,
  BOL                            VARCHAR2(80 BYTE),
  MOVEMENT_TYPE                  VARCHAR2(20 BYTE) NOT NULL,
  SEAL                           VARCHAR2(20 BYTE),
  CONTAINER_TYPE                 VARCHAR2(20 BYTE),
  MOVE_DESCRIPTION               VARCHAR2(100 BYTE),
  COMPLETE                       CHAR(1 BYTE),
  DEPARTURE                      VARCHAR2(100 BYTE),
  ARRIVAL                        VARCHAR2(100 BYTE),
  DISPATCH_DATE                  DATE,
  SUMVOLUME                      NUMBER,
  SUMWEIGHT                      NUMBER,
  REVTON                         NUMBER,
  TARE                           NUMBER,
  CHARGEWEIGHT                   NUMBER,
  SHIP_ID                        NUMBER(16),
  MANIFEST_CREATED               VARCHAR2(100 BYTE),
  CONTROLLING_OFFICE             VARCHAR2(100 BYTE),
  PRIMARY_ROWID                  ROWID,
  CARRIER                        VARCHAR2(15 BYTE),
  FLIGHT                         VARCHAR2(15 BYTE),
  CHARGECODE                     VARCHAR2(10 BYTE),
  SITE_OWNER                     VARCHAR2(100 BYTE),
  DATE_MODIFIED                  DATE           DEFAULT sysdate,
  SUMPIECES                      NUMBER,
  ISO_CONTAINER_TYPE             VARCHAR2(20 BYTE),
  BOOKING_REF                    VARCHAR2(20 BYTE),
  PHYSICAL_PACK                  VARCHAR2(30 BYTE),
  COMPUTER_PACK                  VARCHAR2(30 BYTE),
  VGM                            INTEGER,
  FULL_MT                        VARCHAR2(10 BYTE),
  DEL_DATE                       DATE,
  DEL_TRANSPORT_COMPANY          VARCHAR2(100 BYTE),
  DEL_TRUCK_REGO                 VARCHAR2(10 BYTE),
  HB                             VARCHAR2(100 BYTE),
  CONTAINER_PARK                 VARCHAR2(100 BYTE),
  CUSTOMS_AUTH_NO                VARCHAR2(100 BYTE),
  SNAIL_INSPECT                  DATE,
  WHARF_COLLECT                  DATE,
  AQIS_DEPOT                     VARCHAR2(50 BYTE),
  AQIS_CLEARANCE                 DATE,
  OFFHIRED_DATE                  DATE,
  CMT                            VARCHAR2(4000 BYTE),
  OWNER                          VARCHAR2(20 BYTE),
  CONSIGNEE                      VARCHAR2(50 BYTE),
  CONSIGNEE_LOCATION             VARCHAR2(50 BYTE),
  DOCKET_NO                      VARCHAR2(50 BYTE),
  SPLIT                          CHAR(1 BYTE),
  LOCAL_SHIP_ID                  NUMBER(16),
  LOCAL_BOL                      VARCHAR2(80 BYTE),
  CONVOY_ID                      NUMBER(16),
  TRUCK_ID                       VARCHAR2(20 BYTE),
  IO                             VARCHAR2(1 BYTE),
  STATUS                         VARCHAR2(100 BYTE),
  URGENCY                        VARCHAR2(100 BYTE),
  REMARK                         VARCHAR2(100 BYTE),
  REMARK_DETAIL                  VARCHAR2(100 BYTE),
  CURRENT_LOCATION               VARCHAR2(100 BYTE),
  WAREHOUSE_DESTINATION          VARCHAR2(20 BYTE),
  TABUBIL_YARD_DATE              DATE,
  KIUNGA_WHARF_DATE              DATE,
  OTML_YARD_DATE                 DATE,
  BERTH4_DATE                    DATE,
  INTERNATIONAL_WHARF_DATE       DATE,
  BIGE_DATE                      DATE,
  BRISBANE_DATE                  DATE,
  OTHER_LOCATION_DATE            DATE,
  SET_POINT                      VARCHAR2(20 BYTE),
  LOCAL_SHIP_DISCHARGE_DATE      DATE,
  INT_SHIP_DISCHARGE_DATE        DATE,
  CONVOY_DELIVERY_LOCATION       VARCHAR2(50 BYTE),
  OVERDIMENSIONAL                VARCHAR2(80 BYTE),
  CONVOY_DELIVERY_PICKUP         VARCHAR2(50 BYTE),
  CUSTOMS_CLEARED_DATE           DATE,
  TRANSPORT_MODE                 VARCHAR2(50 BYTE),
  SI                             VARCHAR2(20 BYTE),
  PTL                            VARCHAR2(20 BYTE),
  RELEASE_DATE                   DATE,
  RELEASE_DOCKET                 VARCHAR2(20 BYTE),
  IDD                            VARCHAR2(20 BYTE),
  WDN                            VARCHAR2(20 BYTE),
  INTERFACE4_DATE                DATE,
  RFTS                           VARCHAR2(20 BYTE),
  DAN                            VARCHAR2(20 BYTE),
  INTL_REQ                       VARCHAR2(1 BYTE),
  LOCAL_REQ                      VARCHAR2(1 BYTE),
  CONVOY_REQ                     VARCHAR2(1 BYTE),
  BERTH4_TRANSFER_DATE           DATE,
  INTL_WHARF_TRANSFER_DATE       DATE,
  KIUNGA_WHARF_TRANSFER_DATE     DATE,
  CONTAINER_VOLUME               NUMBER(9,3),
  REMARK_DATE                    DATE,
  SI_DATE                        DATE,
  PTL_DATE                       DATE,
  IDD_DATE                       DATE,
  ARRIVAL_DATE                   DATE,
  CONNOTE_NUMBER                 VARCHAR2(50 BYTE),
  LOCAL_HB                       VARCHAR2(100 BYTE),
  MARKS_NUMBERS                  VARCHAR2(100 BYTE),
  MT_LINE_NO                     INTEGER,
  MT_LOCAL_LINE_NO               INTEGER,
  SECONDARY_TRANSPORT            VARCHAR2(100 BYTE),
  SCAN_KEY                       NUMBER(20),
  PACKED_DATE                    DATE,
  PACKED_BY                      VARCHAR2(20 BYTE),
  MODIFIED_BY                    VARCHAR2(20 BYTE),
  PACK_CHECKED_BY                VARCHAR2(20 BYTE),
  PACK_CHECK_DATE                DATE,
  FLATRACK_ENDS                  VARCHAR2(20 BYTE) DEFAULT null,
  PHOTO_BY                       VARCHAR2(20 BYTE),
  PIN_ENGAGED                    VARCHAR2(1 BYTE),
  TIMBER_TRIMMED                 VARCHAR2(1 BYTE),
  LOOSE_ITEMS_CHECKED            VARCHAR2(1 BYTE),
  OUT_WIDTH_LEFT_SIDE            NUMBER(10),
  OUT_WIDTH_RIGHT_SIDE           NUMBER(10),
  OUT_WIDTH_FRONT_END            NUMBER(10),
  OUT_WIDTH_REAR_END             NUMBER(10),
  OUT_HEIGHT                     NUMBER(10),
  SELECTALL_LOCAL                VARCHAR2(1 BYTE),
  MAWB_LINK                      VARCHAR2(60 BYTE),
  OLD_COMPLETE                   VARCHAR2(1 BYTE),
  ATTACHED_PHOTO                 INTEGER,
  UNPACK_EXCEPTIONS_FLAG         VARCHAR2(1 BYTE),
  UNPACK_EXCEPTIONS_APPROVED_BY  VARCHAR2(100 BYTE),
  UNPACK_COMPLETED_BY            VARCHAR2(100 BYTE),
  UNPACK_COMPLETED_DATE          DATE,
  UNPACK_EXCEPTIONS_APPROVED_DT  DATE,
  DATE_CREATED                   DATE
)
TABLESPACE PICTION_MED_1
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          4992K
            NEXT             32K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX STRANG.I_MOVEMENTS_3 ON STRANG.MOVEMENTS
(MOVEMENT_NO, SEAL, MOVEMENT_TYPE)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          2304K
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );
CREATE UNIQUE INDEX WEBSYS.I_MOVEMENTS_5 ON STRANG.MOVEMENTS
(SCAN_KEY)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          512K
            NEXT             512K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
CREATE UNIQUE INDEX WEBSYS.PK_INDEX ON STRANG.MOVEMENTS
(MOVEMENT_NO, SEAL)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          512K
            NEXT             512K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE STRANG.MOVEMENTS ADD (
  CONSTRAINT CFLATRACK_ENDS_CK
  CHECK ( flatrack_ends in ('UP', 'DOWN'))
  ENABLE VALIDATE
,  CONSTRAINT LOOSE_ITEMS_CHECKED_CK
  CHECK ( loose_items_checked in ('Y', 'N'))
  ENABLE VALIDATE
,  CONSTRAINT PINS_ENGAGED_CK
  CHECK ( pin_engaged in ('Y', 'N'))
  ENABLE VALIDATE
,  CONSTRAINT TIMBER_TRIMMED_CK
  CHECK ( timber_trimmed in ('Y', 'N'))
  ENABLE VALIDATE);


CREATE INDEX STRANG.I_MOVEMENTS_1 ON STRANG.MOVEMENTS
(INVOICENO, MOVEMENT_NO, MOVEMENT_TYPE)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

CREATE INDEX STRANG.I_MOVEMENTS_2 ON STRANG.MOVEMENTS
(MOVEMENT_NO, SHIP_ID)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          1792K
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

CREATE INDEX STRANG.I_MOVEMENTS_4 ON STRANG.MOVEMENTS
(SHIP_ID, MOVEMENT_NO, SEAL)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          2560K
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

CREATE INDEX WEBSYS.MAWB_LINK ON STRANG.MOVEMENTS
(MAWB_LINK, MOVEMENT_TYPE)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          512K
            NEXT             512K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER STRANG.C_MOVEMENTS 
 after update
 on strang.movements
 for each row
declare

 mod_type	varchar2(20);
 rid		rowid;
 pk1		varchar2(4000);
 pk2		varchar2(4000);

begin

 if nvl(global_site.disable_trigger,FALSE) then return; end if;
 if updating
  then
   mod_type := 'U';
   rid := :OLD.ROWID;
   pk1 := :NEW.movement_no;
   pk2 := :NEW.seal;
 end if;

 if global_site.get_name is null then global_site.set_name; end if;
 if not((:OLD.CURRENT_LOCATION = :NEW.CURRENT_LOCATION) and (:OLD.CURRENT_LOCATION is not null and :NEW.CURRENT_LOCATION is not null)) and not (:OLD.CURRENT_LOCATION is null and :NEW.CURRENT_LOCATION is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','CURRENT_LOCATION',rid,sysdate,mod_type,:OLD.CURRENT_LOCATION,:NEW.CURRENT_LOCATION,pk1,pk2);
 end if;

 if not((:OLD.URGENCY = :NEW.URGENCY) and (:OLD.URGENCY is not null and :NEW.URGENCY is not null)) and not (:OLD.URGENCY is null and :NEW.URGENCY is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','URGENCY',rid,sysdate,mod_type,:OLD.URGENCY,:NEW.URGENCY,pk1,pk2);
 end if;

end t_movements;
/


CREATE OR REPLACE TRIGGER STRANG.T_MOVEMENTS 
 after insert or update or delete
 ON STRANG.MOVEMENTS
 for each row
DISABLE
declare

 mod_type	varchar2(20);
 rid		rowid;
 pk1		varchar2(4000);
 pk2		varchar2(4000);

begin

 if nvl(global_site.disable_trigger,FALSE) then return; end if;
 if inserting
  then
   mod_type := 'I';
   rid := :NEW.ROWID;
   pk1 := :NEW.movement_no;
   pk2 := :NEW.seal;
 elsif updating
  then
   mod_type := 'U';
   rid := :OLD.ROWID;
   pk1 := :NEW.movement_no;
   pk2 := :NEW.seal;
 else
   if global_site.get_name is null then global_site.set_name; end if;
   mod_type := 'D';
   rid := :OLD.ROWID;
   pk1 := :OLD.movement_no;
   pk2 := :OLD.seal;
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','SITE_OWNER',rid,sysdate,mod_type,:OLD.SITE_OWNER,:NEW.SITE_OWNER,pk1,pk2);
  return;
 end if;

 if global_site.get_name is null then global_site.set_name; end if;
 if not((:OLD.INVOICENO = :NEW.INVOICENO) and (:OLD.INVOICENO is not null and :NEW.INVOICENO is not null)) and not (:OLD.INVOICENO is null and :NEW.INVOICENO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','INVOICENO',rid,sysdate,mod_type,:OLD.INVOICENO,:NEW.INVOICENO,pk1,pk2);
 end if;

 if not((:OLD.MOVEMENT_NO = :NEW.MOVEMENT_NO) and (:OLD.MOVEMENT_NO is not null and :NEW.MOVEMENT_NO is not null)) and not (:OLD.MOVEMENT_NO is null and :NEW.MOVEMENT_NO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','MOVEMENT_NO',rid,sysdate,mod_type,:OLD.MOVEMENT_NO,:NEW.MOVEMENT_NO,:OLD.MOVEMENT_NO,:OLD.SEAL);
 end if;

 if not((:OLD.SEAL = :NEW.SEAL) and (:OLD.SEAL is not null and :NEW.SEAL is not null)) and not (:OLD.SEAL is null and :NEW.SEAL is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','SEAL',rid,sysdate,mod_type,:OLD.SEAL,:NEW.SEAL,:OLD.MOVEMENT_NO,:OLD.SEAL);
 end if;

 if not((:OLD.BOL = :NEW.BOL) and (:OLD.BOL is not null and :NEW.BOL is not null)) and not (:OLD.BOL is null and :NEW.BOL is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','BOL',rid,sysdate,mod_type,:OLD.BOL,:NEW.BOL,pk1,pk2);
 end if;

 if not((:OLD.MOVEMENT_TYPE = :NEW.MOVEMENT_TYPE) and (:OLD.MOVEMENT_TYPE is not null and :NEW.MOVEMENT_TYPE is not null)) and not (:OLD.MOVEMENT_TYPE is null and :NEW.MOVEMENT_TYPE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','MOVEMENT_TYPE',rid,sysdate,mod_type,:OLD.MOVEMENT_TYPE,:NEW.MOVEMENT_TYPE,pk1,pk2);
 end if;

 if not((:OLD.CONTAINER_TYPE = :NEW.CONTAINER_TYPE) and (:OLD.CONTAINER_TYPE is not null and :NEW.CONTAINER_TYPE is not null)) and not (:OLD.CONTAINER_TYPE is null and :NEW.CONTAINER_TYPE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','CONTAINER_TYPE',rid,sysdate,mod_type,:OLD.CONTAINER_TYPE,:NEW.CONTAINER_TYPE,pk1,pk2);
 end if;

 if not((:OLD.MOVE_DESCRIPTION = :NEW.MOVE_DESCRIPTION) and (:OLD.MOVE_DESCRIPTION is not null and :NEW.MOVE_DESCRIPTION is not null)) and not (:OLD.MOVE_DESCRIPTION is null and :NEW.MOVE_DESCRIPTION is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','MOVE_DESCRIPTION',rid,sysdate,mod_type,:OLD.MOVE_DESCRIPTION,:NEW.MOVE_DESCRIPTION,pk1,pk2);
 end if;

 if not((:OLD.COMPLETE = :NEW.COMPLETE) and (:OLD.COMPLETE is not null and :NEW.COMPLETE is not null)) and not (:OLD.COMPLETE is null and :NEW.COMPLETE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','COMPLETE',rid,sysdate,mod_type,:OLD.COMPLETE,:NEW.COMPLETE,pk1,pk2);
 end if;

 if not((:OLD.DEPARTURE = :NEW.DEPARTURE) and (:OLD.DEPARTURE is not null and :NEW.DEPARTURE is not null)) and not (:OLD.DEPARTURE is null and :NEW.DEPARTURE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','DEPARTURE',rid,sysdate,mod_type,:OLD.DEPARTURE,:NEW.DEPARTURE,pk1,pk2);
 end if;

 if not((:OLD.ARRIVAL = :NEW.ARRIVAL) and (:OLD.ARRIVAL is not null and :NEW.ARRIVAL is not null)) and not (:OLD.ARRIVAL is null and :NEW.ARRIVAL is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','ARRIVAL',rid,sysdate,mod_type,:OLD.ARRIVAL,:NEW.ARRIVAL,pk1,pk2);
 end if;

 if not((:OLD.DISPATCH_DATE = :NEW.DISPATCH_DATE) and (:OLD.DISPATCH_DATE is not null and :NEW.DISPATCH_DATE is not null)) and not (:OLD.DISPATCH_DATE is null and :NEW.DISPATCH_DATE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_date,new_date,data_type,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','DISPATCH_DATE',rid,sysdate,mod_type,:OLD.DISPATCH_DATE,:NEW.DISPATCH_DATE,'D',pk1,pk2);
 end if;

 if not((:OLD.SUMVOLUME = :NEW.SUMVOLUME) and (:OLD.SUMVOLUME is not null and :NEW.SUMVOLUME is not null)) and not (:OLD.SUMVOLUME is null and :NEW.SUMVOLUME is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','SUMVOLUME',rid,sysdate,mod_type,:OLD.SUMVOLUME,:NEW.SUMVOLUME,pk1,pk2);
 end if;

 if not((:OLD.SUMWEIGHT = :NEW.SUMWEIGHT) and (:OLD.SUMWEIGHT is not null and :NEW.SUMWEIGHT is not null)) and not (:OLD.SUMWEIGHT is null and :NEW.SUMWEIGHT is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','SUMWEIGHT',rid,sysdate,mod_type,:OLD.SUMWEIGHT,:NEW.SUMWEIGHT,pk1,pk2);
 end if;

 if not((:OLD.REVTON = :NEW.REVTON) and (:OLD.REVTON is not null and :NEW.REVTON is not null)) and not (:OLD.REVTON is null and :NEW.REVTON is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','REVTON',rid,sysdate,mod_type,:OLD.REVTON,:NEW.REVTON,pk1,pk2);
 end if;

 if not((:OLD.TARE = :NEW.TARE) and (:OLD.TARE is not null and :NEW.TARE is not null)) and not (:OLD.TARE is null and :NEW.TARE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','TARE',rid,sysdate,mod_type,:OLD.TARE,:NEW.TARE,pk1,pk2);
 end if;

 if not((:OLD.CHARGEWEIGHT    = :NEW.CHARGEWEIGHT   ) and (:OLD.CHARGEWEIGHT    is not null and :NEW.CHARGEWEIGHT    is not null)) and not (:OLD.CHARGEWEIGHT    is null and :NEW.CHARGEWEIGHT    is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','CHARGEWEIGHT   ',rid,sysdate,mod_type,:OLD.CHARGEWEIGHT   ,:NEW.CHARGEWEIGHT   ,pk1,pk2);
 end if;

 if not((:OLD.SHIP_ID = :NEW.SHIP_ID) and (:OLD.SHIP_ID is not null and :NEW.SHIP_ID is not null)) and not (:OLD.SHIP_ID is null and :NEW.SHIP_ID is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','SHIP_ID',rid,sysdate,mod_type,:OLD.SHIP_ID,:NEW.SHIP_ID,pk1,pk2);
 end if;

 if not((:OLD.MANIFEST_CREATED = :NEW.MANIFEST_CREATED) and (:OLD.MANIFEST_CREATED is not null and :NEW.MANIFEST_CREATED is not null)) and not (:OLD.MANIFEST_CREATED is null and :NEW.MANIFEST_CREATED is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','MANIFEST_CREATED',rid,sysdate,mod_type,:OLD.MANIFEST_CREATED,:NEW.MANIFEST_CREATED,pk1,pk2);
 end if;

 if not((:OLD.CARRIER = :NEW.CARRIER) and (:OLD.CARRIER is not null and :NEW.CARRIER is not null)) and not (:OLD.CARRIER is null and :NEW.CARRIER is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','CARRIER',rid,sysdate,mod_type,:OLD.CARRIER,:NEW.CARRIER,pk1,pk2);
 end if;

 if not((:OLD.FLIGHT = :NEW.FLIGHT) and (:OLD.FLIGHT is not null and :NEW.FLIGHT is not null)) and not (:OLD.FLIGHT is null and :NEW.FLIGHT is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','FLIGHT',rid,sysdate,mod_type,:OLD.FLIGHT,:NEW.FLIGHT,pk1,pk2);
 end if;

 if not((:OLD.CHARGECODE = :NEW.CHARGECODE) and (:OLD.CHARGECODE is not null and :NEW.CHARGECODE is not null)) and not (:OLD.CHARGECODE is null and :NEW.CHARGECODE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','CHARGECODE',rid,sysdate,mod_type,:OLD.CHARGECODE,:NEW.CHARGECODE,pk1,pk2);
 end if;

 if not((:OLD.SITE_OWNER = :NEW.SITE_OWNER) and (:OLD.SITE_OWNER is not null and :NEW.SITE_OWNER is not null)) and not (:OLD.SITE_OWNER is null and :NEW.SITE_OWNER is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'MOVEMENTS','SITE_OWNER',rid,sysdate,mod_type,:OLD.SITE_OWNER,:NEW.SITE_OWNER,pk1,pk2);
 end if;

end t_movements;
/


CREATE OR REPLACE TRIGGER STRANG.T_MOVEMENTS_B 
 before insert or update
 ON STRANG.MOVEMENTS
 for each row
DISABLE
declare

begin

 if nvl(global_site.disable_trigger,FALSE) then return; end if;
 if global_site.disable_trigger is NULL or :NEW.date_modified is NULL
  then
   :NEW.date_modified := sysdate;
 end if;
 if global_site.get_name is null then global_site.set_name; end if;
 if :NEW.site_owner is not null then return; end if;
 if inserting
  then
   :NEW.site_owner := global_site.site_name;
 elsif updating
  then
   :NEW.site_owner := global_site.site_name;
 end if;

end t_movements_b;
/


ALTER TABLE STRANG.MOVEMENTS ADD (
  CONSTRAINT F_MOVEMENTS_1 
  FOREIGN KEY (INVOICENO) 
  REFERENCES STRANG.INVOICES (INVOICENO)
  ENABLE VALIDATE);

GRANT DELETE, INSERT, SELECT, UPDATE ON STRANG.MOVEMENTS TO STX1;

GRANT ALTER, DELETE, INDEX, INSERT, REFERENCES, SELECT, UPDATE, ON COMMIT REFRESH, QUERY REWRITE, DEBUG, FLASHBACK ON STRANG.MOVEMENTS TO WEBSYS;
