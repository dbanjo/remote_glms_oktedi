DROP TABLE STRANG.CUSTOMERS CASCADE CONSTRAINTS;

CREATE TABLE STRANG.CUSTOMERS
(
  CUSTOMER               VARCHAR2(100 BYTE)     NOT NULL,
  STREET                 VARCHAR2(30 BYTE),
  POSTCODE               VARCHAR2(10 BYTE),
  SUBURB                 VARCHAR2(30 BYTE),
  STATE                  VARCHAR2(20 BYTE),
  COUNTRY                VARCHAR2(25 BYTE),
  EMAIL                  VARCHAR2(60 BYTE),
  ABN                    VARCHAR2(20 BYTE),
  PHONE                  VARCHAR2(20 BYTE),
  CITY                   VARCHAR2(25 BYTE),
  CUSTOMER_TYPE          VARCHAR2(20 BYTE),
  FAX                    VARCHAR2(20 BYTE),
  CUSTOMER_ID            NUMBER(16),
  PRIMARY_ROWID          ROWID,
  SHIPPER_ID             NUMBER,
  NOTIFY_PARTY_ID        NUMBER,
  SITE_OWNER             VARCHAR2(100 BYTE),
  DATE_MODIFIED          DATE,
  RATE                   NUMBER,
  FREIGHT                NUMBER,
  INSURANCE              NUMBER,
  OTHER_COSTS            NUMBER,
  INFREIGHT              NUMBER,
  DEDUCTIONS             NUMBER,
  VAT                    NUMBER,
  SAD_CUO_CODE           VARCHAR2(3 BYTE),
  CUSTOMS_AGENT          VARCHAR2(20 BYTE),
  LICENCE_NO             VARCHAR2(15 BYTE),
  P2ACODE                VARCHAR2(15 BYTE),
  CPC                    VARCHAR2(30 BYTE),
  PRECEDING_DOCUMENTS    VARCHAR2(15 BYTE),
  TERMS_OF_DELIVERY      VARCHAR2(15 BYTE),
  SAD_TOD_NAM            VARCHAR2(17 BYTE),
  ACCOUNT_NUMBER         VARCHAR2(15 BYTE),
  BANK_CODE              VARCHAR2(30 BYTE),
  BANK_NAME              VARCHAR2(30 BYTE),
  BRANCH                 VARCHAR2(30 BYTE),
  TERMS_OF_PAYMENT       VARCHAR2(30 BYTE),
  BANK_REF_NO            VARCHAR2(30 BYTE),
  EPG                    NUMBER,
  SAD_TYP_DEC            VARCHAR2(3 BYTE),
  SAD_TYP_TRANSIT        VARCHAR2(5 BYTE),
  SAD_TYP_PROC           NUMBER,
  SAD_CTY_1DLP           VARCHAR2(3 BYTE),
  SAD_TRA_CTY            VARCHAR2(3 BYTE),
  SAD_CTY_EXPCOD         VARCHAR2(3 BYTE),
  SAD_CTY_DESTCOD        VARCHAR2(3 BYTE),
  SAD_LOP_COD            VARCHAR2(5 BYTE),
  SAD_LOC_GOODS          VARCHAR2(17 BYTE),
  SAD_WHS_COD            VARCHAR2(17 BYTE),
  SAD_WHS_TIME           NUMBER,
  SAD_TOT_FEES           NUMBER,
  SAD_CUO_BORD           VARCHAR2(5 BYTE),
  SAD_FINANCIAL          VARCHAR2(17 BYTE),
  METHOD_OF_PAYMENT      VARCHAR2(1 BYTE),
  LEVY_RATE              NUMBER,
  PORT_FROM              VARCHAR2(20 BYTE),
  ATTACHMENTS_INVOICES   VARCHAR2(3 BYTE),
  ATTACHMENTS_PACKING    VARCHAR2(3 BYTE),
  ATTACHMENTS_ORDER      VARCHAR2(3 BYTE),
  ATTACHMENTS_LICENCE    VARCHAR2(3 BYTE),
  ATTACHMENTS_FREIGHT    VARCHAR2(3 BYTE),
  ATTACHMENTS_OTHER      VARCHAR2(3 BYTE),
  PCOMMENT               VARCHAR2(200 BYTE),
  POSITION               VARCHAR2(30 BYTE),
  COMPARATIVE_WORKSHEET  VARCHAR2(1 BYTE),
  SAP_VENDOR_ID          NUMBER,
  CONSIGNED_TO_ID        NUMBER,
  MODIFIED_BY            VARCHAR2(20 BYTE)
)
TABLESPACE PICTION_MED_1
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          416K
            NEXT             32K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           )
LOGGING 
NOCOMPRESS 
NOCACHE;

COMMENT ON COLUMN STRANG.CUSTOMERS.CUSTOMER IS 'Customer name';

COMMENT ON COLUMN STRANG.CUSTOMERS.STREET IS 'Street';

COMMENT ON COLUMN STRANG.CUSTOMERS.POSTCODE IS 'Postcode';

COMMENT ON COLUMN STRANG.CUSTOMERS.SUBURB IS 'Suburb';

COMMENT ON COLUMN STRANG.CUSTOMERS.STATE IS 'State';

COMMENT ON COLUMN STRANG.CUSTOMERS.COUNTRY IS 'Country';

COMMENT ON COLUMN STRANG.CUSTOMERS.EMAIL IS 'Email Address';


CREATE UNIQUE INDEX STRANG.P_CUSTOMERS ON STRANG.CUSTOMERS
(CUSTOMER_ID, CUSTOMER_TYPE)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          256K
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

ALTER TABLE STRANG.CUSTOMERS ADD (
  CONSTRAINT P_CUSTOMERS
  PRIMARY KEY
  (CUSTOMER_ID, CUSTOMER_TYPE)
  USING INDEX STRANG.P_CUSTOMERS
  ENABLE VALIDATE);


CREATE INDEX STRANG.I_CUSTOMERS_2 ON STRANG.CUSTOMERS
(CUSTOMER, CUSTOMER_TYPE, CUSTOMER_ID)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          256K
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

CREATE OR REPLACE TRIGGER STRANG.T_CUSTOMERS 
 AFTER INSERT OR UPDATE OR DELETE
 ON STRANG.CUSTOMERS
 FOR EACH ROW
DISABLE
DECLARE

 MOD_TYPE	VARCHAR2(20);
 RID		ROWID;
 pk1		varchar2(4000);
 pk2		varchar2(4000);

BEGIN

 IF NVL(GLOBAL_SITE.DISABLE_TRIGGER,FALSE) THEN RETURN; END IF;
 IF INSERTING
  THEN
   MOD_TYPE := 'I';
   RID := :NEW.ROWID;
   pk1 := :NEW.customer_id;
   pk2 := NULL;
 ELSIF UPDATING
  THEN
   MOD_TYPE := 'U';
   RID := :OLD.ROWID;
   pk1 := :NEW.customer_id;
   pk2 := NULL;
 ELSE
   if global_site.get_name is null then global_site.set_name; end if;
   MOD_TYPE := 'D';
   RID := :OLD.ROWID;
   pk1 := :OLD.customer_id;
   pk2 := NULL;
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','SITE_OWNER',RID,SYSDATE,MOD_TYPE,:OLD.SITE_OWNER,:NEW.SITE_OWNER,pk1,pk2);
   return;
 END IF;

 if global_site.get_name is null then global_site.set_name; end if;
 IF NOT((:OLD.CUSTOMER = :NEW.CUSTOMER) AND (:OLD.CUSTOMER IS NOT NULL AND :NEW.CUSTOMER IS NOT NULL)) AND NOT (:OLD.CUSTOMER IS NULL AND :NEW.CUSTOMER IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','CUSTOMER',RID,SYSDATE,MOD_TYPE,:OLD.CUSTOMER,:NEW.CUSTOMER,pk1,pk2);
 END IF;

 IF NOT((:OLD.STREET = :NEW.STREET) AND (:OLD.STREET IS NOT NULL AND :NEW.STREET IS NOT NULL)) AND NOT (:OLD.STREET IS NULL AND :NEW.STREET IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','STREET',RID,SYSDATE,MOD_TYPE,:OLD.STREET,:NEW.STREET,pk1,pk2);
 END IF;

 IF NOT((:OLD.POSTCODE = :NEW.POSTCODE) AND (:OLD.POSTCODE IS NOT NULL AND :NEW.POSTCODE IS NOT NULL)) AND NOT (:OLD.POSTCODE IS NULL AND :NEW.POSTCODE IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','POSTCODE',RID,SYSDATE,MOD_TYPE,:OLD.POSTCODE,:NEW.POSTCODE,pk1,pk2);
 END IF;

 IF NOT((:OLD.SUBURB = :NEW.SUBURB) AND (:OLD.SUBURB IS NOT NULL AND :NEW.SUBURB IS NOT NULL)) AND NOT (:OLD.SUBURB IS NULL AND :NEW.SUBURB IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','SUBURB',RID,SYSDATE,MOD_TYPE,:OLD.SUBURB,:NEW.SUBURB,pk1,pk2);
 END IF;

 IF NOT((:OLD.STATE = :NEW.STATE) AND (:OLD.STATE IS NOT NULL AND :NEW.STATE IS NOT NULL)) AND NOT (:OLD.STATE IS NULL AND :NEW.STATE IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','STATE',RID,SYSDATE,MOD_TYPE,:OLD.STATE,:NEW.STATE,pk1,pk2);
 END IF;

 IF NOT((:OLD.COUNTRY = :NEW.COUNTRY) AND (:OLD.COUNTRY IS NOT NULL AND :NEW.COUNTRY IS NOT NULL)) AND NOT (:OLD.COUNTRY IS NULL AND :NEW.COUNTRY IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','COUNTRY',RID,SYSDATE,MOD_TYPE,:OLD.COUNTRY,:NEW.COUNTRY,pk1,pk2);
 END IF;

 IF NOT((:OLD.EMAIL = :NEW.EMAIL) AND (:OLD.EMAIL IS NOT NULL AND :NEW.EMAIL IS NOT NULL)) AND NOT (:OLD.EMAIL IS NULL AND :NEW.EMAIL IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','EMAIL',RID,SYSDATE,MOD_TYPE,:OLD.EMAIL,:NEW.EMAIL,pk1,pk2);
 END IF;

 IF NOT((:OLD.ABN = :NEW.ABN) AND (:OLD.ABN IS NOT NULL AND :NEW.ABN IS NOT NULL)) AND NOT (:OLD.ABN IS NULL AND :NEW.ABN IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','ABN',RID,SYSDATE,MOD_TYPE,:OLD.ABN,:NEW.ABN,pk1,pk2);
 END IF;

 IF NOT((:OLD.PHONE = :NEW.PHONE) AND (:OLD.PHONE IS NOT NULL AND :NEW.PHONE IS NOT NULL)) AND NOT (:OLD.PHONE IS NULL AND :NEW.PHONE IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','PHONE',RID,SYSDATE,MOD_TYPE,:OLD.PHONE,:NEW.PHONE,pk1,pk2);
 END IF;

 IF NOT((:OLD.CITY = :NEW.CITY) AND (:OLD.CITY IS NOT NULL AND :NEW.CITY IS NOT NULL)) AND NOT (:OLD.CITY IS NULL AND :NEW.CITY IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','CITY',RID,SYSDATE,MOD_TYPE,:OLD.CITY,:NEW.CITY,pk1,pk2);
 END IF;

 IF NOT((:OLD.CUSTOMER_TYPE = :NEW.CUSTOMER_TYPE) AND (:OLD.CUSTOMER_TYPE IS NOT NULL AND :NEW.CUSTOMER_TYPE IS NOT NULL)) AND NOT (:OLD.CUSTOMER_TYPE IS NULL AND :NEW.CUSTOMER_TYPE IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','CUSTOMER_TYPE',RID,SYSDATE,MOD_TYPE,:OLD.CUSTOMER_TYPE,:NEW.CUSTOMER_TYPE,pk1,pk2);
 END IF;

 IF NOT((:OLD.FAX = :NEW.FAX) AND (:OLD.FAX IS NOT NULL AND :NEW.FAX IS NOT NULL)) AND NOT (:OLD.FAX IS NULL AND :NEW.FAX IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','FAX',RID,SYSDATE,MOD_TYPE,:OLD.FAX,:NEW.FAX,pk1,pk2);
 END IF;

 IF NOT((:OLD.CUSTOMER_ID = :NEW.CUSTOMER_ID) AND (:OLD.CUSTOMER_ID IS NOT NULL AND :NEW.CUSTOMER_ID IS NOT NULL)) AND NOT (:OLD.CUSTOMER_ID IS NULL AND :NEW.CUSTOMER_ID IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','CUSTOMER_ID',RID,SYSDATE,MOD_TYPE,:OLD.CUSTOMER_ID,:NEW.CUSTOMER_ID,:OLD.CUSTOMER_ID,pk2);
 END IF;

 IF NOT((:OLD.SHIPPER_ID = :NEW.SHIPPER_ID) AND (:OLD.SHIPPER_ID IS NOT NULL AND :NEW.SHIPPER_ID IS NOT NULL)) AND NOT (:OLD.SHIPPER_ID IS NULL AND :NEW.SHIPPER_ID IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','SHIPPER_ID',RID,SYSDATE,MOD_TYPE,:OLD.SHIPPER_ID,:NEW.SHIPPER_ID,pk1,pk2);
 END IF;

 IF NOT((:OLD.NOTIFY_PARTY_ID = :NEW.NOTIFY_PARTY_ID) AND (:OLD.NOTIFY_PARTY_ID IS NOT NULL AND :NEW.NOTIFY_PARTY_ID IS NOT NULL)) AND NOT (:OLD.NOTIFY_PARTY_ID IS NULL AND :NEW.NOTIFY_PARTY_ID IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','NOTIFY_PARTY_ID',RID,SYSDATE,MOD_TYPE,:OLD.NOTIFY_PARTY_ID,:NEW.NOTIFY_PARTY_ID,pk1,pk2);
 END IF;

 IF NOT((:OLD.SITE_OWNER = :NEW.SITE_OWNER) AND (:OLD.SITE_OWNER IS NOT NULL AND :NEW.SITE_OWNER IS NOT NULL)) AND NOT (:OLD.SITE_OWNER IS NULL AND :NEW.SITE_OWNER IS NULL)
  THEN
   INSERT INTO REPLICATION(REPLICATION_ID,SITE,TABLE_NAME,COLUMN_NAME,ROW_CHANGED,DATE_CHANGED,CHANGE_TYPE,OLD_VALUE,new_value,pk_col1,pk_col2) VALUES
    (S_REPLICATION.NEXTVAL,NVL(GLOBAL_SITE.SITE_NAME,'PRIMARY'),'CUSTOMERS','SITE_OWNER',RID,SYSDATE,MOD_TYPE,:OLD.SITE_OWNER,:NEW.SITE_OWNER,pk1,pk2);
 END IF;

END T_CUSTOMERS;
/


CREATE OR REPLACE TRIGGER STRANG.T_CUSTOMERS_B 
 Before Insert Or Update
 ON STRANG.CUSTOMERS
 For Each Row
DISABLE
Declare

BEGIN

 if nvl(global_site.disable_trigger,FALSE) then return; end if;
 if global_site.disable_trigger is NULL or :NEW.date_modified is NULL
  then
   :NEW.date_modified := sysdate;
 end if;
 if global_site.get_name is null then global_site.set_name; end if;
 If :New.Site_Owner Is Not Null Then Return; End If;
 If Inserting
  Then
   :New.Site_Owner := Global_Site.Site_Name;
 Elsif Updating
  Then
   :New.Site_Owner := Global_Site.Site_Name;
 End If;

END T_CUSTOMERS_B;
/


GRANT DELETE, INSERT, SELECT, UPDATE ON STRANG.CUSTOMERS TO STX1;

GRANT ALTER, DELETE, INDEX, INSERT, REFERENCES, SELECT, UPDATE, ON COMMIT REFRESH, QUERY REWRITE, DEBUG, FLASHBACK ON STRANG.CUSTOMERS TO WEBSYS;
