CREATE OR REPLACE package body WEBSYS.strangp   
as

/******************************************************************************
   NAME:       WEBSYS.STRANGP
   PURPOSE:    SGLMS MULTIFUNCTIONAL CORE MODULE

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   0.1        07/01/2021      dbanjo       1. Billing Year threshold increased from 2020 to 2040 (as requested by Sallie Strang)
   0.2        01/03/2021      dbanjo       2. Updated movements procedure to handle new AIRWAY entry - default settings.
   0.3        01/03/2021      dbanjo       3. Updated websys.oltp_overview table to switch of southbound menu items.
******************************************************************************/
  function currsite return varchar2;
  function new_log_no( p1 in varchar2, vste in varchar2, io varchar2 default 'I' ) return varchar2;
  function control_code( cd in varchar2, vste in varchar2 ) return varchar2;
  function customer_state(acid in integer) return varchar2;                  
  function pop_up_window(v_features in varchar2, v_title in varchar2 default '_blank') return varchar2;
  function f_getMaterial( vCode in varchar2, isShortDesc in boolean default FALSE ) return varchar2;
  function get_customer_id(aid integer, typ varchar2 default 'CUSTOMER_ID') return integer;
  function confirm_delete( v_action in varchar2 default 'ACTION', btn in varchar2 default 'Delete', msg in varchar2 default 'Are you sure you want to delete?', script_only in boolean default FALSE ) return varchar2;
 procedure lov_ship_intl( cd in varchar2, lname in varchar2, val in varchar2 default null, vio in varchar2 default 'I', isedit in boolean DEFAULT TRUE );
 procedure lov_ship_local( cd in varchar2, lname in varchar2, val in varchar2 default null, vio in varchar2 default 'I', isedit in boolean DEFAULT TRUE, p_filter in varchar2 default null );
 -- procedure lov_ship_local( cd in varchar2, lname in varchar2, val in varchar2 default null, vio in varchar2 default 'I', isedit in boolean DEFAULT TRUE );
 procedure lov_list_warehouse( lname in varchar2, parm in varchar2, cd in varchar2 default null, ismand in boolean DEFAULT FALSE, showdesc in boolean DEFAULT TRUE, showcola in boolean DEFAULT FALSE, isedit in boolean DEFAULT TRUE, xtr_a in varchar2 default null, xtr_b in varchar2 default null );
 procedure lov_list( lname in varchar2, parm in varchar2, cd in varchar2 default null, ismand in boolean DEFAULT FALSE, showdesc in boolean DEFAULT TRUE, showcola in boolean DEFAULT FALSE, isedit in boolean DEFAULT TRUE, xtr_a in varchar2 default null, xtr_b in varchar2 default null );
 procedure lov_ship( cd in varchar2, lname in varchar2, vli in varchar2, val in varchar2 default null, isedit in boolean DEFAULT TRUE, io in varchar2 DEFAULT null);
 procedure customer_list( custype in varchar2, parm in varchar2, custid in varchar2 default null, ismand in boolean DEFAULT FALSE, isedit in boolean DEFAULT TRUE );
 procedure search( surl in varchar2, msearch in varchar2, curr_rowid in varchar2, samerow in boolean DEFAULT FALSE, buttons_only in boolean DEFAULT FALSE, override_top in varchar2 default null, search_only in boolean DEFAULT FALSE, button_text in varchar2 default NULL, lmnu in rowid default null );
 procedure display_report( surl in varchar2, acid in integer, typ in varchar2, repname in varchar2, r1 in varchar2 default null, r2 in varchar2 default null, r3 in varchar2 default null );
 procedure allocate_hawb( mawb in varchar2, vste in varchar2 );
 procedure generate_entry(vship_id in integer, vste in varchar2);
 procedure generate_entry_airfreight(vship_id in integer, vste in varchar2);
 -- procedure trac_search( surl in varchar2, msg in varchar2 default null );
 procedure create_duty(vship_id varchar2, entryno number, vcust_id integer );
 procedure create_duty_com(vship_id varchar2, entryno number, vcust_id integer );
 procedure create_line_no( vShip_id integer, typ in varchar2 );
 procedure unallocate_entry( vShip_id integer );
 procedure generate_ost356( surl in varchar2, vContainerno in varchar2, vSeal in varchar2 );
 procedure generate_ost256( surl in varchar2, vShip_id in integer );
 procedure generate_ost156( surl in varchar2, vShip_id in integer );
 procedure generate_OST157( surl in varchar2, vShip_id in integer );
 -- procedure generate_ost185( surl in varchar2, vtoday in date, is_batch in boolean default FALSE );
 procedure generate_ccdets( surl in varchar2, vShip_id in integer );
 procedure generate_ccpo( surl in varchar2, vShip_id in integer );
 procedure download_gl(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, cusrec in customer_account%ROWTYPE, vste in varchar2, pfx in THEME%ROWTYPE, vaccess in varchar2 );
 procedure generate_containers( shpid in integer );
 procedure generate_containers_onhire( crec in strang.containers%ROWTYPE );
 procedure generate_containers_offhire( crec in strang.containers%ROWTYPE );
 procedure fetch_csv_rows(v_blb in out nocopy BLOB, v_parms_1 in column_array, v_query_1 in varchar2, v_parms_2 in column_array, v_query_2 in varchar2, v_union_2 in varchar2 default null, v_distinct in boolean default FALSE);


 function trunc_to_week_start(
    in_date in date
  ) return date
  is
  begin
    return next_day( trunc( in_date ) - 7, g_convoy_week_start );
  end;

  function day_of_week(
    in_date in date
  ) return number
  is
  begin
    return ( trunc( in_date ) - trunc_to_week_start( in_date ) ) + 1;
  end;

  FUNCTION WEEK_OF_YEAR(
    in_date IN DATE
  ) RETURN NUMBER
  IS
  BEGIN
    RETURN TRUNC(
             (
               in_date
               -
               TRUNC_TO_WEEK_START(
                 TRUNC( TRUNC_TO_WEEK_START( in_date ), 'YYYY' ) + 6
               )
             ) / 7
           ) + 1;
  END;

  function to_char_week(
    in_date in date
  ) return varchar2
  is
  begin
    return to_char( trunc_to_week_start( in_date ), 'FMYYYY' )
           || '-W' || to_char( week_of_year( in_date ), 'FM00' )
           || '-' || day_of_week( in_date );
  end;
 
 function currsite
  return varchar2
 as
 begin
  return( 'PRIMARY' );
  --
  -- commented out for centralised use of Piction
  --strang.global_site.set_name;
  --return( nvl(strang.global_site.site_name,'PRIMARY') );
 end;

 function check_invoice_attachment (deliveryno in varchar2)
 return varchar2
 is
 v_check varchar2(1000);
 
 begin

    if websys.file_exists(glbx.extract_master_parameter('STRANG_RECEIVALS_DIR') || '\'|| deliveryno|| '\'||'INVOICE',deliveryno||'_invoice.pdf') = true then
       v_check := 'true';
    else 
       v_check := 'false';
    end if;

    return v_check;
 end check_invoice_attachment;
 function check_invoice_name (deliveryno in varchar2)
 return varchar2
 is
 v_check varchar2(1000);
 full_file_name varchar2(1000);
 begin
    full_file_name := glbx.extract_master_parameter('STRANG_RECEIVALS_DIR')||'\'|| deliveryno|| '\'||'INVOICE'||'\'||deliveryno||'_invoice.pdf';
    if websys.file_exists(full_file_name) = true then
       v_check := 'true';
    else 
       v_check := 'false';
    end if;

    return v_check;
 end check_invoice_name;

 function customer_state(acid in integer)
  return varchar2
 as
 begin
  oltp.identify_user( acid );
  return(nvl(OLTP.USER_SITE,'SYD'));
 end customer_state;

 procedure lov_list( lname in varchar2, parm in varchar2, cd in varchar2 default null, ismand in boolean DEFAULT FALSE, showdesc in boolean DEFAULT TRUE, showcola in boolean DEFAULT FALSE, isedit in boolean DEFAULT TRUE, xtr_a in varchar2 default null, xtr_b in varchar2 default null )
 as

   cursor c1( lname varchar2, snd varchar2, xtr_a varchar2, xtr_b varchar2 ) is
   select *
    from strang.lov
   where lov_name = lname and
         ((xtr_a is null) or (xtr_a is not null and cola = xtr_a) ) and
         ((xtr_b is null) or (xtr_b is not null and colb = xtr_b) )
   order by decode(snd,'A',code,'B',description);
   
   

  cursor c2( cd varchar2, xtr_a varchar2, xtr_b varchar2 ) is
   select *
   from strang.lov
   where lov_name = lname and
         code = cd and
         ((xtr_a is null) or (xtr_a is not null and cola = xtr_a) ) and
         ((xtr_b is null) or (xtr_b is not null and colb = xtr_b) );

  c2rec	c2%ROWTYPE;
  snd	varchar2(10);
  fval	boolean;

 begin

  if showdesc then snd := 'B'; else snd := 'A'; end if;
  fval := false;
  if isedit
   then
    if lname in ('INOUT') and parm in ('P2a') then
      htp.formselectopen( cname=>'P2', cattributes=>'id="'||parm||'"'||' ONCHANGE="convoy_direction_switch()"' );  
    elsif lname in ('LOCATIONS') and parm in ('P2b', 'P2c') then
      htp.formselectopen( cname=>'P2', cattributes=>'id="'||parm||'"'  );
    elsif lname in ('LOCATIONS') and parm in ('P34') then
      htp.formselectopen( cname=>'P34', cattributes=>'id="'||parm||'"'  );
    else     
       htp.formselectopen( cname=>parm, cattributes=>'id="'||parm||'"' );
    end if;
    if not ismand then htp.formselectoption( NULL ); end if;
    for c1rec in c1( lname, snd, xtr_a, xtr_b ) loop
     if (cd is not null) and (cd = c1rec.code)
      then
       if showdesc
        then
         if showcola
          then
          -- htp.formselectoption( c1rec.code || '-' || c1rec.cola, 'SELECTED', cattributes=>'VALUE="' || c1rec.code || '"' );
              htp.formselectoption( c1rec.description|| '-' || c1rec.cola, 'SELECTED', cattributes=>'VALUE="' || c1rec.code || '"' );
           fval := TRUE;
          else
           htp.formselectoption( c1rec.description, 'SELECTED', cattributes=>'VALUE="' || c1rec.code || '"' );
           fval := TRUE;
        end if;
       else
         if showcola then
            htp.formselectoption( c1rec.code|| '-' || c1rec.cola, 'SELECTED', cattributes=>'VALUE="' || c1rec.code|| '"' );
            fval := TRUE;
         else
            htp.formselectoption( c1rec.code, 'SELECTED', cattributes=>'VALUE="' || c1rec.code || '"' );
            fval := TRUE;
         end if;
       end if;
      else
       if showdesc
        then
         if showcola
          then
          -- htp.formselectoption( c1rec.code || '-' || c1rec.cola, cattributes=>'VALUE="' || c1rec.code || '"' );
             htp.formselectoption( c1rec.description || '-' || c1rec.cola, cattributes=>'VALUE="' || c1rec.code || '"' );
          else
           htp.formselectoption( c1rec.description, cattributes=>'VALUE="' || c1rec.code || '"' );
         end if;
        else
          if showcola then
             htp.formselectoption( c1rec.code|| '-' || c1rec.cola, cattributes=>'VALUE="' || c1rec.code|| '"' );
          else       
         htp.formselectoption( c1rec.code, cattributes=>'VALUE="' || c1rec.code || '"' );
          end if;
       end if;
     end if;
     end loop;
    if not fval and cd is not null then htp.formselectoption( cd, 'SELECTED' ); end if;
    htp.formselectclose;
  else
    open c2(cd, xtr_a, xtr_b);
    fetch c2 into c2rec;
    close c2;
    if showdesc
     then
      htp.bold(c2rec.description);
     else
          htp.bold(c2rec.code);
    end if;
  end if;
 exception
  when others then htp.p( sqlerrm );
 end lov_list;

--
 procedure lov_list_warehouse( lname in varchar2, parm in varchar2, cd in varchar2 default null, ismand in boolean DEFAULT FALSE, showdesc in boolean DEFAULT TRUE, showcola in boolean DEFAULT FALSE, isedit in boolean DEFAULT TRUE, xtr_a in varchar2 default null, xtr_b in varchar2 default null )
 as

  cursor c1( lname varchar2, snd varchar2, xtr_a varchar2, xtr_b varchar2 ) is
   select *
   from strang.lov
   where cole = 'WAREHOUSE' and lov_name = lname and
         ((xtr_a is null) or (xtr_a is not null and cola = xtr_a) ) and
         ((xtr_b is null) or (xtr_b is not null and colb = xtr_b) )
   order by decode(snd,'A',code,'B',description);

  cursor c2( cd varchar2, xtr_a varchar2, xtr_b varchar2 ) is
   select *
   from strang.lov
   where  cole = 'WAREHOUSE' and lov_name = lname and
         code = cd and
         ((xtr_a is null) or (xtr_a is not null and cola = xtr_a) ) and
         ((xtr_b is null) or (xtr_b is not null and colb = xtr_b) );

  c2rec	c2%ROWTYPE;
  snd	varchar2(10);
  fval	boolean;

 begin

  if showdesc then snd := 'A'; else snd := 'A'; end if;
  fval := false;
  if isedit
   then
    htp.formselectopen( parm );
    if not ismand then htp.formselectoption( NULL ); end if;
    for c1rec in c1( lname, snd, xtr_a, xtr_b ) loop
     if (cd is not null) and (cd = c1rec.code)
      then
       if showdesc
        then
         if showcola
          then
           htp.formselectoption( c1rec.code ||'&nbsp;&nbsp;&nbsp;'||c1rec.description || '-' || c1rec.cola, 'SELECTED', cattributes=>'VALUE="' || c1rec.code || '"' );
           fval := TRUE;
          else
           htp.formselectoption( c1rec.code ||'&nbsp;&nbsp;&nbsp;'||c1rec.description, 'SELECTED', cattributes=>'VALUE="' || c1rec.code || '"' );
           fval := TRUE;
        end if;
       else
         htp.formselectoption( c1rec.code, 'SELECTED', cattributes=>'VALUE="' || c1rec.code || '"' );
         fval := TRUE;
       end if;
      else
       if showdesc
        then
         if showcola
          then
           htp.formselectoption( c1rec.code ||'&nbsp;&nbsp;&nbsp;'||c1rec.description || '-' || c1rec.cola, cattributes=>'VALUE="' || c1rec.code || '"' );
          else
           htp.formselectoption( c1rec.code ||'&nbsp;&nbsp;&nbsp;'||c1rec.description, cattributes=>'VALUE="' || c1rec.code || '"' );
         end if;
        else
         htp.formselectoption( c1rec.code, cattributes=>'VALUE="' || c1rec.code || '"' );
       end if;
     end if;
     end loop;
    if not fval and cd is not null then htp.formselectoption( cd, 'SELECTED' ); end if;
    htp.formselectclose;
  else

    open c2(cd, xtr_a, xtr_b);
    fetch c2 into c2rec;
    close c2;
    if showdesc
     then
      htp.bold(c2rec.description);
     else
      htp.bold(c2rec.code);
    end if;
  end if;
 exception
  when others then htp.p( sqlerrm );
 end lov_list_warehouse;

--

 procedure lov_ship( cd in varchar2, lname in varchar2, vli in varchar2, val in varchar2 default null, isedit in boolean DEFAULT TRUE, io in varchar2 default NULL)
 as

  cursor c1( lname varchar2, v_li varchar2 ) is select ship_id, io, shipname || '-' || voy ||' '|| decode(io,'I','INBOUND SHIP:  ','OUTBOUND SHIP:') nm from strang.ships_airway where ship_airway = lname and li= v_li and status <> 'ARCHIVED' order by io desc, shipname, voy;
  cursor c2( shd integer ) is select ship_id, shipname || '-' || voy ||' '|| decode(io,'I','INBOUND SHIP:  ','OUTBOUND SHIP:') nm from strang.ships_airway where ship_id = shd;
--20200413  cursor c3 is select ship_id from strang.ships_airway where estdepart = (select max(estdepart) from strang.ships_airway);
  cursor c3 (v_io varchar2, v_li varchar2 )is select s.ship_id, s.io from strang.ships_airway s where s.ship_airway = lname  and s.li= v_li and s.io = nvl(v_io,'I') order by io,nvl(estdepart,sysdate) desc;

  c2rec	c2%ROWTYPE;
  c3rec c3%ROWTYPE;

 begin
  if val is null
   then
    open c3 (io, vli);
    fetch c3 into c3rec;
    close c3;
  end if;

--select *
--from websys.debug
--order by ctr

  if isedit
   then
    htp.formselectopen( cname=>cd, cattributes=>'id="'||cd||'"' );
    for c1rec in c1( lname, vli ) loop
     if c1rec.ship_id = nvl(val,c3rec.ship_id)
        then
         htp.formselectoption( c1rec.nm, 'SELECTED', cattributes=>'VALUE="' || c1rec.ship_id || '"' );
     else
        if not( c1rec.io = nvl(io,'I')) then
           htp.formselectoption( c1rec.nm, cattributes=>'VALUE="' || c1rec.ship_id || '" disabled="disabled"' );
        else 
           htp.formselectoption( c1rec.nm, cattributes=>'VALUE="' || c1rec.ship_id || '"' );          
        end if;         
     end if;
   end loop;
   
--   for c1rec in c1( lname, vli ) loop
--      if c1rec.ship_id = nvl(val,c3rec.ship_id)
--      then
--         htp.formselectoption( c1rec.nm, 'SELECTED', cattributes=>'VALUE="' || c1rec.ship_id || '"' );
--      end if;
--   end loop;
   
   
   htp.formselectclose;
   else
   open c2(nvl(val,c3rec.ship_id));
   fetch c2 into c2rec;
   close c2;
   htp.bold( c2rec.nm );
  end if;
 exception
  when others then htp.p( sqlerrm );
 end lov_ship;



 procedure customer_list( custype in varchar2, parm in varchar2, custid in varchar2 default null, ismand in boolean DEFAULT FALSE, isedit in boolean DEFAULT TRUE )
 as

  cursor c1( custype varchar2 ) is select customer_id, customer from strang.customers where customer_type = custype order by customer;
  cursor c2( custid integer) is select customer from strang.customers where customer_id = custid;
  c2rec	c2%ROWTYPE;
  
 begin

  if isedit
   then
    htp.formselectopen( parm );
    if not ismand then htp.formselectoption( NULL ); end if;
    for c1rec in c1( custype ) loop
     if (custid is not null) and (custid = c1rec.customer_id)
      then
       htp.formselectoption( c1rec.customer, 'SELECTED', cattributes=>'VALUE="' || c1rec.customer_id || '"' );
      else
       htp.formselectoption( c1rec.customer, cattributes=>'VALUE="' || c1rec.customer_id || '"' );
     end if;
    end loop;
    htp.formselectclose;
   else
    open c2(custid);
    fetch c2 into c2rec;
    close c2;
    htp.bold(c2rec.customer);
  end if;
 exception
  when others then htp.p( sqlerrm );
 end customer_list;

function pop_up_window(v_features in varchar2, v_title in varchar2 default '_blank')
 return varchar2

as

 v_txt varchar2(32767);

begin
v_txt := '<script LANGUAGE="JavaScript">';
v_txt := v_txt || chr(10) || '<!--';
v_txt := v_txt || chr(10) || 'function popUpWindow(vmsg)';
v_txt := v_txt || chr(10) || '{';
v_txt := v_txt || chr(10) || 'window.open(vmsg,"' || v_title || '","' || v_features || '")';
v_txt := v_txt || chr(10) || '}';
v_txt := v_txt || chr(10) || '// -->';
v_txt := v_txt || chr(10) || '</script>';

return( v_txt );

exception when others then
 return(null);
end pop_up_window;
-- BEGINNING OF CODES
 procedure lov(surl in varchar2, call_name in varchar2, parm in varchar2, lrange in varchar2 default '*', src in varchar2 default null, msg in varchar2 default null, accin varchar2 default 'EDIT', src1 in varchar2 default null )
 as

  cursor c2(lname varchar2, vala varchar2, valb varchar2, src varchar2, src1 varchar2) is
   select /*+ ALL_ROWS */ rowid,lov_name,code,description,cola,colb,colc,cold,cole,colf,colg,colh,coli,colj
   from strang.lov
   where lov_name = lname and
         (
          (src is null and src1 is null and
           substr(upper(code),1,1) >= vala and
           substr(upper(code),1,1) <= valb) or
          (src is not null and src1 is null and code like src || '%') or
          (src is not null and src1 is not null and code like src || '%' and upper(description) like upper(src1) || '%') or
          (src is null and src1 is not null and upper(description) like upper(src1) || '%')
          )
   order by code, decode(lov_name, 'UNRATTAB', to_date(glbx.guess_date(cola))) desc;
--   order by code;
  cursor c3(lname varchar2) is select count('x') tot from strang.lov where lov_name = lname;
  cursor c4(lname varchar2, vala varchar2, valb varchar2) is
   select count('x') tot
   from strang.lov
   where lov_name = lname and substr(upper(code),1,1) >= vala and substr(upper(code),1,1) <= valb;
  cursor c5(lname varchar2) is select max(nvl(to_number(colj),0)) colj from strang.lov where lov_name = lname;

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c5rec		c5%ROWTYPE;
 tot_af		integer;
 tot_gm		integer;
 tot_nr		integer;
 tot_sz		integer;
 tot_09		integer;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 low_val	char(1);
 high_val	char(1);
 sts		varchar2(100);
 pfx		THEME%ROWTYPE;
 vaccess	varchar2(20);
 vaccess2	varchar2(20);
 p2_null	boolean;
 p5d_null	boolean;
 p5e_null	boolean;
 p5f_null	boolean;
 p3_null	boolean;
 p4_null	boolean;
 p5_null	boolean;
 p5g_null	boolean;
 p5h_null	boolean;
 p5i_null	boolean;
 p5j_null	boolean;
 candel		boolean;
 v_row          number;
 vste		varchar2(10);

/*
Controls 	- Desc
Gstcodes	- Desc,Cola
Ctrtype		- Desc,Cola,Colb
Units		- Desc
Invcontrols	- Desc
Packtypes	- Desc
Movements	- Desc
Locations	- Desc, Cola,colb,colc,cold,cole
Countries	- Desc,Cola
Contracts	- Desc
Currency        - Desc
Probtypes
Debtor_Branch	- Desc
Debtor_Code	- Desc
Job_Branch	- Desc
Warehouses	- Desc
Profit_Centre	- Desc
Cost_Centre	- Desc

*/

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.LOV' );

  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, parm, null );
  candel := FALSE;
  vaccess2 := data_access( owner_id, 'DELLOV', null );
  if vaccess2 = 'EDIT' then candel := TRUE; end if;

  if parm not in ('INVENT','TARIFF', 'AU_TARIFF')
   then
    if lrange = '*'
     then
      -- Check range of values and see if it should be broken down
      open c3(parm);
      fetch c3 into c3rec;
      close c3;
      low_val := 'A';
      high_val := 'F';
     else
      low_val := substr(lrange,1,1);
      high_val := substr(lrange,2,1);
    end if;
    if nvl(c3rec.tot,0) > 20 or lrange <> '*'
     then
      open c4(parm,'A','F');
      fetch c4 into tot_af;
      close c4;
      open c4(parm,'G','M');
      fetch c4 into tot_gm;
      close c4;
      open c4(parm,'N','R');
      fetch c4 into tot_nr;
      close c4;
      open c4(parm,'S','Z');
      fetch c4 into tot_sz;
      close c4;
      open c4(parm,'A','F');
      fetch c4 into tot_af;
      close c4;
      open c4(parm,'0','9');
      fetch c4 into tot_09;
      close c4;
      if lrange = '*' and nvl(tot_af,0) = 0
       then
        if lrange = '*' and nvl(tot_gm,0) = 0
         then
          if lrange = '*' and nvl(tot_nr,0) = 0
           then
            if lrange = '*' and nvl(tot_sz,0) = 0
             then
              if lrange = '*' and nvl(tot_09,0) = 0
               then
                low_val := chr(1);
                high_val := chr(255);
               else
                low_val := '0';
                high_val := '9';
              end if;
             else
              low_val := 'S';
              high_val := 'Z';
            end if;
           else
            low_val := 'N';
            high_val := 'R';
          end if;
         else
          low_val := 'G';
          high_val := 'M';
        end if;
      end if;
     else
      low_val := '0';
      high_val := 'Z';
    end if;
  end if;

  c1rec := glbx.get_aid( owner_id, 'C', ltype );
  pfx := glbx.get_thm( c1rec.theme_name );
  vste := customer_state(c1rec.aid);
  glbx.main_title( surl, LNGS.STR_TXT_001 || ': ' || parm, glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR01',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour,jscript=>'DISABLE', disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc );
  htp.nl;
  if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
  if vste in ('MEL','MOT','TAB','KIU') and upper(parm) in ('DEBTOR_BRANCH','DEBTOR_CODE','JOB_BRANCH','PROFIT_CENTRE','COST_CENTRE') then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
--  if vaccess = 'READ' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
  htp.p( '<CENTER>' );
  if msg is not null then glbx.header_msg( msg ); end if;
  if parm not in ('INVENT','TARIFF')
   then
    if nvl(c3rec.tot,0) > 20 or lrange <> '*'
     then
      htp.tableopen( cattributes=>'cellspacing=2 cellpadding=2 border=0' );
      htp.tablerowopen;
       if nvl(tot_af,0) > 0 then htp.tabledata( htf.anchor( 'strangp.lov?surl=' || surl || '&call_name=&parm=' || replace(parm,' ','+') || '&lrange=AF','[A-F]'), cattributes=>'align="CENTER"'); end if;
       if nvl(tot_gm,0) > 0 then htp.tabledata( htf.anchor( 'strangp.lov?surl=' || surl || '&call_name=&parm=' || replace(parm,' ','+') || '&lrange=GM','[G-M]'), cattributes=>'align="CENTER"'); end if;
       if nvl(tot_nr,0) > 0 then htp.tabledata( htf.anchor( 'strangp.lov?surl=' || surl || '&call_name=&parm=' || replace(parm,' ','+') || '&lrange=NR','[N-R]'), cattributes=>'align="CENTER"'); end if;
       if nvl(tot_sz,0) > 0 then htp.tabledata( htf.anchor( 'strangp.lov?surl=' || surl || '&call_name=&parm=' || replace(parm,' ','+') || '&lrange=SZ','[S-Z]'), cattributes=>'align="CENTER"'); end if;
       if nvl(tot_09,0) > 0 then htp.tabledata( htf.anchor( 'strangp.lov?surl=' || surl || '&call_name=&parm=' || replace(parm,' ','+') || '&lrange=09','[0-9]'), cattributes=>'align="CENTER"'); end if;
      htp.tablerowclose;
      htp.tablerowopen;
       if nvl(tot_af,0) > 0 then htp.tabledata( to_char(tot_af), cattributes=>'align="CENTER"'); end if;
       if nvl(tot_gm,0) > 0 then htp.tabledata( to_char(tot_gm), cattributes=>'align="CENTER"'); end if;
       if nvl(tot_nr,0) > 0 then htp.tabledata( to_char(tot_nr), cattributes=>'align="CENTER"'); end if;
       if nvl(tot_sz,0) > 0 then htp.tabledata( to_char(tot_sz), cattributes=>'align="CENTER"'); end if;
       if nvl(tot_09,0) > 0 then htp.tabledata( to_char(tot_09), cattributes=>'align="CENTER"'); end if;
      htp.tablerowclose;
      htp.tableclose;
    end if;
  end if;
  htp.nl;
  htp.tableopen;
   htp.tablerowopen;
    htp.tabledata( 'Code', cattributes=>'valign="TOP" align="CENTER"'  );
    htp.tabledata( htf.formopen( 'strangp.lov' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'CALL_NAME', call_name ) || htf.formhidden( 'PARM', parm ) || htf.formhidden( 'LRANGE', low_val || high_val ) || htf.formtext( 'SRC', 10, 30, null ), cattributes=>'valign="TOP" align="CENTER"'  );
    htp.tabledata( 'Description', cattributes=>'valign="TOP" align="CENTER"'  );
    htp.tabledata( htf.formtext( 'SRC1', 40, 40, null ), cattributes=>'valign="TOP" align="CENTER"' );
    htp.tabledata( htf.formsubmit( null, LNGS.STR_TXT_003 ) || htf.formclose, cattributes=>'valign="TOP" align="CENTER"' );
   htp.tablerowclose;
  htp.tableclose;
  --htp.nl;
  htp.tableopen( cattributes=>'cellspacing=2 cellpadding=2 border=1' );
  if vaccess = 'EDIT'
   then
    htp.formopen( 'strangp.accept_lov' );
    htp.formhidden( 'SURL', surl );
    htp.formhidden( 'PARM', parm );
    htp.formhidden( 'SRC', src);
    htp.formhidden( 'SRC1', src1);
    /*
    htp.formhidden( 'p5d', NULL);
    htp.formhidden( 'p5e', NULL);
    htp.formhidden( 'p5f', NULL);
    htp.formhidden( 'P5G', NULL);
    htp.formhidden( 'P5H', NULL);
    htp.formhidden( 'P5I', NULL);
    htp.formhidden( 'P5J', NULL);
    */
    htp.formhidden( 'LRANGE', low_val || high_val );
  end if;
    htp.tablerowopen;
    -- Code
    if parm = 'INVENT'
     then
      htp.tabledata( LNGS.STR_TXT_004, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    elsif parm = 'TARIFF'
     then
      htp.tabledata( LNGS.STR_TXT_005, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    elsif parm = 'AU_TARIFF'
     then
      htp.tabledata( 'Australian Tariff', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
     else
      htp.tabledata( LNGS.STR_TXT_006, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    -- Description
    if parm in ('CONTROLS','GSTCODES','CTRTYPE','UNITS','INVCONTROLS','PACKTYPES','MOVEMENTS','LOCATIONS',
                'COUNTRIES','CONTRACTS','CURRENCY','DEBTOR_BRANCH','DEBTOR_CODE','JOB_BRANCH','PROFIT_CENTRE',
                'COST_CENTRE','WAREHOUSES', 'URGENCY','HAZARD_CLASS','SMP_PACKTYPES', 'TRUCKS','TRAILERS',
                'UNCUOTAB','UNDECTAB','UNMODTAB','UNCP1TAB','UNCMPTAB','UNCTYTAB','UNCAPTAB','UNREGTAB',
                'UNTODTAB','UNCURTAB','UNTR1TAB','UNTR2TAB','UNMOTTAB','UNLOCTAB','UNTOPTAB','UNSHDTAB',
                'UNBNKTAB','UNBRATAB','UNWHSTAB','UNTARTAB','UNPKGTAB','UNPRFTAB','UNCP4TAB',
                'UNCP3TAB','UNATDTAB','UNCTNTAB','UNINDTAB','UNSEATAB'
               )
     then
      htp.tabledata( LNGS.STR_TXT_007, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' ); -- Description
    elsif parm = 'INVENT'
     then
      htp.tabledata( LNGS.STR_TXT_007, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    elsif parm = 'UNRATTAB'
     then
      htp.tabledata( 'Exchange Rate', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    -- Cola
    if parm in ('TRUCKS')
     then
      htp.tabledata( 'TYPE', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;


    -- Cola
    if parm in ('COUNTRIES')
     then
      htp.tabledata( LNGS.STR_TXT_009, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    -- Cola
    if parm in ('UNCTNTAB')
     then
      htp.tabledata( LNGS.STR_TXT_009, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;


    -- Cola
    if parm in ('COST_CENTRE')
     then
      htp.tabledata( 'Transaction Type', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'GST Applicable', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;
        -- Cola
    if parm in ('SMP_PACKTYPES')
     then
      htp.tabledata( 'Package Group', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Weight (kg)', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    -- Cola
    if parm in ('CONTROLS')
     then
      htp.tabledata( LNGS.STR_TXT_328, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    -- Cola, Colb
    if parm in ('PACKTYPES')
     then
      htp.tabledata( 'OTML Type', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'UNPKGTAB Description', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    if parm in ('GSTCODES')
     then
      htp.tabledata( LNGS.STR_TXT_105, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( LNGS.STR_TXT_365, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    --  Description, Cola, Colb and Colc
    if parm = 'OPERATORS'
     then
      htp.tabledata( 'Surname', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'First Name', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Crew', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Operator Type', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;


    -- Colb and Colc
    if parm = 'CTRTYPE'
     then
      htp.tabledata( LNGS.STR_TXT_010, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( LNGS.STR_TXT_011, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( LNGS.STR_TXT_381, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    -- Colb and Colc/Coli
    if parm = 'INVENT'
     then
      htp.tabledata( 'PNG '||LNGS.STR_TXT_005, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' ); -- PNG Tariff
      htp.tabledata( 'AU '||LNGS.STR_TXT_005, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' ); -- AU Tariff
    end if;

    -- Description, cola, Colb and Colc,cold,cole

    if parm in ('LOCATIONS')
     then
      htp.tabledata( LNGS.STR_TXT_382, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( LNGS.STR_TXT_383, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Controlling Office', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Controlling Office Country', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Location Type', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    if parm in ('TRAILERS')
     then
      htp.tabledata( 'TANKER OR TRUCK(TRAILER)', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'WEIGHT CAPACITY (TONNE)', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'LITRES CAPACITY FOR TANKER', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'ADDITIONAL INFO', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'SAFE WORKING LOAD (SWL)', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;


    -- Description, cola, Colb and Colc
    if parm in ('TARIFF', 'AU_TARIFF')
     then
      htp.tabledata( 'Description', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Precision 1', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Precision 2', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( LNGS.STR_TXT_214, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( LNGS.STR_TXT_101, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( LNGS.STR_TXT_013, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( LNGS.STR_TXT_014, cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Excise Calc', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Charge', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Unit', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Single Charge', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;
--      htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );



-- UN CODES FOR SADS
    -- Cola
    if parm in ('UNREGTAB')
     then
      htp.tabledata( 'City Code', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;


    if parm in ('UNPKGTAB')
     then
      htp.tabledata( 'Bulk', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    -- Cola, Colb

    if parm in ('UNCP3TAB')
     then
      htp.tabledata( 'RUL_COD', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'CP3_AGR', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    if parm in ('UNPRFTAB')
     then
      htp.tabledata( 'RUL_COD', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'PRF_QUO', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

-- Cola, Colb, Colc
    if parm in ('UNRATTAB')
     then
      htp.tabledata( 'Valid From', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'Valid Until', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
 --     htp.tabledata( 'CUR_REF', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    if parm in ('UNMODTAB')
     then
      htp.tabledata( 'MOD_FLW', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'CUS_SER', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'ASS_SER', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    if parm in ('UNCAPTAB')
     then
      htp.tabledata( 'EEA_EOV', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'CAP_DSC', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'CAP_LIC', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

-- Cola, Colb, Colc, Cold
    if parm in ('UNCP4TAB')
     then
      htp.tabledata( 'CPR_COD', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'CPP_COD', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'SPE_TRA', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'GEN_TRA', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

-- Cola, Colb, Colc, Cold, Cole, Colf
    if parm in ('UNBNKTAB','UNWHSTAB','UNCUOTAB','UNDECTAB')
     then
      htp.tabledata( 'ADDRESS1', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'ADDRESS2', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'ADDRESS3', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'ADDRESS4', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'TELEPHONE', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'FAX', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

-- Cola, Colb, Colc, Cold, Cole, Colf, Colg

    if parm in ('UNBRATAB')
     then
      htp.tabledata( 'BRA_NAM', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'BRA_ADR', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'BRA_AD2', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'BRA_AD3', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'BRA_AD4', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'BRA_TEL', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'BRA_FAX', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

    if parm in ('UNCMPTAB')
     then
      htp.tabledata( 'CMP_ADR', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'CMP_AD2', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'CMP_AD3', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'CMP_AD4', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'CMP_TEL', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'CMP_FAX', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'CMP_TLX', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

-- Cola, Colb, Colc, Cold, Cole, Colf, Colg, Colh, Coli
    if parm in ('UNSHDTAB')
     then
      htp.tabledata( 'EEA_DOV', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'EEA_EOV', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'SHD_ADR', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'SHD_AD2', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'SHD_AD3', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'SHD_AD4', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'SHD_TEL', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'SHD_FAX', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
      htp.tabledata( 'SHD_PUB', cattributes=>glbx.QUERY_BACKGROUND || 'valign="CENTER" align="CENTER"' );
    end if;

   htp.tablerowclose;

  if accin = 'EDIT'
   then
  for c2rec in c2( parm, low_val, high_val, src, src1 ) loop
   p2_null := FALSE;
   p5d_null := TRUE; --htp.formhidden( 'p5d', null );
   p5e_null := TRUE; --htp.formhidden( 'p5e', null );
   p5f_null := TRUE; --htp.formhidden( 'p5f', null );
   p3_null := FALSE;
   p4_null := FALSE;
   p5_null := FALSE;
   p5g_null := TRUE; --htp.formhidden( 'P5g', null );
   p5h_null := TRUE; --htp.formhidden( 'P5h', null );
   p5i_null := TRUE; --htp.formhidden( 'P5i', null );
   p5j_null := TRUE; --htp.formhidden( 'P5j', null );
   htp.tablerowopen;
-- Code
   if vaccess = 'EDIT'
    then
    if parm in ('PROFIT_CENTRE')
     then
      htp.tabledata( htf.formhidden( 'P0', c2rec.code ) || htf.formtext( 'P1', 20, 20, c2rec.code ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
     else
      htp.tabledata( htf.formhidden( 'P0', c2rec.code ) || htf.formtext( 'P1', 30, 100, c2rec.code ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
    end if;
-- Description
      if parm in ('CONTROLS','GSTCODES','CTRTYPE','UNITS','INVCONTROLS','PACKTYPES','MOVEMENTS','LOCATIONS',
      'CONTRACTS','CURRENCY','DEBTOR_BRANCH','DEBTOR_CODE','JOB_BRANCH','COST_CENTRE','PROFIT_CENTRE','WAREHOUSES','URGENCY','HAZARD_CLASS','SMP_PACKTYPES',
                  'UNCUOTAB','UNDECTAB','UNMODTAB','UNCP1TAB','UNCMPTAB','UNCTYTAB','UNCAPTAB','UNREGTAB',
		  'UNTODTAB','UNCURTAB','UNTR1TAB','UNTR2TAB','UNMOTTAB','UNLOCTAB','UNTOPTAB','UNSHDTAB',
		  'UNBNKTAB','UNBRATAB','UNWHSTAB','UNRATTAB','UNTARTAB','UNPKGTAB','UNPRFTAB','UNCP4TAB',
		  'UNCP3TAB','UNATDTAB','UNCTNTAB','UNINDTAB','UNSEATAB','OPERATORS','TRAILERS','TRUCKS'
                  )
       then
        htp.tabledata( htf.formtext( 'P2', 30, 1000, replace(c2rec.description,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
      elsif parm in ('TARIFF', 'AU_TARIFF')
       then
        htp.tabledata( htf.formtext( 'p5d', 30, 100, replace(c2rec.cold,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
        htp.tabledata( htf.formtext( 'p5e', 3, 100, replace(c2rec.cole,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
        htp.tabledata( htf.formtext( 'p5f', 4, 100, replace(c2rec.colf,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
        htp.tabledata( htf.formtext( 'P2',  10, 100, replace(c2rec.description,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
        p5d_null := FALSE; --htp.formhidden( 'p5d', null );
        p5e_null := FALSE; --htp.formhidden( 'p5e', null );
        p5f_null := FALSE; --htp.formhidden( 'p5f', null );
      elsif parm in ('INVENT')
       then
        htp.tabledata( htf.formtext( 'P2', 90, 1000, replace(c2rec.description,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
      elsif parm in ('COUNTRIES')
       then
        htp.tabledata( htf.formtext( 'P2', 40, 1000, replace(c2rec.description,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       else
        p2_null := TRUE; --htp.formhidden( 'P2', null );
      end if;
-- Cola
      if parm in ('COST_CENTRE')
       then
        htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT">' );
        htp.formselectopen( 'P3' );
         htp.formselectoption( null );
         if c2rec.cola = 'S' then htp.formselectoption( 'S', 'SELECTED' ); else htp.formselectoption( 'S' ); end if;
         if c2rec.cola = 'C' then htp.formselectoption( 'C', 'SELECTED' ); else htp.formselectoption( 'C' ); end if;
        htp.formselectclose;
        htp.p( '</TD>' );
        htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT">' );
        htp.formselectopen( 'P4' );
         htp.formselectoption( null );
         if c2rec.colb = 'GST' then htp.formselectoption( 'GST', 'SELECTED' ); else htp.formselectoption( 'GST' ); end if;
         if c2rec.colb = 'NO_GST' then htp.formselectoption( 'NO_GST', 'SELECTED' ); else htp.formselectoption( 'NO_GST' ); end if;
        htp.formselectclose;
        htp.p( '</TD>' );

      elsif parm in ('GSTCODES','COUNTRIES','CTRTYPE','TARIFF','AU_TARIFF','INVENT','LOCATIONS','CONTROLS','PACKTYPES',
      		    'UNCTNTAB','UNCUOTAB','UNDECTAB','UNMODTAB','UNCMPTAB','UNCAPTAB','UNREGTAB','UNSHDTAB','UNBNKTAB','SMP_PACKTYPES',
                    'UNBRATAB','UNWHSTAB','UNRATTAB','UNTARTAB','UNPKGTAB','UNPRFTAB','UNCP4TAB','UNCP3TAB','OPERATORS','TRAILERS','TRUCKS'
      		    )
       then
        if parm = 'LOCATIONS'
         then
          htp.tabledata( htf.formtext( 'P3', 20, 100, replace(c2rec.cola,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
         elsif parm = 'PACKTYPES'
          then
          htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT">' );
          htp.formselectopen( 'P3' );
          if c2rec.cola is null or c2rec.cola = 'LC' then htp.formselectoption( 'LC', 'SELECTED' ); else htp.formselectoption( 'LC' ); end if;
          if c2rec.cola = 'CT' then htp.formselectoption( 'CT', 'SELECTED' ); else htp.formselectoption( 'CT' ); end if;
          htp.formselectclose;
          htp.p( '</TD>' );
         elsif parm in ( 'TARIFF', 'AU_TARIFF')
          then
            htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
	    lov_list( 'UNITS', 'P3', c2rec.cola, TRUE, FALSE, TRUE );
	    htp.p( '</TD>' );
         else
          htp.tabledata( htf.formtext( 'P3', 10, 100, replace(c2rec.cola,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
         end if;
      else
        p3_null := TRUE; --htp.formhidden( 'P3', null );
      end if;
-- Colb
      if parm in ('CTRTYPE','TARIFF','AU_TARIFF','GSTCODES','LOCATIONS','PACKTYPES',
                  'UNCUOTAB','UNDECTAB','UNMODTAB','UNCMPTAB','UNCAPTAB','UNSHDTAB','UNBNKTAB',
                  'UNBRATAB','UNWHSTAB','UNRATTAB','UNTARTAB','UNPRFTAB','UNCP4TAB','UNCP3TAB','OPERATORS','TRAILERS'
                  )
       then
        if parm = 'GSTCODES'
         then
          htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT">' );
          htp.formselectopen( 'P4' );
          if c2rec.colb is null or c2rec.colb = LNGS.STR_TXT_366 then htp.formselectoption( LNGS.STR_TXT_366, 'SELECTED' ); else htp.formselectoption( LNGS.STR_TXT_366 ); end if;
          if c2rec.colb = LNGS.STR_TXT_367 then htp.formselectoption( LNGS.STR_TXT_367, 'SELECTED' ); else htp.formselectoption( LNGS.STR_TXT_367 ); end if;
          if c2rec.colb = LNGS.STR_TXT_368 then htp.formselectoption( LNGS.STR_TXT_368, 'SELECTED' ); else htp.formselectoption( LNGS.STR_TXT_368 ); end if;
          htp.formselectclose;
          htp.p( '</TD>' );
         elsif parm = 'LOCATIONS'
          then
           htp.tabledata( htf.formtext( 'P4', 20, 100, replace(c2rec.colb,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
         elsif parm = 'PACKTYPES'
          then
	     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
	     lov_list( 'UNPKGTAB', 'P4', c2rec.colb, TRUE, TRUE, FALSE );
	     htp.p( '</TD>' );
--           htp.tabledata( htf.formtext( 'P4', 20, 100, replace(c2rec.colb,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
         else
          htp.tabledata( htf.formtext( 'P4', 10, 100, replace(c2rec.colb,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
        end if;
       else
        p4_null := TRUE; --htp.formhidden( 'P4', null );
      end if;
-- Colc

      if parm IN ( 'TARIFF', 'AU_TARIFF')
       then
          htp.tabledata( htf.formtext( 'P5', 10, 100, replace(c2rec.colc,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
--
          htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT">' );
          htp.formselectopen( 'P5g' );
          if c2rec.colg is null or c2rec.colg = 'NONE' then htp.formselectoption( 'NONE', 'SELECTED' ); else htp.formselectoption( 'NONE' ); end if;
          if c2rec.colg = 'BOTH' then htp.formselectoption( 'BOTH', 'SELECTED' ); else htp.formselectoption( 'BOTH' ); end if;
          if c2rec.colg = 'HIGHER' then htp.formselectoption( 'HIGHER', 'SELECTED' ); else htp.formselectoption( 'HIGHER' ); end if;
          if c2rec.colg = 'LOWER' then htp.formselectoption( 'LOWER', 'SELECTED' ); else htp.formselectoption( 'LOWER' ); end if;
          htp.formselectclose;
          htp.p( '</TD>' );
          htp.tabledata( htf.formtext( 'P5h', 10, 100, replace(c2rec.colh,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
	  htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
	  lov_list( 'UNITS', 'P5i', c2rec.coli, FALSE, FALSE, TRUE );
	  htp.p( '</TD>' );
          htp.tabledata( htf.formtext( 'P5j', 10, 100, replace(c2rec.colj,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
          p5g_null := FALSE; --htp.formhidden( 'P5g', null );
          p5h_null := FALSE; --htp.formhidden( 'P5h', null );
          p5i_null := FALSE; --htp.formhidden( 'P5i', null );
          p5j_null := FALSE; --htp.formhidden( 'P5j', null );
       elsif parm in ('CTRTYPE','UNCUOTAB','UNDECTAB','UNMODTAB','UNCMPTAB','UNCAPTAB','UNSHDTAB','UNBNKTAB',
                      'UNBRATAB','UNWHSTAB','UNTARTAB','UNCP4TAB','LOCATIONS','OPERATORS','TRAILERS'
                      )
        then
          htp.tabledata( htf.formtext( 'P5', 10, 100, replace(c2rec.colc,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );

       else
        p5_null := TRUE; --htp.formhidden( 'P5', null );
      end if;
-- Cold
      if parm in ('UNCUOTAB','UNDECTAB','UNCMPTAB','UNSHDTAB','UNBNKTAB',
                  'UNBRATAB','UNWHSTAB','UNTARTAB','UNCP4TAB','LOCATIONS','TRAILERS','SMP_PACKTYPES'
                 )
      then
          htp.tabledata( htf.formtext( 'p5d', 10, 100, replace(c2rec.cold,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       else
        p5d_null := TRUE; --htp.formhidden( 'p5d', null );
      end if;
-- Cole & Colf
      if parm in ('UNCUOTAB','UNDECTAB','UNCMPTAB','UNSHDTAB','UNBNKTAB',
                  'UNBRATAB','UNWHSTAB','UNTARTAB','LOCATIONS','TRAILERS'
                 )
      then
        if parm in ('LOCATIONS','TRAILERS')
         then
          htp.tabledata( htf.formtext( 'p5e', 10, 100, replace(c2rec.cole,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
          p5f_null := TRUE; --htp.formhidden( 'p5f', null );
         else
          htp.tabledata( htf.formtext( 'p5e', 10, 100, replace(c2rec.cole,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
          htp.tabledata( htf.formtext( 'p5f', 10, 100, replace(c2rec.colf,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
         end if;
       else
        p5e_null := TRUE; --htp.formhidden( 'p5e', null );
        p5f_null := TRUE; --htp.formhidden( 'p5f', null );
      end if;
-- Colg
      if parm in ('UNCMPTAB','UNSHDTAB','UNBRATAB')
      then
          htp.tabledata( htf.formtext( 'P5g', 10, 100, replace(c2rec.colg,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       else
        p5g_null := TRUE; --htp.formhidden( 'P5g', null );
      end if;
-- Colh & Coli
      if parm = 'INVENT'
      then
          htp.tabledata( htf.formtext( 'P5i', 10, 100, replace(c2rec.coli,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       else
          p5i_null := TRUE; --htp.formhidden( 'P5i', null );
      end if;
      if parm = 'UNSHDTAB'
      then
          htp.tabledata( htf.formtext( 'P5h', 10, 100, replace(c2rec.colh,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
          htp.tabledata( htf.formtext( 'P5i', 10, 100, replace(c2rec.coli,'"','&#34;') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       else
        p5h_null := TRUE; --htp.formhidden( 'P5h', null );
        p5i_null := TRUE; --htp.formhidden( 'P5i', null );
      end if;
      if parm = 'UNRATTAB'
      then
        htp.formhidden( 'P5J', c2rec.colj);
		htp.formhidden( 'P5I', c2rec.rowid);
      end if;
-- >>>
      if candel
       then
        if parm in ('UNRATTAB')
		 then
 		  htp.tabledata( htf.anchor( 'strangp.accept_lov?surl=' || surl || '&parm=' || replace(parm,' ','+') || '&src=' || replace(src,' ','+') || '&src1=' || replace(src1,' ','+') || '&lrange=' || low_val || high_val ||
                                   '&action=' || LNGS.STR_TXT_151 || '&p0=' || replace(c2rec.code,' ','+') || '&p1=&p2=&p5d=&p5e=&p5f=&p3=' || replace(c2rec.cola,' ','+') || '&p4=&p5=&p5g=&p5h=&p5i=' || replace(c2rec.rowid,'+','~') || '&p5j=', LNGS.STR_TXT_151 ) );
		else
		  htp.tabledata( htf.anchor( 'strangp.accept_lov?surl=' || surl || '&parm=' || replace(parm,' ','+') || '&src=' || replace(src,' ','+') || '&src1=' || replace(src1,' ','+') || '&lrange=' || low_val || high_val ||
                                   '&action=' || LNGS.STR_TXT_151 || '&p0=' || replace(c2rec.code,' ','+') || '&p1=&p2=&p5d=&p5e=&p5f=&p3=' || replace(c2rec.cola,' ','+') || '&p4=&p5=&p5g=&p5h=&p5i=&p5j=', LNGS.STR_TXT_151 ) );
        end if;
	  end if;
    else
     htp.tabledata( htf.bold( c2rec.code ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
     htp.tabledata( htf.bold( c2rec.description ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
     htp.tabledata( htf.bold( c2rec.cola ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
     htp.tabledata( htf.bold( c2rec.colb ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
     htp.tabledata( htf.bold( c2rec.colc ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
    end if;

    -- Put here to try and get around an IE6 issue of displaying blank lines when using Formhidden
    if parm in ('COST_CENTRE') then p3_null := FALSE; p4_null := FALSE; end if;
    if parm in ('UNRATTAB') then p2_null := FALSE; p3_null := FALSE; p4_null := FALSE; p5_null := FALSE; end if;

    if p2_null or p3_null or p4_null or p5_null
     then
      htp.p('<TD>' );
      if p2_null then htp.formhidden( 'P2', null ); end if;
      if p5d_null then htp.formhidden( 'p5d', null ); end if;
      if p5e_null then htp.formhidden( 'p5e', null ); end if;
      if p5f_null then htp.formhidden( 'p5f', null ); end if;
      if p3_null then htp.formhidden( 'P3', null ); end if;
      if p4_null then htp.formhidden( 'P4', null ); end if;
      if p5_null then htp.formhidden( 'P5', null ); end if;
      if p5g_null then htp.formhidden( 'P5g', null ); end if;
      if p5h_null then htp.formhidden( 'P5h', null ); end if;
      if p5i_null then htp.formhidden( 'P5i', null ); end if;
      if p5j_null then htp.formhidden( 'P5j', null ); end if;
      htp.p( '&nbsp;' );
      htp.p( '</TD>' );
    end if;

   htp.tablerowclose;
   end loop;
  end if;

  if vaccess = 'EDIT' and accin = 'INSERT'
   then
    for j in 1..5 loop
     htp.tablerowopen;
    if parm in ('PROFIT_CENTRE')
     then
      htp.tabledata( htf.formhidden( 'P0', null ) || htf.formtext( 'P1', 20, 20, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
     else
      htp.tabledata( htf.formhidden( 'P0', null ) || htf.formtext( 'P1', 30, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
    end if;

      if parm in ('CONTROLS','GSTCODES','CTRTYPE','UNITS','INVCONTROLS','PACKTYPES','MOVEMENTS','LOCATIONS','CONTRACTS','CURRENCY','DEBTOR_BRANCH',
                  'DEBTOR_CODE','JOB_BRANCH','COST_CENTRE','PROFIT_CENTRE','WAREHOUSES', 'URGENCY', 'UNRATTAB','OPERATORS','TRUCKS','TRAILERS')
       then
        htp.tabledata( htf.formtext( 'P2', 30, 1000, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
      elsif parm in ('TARIFF', 'AU_TARIFF')
       then
       htp.tabledata( htf.formtext( 'p5d', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'p5e', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'p5f', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
        htp.tabledata( htf.formtext( 'P2', 10, 1000, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
      elsif parm in ('INVENT')
       then
        htp.tabledata( htf.formtext( 'P2', 90, 1000, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
      elsif parm in ('COUNTRIES')
       then
        htp.tabledata( htf.formtext( 'P2', 40, 1000, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       else
        htp.formhidden( 'P2', null );
      end if;

      if parm in ('COST_CENTRE')
       then
        htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT">' );
        htp.formselectopen( 'P3' );
         htp.formselectoption( null, 'SELECTED' );
          htp.formselectoption( 'S' );
          htp.formselectoption( 'C' );
        htp.formselectclose;
        htp.p( '</TD>' );
        htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT">' );
        htp.formselectopen( 'P4' );
         htp.formselectoption( null, 'SELECTED' );
         htp.formselectoption( 'GST' );
         htp.formselectoption( 'NO_GST' );
        htp.formselectclose;
        htp.p( '</TD>' );

      elsif parm in ('GSTCODES','COUNTRIES','CTRTYPE','TARIFF','AU_TARIFF', 'INVENT','LOCATIONS','CONTROLS','OPERATORS','TRUCKS','TRAILERS')
       then
        htp.tabledata( htf.formtext( 'P3', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       else
        if parm in('UNRATTAB') then null; else htp.formhidden( 'P3', null ); end if;
      end if;
     if parm in ('CTRTYPE','TARIFF','AU_TARIFF', 'GSTCODES','LOCATIONS','OPERATORS','TRAILERS')
      then
       htp.tabledata( htf.formtext( 'P4', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       else
        if parm in('COST_CENTRE','UNRATTAB') then null; else htp.formhidden( 'P4', null ); end if;
      end if;
     if parm in ('UNRATTAB')
      then
       htp.tabledata( htf.formtext( 'P3', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'P4', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       v_row := null;
       open c5(parm);
        fetch c5 into c5rec;
        v_row := c5rec.colj;
       close c5;
 --      -- find max value colj for UNRATTAB
 --      -- select max(to_number(colj) into v_row from lov where lov_name = 'UNRATTAB';
 --      -- nvl(0);
 --
       v_row := nvl(v_row, 0) + j;
       htp.formhidden( 'P5J', v_row );
     end if;
     if parm in ('TARIFF', 'AU_TARIFF')
      then
       htp.tabledata( htf.formtext( 'P5', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'P5G', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'P5H', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'P5I', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'P5J', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
     elsif parm in ('INVENT')
      then 
       htp.tabledata( htf.formtext( 'P5I', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
      elsif parm in ('CTRTYPE')
      then
       htp.tabledata( htf.formtext( 'P5', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'p5d', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'p5e', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'p5f', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'P5G', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'P5H', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'P5I', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'P5J', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
      elsif parm in ('LOCATIONS')
      then
          htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT">' );
          htp.formselectopen( 'P5' );
          htp.formselectoption( null, 'SELECTED' );
          htp.formselectoption( 'BRISBANE' );
          htp.formselectoption( 'KIUNGA' );
          htp.formselectoption( 'MOTUKEA' );
          htp.formselectoption( 'TABUBIL' );
        htp.formselectclose;
        htp.p( '</TD>' );
        htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT">' );
        htp.formselectopen( 'p5d' );
         htp.formselectoption( null, 'SELECTED' );
          htp.formselectoption( 'AU' );
          htp.formselectoption( 'PG' );
        htp.formselectclose;
        htp.p( '</TD>' );
        htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT">' );
        htp.formselectopen( 'p5e' );
         htp.formselectoption( null, 'SELECTED' );
         htp.formselectoption( 'LOCATION' );
         htp.formselectoption( 'WAREHOUSE' );
        htp.formselectclose;
        htp.p( '</TD>' );

      elsif parm in ('OPERATORS')
      then
       htp.tabledata( htf.formtext( 'P5', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );

      elsif parm in ('TRAILERS')
      then
       htp.tabledata( htf.formtext( 'P5', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'p5d', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );
       htp.tabledata( htf.formtext( 'p5e', 10, 100, null ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'valign="CENTER" align="LEFT"' );

       elsif parm not in ('UNRATTAB','CTRTYPE','TARIFF','AU_TARIFF', 'LOCATIONS','OPERATORS','TRAILERS')
        then
        htp.formhidden( 'P5', null );
      end if;

    htp.tablerowclose;
    end loop;
  end if;

  htp.tableclose;
  htp.nl;
  if vaccess = 'EDIT'
   then
    htp.formhidden( 'P0', null );
    htp.formhidden( 'P1', null );
    htp.formhidden( 'P2', null );
    htp.formhidden( 'p5d', null );
    htp.formhidden( 'p5e', null );
    htp.formhidden( 'p5f', null );
    htp.formhidden( 'P3', null );
    htp.formhidden( 'P4', null );
    htp.formhidden( 'P5', null );
    htp.formhidden( 'P5g', null );
    htp.formhidden( 'P5h', null );
    htp.formhidden( 'P5i', null );
    htp.formhidden( 'P5j', null );
    if accin = 'INSERT'
     then
       htp.formsubmit( 'ACTION', LNGS.STR_TXT_357 );
     else
       htp.formsubmit( 'ACTION', LNGS.STR_TXT_358 );
       htp.formsubmit( 'ACTION', LNGS.STR_TXT_357 );
    end if;
    htp.formsubmit( 'ACTION', LNGS.STR_TXT_016 );
   htp.formclose;
  end if;
  htp.p( '</CENTER>' );
  htp.htmlclose;

exception when others then
 glbx.error_details( 'STRANGP', 'LOV',c1rec.pid,c1rec.aid,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end lov;

procedure accept_lov( surl in varchar2, parm in varchar2, lrange in varchar2, action in varchar2, src in varchar2,
                      p0 in GLBX.MYARRAY default strangp.empty_array, p1 in GLBX.MYARRAY default strangp.empty_array,
                      p2 in GLBX.MYARRAY default strangp.empty_array, p3 in GLBX.MYARRAY default strangp.empty_array,
                      p4 in GLBX.MYARRAY default strangp.empty_array, p5 in GLBX.MYARRAY default strangp.empty_array,
                      p5d in GLBX.MYARRAY default strangp.empty_array,p5e in GLBX.MYARRAY default strangp.empty_array,
                      p5f in GLBX.MYARRAY default strangp.empty_array, p5g in GLBX.MYARRAY default strangp.empty_array,
                      p5h in GLBX.MYARRAY default strangp.empty_array, p5i in GLBX.MYARRAY default strangp.empty_array,
                      p5j in GLBX.MYARRAY default strangp.empty_array, src1 in varchar2 default null )
as

 cursor c1( lname varchar2, cd varchar2 ) is select 'x' from strang.lov where lov_name = lname and code = cd;
 cursor c1a( lname varchar2, cd varchar2, ca varchar2 ) is select 'x' from strang.lov where lov_name = lname and code = cd and cola = ca;
 cursor c2( inv varchar2 ) is select recno from strang.pos where inventoryno = inv;
 cursor c3( tarf varchar2 ) is select 'x' from strang.lov where lov_name = 'TARIFF' and code = tarf;
 cursor c4(lname varchar2, lcode varchar2, f_date varchar2, t_date varchar2, rid rowid) is
  select *
  from   strang.lov
  where  lov_name = lname
         and code = upper(lcode)
         and rowid <> rid
         and ( ( to_date(f_date) >= to_date(cola) and to_date(f_date) <= to_date(colb))
              or
               (to_date(t_date) >= to_date(cola) and to_date(t_date) <= to_date(colb))
             )
  ;
 cursor c5( tarf varchar2 ) is select 'x' from strang.lov where lov_name = 'AU_TARIFF' and code = tarf;

 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c5rec		c5%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 dummy		char(1);
 msg		varchar2(1000);
 nctr		integer;
 uctr		integer;
 dctr		integer;
 v_from         varchar2(100);
 v_to           varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_LOV' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  for j in p0.first..p0.last loop
  nctr := 0;
  uctr := 0;
  dctr := 0;
  if p0(j) is null and p1(j) is not null
   then
    -- New Record
    if parm <> 'CONTROLS'
     then
      if parm = 'UNRATTAB'
      then
      /*
      open c1a( parm, upper(p1(j)), upper(p3(j)) );
      fetch c1a into dummy;
      if c1a%FOUND
       then
        close c1a;
        commit;
        lov(surl,null,parm,lrange,src,LNGS.STR_TXT_017 || ':' || upper(p1(j)) ||  ' Date: '|| ':' || upper(p3(j)) || ' ' || 'Currency Period Already Exists',src1=>src1);
        return;
       else
        close c1a;
      end if;
      */
      null;
      else
      open c1( parm, upper(p1(j)) );
      fetch c1 into dummy;
      if c1%FOUND
       then
        close c1;
        commit;
        lov(surl,null,parm,lrange,src,LNGS.STR_TXT_017 || ':' || upper(p1(j)) || ' ' || LNGS.STR_TXT_018,src1=>src1);
        return;
       else
        close c1;
      end if;
     end if;
    end if;
    if parm = 'INVENT' and p3(j) is not null
     then
      open c3(p3(j));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        lov(surl,null,parm,lrange,src,LNGS.STR_TXT_346 || ':' || p3(j),src1=>src1);
        return;
      end if;
      close c3;
    end if;
    if parm = 'INVENT' and P5i(j) is not null   -- DAVID BANJO
     then   
      open c5(P5i(j));
      fetch c5 into c5rec;
      if c5%NOTFOUND
       then
        close c5;
        lov(surl,null,parm,lrange,src,'AU Tariff code does not exist in AU Tariff Table'|| ':' || P5i(j),src1=>src1);
        return;
    end if;
      close c5;
    end if;

    if parm = 'LOCATIONS' and ((p5(j) is null) or (p5d(j) is null) or (p5e(j) is null))
     then
        lov(surl,null,parm,lrange,src,'All fields required',src1=>src1);
        return;
    end if;

    if parm = 'TARIFF' and (p2(j) is null or p4(j) is null or p5(j) is null)
     then
      commit;
      lov(surl,null,parm,lrange,src,LNGS.STR_TXT_345,src1=>src1);
      return;
     elsif parm = 'TARIFF' and glbx.guess_number(p2(j)) is null
      then
       lov(surl,null,parm,lrange,src,'Tariff ' || p1(j) || ': Rate is non-numeric',src1=>src1);
       return;
     elsif parm = 'TARIFF' and glbx.guess_number(p4(j)) is null
      then
       lov(surl,null,parm,lrange,src,'Tariff ' || p1(j) || ': Old Rate is non-numeric',src1=>src1);
       return;
     elsif parm = 'TARIFF' and glbx.guess_number(p5(j)) is null
      then
       lov(surl,null,parm,lrange,src,'Tariff ' || p1(j) || ': Excise is non-numeric',src1=>src1);
       return;
     elsif parm = 'AU_TARIFF' and (p2(j) is null or p4(j) is null or p5(j) is null) -- ADDED BY David Banjo 31/10/2022
     then
      commit;
      lov(surl,null,parm,lrange,src,'For Australian Tariff, values must exist for Rate, Old Rate and Excise',src1=>src1);
      return;
     elsif parm = 'AU_TARIFF' and glbx.guess_number(p2(j)) is null
      then
       lov(surl,null,parm,lrange,src,'Australian Tariff ' || p1(j) || ': Rate is non-numeric',src1=>src1);
       return;
     elsif parm = 'AU_TARIFF' and glbx.guess_number(p4(j)) is null
      then
       lov(surl,null,parm,lrange,src,'Australian Tariff ' || p1(j) || ': Old Rate is non-numeric',src1=>src1);
       return;
     elsif parm = 'AU_TARIFF' and glbx.guess_number(p5(j)) is null
      then
       lov(surl,null,parm,lrange,src,'Australian Tariff ' || p1(j) || ': Excise is non-numeric',src1=>src1);
       return;
     else
      if parm = 'COST_CENTRE' and p3(j) is null
       then
        lov(surl,null,parm,lrange,src,'Must Specify a Transaction Type',src1=>src1);
        return;
       elsif
         parm IN  ('TARIFF','AU_TARIFF')
         then
        insert into strang.lov(lov_name,code,description,cola,colb,colc,cold,cole,colf,colg,colh,coli,colj) values
        (parm,upper(p1(j)),p2(j),p3(j),p4(j),p5(j),p5d(j),p5e(j),p5f(j),p5g(j),p5h(j),p5i(j),p5j(j));

--       elsif
--         parm = 'AU_TARIFF'
--         then
--        insert into strang.lov(lov_name,code,description,cola,colb,colc,cold,cole,colf,colg,colh,coli,colj) values
--        (parm,upper(p1(j)),p2(j),p3(j),p4(j),p5(j),p5d(j),p5e(j),p5f(j),p5g(j),p5h(j),p5i(j),p5j(j));
       elsif
         parm = 'LOCATIONS'
         then
        insert into strang.lov(lov_name,code,description,cola,colb,colc,cold,cole) values
        (parm,upper(p1(j)),p2(j),p3(j),p4(j),p5(j),p5d(j),p5e(j));

       elsif
         parm = 'TRAILERS'
         then
        insert into strang.lov(lov_name,code,description,cola,colb,colc,cold,cole) values
        (parm,upper(p1(j)),p2(j),p3(j),p4(j),p5(j),p5d(j),p5e(j));
       elsif
         parm = 'INVENT'
         then
        insert into strang.lov(lov_name,code,description,cola,colb,colc, coli) values (parm,upper(p1(j)),p2(j),upper(p3(j)),upper(p4(j)),p5(j),p5i(j)  );

       else
        insert into strang.lov(lov_name,code,description,cola,colb,colc) values (parm,upper(p1(j)),p2(j),upper(p3(j)),upper(p4(j)),p5(j));
     end if;
    end if;
    nctr := nctr + 1;

  elsif (p0(j) is not null and p1(j) is null) or (action = LNGS.STR_TXT_151)
   then
    -- Delete LOV
    -- If Invent check does not delete in PO
    if parm = 'INVENT'
     then
      open c2(p0(j));
      fetch c2 into c2rec;
      if c2%FOUND
       then
        close c2;
        commit;
        lov(surl,null,parm,lrange,src,LNGS.STR_TXT_019 || ':' || upper(p0(j)) || ' ' || ' ' || LNGS.STR_TXT_020 || ' (Recno ' || c2rec.recno || ' ).',src1=>src1);
        return;
      end if;
      close c2;
      delete from strang.lov where lov_name = parm and code = p0(j) and nvl(cola,'!') = nvl(p3(j),'!');
     else
      delete from strang.lov where lov_name = parm and code = p0(j) and nvl(cola,'!') = nvl(p3(j),'!');
    end if;
    dctr := dctr + 1;
    -- Cascade Delete

  elsif p0(j) is not null and p1(j) is not null and p0(j) <> upper(p1(j))
   then
    -- Update Primary Key
    if parm <> 'CONTROLS'
     then
      open c1( parm, upper(p1(j)) );
      fetch c1 into dummy;
      if c1%FOUND
       then
        close c1;
        commit;
        lov(surl,null,parm,lrange,src,LNGS.STR_TXT_017 || ':' || upper(p1(j)) || ' ' || LNGS.STR_TXT_018,src1=>src1);
        return;
       else
        close c1;
      end if;
    end if;
    if parm = 'INVENT' and p3(j) is not null
     then
      open c3(p3(j));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        lov(surl,null,parm,lrange,src,LNGS.STR_TXT_346 || ':' || p3(j),src1=>src1);
        return;
      end if;
      close c3;
    end if;
    if parm = 'INVENT' and P5i(j) is not null   -- DAVID BANJO
     then
      open c5(P5i(j));
      fetch c5 into c5rec;
      if c5%NOTFOUND
       then
        close c5;
        lov(surl,null,parm,lrange,src,'AU Tariff code does not exist in AU Tariff Table'|| ':' || P5i(j),src1=>src1);
        return;
      end if;
      close c5;
    end if;
    if parm IN ( 'TARIFF', 'AU_TARIFF') and (p2(j) is null or p4(j) is null or p5(j) is null)
     then
      commit;
      lov(surl,null,parm,lrange,src,LNGS.STR_TXT_345,src1=>src1);
      return;
    elsif parm IN ( 'TARIFF', 'AU_TARIFF') and glbx.guess_number(p2(j)) is null
     then
      lov(surl,null,parm,lrange,src,'Tariff ' || p1(j) || ': Rate is non-numeric',src1=>src1);
      return;
    elsif parm IN ( 'TARIFF', 'AU_TARIFF') and glbx.guess_number(p4(j)) is null
     then
      lov(surl,null,parm,lrange,src,'Tariff ' || p1(j) || ': Old Rate is non-numeric',src1=>src1);
      return;
    elsif parm IN ( 'TARIFF', 'AU_TARIFF') and glbx.guess_number(p5(j)) is null
     then
      lov(surl,null,parm,lrange,src,'Tariff ' || p1(j) || ': Excise is non-numeric',src1=>src1);
      return;
    end if;
    if parm = 'CONTROLS'
     then
      update strang.lov
       set
        code = upper(p1(j)),
        description = p2(j),
        cola = p3(j),
        colb = p4(j),
        colc = p5(j)
      where
       lov_name = parm and
       code = p0(j) and
       nvl(cola,'!') = nvl(p3(j),'!');

     elsif parm = 'LOCATIONS'
      then
       update strang.lov
        set
        code = upper(p1(j)),
        description = p2(j),
        cola = p3(j),
        colb = p4(j),
        colc = p5(j),
        cold = p5d(j),
        cole = p5e(j)
      where
       lov_name = parm and
       code = p0(j);

     elsif parm = 'TRAILERS'
      then
       update strang.lov
        set
        code = upper(p1(j)),
        description = p2(j),
        cola = p3(j),
        colb = p4(j),
        colc = p5(j),
        cold = p5d(j),
        cole = p5e(j)
      where
       lov_name = parm and
       code = p0(j);

     elsif parm in ( 'TARIFF', 'AU_TARIFF')
      then
       update strang.lov
        set
        code = upper(p1(j)),
        description = p2(j),
        cola = p3(j),
        colb = p4(j),
        colc = p5(j),
        cold = p5d(j),
        cole = p5e(j),
        colf = p5f(j),
        colg = p5g(j),
        colh = p5h(j),
        coli = p5i(j),
        colj = p5j(j)
      where
       lov_name = parm and
       code = p0(j);
     elsif parm = 'UNRATTAB'
      then
       update strang.lov
        set
        code = upper(p1(j))
      , description = p2(j)
      , cola = upper(p3(j))
      , colb = upper(p4(j))
      -- , colc = p5(j)
      where
       rowid = p5i(j)
       /*
       lov_name = parm and
       code = p0(j) and
       colj = p5j(j)
       */
       ;
     elsif parm = 'INVENT'
       then
        update strang.lov
         set
        code = upper(p1(j)),
        description = p2(j),
        cola = p3(j),
        colb = p4(j),
        colc = p5(j),
        coli = p5i(j)
       where
        lov_name = parm and
        code = p0(j);    
     else
       update strang.lov
        set
        code = upper(p1(j)),
        description = p2(j),
        cola = p3(j),
        colb = p4(j),
        colc = p5(j)
      where
       lov_name = parm and
       code = p0(j);
    end if;
    if parm = 'COST_CENTRE'
     then
      update strang.lov
       set
        cola = upper(p3(j)),
        colb = p4(j)
      where
       lov_name = parm and
       code = p0(j);
      if upper(p3(j)) not in ('S','C') and parm = 'COST_CENTRE'
       then
        update strang.lov
         set
          cola = 'S'
        where
         lov_name = parm and
         code = p0(j);
      end if;
      if upper(p4(j)) not in ('GST','NO_GST') and parm = 'COST_CENTRE'
       then
        update strang.lov
         set
          colb = 'GST'
        where
         lov_name = parm and
         code = p0(j);
      end if;
    end if;

    uctr := uctr + 1;
  elsif p0(j) is null and p1(j) is null
   then
    -- Do Nothing
    null;
  else
    -- Update Values
    if parm = 'INVENT' and p3(j) is not null
     then
      open c3(p3(j));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        lov(surl,null,parm,lrange,src,LNGS.STR_TXT_346 || ':' || p3(j),src1=>src1);
        return;
      end if;
      close c3;
    end if;
    -- Added by David Banjo 31/10/2022
     if parm = 'INVENT' and P5i(j) is not null   -- DAVID BANJO
     then   
      open c5(P5i(j));
      fetch c5 into c5rec;
      if c5%NOTFOUND
       then
        close c5;
        lov(surl,null,parm,lrange,src,'AU Tariff code does not exist in AU Tariff Table'|| ':' || P5i(j),src1=>src1);
        return;
      end if;
      close c5;
    end if;
    if parm IN ( 'TARIFF', 'AU_TARIFF') and (p2(j) is null or p4(j) is null or p5(j) is null)
     then
      commit;
      lov(surl,null,parm,lrange,src,LNGS.STR_TXT_345,src1=>src1);
      return;
    elsif parm IN ( 'TARIFF', 'AU_TARIFF') and glbx.guess_number(p2(j)) is null
     then
      lov(surl,null,parm,lrange,src,'Tariff ' || p1(j) || ': Rate is non-numeric',src1=>src1);
      return;
    elsif parm IN ( 'TARIFF', 'AU_TARIFF') and glbx.guess_number(p4(j)) is null
     then
      lov(surl,null,parm,lrange,src,'Tariff ' || p1(j) || ': Old Rate is non-numeric',src1=>src1);
      return;
    elsif parm IN ( 'TARIFF', 'AU_TARIFF') and glbx.guess_number(p5(j)) is null
     then
      lov(surl,null,parm,lrange,src,'Tariff ' || p1(j) || ': Excise is non-numeric',src1=>src1);
      return;
    end if;
    if parm = 'CONTROLS'
     then
      update strang.lov
       set
        description = p2(j),
        cola = p3(j),
        colb = p4(j),
        colc = p5(j)
      where
       lov_name = parm and
       code = p0(j) and
       nvl(cola,'!') = nvl(p3(j),'!');
      elsif parm = 'TARIFF'
       then
        update strang.lov
         set
         description = p2(j),
         cola = p3(j),
         colb = p4(j),
         colc = p5(j),
         cold = p5d(j),
         cole = p5e(j),
         colf = p5f(j),
         colg = p5g(j),
         colh = p5h(j),
         coli = p5i(j),
         colj = p5j(j)
       where
        lov_name = parm and
        code = p0(j);
      elsif parm = 'LOCATIONS'
       then
        update strang.lov
         set
         description = p2(j),
         cola = p3(j),
         colb = p4(j),
         colc = p5(j),
         cold = p5d(j),
         cole = p5e(j)
       where
        lov_name = parm and
        code = p0(j);

      elsif parm = 'TRAILERS'
       then
        update strang.lov
         set
         description = p2(j),
         cola = p3(j),
         colb = p4(j),
         colc = p5(j),
         cold = p5d(j),
         cole = p5e(j)
       where
        lov_name = parm and
        code = p0(j);

      elsif parm = 'UNRATTAB'
       then
        -- Validate 'From' date
        v_from := websys.glbx.guess_date(p3(j));
        if v_from is null
         then
          lov(surl,null,parm,lrange,src,'[' || p1(j) || ' - ' || p2(j) || '] Invalid FROM date: ' || p3(j),src1=>src1);
          return;
        end if;
        -- Validate 'To' date
        v_to := websys.glbx.guess_date(nvl(p4(j), to_char(sysdate,'DD-MON-YYYY')));
        if v_to is null
         then
          lov(surl,null,parm,lrange,src,'[' || p1(j) || ' - ' || p2(j) || '] Invalid TO date: ' || p4(j),src1=>src1);
          return;
        end if;
        if to_date(v_from) > to_date(v_to)
         then
          lov(surl,null,parm,lrange,src,'[' || p1(j) || ' - ' || p2(j) || '] FROM date is after TO date: ' || v_from || ' - ' || v_to,src1=>src1);
          return;
        end if;

        -- Check for overlapping dates for same code
        open c4('UNRATTAB',p1(j), p3(j), p4(j), p5i(j));
        fetch c4 into c4rec;
        if c4%FOUND
         then
          close c4;
          lov(surl,null,parm,lrange,src,'[' || p1(j) || ' - ' || p2(j) || '] Dates conflict with [' || c4rec.code || ']: ' || c4rec.cola || ' - ' || c4rec.colb,src1=>src1);
          return;
        end if;
        close c4;

        update strang.lov
         set
         code = upper(p1(j))
       , description = p2(j)
       , cola = upper(p3(j))
       , colb = upper(p4(j))
       where
        rowid = p5i(j)
        ;
    elsif parm = 'INVENT'
       then
        update strang.lov
         set
        description = p2(j),
        cola = upper(p3(j)),
        colb = upper(p4(j)),
        colc = p5(j),
        coli = p5i(j)
       where
        lov_name = parm and
        code = p0(j);    
      else
      update strang.lov
       set
        description = p2(j),
        cola = upper(p3(j)),
        colb = upper(p4(j)),
        colc = p5(j)
      where
       lov_name = parm and
       code = p0(j);
    end if;
    uctr := uctr + 1;
   end if;
  end loop;

  commit;

  if nctr > 0
   then
    msg := nctr || ' ' || ' ' || LNGS.STR_TXT_021;
  elsif uctr > 0
   then
    msg := uctr || ' ' || ' ' || LNGS.STR_TXT_022;
  end if;

  if action = LNGS.STR_TXT_016
   then
    oltp.display_screen(surl=>surl,sname=>'Administration',rnd=>to_char(sysdate,'SSSSS'),access_in=>NULL,rid=>NULL);
   elsif action = LNGS.STR_TXT_357
    then
     lov(surl,null,parm,lrange,src,msg,'INSERT',src1=>src1);
   else
     lov(surl,null,parm,lrange,src,msg,src1=>src1);
  end if;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_LOV',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_lov;


procedure after_lov(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null )
as
 cursor c1(rid rowid) is select * from strang.lov where rowid = rid;
 c1rec	c1%ROWTYPE;
begin
 open c1(rid);
 fetch c1 into c1rec;
 close c1;
 lov(surl,call_name,parm,null,c1rec.code);
exception when others then
 glbx.error_details( 'STRANGP', 'AFTER_LOV',null,null,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end after_lov;
-- END OF CODES

procedure fetch_csv_rows(v_blb in out nocopy BLOB, v_parms_1 in column_array, v_query_1 in varchar2, v_parms_2 in column_array, v_query_2 in varchar2, v_union_2 in varchar2 default null, v_distinct in boolean default FALSE) is

 v_cursor     pls_integer := dbms_sql.open_cursor;
 v_cols       dbms_sql.desc_tab;
 n_cols       pls_integer;
 ret_val      pls_integer;
 v_select     varchar2(30000);
 v_row        varchar2(30000);
 bfr          varchar2(30000);
 NL_CHAR      constant char(1) := chr(10);
 v_rows       boolean;

-- Start inline procedures
procedure add_line(v_buf in out varchar2) is
 raw_bfr       raw(4000);
begin
 v_buf := v_buf || NL_CHAR;
 raw_bfr := utl_raw.cast_to_raw(v_buf);
 dbms_lob.writeappend(v_blb, utl_raw.length(raw_bfr), raw_bfr);
end add_line;
-- End inline procedures

begin

 for j in v_parms_1.first..v_parms_1.last loop
  if j = v_parms_1.first then
   if v_distinct then
     v_select := 'select distinct ';
   else
     v_select := 'select ';
   end if;
  else
   v_select := v_select || ',';
  end if;
  v_select := v_select || 'to_char(' || v_parms_1(j).v_col || ') "' || v_parms_1(j).v_alias || '"';
 end loop;
 v_select := v_select || v_query_1;
 if v_parms_2.count > 0 and v_query_2 is not null and v_union_2 is not null
  then
   v_select := v_select || v_union_2 ||  ' ';
   for j in v_parms_2.first..v_parms_2.last loop
    if j = v_parms_2.first then
     if v_distinct then
      v_select := v_select || 'select distinct ';
     else
      v_select := v_select || 'select ';
     end if;
    else
     v_select := v_select || ',';
    end if;
    v_select := v_select || 'to_char(' || v_parms_2(j).v_col || ') "' || v_parms_2(j).v_alias || '"';
   end loop;
   v_select := v_select || v_query_2;
 end if;
 dbms_sql.parse(v_cursor,v_select, dbms_sql.native);
 dbms_sql.describe_columns(v_cursor, n_cols, v_cols);
 for k in 1..n_cols loop
  if k = 1
   then
    bfr := '"';
  else
    bfr := bfr || '","';
  end if;
  bfr := bfr || replace(v_cols(k).col_name, '"', '""');
  dbms_sql.define_column(v_cursor, k, v_row, 4000);
 end loop;
 bfr := bfr || '"';
 add_line(bfr);
 ret_val := dbms_sql.execute(v_cursor);
 v_rows := FALSE;
 loop
  exit when dbms_sql.fetch_rows(v_cursor) = 0;
  v_rows := TRUE;
  bfr := null;
  for j in 1..n_cols loop
   if j = 1
    then
     bfr := '"';
   else
     bfr := bfr || '","';
   end if;
   dbms_sql.column_value(v_cursor, j, v_row);
   bfr := bfr || v_row;
  end loop;
  bfr := bfr || '"';
  add_line(bfr);
 end loop;
 dbms_sql.close_cursor(v_cursor);
 if not v_rows -- Clear BLOB if no rows returned
  then
   dbms_lob.trim(v_blb, 0);
 end if;
 if dbms_lob.getlength(v_blb) = 0
  then
   null;
   -- htp.p('<div style="font-family: courier;">'); htp.p(v_select);htp.p('</div>'); htp.nl;
 end if;
exception when others
 then
  glbx.error_details( 'STRANGP', 'fetch_csv_rows',null,null,errmsg=>sqlerrm,extdet=>'SELECT Statement:<>' || v_select);
  -- htp.p('<div style="font-family: courier;">'); htp.p(v_select);htp.p('</div>'); htp.nl;
end fetch_csv_rows;


procedure receive(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null, vrecctr in varchar2 default null )
as

 cursor c2(rid rowid) is select rowid from strang.receivals where deliveryno = (select deliveryno from strang.detailrs where rowid=rid);
 cursor c3(rid rowid) is select rowid from strang.receivals where deliveryno = (select deliveryno from strang.pos where rowid=rid);

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nrid		varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.RECEIVE' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 if parm = 'RECEIVALS'
  then
   nrid := replace(rid,'~','+');
 elsif parm = 'DETAILRS'
  then
   -- open c2(rid);
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
   nrid := rowidtochar( c2rec.rowid );
 elsif parm = 'POS'
  then
   open c3(replace(rid,'~','+'));
   fetch c3 into c3rec;
   close c3;
   nrid := rowidtochar( c3rec.rowid );
 end if;

  htp.htmlopen;
  htp.title( glbx.extract_master_parameter('BAR_TITLE'));
   htp.htmlopen;
    htp.framesetopen('40%,25%,32%','100%',cattributes=>'scrolling="AUTO" resize frameborder="1" framespacing="0" border="1"');
 --   htp.framesetopen('39%,22%,39%','100%',cattributes=>'scrolling="AUTO" resize frameborder="1" framespacing="0" border="1"');
     htp.frame( 'strangp.receive_top?surl=' || glbx.rndsurl(surl) || '&rid=' || replace(nrid,'+','~') || '&scid=' || scid || '&call_name=' || call_name || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id || '&msg=' || replace(msg,' ','+'),'STRANG_TOP');
     htp.frame( 'strangp.receive_bottom?surl=' || glbx.rndsurl(surl) || '&rid=' || replace(nrid,'+','~') || '&scid=' || scid || '&call_name=' || call_name || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id || '&recctr=' || nvl(vrecctr,'1'),'STRANG_BOTTOM');
     htp.frame( 'strangp.receive_po?surl=' || glbx.rndsurl(surl) || '&rid=' || replace(nrid,'+','~') || '&scid=' || scid || '&call_name=' || call_name || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id,'STRANG_BOTTOM');
   htp.framesetclose;
  htp.noframesopen;
  htp.p(lng.GLB_TXT_029);
  htp.noframesclose;
  htp.htmlclose;

exception when others then
 glbx.error_details( 'STRANGP', 'RECEIVE',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end receive;

procedure receive_top(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null )
as

 cursor c2( rid rowid ) is select r.*, case when r.io = 'O' then '('||c1.suburb||' '||c1.country||')' else '' end as c_address
                        , case when r.io = 'O' then '('||c2.suburb||' '||c2.country||')' else '' end as s_address
 from strang.receivals r, strang.customers c1, strang.customers c2 where r.supplier_customer_id = c2.customer_id (+)
 and r.cust_customer_id = c1.customer_id (+)
 and r.rowid = rid;
 

 cursor c3( sname varchar2 ) is select screen_id from oltp_overview where screen_name = sname;
 cursor c4( scid integer ) is select * from oltp_object where screen_id = scid and original_column = 'CUSTOMER_TYPE';
 cursor c5( sto varchar2 ) is select max(deliveryno) + 1 dlr from strang.receivals;
 cursor c5x( sto varchar2, dlr varchar2 ) is select max(deliveryno) + 1 dlr from strang.receivals where substr(to_char(deliveryno),1,1) = dlr;
 --cursor c6( dlrv number ) is select 'x' from dual where exists (select 'x' from strang.detailrs where movement_no is not null and deliveryno = dlrv );
 cursor c6( dlrv number ) is select 'x' from dual 
                             where 
                             exists (select 'x' from strang.detailrs_item where movement_no is not null and deliveryno = dlrv )
                             or
                             exists (select 'x' from strang.detailrs where movement_no is not null and deliveryno = dlrv )
                             or 
                             exists (select 'x' from strang.detailrs_item where smp_no is not null and deliveryno = dlrv )
                             or 
                             exists (select 'x' from strang.detailrs where logno is not null and deliveryno = dlrv );
 
 cursor c6a( dlrv number ) is select 'x' from dual where exists (select 'x' from strang.pos where po <> '0' and deliveryno = dlrv );
 cursor c7(vste varchar2) is select customer_id, '('||suburb||' '||country||')' as c_address  from strang.lov l, strang.customers c where lov_name = 'CONTROLS' and code = 'DEFAULT RECEIVAL CUSTOMER' and description = customer and customer_type = 'CUSTOMER' and cola = vste;
 cursor c8(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'DEFAULT GST CODE' and cola = vste;
 cursor c9 is select code,description,cola from strang.lov where lov_name = 'COUNTRIES' order by cola;
 cursor c10(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'SEE_ALL_DELIVERIES' and cola = vste;
 cursor c11(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'DELIVERYNO' and cola = vste;
 cursor c12(delno number) is select p.grn_status from strang.pos p where p.deliveryno = delno and p.grn_status is not null;
 cursor c13(delno number) is select c.customer from strang.customers c, strang.receivals r where r.cust_customer_id = c.customer_id;
 cursor c14(delno number) is select c.customer from strang.customers c, strang.receivals r where r.supplier_customer_id = c.customer_id;
 cursor c15 is
  select mo.name, mv.name_default
  from   main_object mo, main_value mv
  where  mo.mid = mv.mid
         and mo.theme_type = 'STRANG_RECEIVALS_FOLDERS'
  ;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c3arec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c5rec		c5%ROWTYPE;
 c6rec		c6%ROWTYPE;
 c6arec		c6a%ROWTYPE;
 c10rec 	c10%ROWTYPE;
 c11rec 	c11%ROWTYPE;
 c12rec 	c12%ROWTYPE;
 c13rec 	c13%ROWTYPE;
 c14rec 	c14%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 ttl		varchar2(200);
 seclevel	varchar2(100);
 vste		varchar2(10);
 v_link 	varchar2(1000);
 vendor_readonly  boolean;
 file_list  glbx.myarray;
 retval     integer;
 v_html     varchar2(4000);
 v_flag     char(1) := 0;
 v_bgColor  varchar2(50);
 v_default_direction_colour varchar2(20) := g_inbound_color; 
 v_non_default_direction_colour varchar2(20):= g_outbound_color;
 v_direction varchar2(1) := 'I';
 vapproval  varchar2(500); -- added by David Banjo 14/07/2022

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.RECEIVE_TOP' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'RECEIVAL', rid );

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 vste := customer_state(c1rec.aid);
 ttl := LNGS.STR_TXT_023;
 seclevel := oltp.security_role( owner_id );
 vapproval := approver( owner_id, 'INVOICE PARSER'); -- Added by DB 14/07/2022
 vendor_readonly := FALSE;
 
 if nvl(vste,'SYD') = g_outbound_site then
    v_default_direction_colour := g_outbound_color;
    v_non_default_direction_colour := g_inbound_color; 
    v_direction := 'O';
 end if;
 -- sub parm for ttl - David Banjo 12/9/2021
 glbx.main_title( surl, ttl ,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR02',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 if parm in ('RECEIVALS','DETAILRS') then -- msg in (LNGS.STR_TXT_149, LNGS.STR_TXT_156) then
    htp.p('<script type="text/javascript" src="/images/js/receival_direction_switch.js"></script>');
    htp.p('<script type="text/javascript" src="/images/js/receival_direction_switch_readonly.js"></script>');
 end if;

 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if msg is not null
  then
   ttl := msg;
 end if;
 htp.p( '<CENTER>' );
 if access_id <> 'z'
  then
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
   
   open c6(c2rec.deliveryno);
   fetch c6 into c6rec;
   if c6%NOTFOUND then
      v_flag := 1;
   end if;
   close c6;
   
   if vste in ('MEL') and access_id = 'x' then
      v_flag := 0;
   end if;
   
   
  else
   if vste in ('MEL','SYD','MOT','KIU','TAB') then
     c2rec.curr := 'PGK';
     c2rec.exrate := 1;
     c2rec.GSTC_GSTCODE := 'EX';
   else
     c2rec.curr := 'AUD';
     c2rec.exrate := 1;
   end if;
 end if;


 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_receive_top', ctarget=>'_top' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', 'RECEIVALS' );
   htp.formhidden( 'ACCESS_ID', access_id );
   if access_id = 'z'
    then
     htp.formhidden( 'RID', null );
     open c10(vste);
     fetch c10 into c10rec;
     close c10;
   if c10rec.description = 'YES'
      then
       open c11(vste);
       fetch c11 into c11rec;
       close c11;
/*     relaced with sequences
       open c5x(currsite,substr(c11rec.description,1,1));
       fetch c5x into c5rec;
       close c5x;
       if c5rec.dlr is null then c5rec.dlr := c11rec.description; end if;
*/

      else
       open c11(vste);
       fetch c11 into c11rec;
       close c11;
 /*    relaced with sequences
       open c5x(currsite,substr(c11rec.description,1,1));
       fetch c5x into c5rec;
       close c5x;
       if c5rec.dlr is null then c5rec.dlr := c11rec.description; end if;
 */
    end if;

     open c7(vste);
     fetch c7 into c2rec.cust_customer_id, c2rec.c_address;
     if v_direction = 'I' then c2rec.c_address := ''; end if;
     close c7;
     open c8(vste);
     fetch c8 into c2rec.gstc_gstcode;
     close c8;
    else
     htp.formhidden( 'RID', replace(rid,'~','+') );
   end if;
 end if;

 open c3('Customers');
 fetch c3 into c3rec;
 close c3;
 open c3('Receival');
 fetch c3 into c3arec;
 close c3;
 open c4(c3rec.screen_id);
 fetch c4 into c4rec;
 close c4;

 vendor_readonly := FALSE;
 open c12(c2rec.deliveryno);
 fetch c12 into c12rec;
 if C12%FOUND then
  open c13(c2rec.deliveryno);
  fetch c13 into c13rec;
  
  if C13%FOUND then
    open c14(c2rec.deliveryno);
    fetch c14 into c14rec;
    if C14%FOUND then
      vendor_readonly := FALSE;  -- MAKE TRUE WHEN INTERFACE1 IS ON??
    end if;
    close c14;
  end if;
  close c13;
 end if;
 close c12;

     htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
     htp.tablerowopen;

    
    if ((vaccess = 'EDIT' and  access_id = 'z') or (vaccess = 'EDIT' and access_id = 'x' and v_flag = 1 ))
    then
       if c2rec.io = 'I' then v_bgColor := 'bgcolor=":#00468C"'; 
       elsif c2rec.io is null then v_bgColor := 'bgcolor='||v_default_direction_colour;
       else v_bgColor := 'bgcolor=":#4EB5E2"'; 
       end if;
       htp.p( '<TD ' ||v_bgColor|| ' id="P20Az" ALIGN="LEFT" COLSPAN=4>' );
       htp.formselectopen( cname=>'P20A', cattributes=>'id="P20A" ONCHANGE="receival_direction_switch()"' );  
             
       if ((c2rec.io = 'I') or (v_default_direction_colour = g_inbound_color and c2rec.io is null )) then
           htp.formselectoption( 'INBOUND DIRECTION', 'SELECTED',cattributes=>'VALUE="I"' );
           htp.formselectoption( 'OUTBOUND DIRECTION',  cattributes=>'VALUE="O"' );
       else
           htp.formselectoption( 'INBOUND DIRECTION',  cattributes=>'VALUE="I"' );
           htp.formselectoption( 'OUTBOUND DIRECTION', 'SELECTED',cattributes=>'VALUE="O"' );
       end if;
           htp.formselectclose;
           htp.p( '</TD>' );
    else
          if nvl(c2rec.io,'I') = 'I' then
             htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="4"');
          else
             htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="4"');
          end if;
          htp.formhidden( 'P20A', c2rec.IO );
      end if;
      htp.tablerowclose;

      htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_024),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.p('<td ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' || '>');
      if access_id = 'z' then
     -- htp.tabledata( htf.bold(LNGS.STR_TXT_024),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     -- htp.tabledata('&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        htp.p('&nbsp;');
        if vaccess = 'EDIT' then htp.formhidden( 'P1', null ); end if;
      else
     -- htp.tabledata( htf.bold(c2rec.deliveryno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
 -- Added by mchannon 28/05/2020
        htp.p( htf.bold(c2rec.deliveryno) );
        if vaccess = 'EDIT' then htp.formhidden( 'P1', null ); end if;
      end if;
 -- Added by mchannon 28/05/2020
      htp.nl;
      htp.anchor2( 'strangp.load_files?surl=' || surl || '&rid=' || replace(rid,'+','~'), 'Attach Files', ctarget=>'LOAD_FILES' );
      htp.p('</td>');
      htp.tabledata( htf.bold(LNGS.STR_TXT_025),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      if vaccess = 'EDIT' then
         if vendor_readonly  -- or vendor_readonly    -- or (c2rec.cust_customer_id is not null)  interface1 remove commented out
         then
           htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
           htp.formhidden( 'P6', c2rec.cust_customer_id );
       --customer_list( 'CUSTOMER', 'P6', c2rec.cust_customer_id, TRUE, isedit=>FALSE );
           htp.p(htf.bold(c13rec.customer||'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||'Strang Customer ID '||c2rec.cust_customer_id||' '||c2rec.c_address||'&nbsp;&nbsp;&nbsp;'));
           htp.p( '</TD>' );
      /*
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       htp.formhidden( 'P6', c2rec.cust_customer_id );
       customer_list( 'CUSTOMER', 'P6', c2rec.cust_customer_id, TRUE, isedit=>FALSE );
       htp.p(htf.bold('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||'Strang Customer ID '||c2rec.cust_customer_id||'&nbsp;&nbsp;&nbsp;'));
       htp.p( '</TD>' );
       */
        else
           htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
           customer_list( 'CUSTOMER', 'P6', c2rec.cust_customer_id, TRUE );
           htp.p(htf.bold('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||'Strang Customer ID  '||c2rec.cust_customer_id||' '||c2rec.c_address||'&nbsp;&nbsp;&nbsp;'));
           htp.p( '</TD>' );
        end if;
    else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       customer_list( 'CUSTOMER', 'P6', c2rec.cust_customer_id, TRUE, isedit=>FALSE );
       htp.p(htf.bold('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||'Strang Customer ID '||c2rec.cust_customer_id||' '||c2rec.c_address||'&nbsp;&nbsp;&nbsp;'));
       htp.p( '</TD>' );
   end if;
   htp.tablerowclose;
   htp.tablerowopen;
   -- htp.tabledata( htf.bold(LNGS.STR_TXT_026) || htf.nl || htf.italic( LNGS.STR_DATE_02 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"'); -- removed by David Banjo 17/11/2021
   htp.tabledata( htf.bold('Date Created') || htf.nl || htf.bold( 'User Name' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"'); -- Added by David Banjo 17/11/2021
   if vaccess = 'EDIT'
    then 
  --   if seclevel in ( 'LEVEL 8' )
  --    then
  --     htp.tabledata( htf.formhidden( 'P3', to_char(nvl(c2rec.currdate,sysdate),LNGS.STR_DATE_02)) || to_char(nvl(c2rec.currdate,sysdate),LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); Removed by David Banjo 17/11/2021
        htp.tabledata( htf.formhidden( 'P3', to_char(nvl(c2rec.currdate,sysdate),LNGS.STR_DATE_02)) || to_char(nvl(c2rec.currdate,sysdate),LNGS.STR_DATE_02)||' '||nvl(c2rec.currtime,'')|| htf.nl ||nvl(c2rec.created_by,'&nbsp;'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  --    else
  --     htp.tabledata( htf.formtext('P3',15,20,to_char(nvl(c2rec.currdate,sysdate),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  --   end if;
    else
 --    htp.tabledata( to_char(nvl(c2rec.currdate,sysdate),LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); Removed by David Banjo 17/11/2021
       htp.tabledata( to_char(nvl(c2rec.currdate,sysdate),LNGS.STR_DATE_02)||' '||nvl(c2rec.currtime,'')|| htf.nl ||nvl(c2rec.created_by,'&nbsp;'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
   htp.tabledata( htf.bold(LNGS.STR_TXT_027),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     if vendor_readonly
      then
/*
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       htp.formhidden( 'P8', c2rec.supplier_customer_id );
       htp.p(htf.bold(c14rec.customer||'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||'Vendor ID '||c2rec.supplier_customer_id||'&nbsp;&nbsp;&nbsp;'));
*/
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       htp.formhidden( 'P8', c2rec.supplier_customer_id );
       customer_list( 'SUPPLIER', 'P8', c2rec.supplier_customer_id, FALSE, isedit=>FALSE );
       htp.p(htf.bold('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||'Vendor ID  '|| c2rec.supplier_customer_id||' '||c2rec.s_address||'&nbsp;&nbsp;&nbsp;'));
       htp.p( '</TD>' );
      else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       customer_list( 'SUPPLIER', 'P8', c2rec.supplier_customer_id, FALSE );
       htp.p(htf.bold('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||'Vendor ID  '|| c2rec.supplier_customer_id||' '||c2rec.s_address||'&nbsp;&nbsp;&nbsp;'));
       htp.p( '</TD>' );
     end if;
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     customer_list( 'SUPPLIER', 'P8', c2rec.supplier_customer_id, FALSE, isedit=>FALSE );
     htp.p(htf.bold('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||'Vendor ID  '|| c2rec.supplier_customer_id||' '||c2rec.s_address||'&nbsp;&nbsp;&nbsp;'));
     htp.p( '</TD>' );
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_028),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     htp.formselectopen( 'P5' );
     for c9rec in c9 loop
      if c9rec.cola = c2rec.curr
       then
        htp.formselectoption( c9rec.cola, 'SELECTED' );
       else
        htp.formselectoption( c9rec.cola );
      end if;
     end loop;
     htp.formselectclose;
     htp.p( '</TD>' );
    else
     htp.tabledata( c2rec.curr,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden('P5',c2rec.curr);
   end if;
   c2rec.exrate := 1;
   htp.formhidden('P7',c2rec.exrate);
/*
     htp.tabledata( htf.bold(LNGS.STR_TXT_029),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P7',15,20,to_char(c2rec.exrate,LNGS.STR_FRMT_05)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( to_char(c2rec.exrate,LNGS.STR_FRMT_05),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
*/
    if c2rec.status is null then c2rec.status := 'STANDARD'; end if;
    htp.tabledata( htf.bold('Urgency'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
       if seclevel in ( 'LEVEL 8' )
        then
         htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
         htp.formhidden( 'P3NN', c2rec.status );
         lov_list( 'URGENCY', 'P3NN', c2rec.status, TRUE, FALSE, FALSE, isedit=>FALSE );
         htp.p( '</TD>' );
        else
         htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
         lov_list( 'URGENCY', 'P3NN', c2rec.status, TRUE, FALSE, FALSE );
         htp.p( '</TD>' );
       end if;
      else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'URGENCY', 'P3NN', c2rec.status, TRUE, FALSE, FALSE, isedit=>FALSE );
       htp.p( '</TD>' );
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
  if vste NOT in ('MEL','SYD','MOT','KIU','TAB') then
    htp.tabledata( htf.bold('Value ('||c2rec.curr||')'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');              -- this line
    htp.tabledata( strang.f_display_po_total(c2rec.deliveryno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');  -- this line
  else
    htp.tabledata( htf.bold('Value ('||c2rec.curr||')'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');              -- this line
    htp.tabledata( strang.f_display_po_total(c2rec.deliveryno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3');  -- this line
  end if;
  if vste NOT in ('MEL','SYD','MOT','KIU','TAB') then
   htp.tabledata( htf.bold(LNGS.STR_TXT_030),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     if seclevel in ( 'LEVEL 8' )
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       htp.formhidden( 'P4', c2rec.gstc_gstcode );
       lov_list( 'GSTCODES', 'P4', c2rec.gstc_gstcode, TRUE, TRUE, TRUE, isedit=>FALSE );
       htp.p( '</TD>' );
      else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'GSTCODES', 'P4', c2rec.gstc_gstcode, TRUE, TRUE, TRUE );
       htp.p( '</TD>' );
     end if;
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'GSTCODES', 'P4', c2rec.gstc_gstcode, TRUE, TRUE, TRUE, isedit=>FALSE );
     htp.p( '</TD>' );
   end if;
  else
     htp.formhidden('P4',c2rec.gstc_gstcode);
  end if;
  htp.tablerowclose;

  htp.tablerowopen;

 htp.tabledata( htf.bold('Notes'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext( 'P3N', 200, 203, c2rec.r_notes ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3');
    else
     htp.tabledata( c2rec.r_notes,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3 ');
     htp.formhidden('P3N',c2rec.r_notes);
   end if;
  htp.tablerowclose;

  if vste in ('MEL','SYD','MOT','KIU','TAB') then
   htp.tablerowopen;
   htp.tabledata( htf.bold('Delivery Docket'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext( 'R1', 30, 30, c2rec.rec_docket ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( c2rec.rec_docket,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden('R1',c2rec.rec_docket);
   end if;
   htp.tabledata( htf.bold('Transport Company'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext( 'R2', 50, 50, c2rec.rec_trans_company ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( c2rec.rec_trans_company,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden('R2',c2rec.rec_trans_company);
   end if;
   htp.tablerowclose;
   htp.tablerowopen;
   htp.tabledata( htf.bold('Truck Rego'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext( 'R3', 30, 30, c2rec.rec_truck_rego ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3');
    else
     htp.tabledata( c2rec.rec_truck_rego,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3');
     htp.formhidden('R3',c2rec.rec_truck_rego);
   end if;
   htp.tablerowclose;
  else
     htp.formhidden('R1',c2rec.rec_docket);
     htp.formhidden('R2',c2rec.rec_trans_company);
     htp.formhidden('R3',c2rec.rec_truck_rego);
  end if;
 -- Added by mchannon 28/05/2020
 -- Look for attached files
 for c15rec in c15 loop
 
  retval := http_file_listing(glbx.extract_master_parameter('APACHE_RECEIVALS_DIR') || '/' || c2rec.deliveryno || '/'  || c15rec.name, file_list);
  if nvl(retval, 0) > 0
   then
    v_html := v_html || htf.anchor( 'javascript: window.open(''' || '/' || glbx.extract_master_parameter('APACHE_RECEIVALS_DIR') || '/' || c2rec.deliveryno || '/'  || c15rec.name || '/' || ''',''' || 'vtyp' || ''',''height=800,width=600,scrollbars=yes,resizable=yes'');void('''');', c15rec.name );
	v_html := v_html || '&nbsp;&nbsp;';
  end if;
 end loop;
 if v_html is not null
  then
   htp.tablerowopen;
   htp.tabledata( htf.bold('Attached Files'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( v_html,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3');
   htp.tablerowclose;
 end if;

 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT'
  then
   if access_id = 'z'
    then
     if seclevel in ( 'LEVEL 8' )
      then
       null;
      else
       htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_031 ),cattributes=>'VALIGN="TOP"');
     end if;
     htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_318 ),cattributes=>'VALIGN="TOP"');
     htp.formclose;
    else
     htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_032 ),cattributes=>'VALIGN="TOP"');
     open c6( c2rec.deliveryno );
     fetch c6 into c6rec;
     open c6a( c2rec.deliveryno );
     fetch c6a into c6arec;
     if c6%NOTFOUND and c6a%NOTFOUND
      then
       if seclevel in ( 'LEVEL 8' )
        then
         null;
        else
         htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_033 ),cattributes=>'VALIGN="TOP"');
       end if;
     end if;
     close c6a;
     close c6;
     htp.formclose;
     if seclevel in ( 'LEVEL 8' )
      then
       null;
      else
      htp.tabledata( htf.formopen( 'oltp.process_query', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'ID', 'z' ) || htf.formhidden( 'RND', to_char(sysdate,'SSSSS') ) || htf.formhidden( 'ACCESS_IN', 'EDIT' ) || htf.formhidden( 'RID', null ) ||
                  htf.formhidden( 'SCID', c3arec.screen_id ) || htf.formhidden( 'PARM1', 'CUSTOMER' ) || htf.formhidden( 'PARM2', c4rec.oltp_id ) || htf.formhidden( 'PARM3', null ) || htf.formhidden( 'PARM4', '=' ) ||
                  htf.formhidden( 'SORT', null ) ||
                  htf.formsubmit( null, LNGS.STR_TXT_034 ) ||
                  htf.formclose, cattributes=>'VALIGN="TOP"');
      htp.tabledata( htf.formopen( 'strangp.mng_cust', ctarget=>'CUSTOMER_WINDOW' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'ID', 'z' ) || htf.formhidden( 'RID', null ) || htf.formsubmit( null, LNGS.STR_TXT_035 ) || htf.formclose,cattributes=>'VALIGN="TOP"');
     end if;
    if seclevel in ( 'LEVEL 7' )
      then
      -- htp.tabledata( htf.formopen( 'strangp.mng_cust', ctarget=>'CUSTOMER_WINDOW' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'ID', 'z' ) || htf.formhidden( 'RID', null ) || htf.formsubmit( null, LNGS.STR_TXT_035 ) || htf.formclose,cattributes=>'VALIGN="TOP"');
      htp.p(pop_up_window( 'height=800,width=500,scrollbars=yes,resizable=yes'));
      v_link := '''strangp.ost_185_screen?surl=' || surl || '&action=NEW''';
      htp.tabledata('<form><input type="button" onClick="popUpWindow(' || v_link || ')" value="' || LNGS.STR_TXT_461 || '"></form>');
      htp.p(pop_up_window( 'height=600,width=500,scrollbars=yes,resizable=yes'));
      v_link := '''strangp.ost_185_batch?surl=' || surl || '''';
      htp.tabledata('<form><input type="button" onClick="popUpWindow(' || v_link || ')" value="' || LNGS.STR_TXT_462 || '"></form>');
     end if;
     --htp.anchor2( 'oltp.process_query?id=z&rnd=' || to_char(sysdate,'SSSSS') || '&access_in=EDIT&surl=' || surl || '&rid=&scid=' || c3arec.screen_id || '&parm1=CUSTOMER&parm2=' || c4rec.oltp_id || '&parm3=&parm4==&sort=',LNGS.STR_TXT_034, ctarget=>'_top');
     --htp.anchor2( 'oltp.process_query?id=z&rnd=' || to_char(sysdate,'SSSSS') || '&access_in=EDIT&surl=' || surl || '&rid=&scid=' || c3rec.screen_id || '&parm1=CUSTOMER&parm2=' || c4rec.oltp_id || '&parm3=&parm4==&sort=',LNGS.STR_TXT_035,ctarget=>'CUSTOMER_WINDOW');
     -- htp.anchor2( 'oltp.process_query?id=z&rnd=' || to_char(sysdate,'SSSSS') || '&access_in=EDIT&surl=' || surl || '&rid=&scid=' || c3rec.screen_id || '&parm1=SUPPLIER&parm2=' || c4rec.oltp_id || '&parm3=&parm4==&sort=',LNGS.STR_TXT_036,ctarget=>'CUSTOMER_WINDOW');
   end if;
  else
     htp.tabledata( htf.formopen( 'strangp.mng_cust', ctarget=>'CUSTOMER_WINDOW' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'ID', 'z' ) || htf.formhidden( 'RID', null ) || htf.formsubmit( null, LNGS.STR_TXT_035 ) || htf.formclose,cattributes=>'VALIGN="TOP"');
  -- htp.anchor2( 'oltp.process_query?id=z&rnd=' || to_char(sysdate,'SSSSS') || '&access_in=EDIT&surl=' || surl || '&rid=&scid=' || c3rec.screen_id || '&parm1=CUSTOMER&parm2=' || c4rec.oltp_id || '&parm3=&parm4==&sort=',LNGS.STR_TXT_035,ctarget=>'CUSTOMER_WINDOW');
  -- htp.anchor2( 'oltp.process_query?id=z&rnd=' || to_char(sysdate,'SSSSS') || '&access_in=EDIT&surl=' || surl || '&rid=&scid=' || c3rec.screen_id || '&parm1=SUPPLIER&parm2=' || c4rec.oltp_id || '&parm3=&parm4==&sort=',LNGS.STR_TXT_036,ctarget=>'CUSTOMER_WINDOW');
 end if;

 -- Modified by David Banjo 21/7/2021

 if c2rec.deliveryno is not null and access_id = 'x' then
    open c6a(c2rec.deliveryno);
    fetch c6a into c6arec;
    if C6a%NOTFOUND then
       htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_031a ),cattributes=>'VALIGN="TOP"');
    end if;
    close c6a;
 end if;
 
 if access_id <> 'z' and seclevel in ( 'LEVEL 4','LEVEL 5','LEVEL 6','LEVEL 7','LEVEL 8') and c2rec.io <> 'O'  and vste in ('BNE','TVL') THEN
  htp.tabledata( htf.formopen( 'strangp.mng_smp', ctarget=>'ASSIGN' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'Access_id', 'z' ) ||htf.formhidden( 'PARM', 'SMP' )|| htf.formhidden( 'RID', null ) || htf.formsubmit( null, 'Add SMP' ) || htf.formclose,cattributes=>'VALIGN="TOP"');
 end if;
 
 -- David Banjo -- Start here!!!
 -- if access_id <> 'z' and c2rec.io <> 'O' and (c1rec.username in ('DBANJO','JMASSEY','EMOORE', 'ACELADOURE', 'GLOMAS','HLYUSIEN')  and seclevel in ('LEVEL 4', 'LEVEL 5','LEVEL 6','LEVEL 7','LEVEL 8') ) THEN
 if access_id <> 'z' and c2rec.io <> 'O' and ( vapproval = 'INVOICE PARSER' and seclevel in ('LEVEL 4', 'LEVEL 5','LEVEL 6','LEVEL 7','LEVEL 8') ) THEN
 -- htp.tabledata( htf.formopen( 'strangp.invoice_mng', ctarget=>'ASSIGN' ) || htf.formhidden( 'SURL', surl )|| htf.formsubmit( null, 'Parse Invoice' ) || htf.formclose,cattributes=>'VALIGN="TOP"');
    htp.tabledata( htf.formopen( 'invoice_parser.invoice_mng', ctarget=>'ASSIGN' ) || htf.formhidden( 'SURL', surl )|| htf.formsubmit( null, 'Parse Invoice' ) || htf.formclose,cattributes=>'VALIGN="TOP"');
 end if;
 
 search( surl, 'RECEIVALS', rid, samerow=>TRUE );
 htp.tablerowclose;
 htp.tableclose;
 htp.bold( ttl );
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'RECEIVE_TOP',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end receive_top;


procedure accept_receive_top( surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2, p1 in varchar2, p3 in varchar2, p4 in varchar2, p5 in varchar2, p6 in varchar2, p7 in varchar2, p8 in varchar2, p3n in varchar2, p3nn in varchar2, r1 in varchar2, r2 in varchar2, r3 in varchar2, p20a in varchar2, action in varchar2 ) 
as
 cursor c1( dlrv number ) is select 'x' from strang.receivals where deliveryno = dlrv;
 cursor c2( rid rowid ) is select * from strang.receivals where rowid = rid;
 cursor c3( cd varchar2, v_vste varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and code = cd and cola = v_vste;
 cursor c5( rid rowid ) is select distinct po from strang.pos p, strang.receivals r where r.rowid = rid
           and r.deliveryno = p.deliveryno and substr(p.po,1,2) in ('47','80');


 c1rec		c1%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		customer_account%ROWTYPE;
 c5rec		c5%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 dt		date;
 newrid		rowid;
 xrate		number(6,4);
 tmp		char(1);
 nlog		varchar2(9);
 vClient	boolean;
 Interface1	boolean;
 vste		varchar2(10);
 newdlr		number(8);
 dtime      varchar2(20); -- Added by David Banjo
 
begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'ACCEPT_RECEIVE_TOP' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  c4rec := glbx.get_aid( owner_id, 'C', ltype );
  vste := customer_state(c4rec.aid);
  
  -- The following if statement was added by DB on 17/11/2021
  if vste = 'BNE' then
   --  dtime := to_char(new_time(sysdate, 'ADT', 'AST'),'HH24:MI:SS');
     dtime := TO_CHAR(current_timestamp at time zone 'AUSTRALIA/BRISBANE','HH24:MI:SS');
  end if;

  if action in (LNGS.STR_TXT_032, LNGS.STR_TXT_031)
  then
     begin dt := to_date(p3,LNGS.STR_DATE_02); exception when others then receive( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_037 || ':' || LNGS.STR_DATE_02 ); return; end;
     begin xrate := to_number(p7); exception when others then receive( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_038 || ':' || P7 ); return; end;
     begin if p8 is null then  receive( surl, rid, scid, null, parm, access_id, 'SUPPLIER REQUIRED' ); return; end if; end;
     if rid is null then
	    case upper(vste)
           when 'BNE' then
	          select strang.s_deliveryno_bne.nextval into newdlr from dual;
           when 'SYD' then
	          select strang.s_deliveryno_syd.nextval into newdlr from dual;
           when 'TVL' then
	          select strang.s_deliveryno_tvl.nextval into newdlr from dual;
           when 'PER' then
	          select strang.s_deliveryno_per.nextval into newdlr from dual;
           when 'MEL' then
	          select strang.s_deliveryno_mel.nextval into newdlr from dual;
           when 'ADL' then
	          select strang.s_deliveryno_adl.nextval into newdlr from dual;
           when 'CNS' then
	          select strang.s_deliveryno_cns.nextval into newdlr from dual;
           when 'KIU' then
	          select strang.s_deliveryno_kiu.nextval into newdlr from dual;
           when 'TAB' then
	          select strang.s_deliveryno_tab.nextval into newdlr from dual;
           else
	          glbx.error_details( 'STRANGP', 'RECEIVE_TOP',null,owner_id,errmsg=>'Invalid Location',extdet=>'VSTE:' || vste);
        end case;
        
        insert into strang.receivals(deliveryno,currdate,curr,exrate,gstc_gstcode,cust_customer_id,supplier_customer_id,r_notes,status,rec_docket,rec_trans_company,rec_truck_rego,io, created_by, currtime) values  -- modified by David Banjo on 17/11/2021
        (newdlr,dt,p5,decode(p5,'AUD',1,xrate),p4,to_number(p6),to_number(p8), p3n, p3nn,r1,r2,r3,p20a, c4rec.username, dtime) returning rowid into newrid;
        -- Insert two dummy records
        nlog := null;
        insert  into strang.detailrs(deliveryno,itemno,sa,cl,pktpe_packtype,owner,partvolume,partweight,qty,logno,io) values
        (newdlr,1,'S','C','UNIT','1',0,0,1,nlog,p20a);
        
        if p20a = 'I' then
           insert into strang.pos(deliveryno,recno,po,ctry_countrycode,gstc_gstcode,unit_unitused,qty,io) values
           (newdlr,1,0,'AU',p4,'NO',1,p20a);
        else
           insert into strang.pos(deliveryno,recno,po,ctry_countrycode,gstc_gstcode,unit_unitused,qty,io,off_site_receipt,grn_status) values
           (newdlr,1,0,'AU',p4,'NO',1,p20a,sysdate,9);      
        end if;
     else
/*
      open c3( 'INTERFACE1',vste );
      fetch c3 into c3rec;
      if C3%FOUND then
       if c3rec.description = 'FALSE' then
        interface1 := FALSE;
       else
        interface1 := TRUE;
       end if;
      else
       interface1 := FALSE;
      end if;
     close c3;
*/
     open c2( replace(rid,'~','+') );
     fetch c2 into c2rec;
     close c2;
     
     if (c2rec.io <> p20a) then
        update strang.receivals set io = p20a where deliveryno = c2rec.deliveryno;
        update strang.detailrs set io = p20a where deliveryno = c2rec.deliveryno;
        update strang.pos set io = p20a where deliveryno = c2rec.deliveryno;
     end if;

     if (c2rec.currdate < '01-JUN-2018') or (c2rec.io='O') or (c2rec.interface_flag = 'M') or (c2rec.deliveryno > 3000000 and c2rec.deliveryno < 4000000) or
       ((c2rec.currdate < '16-DEC-2018') and (c2rec.deliveryno > 4000000 and c2rec.deliveryno < 5000000)) then
        interface1 := FALSE;
     else
        interface1 := TRUE;
     end if;


     if c2rec.cust_customer_id = 1 and interface1 then
        vClient := TRUE;
        open c5( replace(rid,'~','+') );
        fetch c5 into c5rec;
        if C5%FOUND then
           vClient := FALSE;
        end if;
        close c5;
     else
        vClient := FALSE;
     end if;
     
     if not vClient then
        update strang.receivals
        set
           currdate = dt,
           curr = p5,
           exrate = to_number(p7),
           gstc_gstcode = p4,
           cust_customer_id = to_number(p6),
           supplier_customer_id = to_number(p8),
           r_notes = p3n,
           status = p3nn,
           rec_docket = r1,
           rec_trans_company = r2,
           rec_truck_rego = r3,
           io = p20a
        where rowid = chartorowid(replace(rid,'~','+'));
        newrid := chartorowid(replace(rid,'~','+'));
     else
       update strang.receivals
       set
       currdate = dt,
       curr = p5,
       exrate = to_number(p7),
       gstc_gstcode = p4,
       r_notes = p3n,
       status = p3nn,
       rec_docket = r1,
       rec_trans_company = r2,
       rec_truck_rego = r3,
       io = p20a
       where rowid = chartorowid(replace(rid,'~','+'));
       newrid := chartorowid(replace(rid,'~','+'));
     end if;
     
     
     
   end if;
 elsif action = LNGS.STR_TXT_318
  then
   -- receive( surl, rid, scid, null, parm, 'x', LNGS.STR_TXT_320 );
   menu( surl, to_char(sysdate,'SSSS'), 'RECEIVALS');
   return;
 elsif action = LNGS.STR_TXT_033
  then
   htp.htmlopen;
   glbx.header_msg( LNGS.STR_TXT_361 );
   htp.nl;
   htp.p( '<CENTER>' );
   htp.tableopen;
   htp.tablerowopen;
   htp.p( '<TD>' );
   htp.formopen( 'strangp.accept_receive_top', ctarget=>'_top' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'ACTION', 'DELX' );
   htp.formhidden( 'P1', p1 );
   htp.formhidden( 'P3', p3 );
   htp.formhidden( 'P4', p4 );
   htp.formhidden( 'P5', p5 );
   htp.formhidden( 'P6', p6 );
   htp.formhidden( 'P7', p7 );
   htp.formhidden( 'P8', p8 );
   htp.formhidden( 'P3N', p3n );
   htp.formhidden( 'P3NN', p3nn );
   htp.formhidden( 'R1', r1 );
   htp.formhidden( 'R2', r2 );
   htp.formhidden( 'R3', r3 );
   htp.formhidden( 'P20A', p20a );
   htp.formsubmit( null, LNG.PHG_TXT_045 );
   htp.formclose;
   htp.p( '</TD>' );
   htp.p( '<TD>' );
   htp.formopen( 'strangp.receive', ctarget=>'_top' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'CALL_NAME', null );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', 'x' );
   htp.formhidden( 'MSG', LNGS.STR_TXT_362 );
   htp.formsubmit( null, LNG.PHG_TXT_046 );
   htp.formclose;
   htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tableclose;
   htp.p( '</CENTER>' );
   htp.htmlclose;
   return;
 elsif action = 'DELX'
  then
   delete from strang.pos where deliveryno = (select deliveryno from strang.receivals where rowid = chartorowid(replace(rid,'~','+')) );
   delete from strang.detailrs where deliveryno = (select deliveryno from strang.receivals where rowid = chartorowid(replace(rid,'~','+')) );
   delete from strang.receivals where rowid = chartorowid(replace(rid,'~','+'));
   menu( surl, to_char(sysdate,'SSSS'), 'RECEIVALS');
   return;
 end if;

-- ADDED by David Banjo 20/5/2020
 if action = LNGS.STR_TXT_031a then
   update strang.receivals
   set interface_flag = 'M'
   where rowid = chartorowid(replace(rid,'~','+'));
 end if;
 commit;
 if rid is null
  then
   receive( surl, rowidtochar(newrid), scid, null, parm, 'x', LNGS.STR_TXT_039 );
  elsif action = LNGS.STR_TXT_033 -- Delete
   then
   receive( surl, null, scid, null, parm, 'z', LNGS.STR_TXT_040 );
  else
   receive( surl, rid, scid, null, parm, 'x', LNGS.STR_TXT_041 );
 end if;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_RECEIVE_TOP',null,owner_id,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end accept_receive_top;

procedure ost_185_screen(surl in varchar2, action in varchar2 default 'NEW', msg in varchar default null)
as

 cursor c1 is
select count(*)
from
(select distinct p.deliveryno, p.recno
from strang.pos p, strang.detailrs dr, strang.receivals r
where p.off_site_receipt is null and
  p.po_item_no is not null and
  p.deliveryno = r.deliveryno and
  p.deliveryno = dr.deliveryno and
  dr.deliveryno = p.deliveryno and
  r.cust_customer_id = 1   and
  dr.detaildesc not like '%PERSONAL EFFECT%' and
  substr(dr.logno,5,2) in ('BS','BA','CA'));

 cursor c3 ( acid integer, time_out integer ) is
  select count(*) tot
  from   login_session
  where  nvl(is_connected, 'F') = 'T'
         and aid <> acid
         and (nvl(date_updated, date_created) + time_out/1440) > sysdate
         and login_type not in ('ADMIN', 'PHOTOGRAPHER')
  ;

 cursor c4 ( acid integer, time_out integer ) is
  select *
  from   login_session
  where  nvl(is_connected, 'F') = 'T'
         and aid <> acid
         and (nvl(date_updated, date_created) + time_out/1440) > sysdate
         and login_type not in ('ADMIN', 'PHOTOGRAPHER')
  order  by date_created
  ;

 c1rec    c1%ROWTYPE;

 cusrec    customer_account%ROWTYPE;
 stype     integer;
 ltype     varchar2(100);
 owner_id  integer;
 sts       varchar2(100);
 pfx       THEME%ROWTYPE;
 rec_ctr   integer;
 timeout   integer;
 login_cnt integer;
 profid    integer;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.OST_185_SCREEN' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 cusrec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( cusrec.theme_name );

 begin timeout := to_number(glbx.extract_master_parameter('DISCONNECT_AFTER')); exception when others then timeout := 180; end;

 glbx.main_title( surl, 'OST 185 Report',glbx.backimg(surl, cusrec.aid,pfx.text_back,cusrec.background_img,ltype),helpid=>'STR02',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);

 open c3(owner_id, timeout);
 fetch c3 into login_cnt;
 close c3;

 if msg is not null
  then
   glbx.header_msg( msg );
 end if;

   open c1;
   fetch c1 into rec_ctr;
   close c1;
   if rec_ctr > 0 and action not in ('CONFIRM','CANCEL','MESSAGE')
    then
      htp.p('Report has aready been run today (' || rec_ctr || ' records processed).<BR><BR>Do you wish to re-run it? ');
      htp.anchor2('strangp.ost_185_screen?surl=' || surl || '&action=CONFIRM','[Yes]');
      htp.anchor2('strangp.ost_185_screen?surl=' || surl || '&action=CANCEL&msg=Action Cancelled','[No]');
   elsif action in ('CANCEL', 'MESSAGE')
    then
     null;
   elsif nvl(login_cnt, 0) > 0
    then
     glbx.header_msg( 'Cannot run report. The following users are logged on:');
     htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
     htp.tablerowopen;
     htp.tableheader('Username', cattributes=>glbx.QUERY_BACKGROUND);
     htp.tableheader('Account name', cattributes=>glbx.QUERY_BACKGROUND);
     htp.tableheader('Date connected', cattributes=>glbx.QUERY_BACKGROUND);
     htp.tableheader('Date updated', cattributes=>glbx.QUERY_BACKGROUND);
     htp.tablerowclose;
     for c4rec in c4(owner_id, timeout) loop
      htp.tablerowopen;
      ltype := c4rec.login_type;
      cusrec := glbx.get_cusrec(c4rec.sessid, ltype, c4rec.aid, profid);
      htp.tabledata(cusrec.username, cattributes=>glbx.QUERY_CELL_BACKGROUND);
      htp.tabledata(cusrec.account_name, cattributes=>glbx.QUERY_CELL_BACKGROUND);
      htp.tabledata(to_char(c4rec.date_created, 'dd-MON-yyyy hh24:mi:ss'), cattributes=>glbx.QUERY_CELL_BACKGROUND);
      htp.tabledata(to_char(c4rec.date_updated, 'dd-MON-yyyy hh24:mi:ss'), cattributes=>glbx.QUERY_CELL_BACKGROUND);
      htp.tablerowclose;
     end loop;
     htp.tableclose;
   else
     -- ****** TURNED OFF 20180530 ********* update strang.pos set off_site_receipt = null where off_site_receipt >= trunc(sysdate);
     generate_ost185( surl, sysdate );
     return;
   end if;
   htp.nl;
   htp.nl;
   htp.p('<a href="" onClick="self.close()">[Close Window]</a>');
  htp.bodyclose;

 htp.htmlclose;

exception when others then
 glbx.error_details( 'STRANGP', 'OST_185_SCREEN',null,owner_id,errmsg=>sqlerrm);
end ost_185_screen;

procedure ost_185_batch(surl in varchar2, msg in varchar default null)
as

cursor c1 is
 select *
 from   user_scheduler_jobs
 where  job_name = 'OST_185_BATCH'
 ;

cursor c2 (j_name varchar2) is
 select * from user_scheduler_job_run_details
 where  job_name = j_name
 order  by log_date desc
 ;

 cusrec    customer_account%ROWTYPE;
 stype     integer;
 ltype     varchar2(100);
 owner_id  integer;
 sts       varchar2(100);
 pfx       THEME%ROWTYPE;
 c1rec     c1%ROWTYPE;
 c2rec     c2%ROWTYPE;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.OST_185_BATCH' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 cusrec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( cusrec.theme_name );

 glbx.main_title( surl, 'OST 185 Batch Job Definition',glbx.backimg(surl, cusrec.aid,pfx.text_back,cusrec.background_img,ltype),helpid=>'STR02',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);

 if msg is not null
  then
   glbx.header_msg( msg );
 end if;

 open c1;
 fetch c1 into c1rec;
 close c1;

 open c2 (nvl(c1rec.job_name, 'OST_185_BATCH'));
 fetch c2 into c2rec;
 close c2;

 htp.formopen('strangp.accept_ost_185_batch');
 htp.formhidden('surl', surl);
 htp.formhidden('job_name', nvl(c1rec.job_name, 'OST_185_BATCH'));

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
 htp.tablerowopen;
  htp.tabledata('Start Date<BR><I>DD-MON-YYYY</I>', cattributes=>glbx.QUERY_BACKGROUND);
  htp.tabledata(htf.formtext('P1', 20, 15, to_char(nvl(c1rec.start_date, sysdate), LNGS.STR_DATE_02)), cattributes=>glbx.QUERY_CELL_BACKGROUND);
 htp.tablerowclose;
 htp.tablerowopen;
  htp.tabledata('Run Time<BR><I>HH24:MM</I>', cattributes=>glbx.QUERY_BACKGROUND);
  htp.tabledata(htf.formtext('P2', 20, 15, to_char(nvl(c1rec.start_date, sysdate), 'hh24:mi')), cattributes=>glbx.QUERY_CELL_BACKGROUND);
 htp.tablerowclose;
 htp.tablerowopen;
  htp.tabledata('Last Run Time: ', cattributes=>glbx.QUERY_BACKGROUND);
  htp.tabledata(nvl(to_char(c2rec.log_date, LNGS.STR_DATE_01), 'Job not run'), cattributes=>glbx.QUERY_CELL_BACKGROUND);
 htp.tablerowclose;
 htp.tablerowopen;
  htp.tabledata('Result: ', cattributes=>glbx.QUERY_BACKGROUND);
  htp.tabledata(nvl(c2rec.additional_info, c2rec.status), cattributes=>glbx.QUERY_CELL_BACKGROUND);
 htp.tablerowclose;
 htp.tablerowopen;
  htp.tabledata('Next Run Time: ', cattributes=>glbx.QUERY_BACKGROUND);
  htp.tabledata(nvl(to_char(c1rec.next_run_date, LNGS.STR_DATE_01), 'Job not enabled'), cattributes=>glbx.QUERY_CELL_BACKGROUND);
 htp.tablerowclose;
 htp.tableclose;

 htp.formsubmit( 'ACTION', 'Update');
 htp.formsubmit( 'ACTION', 'Cancel');

 htp.formclose;

 htp.nl;
 htp.nl;
 htp.p('<a href="" onClick="self.close()">[Close Window]</a>');
 htp.bodyclose;

 htp.htmlclose;

exception when others then
 glbx.error_details( 'STRANGP', 'OST_185_BATCH',null,owner_id,errmsg=>sqlerrm);
end ost_185_batch;

procedure accept_ost_185_batch( surl in varchar2, job_name in varchar2, p1 in varchar2, p2 in varchar2, action in varchar2 default 'CANCEL')
as

 cusrec    customer_account%ROWTYPE;
 stype     integer;
 ltype     varchar2(100);
 owner_id  integer;
 sts       varchar2(100);
 pfx       THEME%ROWTYPE;
 start_dte date;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.OST_185_BATCH' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 if upper(action) in ('CANCEL')
  then
   ost_185_batch(surl, 'Update Cancelled');
   return;
 elsif upper(action) in ('UPDATE')
  then
   begin
    start_dte := to_date(trim(p1) || ' ' || trim(p2), LNGS.STR_DATE_01);
   exception when others then
    ost_185_batch(surl, 'Date must be format "' || LNGS.STR_DATE_02 || '".<BR>Time must be format "hh24:mm"');
    return;
   end;
   if start_dte < sysdate
    then
     ost_185_batch(surl, 'Date cannot be in the past: ' || to_char(start_dte, LNGS.STR_DATE_01));
     return;
   end if;
   begin dbms_scheduler.drop_job(job_name); exception when others then null; end;
   dbms_scheduler.create_job( job_name=> job_name
                            , job_type=> 'STORED_PROCEDURE'
                            , job_action=> 'strangp.generate_ost185'
                            , start_date=> start_dte
                            , repeat_interval=> 'FREQ=DAILY;INTERVAL=1'
                            , number_of_arguments=> 3
                            , enabled=> FALSE
                            , comments=> 'Generate OST185'
                           )
   ;
   dbms_scheduler.set_job_argument_value( job_name => job_name
                                        , argument_position => 1
                                        , argument_value => surl
                                        )
   ;

   dbms_scheduler.set_job_argument_value( job_name => job_name
                                        , argument_position => 2
                                        , argument_value => sysdate
                                        )
   ;

   dbms_scheduler.set_job_argument_value( job_name => job_name
                                        , argument_position => 3
                                        , argument_value => 'TRUE'
                                        )
   ;

   dbms_scheduler.enable(job_name);
   ost_185_batch(surl, 'Batch job created: ' || to_char(start_dte, LNGS.STR_DATE_01));
   return;
 end if;

ost_185_batch(surl, 'Invlid action: ' || action);
return;

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_OST_185_BATCH',null,owner_id,errmsg=>sqlerrm);
end accept_ost_185_batch;

procedure receive_bottom(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer default 1, msg in varchar2 default NULL )
as

 cursor c2( rid rowid ) is select * from strang.receivals where rowid = rid;

 cursor c3( dlrvy number ) is
  select rowid,itemno,logno,hawb_hawbno,camov_seal,smp_no,detaildesc,hazard,ecn,sa,cl,warehouse,pktpe_packtype,owner,partvolume,partweight,qty,movement_no,deliveryno,entry_no,line_no,handling_unit,local_line_no,lngth,width,height,dim_calc_qty
  from strang.detailrs
  where deliveryno = dlrvy
  order by itemno,logno;

 cursor c4( dlrvy number ) is select count('x') tot from strang.detailrs where deliveryno = dlrvy;

 cursor c5(hwb varchar2) is select mawb from strang.hawbs where hawb = hwb;
 cursor c6(dlry number, sto varchar2) is select max(itemno) tot from strang.detailrs where deliveryno = dlry; --  and site_owner = sto
 cursor c7(dlry number) is select max(itemno) + 1 tot from strang.detailrs where deliveryno = dlry;
 cursor c9 is select code,description,cola from strang.lov where lov_name = 'WAREHOUSES' order by code;
 cursor c10(v_entry number) is select * from strang.duty where entry_no = v_entry;
 cursor c11(v_aid integer) is
  select count(*) tot
  from   customer_roles cr, piction_roles pr
  where  1 = 1
         and cr.aid = v_aid
         and cr.role_id = pr.role_id
         and pr.role_type = 'PARAMETER'
         and pr.role_name like 'BARCODE!_PRINTER!_%' escape '!'
  ;
  cursor c12 (v_movement_no varchar2, v_seal varchar2) is select rowid, movement_type 
  from strang.movements where movement_no = v_movement_no and nvl(seal,'|') = nvl(v_seal,'|') ; 
  cursor c13 (vsmp varchar2 ) is select rowid from strang.smp where smp_no = vsmp;
  
 

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c5rec		c5%ROWTYPE;
 c7rec		c7%ROWTYPE;
 c9rec		c9%ROWTYPE;
 c10rec     c10%ROWTYPE;
 c11rec     c11%ROWTYPE;
 c12rec     c12%ROWTYPE;
 c13rec     c13%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 vrecctr	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 ttl		varchar2(200);
 seclevel	varchar2(100);
 vste		varchar2(10);
 v_default_direction_colour varchar2(20) := g_inbound_color; 
 v_non_default_direction_colour varchar2(20):= g_outbound_color;
 v_direction varchar2(1) := 'I'; 
 v_cell_hide_switch varchar2(50);
 v_readonly varchar2(50);
 p_url varchar2(200);
 
begin

 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.RECEIVE_BOTTOM' );
 if sts is not null
 then
    glbx.redisplay_login_page( sts, TRUE );
    return;
 end if;
 vaccess := data_access( owner_id, 'DETAILRS', rid );

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 seclevel := oltp.security_role( owner_id );
 vste := customer_state(c1rec.aid);
 open c2( replace(rid,'~','+') );
 fetch c2 into c2rec;
 close c2;

 if nvl(vste,'SYD') = g_outbound_site then
    v_default_direction_colour := g_outbound_color;
    v_non_default_direction_colour := g_inbound_color; 
    v_direction := 'O';
    v_cell_hide_switch := 'style = "visibility:hidden"';
 else
    v_cell_hide_switch := 'style = "display:table-cell"';
 end if;
 
 if c2rec.io = 'I' then
    v_cell_hide_switch := 'style = "display:table-cell"';
 else
  --  v_cell_hide_switch := 'style = "display:none"';
    v_cell_hide_switch := 'style =  "visibility:hidden"';
 end if;
 
 if access_id = 'z'
  then
   ttl := LNGS.STR_TXT_042;
   glbx.main_title( surl, NULL, glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR03',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);
   return;
  else
   if recctr > 0
    then
     open c4( c2rec.deliveryno );
     fetch c4 into c4rec;
     close c4;
     vrecctr := recctr;
     if recctr > c4rec.tot then vrecctr := c4rec.tot; end if;
     ttl := nvl(msg,LNGS.STR_TXT_043 || ' (' || vrecctr || '/' || c4rec.tot || ')');
     glbx.main_title( surl, NULL,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR04',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);
    else
     vrecctr := 0;
     ttl := nvl(msg,LNGS.STR_TXT_044);
     glbx.main_title( surl, NULL,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR04',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);
   end if;
 end if;

 if (UPPER(OWA_UTIL.GET_CGI_ENV('HTTP_USER_AGENT')) LIKE '%TRIDENT%' or UPPER(OWA_UTIL.GET_CGI_ENV('HTTP_USER_AGENT')) like '%MSIE%') AND parm IN ('RECEIVALS','DETAILRS') THEN
    htp.p('<script type="text/javascript" src="/images/js/detailrs_direction_switch_IE.js"></script>');
 elsif parm in ('RECEIVALS','DETAILRS') then
    htp.p('<script type="text/javascript" src="/images/js/detailrs_direction_switch.js"></script>');
    htp.p('<script type="text/javascript" src="/images/js/hide_receival_direction_switch.js"></script>');
 end if;

 if vaccess = 'READ' and vrecctr = 0
  then
   vrecctr := 1;
 end if;

 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.p( '<CENTER>' );
 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_receive_detailr' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', access_id );
   -- Added at Sallies Request, behaviour is now on insert to stay on current screen
   if vrecctr = 0
    then
     open c7(c2rec.deliveryno);
     fetch c7 into c7rec;
     close c7;
     c7rec.tot := nvl(c7rec.tot,1);
     htp.formhidden( 'RECCTR', c7rec.tot);
    else
     htp.formhidden( 'RECCTR', vrecctr);
   end if;
 end if;

 if vrecctr > 0
  then
   open c3( c2rec.deliveryno );
   for j in 1..vrecctr loop
   fetch c3 into c3rec;
    if c3%NOTFOUND then exit; end if;
   end loop;
   close c3;
   
   open c12 ( c3rec.movement_no, c3rec.camov_seal);
   fetch c12 into c12rec;
   close c12;
   
 else
   c3rec.PKTPE_PACKTYPE := 'UNIT';
   c3rec.qty := 1;
   c3rec.partweight := 0;
   c3rec.partvolume := 0;
 end if;
 
 if c3rec.smp_no is not null then
   open c13 (c3rec.smp_no);
   fetch c13 into c13rec;
   close c13;
 end if;
 if vaccess = 'EDIT' then htp.formhidden( 'DETRID', rowidtochar( c3rec.rowid )); end if;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.QUERY_CELL_BACKGROUND );
 
  htp.tablerowopen;

     htp.tabledata( htf.bold( LNGS.STR_TXT_045 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if c3rec.rowid is null
      then
       open c6( c2rec.deliveryno, currsite );
       fetch c6 into c3rec.itemno;
       close c6;
       c3rec.itemno := nvl(c3rec.itemno,0) + 1;
     end if;
     htp.tabledata( htf.bold( c3rec.itemno ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"' );
     if vaccess = 'EDIT' then htp.formhidden( 'P1', c3rec.itemno ); end if;
     htp.tabledata( htf.bold( LNGS.STR_TXT_046 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
         htp.tabledata( htf.formhidden( 'P2', c3rec.logno ) || c3rec.logno, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"' );
       else
       if c3rec.rowid is null or c3rec.logno is null
        then
           htp.tabledata( htf.formradio( 'A1','T','CHECKED' ) || ' ' || LNGS.STR_TXT_047 || htf.nl ||
                         htf.formradio( 'A1','N' ) || ' ' || LNGS.STR_TXT_048,cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext( 'P2', 9, 9, c3rec.logno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       end if;
      end if;
      else
         htp.tabledata( c3rec.logno, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"' );
     end if;
     htp.tabledata( htf.bold( LNGS.STR_TXT_049 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
        if c3rec.sa = 'A'
         then
          htp.tabledata( htf.formhidden( 'P3', c3rec.sa ) || LNGS.STR_TXT_050, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"' );
         else
          htp.tabledata( htf.formhidden( 'P3', c3rec.sa ) || LNGS.STR_TXT_051, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"' );
        end if;
       else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
        htp.formselectopen( 'P3' );
        if c3rec.sa = 'A'
         then
          htp.formselectoption( LNGS.STR_TXT_050, 'SELECTED', cattributes=>'VALUE="A"' );
          htp.formselectoption( LNGS.STR_TXT_051, cattributes=>'VALUE="S"' );
         else
          htp.formselectoption( LNGS.STR_TXT_050, cattributes=>'VALUE="A"' );
          htp.formselectoption( LNGS.STR_TXT_051, 'SELECTED', cattributes=>'VALUE="S"' );
        end if;
        htp.formselectclose;
       htp.p( '</TD>' );
       end if;
      else
         htp.tabledata( c3rec.sa, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"' );
     end if;
     htp.tabledata( htf.bold( 'Containerized or Loose (Loose includes Air & Breakbulk)' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"COLSPAN=2');
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
        if c3rec.cl = 'L'
         then
          htp.tabledata( htf.formhidden( 'P8', c3rec.cl ) || LNGS.STR_TXT_053, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2' );
         else
          htp.tabledata( htf.formhidden( 'P8', c3rec.cl ) || LNGS.STR_TXT_054, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2' );
        end if;
       else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2>' );
        htp.formselectopen( 'P8' );
        if c3rec.cl = 'L'
         then
          htp.formselectoption( 'Containerized', cattributes=>'VALUE="C"' );
          htp.formselectoption( 'Loose', 'SELECTED', cattributes=>'VALUE="L"' );
         else
          htp.formselectoption( 'Containerized', 'SELECTED', cattributes=>'VALUE="C"' );
          htp.formselectoption( 'Loose', cattributes=>'VALUE="L"' );
        end if;
        htp.formselectclose;
       htp.p( '</TD>' );
       end if;
     else
         htp.tabledata( c3rec.cl, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2' );
         htp.formhidden('P8',c3rec.cl);
    end if;
  --   htp.tabledata( htf.bold( 'OTML Handling Unit (HU)' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');

     if vste NOT in ('MEL','SYD','MOT','KIU','TAB') then
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
        htp.tabledata( htf.bold( 'Handling Unit/Case#' )|| '&nbsp;&nbsp;'|| htf.formhidden( 'P6i', c3rec.handling_unit ) || c3rec.handling_unit, cattributes=>' id="P6z" '||v_cell_hide_switch||' '||glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       else
        htp.tabledata( htf.bold( 'Handling Unit/Case#' )||'&nbsp;&nbsp;'|| htf.formtext( 'P6i', 12, 15, c3rec.handling_unit), cattributes=>' id="P6z" '||v_cell_hide_switch||' '||glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       end if;
      else
       htp.tabledata( htf.bold( 'Handling Unit/Case#' )||'&nbsp;&nbsp;'|| c3rec.handling_unit, cattributes=>' id="P6z" '||v_cell_hide_switch||' '||glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       htp.formhidden( 'P6i', c3rec.handling_unit );
      end if;
     else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" id="P6z" COLSPAN=1>' );
      -- htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
       htp.p( '</TD>' );
       htp.formhidden( 'P6i', c3rec.handling_unit );
     end if;
  htp.tablerowclose;

  htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_055 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
        htp.tabledata( htf.formhidden( 'P6', c3rec.qty ) || c3rec.qty, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       else
        htp.tabledata( htf.formtext( 'P6', 15, 15, c3rec.qty), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       end if;
      else
       htp.tabledata( c3rec.qty, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     end if;
     htp.tabledata( htf.bold( LNGS.STR_TXT_056 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
        htp.tabledata( htf.formhidden( 'P7', c3rec.pktpe_packtype ) || c3rec.pktpe_packtype, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       else
        htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
         htp.formtext( 'P7', 10, 4, c3rec.pktpe_packtype );
        htp.p( '</TD>' );
       end if;
      else
       htp.tabledata( c3rec.pktpe_packtype, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"' );
     end if;
     htp.tabledata( htf.bold( LNGS.STR_TXT_057 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
        htp.tabledata( htf.formhidden( 'P5', c3rec.partweight ) || c3rec.partweight, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       else
        htp.tabledata( htf.formtext( 'P5', 10, 20, c3rec.partweight), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
      end if;
      else
       htp.tabledata( c3rec.partweight, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"' );
     end if;
     -- Start here - David Banjo 4/8/2021
     htp.tabledata( htf.bold( LNGS.STR_TXT_058 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
        htp.tabledata( htf.formhidden( 'P4', ltrim(to_char(c3rec.partvolume,LNGS.STR_FRMT_07)) ) || ltrim(to_char(c3rec.partvolume,LNGS.STR_FRMT_07)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=4' );
        htp.formhidden( 'P4L',c3rec.lngth );
        htp.formhidden( 'P4W',c3rec.width );
        htp.formhidden( 'P4H',c3rec.height );
        htp.formhidden( 'P4C',c3rec.dim_calc_qty );
       else
          if nvl(vste,'SYD') = 'BNE' then
          -- htp.tabledata( htf.formtext( 'P4', 10, 20, ltrim(to_char(c3rec.partvolume,LNGS.STR_FRMT_07)))|| htf.bold(' &nbsp;&nbsp;Or &nbsp;&nbsp;( L ')||htf.formtext( 'P4L', 10, 20, ltrim(to_char(c3rec.lngth,LNGS.STR_FRMT_07)))||htf.bold(' x W ')||htf.formtext( 'P4W', 10, 20, ltrim(to_char(c3rec.width,LNGS.STR_FRMT_07)))||htf.bold(' x H ')||htf.formtext( 'P4H', 10, 20, ltrim(to_char(c3rec.height,LNGS.STR_FRMT_07)))||htf.bold(' x No ')||htf.formtext( 'P4C', 10, 20, ltrim(to_char(c3rec.dim_calc_qty)))||htf.bold(' ) in metres'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=4' );
             if access_id = 'z' then
                v_readonly := 'style="background-color: #E0E0D0;" readonly';
             elsif c3rec.sa = 'S' and c3rec.cl = 'L' then
                v_readonly  := '&nbsp;';      
             else 
                v_readonly := 'style="background-color: #E0E0D0;" readonly';
             end if;
             
             if c3rec.rowid is null then
                htp.tabledata( htf.formtext( 'P4', 10, 20, ltrim(to_char(c3rec.partvolume,LNGS.STR_FRMT_07)), cattributes=>v_readonly)||'&nbsp;&nbsp;&nbsp;'||htf.anchor2( 'strangp.detail_items?surl=' || surl || '&rid=' || replace(c3rec.rowid,'+','~') || '&parm=ADD&recctr=' || vrecctr, 'Add Dimensions read only', ctarget=>'_top', cattributes=>'onclick="return false;" title="Please save this delivery item first!"' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3' );
             else
                htp.tabledata( htf.formtext( 'P4', 10, 20, ltrim(to_char(c3rec.partvolume,LNGS.STR_FRMT_07)), cattributes=>v_readonly)||'&nbsp;&nbsp;&nbsp;'||htf.anchor2( 'strangp.detail_items?surl=' || surl || '&rid=' || replace(c3rec.rowid,'+','~') || '&parm=ADD&recctr=' || vrecctr, 'Add Dimensions ', ctarget=>'_top' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3' );
             end if;

        --     htp.tabledata( htf.formtext( 'P4', 10, 20, ltrim(to_char(c3rec.partvolume,LNGS.STR_FRMT_07)), cattributes=>v_readonly)||'&nbsp;&nbsp;&nbsp;'||htf.anchor2( 'strangp.detail_items?surl=' || surl || '&rid=' || replace(c3rec.rowid,'+','~') || '&parm=ADD&recctr=' || vrecctr, 'Add Dimensions ', ctarget=>'_top' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3' );
             htp.formhidden( 'P4L',c3rec.lngth );
             htp.formhidden( 'P4W',c3rec.width );
             htp.formhidden( 'P4H',c3rec.height );
             htp.formhidden( 'P4C',c3rec.dim_calc_qty );
             htp.tabledata( '&nbsp;&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
          else 
        htp.tabledata( htf.formtext( 'P4', 10, 20, ltrim(to_char(c3rec.partvolume,LNGS.STR_FRMT_07)))|| htf.bold(' &nbsp;&nbsp;Or &nbsp;&nbsp;( L ')||htf.formtext( 'P4L', 10, 20, ltrim(to_char(c3rec.lngth,LNGS.STR_FRMT_07)))||htf.bold(' x W ')||htf.formtext( 'P4W', 10, 20, ltrim(to_char(c3rec.width,LNGS.STR_FRMT_07)))||htf.bold(' x H ')||htf.formtext( 'P4H', 10, 20, ltrim(to_char(c3rec.height,LNGS.STR_FRMT_07)))||htf.bold(' x No ')||htf.formtext( 'P4C', 10, 20, ltrim(to_char(c3rec.dim_calc_qty)))||htf.bold(' ) in metres'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=4' );
          end if;       
      end if;
      else
       htp.tabledata( ltrim(to_char(c3rec.partvolume,LNGS.STR_FRMT_07)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" COLSPAN=4' );
       htp.formhidden( 'P4L',c3rec.lngth );
       htp.formhidden( 'P4W',c3rec.width );
       htp.formhidden( 'P4H',c3rec.height );
       htp.formhidden( 'P4C',c3rec.dim_calc_qty );
     end if;
--     htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
--     htp.p( '</TD>' );

  htp.tablerowclose;

  htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_059 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if nvl(vste, 'SYD') not in ( 'BNE', 'TVL') then 
        if vaccess = 'EDIT' then
           htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=9>' );
           htp.formtext( 'D8', 90, 90, c3rec.detaildesc);
---       if c3rec.logno is not null and seclevel not in ( 'LEVEL 8' ) then htp.anchor2( 'strangp.edit_ecn_log?surl=' || surl || '&lg=' || c3rec.logno || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(vrecctr), LNGS.STR_TXT_409, ctarget=>'ASSIGN_BY_LOG' ); end if;
---        htp.anchor2( 'strangp.po_item_no_maintain?surl=' || surl || '&strt=' || c3rec.deliveryno || '&rid=' || replace(c3rec.rowid,'+','~') || '&vrecctr=' || vrecctr, 'PO Maintain', ctarget=>'_top' );
---       if seclevel in ( 'LEVEL 5','LEVEL 7','LEVEL 8' )
---       then
---        htp.anchor2( 'strangp.entry_maintain?surl=' || surl || '&strt=' || c3rec.entry_no || '&rid=' || replace(c3rec.rowid,'+','~') || '&vrecctr=' || vrecctr, 'Entry Maintain', ctarget=>'_top' );
---        htp.anchor2( 'strangp.container_maintain?surl=' || surl || '&strt=' || c3rec.movement_no || '&strt2=' || c3rec.camov_seal || '&rid=' || replace(c3rec.rowid,'+','~') || '&vrecctr=' || vrecctr, 'Container Maintain', ctarget=>'_top' );
 --       htp.anchor2( 'strangp.delivery_maintain?surl=' || surl || '&strt=' || c3rec.deliveryno || '&rid=' || replace(c3rec.rowid,'+','~') || '&vrecctr=' || vrecctr, 'Delivery Maintain', ctarget=>'_top' );
---        end if;
           htp.p( '</TD>' );
        else
           htp.tabledata( c3rec.detaildesc, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=9' );
        end if;
      else   
        if vaccess = 'EDIT'
         then
            htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=7>' );
            htp.formtext( 'D8', 90, 90, c3rec.detaildesc);
            htp.p( '</TD>' );
        else
            htp.tabledata( c3rec.detaildesc, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=7' );
        end if;
        htp.tabledata( htf.bold( 'SMP No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
        if c13rec.rowid is not null then
           htp.tabledata(  htf.anchor2('STRANGP.mng_smp?surl=' || surl || '&rid='|| replace(c13rec.rowid, '+', '~')||'&parm=SMP&access_id=x&msg=',  c3rec.smp_no  ,ctarget=>'NEWECN'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
        else
            htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
        end if;
      end if;
--     htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       if c2rec.io = 'I' then
         htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' id="D8z" BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="1"');
       else
         htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' id="D8z" BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="1"');
       end if;

  htp.tablerowclose;

  htp.tablerowopen;
     if vste not in ('MEL','SYD','MOT','KIU','TAB') then
     htp.tabledata( htf.bold( LNGS.STR_TXT_060 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
        htp.tabledata( htf.formhidden( 'D6', c3rec.ecn ) || c3rec.ecn, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       else
        htp.tabledata( htf.formtext( 'D6', 20, 15, c3rec.ecn), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
      end if;
      else
       htp.tabledata( c3rec.ecn, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     end if;
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2>' );
     htp.p( '</TD>' );
     htp.formhidden( 'D6', c3rec.ecn );
    end if;
     htp.tabledata( htf.bold( 'Hazardous Codes' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
        htp.tabledata( htf.formhidden( 'D5', c3rec.hazard ) || c3rec.hazard, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       else
        htp.tabledata( htf.formtext( 'D5', 30, 120, c3rec.hazard), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
      end if;
      else
       htp.tabledata( c3rec.hazard, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     end if;
     
--   if nvl(c2rec.io, v_direction) = 'O'  then
--     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2>' );
--     htp.p( '</TD>' );
--   else 
--        htp.tabledata( htf.bold( 'Handling Unit/Case#' )|| '&nbsp;&nbsp;'|| htf.formhidden( 'P6i', c3rec.handling_unit ) || c3rec.handling_unit, cattributes=>' id="P6z" '||v_cell_hide_switch||' '||glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
      htp.tabledata( htf.bold('Receiving Warehouse'),cattributes=>' id="P9x" '||v_cell_hide_switch||' '||glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      if vaccess = 'EDIT'
      then
         htp.p( '<TD ' ||' id="P9z" '||v_cell_hide_switch||' '|| glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
         htp.formselectopen( 'P9' );
         for c9rec in c9 loop
           if c9rec.code = c3rec.warehouse
           then
              htp.formselectoption( c9rec.code, 'SELECTED' );
           else
              htp.formselectoption( c9rec.code );
           end if;
         end loop;
         htp.formselectclose;
         htp.p( '</TD>' );
      else
         htp.tabledata( c3rec.warehouse,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         htp.formhidden( 'P9', c3rec.warehouse );
      end if;
--    end if;
     htp.tabledata( htf.bold( LNGS.STR_TXT_062 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     -- Added by David Banjo 14 Sep 2020
     if c3rec.movement_no is not null then
        htp.tabledata(htf.anchor2('STRANGP.movement?surl=' || surl || '&rid=' || replace(c12rec.rowid, '+', '~') ||'&scid='||scid||'&call_name=STRANGP.RECEIVE_BOTTOM&parm='||c12rec.movement_type||'&access_id=x&msg=', c3rec.movement_no, ctarget=>'NEWECN'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     --  htp.anchor2( 'strangp.edit_ecn_log?surl=' || surl || '&lg=' || c3rec.logno || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(vrecctr), c3rec.movement_no, ctarget=>'ASSIGN_BY_LOG' );
     else
        htp.tabledata( nvl(c3rec.movement_no,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     end if;
     htp.tabledata( htf.bold( LNGS.STR_TXT_063 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( nvl(c3rec.camov_seal,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
--     htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
--     htp.p( '</TD>' );
     if vaccess = 'EDIT'
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=9>' );
       if c3rec.logno is not null and seclevel not in ( 'LEVEL 8' ) then htp.anchor2( 'strangp.edit_ecn_log?surl=' || surl || '&lg=' || c3rec.logno || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(vrecctr), 'ECN/CONNOTE Assign', ctarget=>'ASSIGN_BY_LOG' ); end if;
       if seclevel in ( 'LEVEL 5','LEVEL 7','LEVEL 8' )
       then
        htp.p(pop_up_window( 'height=550,width=1000,scrollbars=yes,resizable=yes,titlebar=yes,addressbar=yes'));
        htp.anchor2( 'strangp.entry_maintain?surl=' || surl || '&strt=' || c3rec.entry_no || '&rid=' || replace(c3rec.rowid,'+','~') || '&vrecctr=' || vrecctr, 'Entry Maintain', ctarget=>'_top' );
        htp.anchor2( 'strangp.container_maintain?surl=' || surl || '&strt=' || c3rec.movement_no || '&strt2=' || c3rec.camov_seal || '&rid=' || replace(c3rec.rowid,'+','~') || '&vrecctr=' || vrecctr, 'Container/Mawb Maintain', ctarget=>'_top' );
        htp.anchor2( 'strangp.log_maintain?surl=' || surl || '&strt=' || c3rec.logno || '&rid=' || replace(c3rec.rowid,'+','~') || '&vrecctr=' || vrecctr, 'Log Maintain', ctarget=>'_top' );
        p_url := '''strangp.connote_maintain?surl=' || surl || '&rid=' || replace(c3rec.rowid,'+','~') || '&vrecctr=' || vrecctr||'&pk1=&pk2=&v1=&v2=&v3=&v4=&v5=&v6=&errmsg='||''''; 
--        htp.p ( '<a href="'||p_url||'" target="popup" onClick="popUpWindow(' || p_url || '); return false;">
--            Connote Maintain
--           </a>');
       end if;
       open c11(c1rec.aid);
	   fetch c11 into c11rec;
	   close c11;
	   if c11rec.tot > 0
	    then
	     htp.anchor2( 'strangp.detail_items?surl=' || surl || '&rid=' || replace(c3rec.rowid,'+','~') ||'&parm=PRINT'||'&recctr=' || vrecctr, 'Print Labels', ctarget=>'_top' );
	   end if;
       htp.p( '</TD>' );
     end if;

  htp.tablerowclose;

  htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_064 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if c3rec.entry_no is not null
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       htp.tableopen;
       htp.tablerowopen;
        htp.p( '<TD>' );
         open c10(c3rec.entry_no);
         fetch c10 into c10rec;
         if c10%FOUND
          then
           htp.anchor2( 'strangp.duty_edit?surl=' || surl || '&entry=' || strang.ent.get_entry_no(c3rec.entry_no), strang.ent.get_entry_no(c3rec.entry_no), ctarget=>'_top');
         else
           htp.p( strang.ent.get_entry_no(c3rec.entry_no));
         end if;
         close c10;
        htp.p( '</TD>' );
       htp.tabledata( '&nbsp;&nbsp;&nbsp;&nbsp;' );
        search( surl, 'ENTRY_NO', c3rec.rowid, samerow=>TRUE, buttons_only=>TRUE, override_top=>'_top' );
       htp.tablerowclose;
       htp.tableclose;
       htp.p( '</TD>' );
      else
       htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     end if;
     htp.tabledata( htf.bold( LNGS.STR_TXT_065 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold('Intl '||c3rec.line_no||' / Local '||c3rec.local_line_no), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     htp.tabledata( htf.bold( LNGS.STR_TXT_066 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     open c5(c3rec.hawb_hawbno);
     fetch c5 into c5rec;
     close c5;
     if c5rec.mawb is not null
      then
       htp.tabledata( htf.bold( c3rec.hawb_hawbno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' ); -- || '(' || c5rec.mawb || ')'
      else
       htp.tabledata( htf.bold( c3rec.hawb_hawbno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     end if;
--
--     htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
       htp.anchor2( 'strangp.po_item_no_maintain?surl=' || surl || '&strt=' || c3rec.deliveryno || '&rid=' || replace(c3rec.rowid,'+','~') || '&vrecctr=' || vrecctr, 'PO Maintain', ctarget=>'_top' );
       htp.p( '</TD>' );
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
       htp.anchor2( 'strangp.po_inventory_maintain?surl=' || surl || '&strt=' || c3rec.deliveryno || '&rid=' || replace(c3rec.rowid,'+','~') || '&vrecctr=' || vrecctr, 'PO2 Maintain', ctarget=>'_top' );
       htp.p( '</TD>' );
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
       htp.anchor2( 'strangp.po_inventdate_maintain?surl=' || surl || '&strt=' || c3rec.deliveryno || '&rid=' || replace(c3rec.rowid,'+','~') || '&vrecctr=' || vrecctr, 'PO3 Maintain', ctarget=>'_top' );
       htp.p( '</TD>' );
       htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1');
     else
       htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN=4');
     end if;

     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER">' );
     htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
     htp.tablerowopen;
     if vaccess = 'EDIT'
      then
       if c3rec.rowid is not null
        then
         -- Start work work js script here.
        --- htp.tabledata( htf.formimage( LNGS.STR_TXT_067,glbx.IMAGE_LOCATION || 'adminc_save.gif', cattributes=>'onclick="hide_receival_direction_switch()" BORDER=0 ALIGN="LEFT"' ));
         htp.tabledata( htf.formimage( LNGS.STR_TXT_067,glbx.IMAGE_LOCATION || 'adminc_save.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
         if seclevel in ( 'LEVEL 8' )
          then
            null;
          else
           htp.tabledata( htf.formimage( LNGS.STR_TXT_068,glbx.IMAGE_LOCATION || 'adminc_insert.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
           htp.tabledata( htf.formimage( LNGS.STR_TXT_069,glbx.IMAGE_LOCATION || 'adminc_split.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
           if c3rec.movement_no is null
            then
             htp.tabledata( htf.formimage( LNGS.STR_TXT_070,glbx.IMAGE_LOCATION || 'adminc_delete.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
           end if;
         end if;
        else
         htp.tabledata( htf.formimage( LNGS.STR_TXT_067,glbx.IMAGE_LOCATION || 'adminc_save.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
       end if;
     end if;

     if recctr = 0
      then
       htp.tabledata( htf.formimage( LNGS.STR_TXT_359,glbx.IMAGE_LOCATION || 'adminc_cancel.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
      elsif vrecctr > 1 and vrecctr < c4rec.tot
       then
        if vaccess = 'EDIT'
         then
          htp.tabledata( htf.formimage( LNGS.STR_TXT_071,glbx.IMAGE_LOCATION || 'adminc_previous.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
          htp.tabledata( htf.formimage( LNGS.STR_TXT_072,glbx.IMAGE_LOCATION || 'adminc_next.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
        elsif vaccess = 'READ'
         then
          htp.tabledata( htf.anchor( 'strangp.receive_bottom?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(vrecctr-1), htf.img( glbx.IMAGE_LOCATION || 'adminc_previous.gif', cattributes=>' BORDER=0',calt=>'Previous Record' ) ));
          htp.tabledata( htf.anchor( 'strangp.receive_bottom?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(vrecctr+1), htf.img( glbx.IMAGE_LOCATION || 'adminc_next.gif', cattributes=>' BORDER=0',calt=>'Next Record' ) ));
        end if;
      elsif vrecctr = c4rec.tot
       then
        if vrecctr > 1
         then
          if vaccess = 'EDIT'
           then
            htp.tabledata( htf.formimage( LNGS.STR_TXT_071,glbx.IMAGE_LOCATION || 'adminc_previous.gif', cattributes=> ' BORDER=0 ALIGN="LEFT"' ));
          elsif vaccess = 'READ'
           then
            htp.tabledata( htf.anchor( 'strangp.receive_bottom?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(vrecctr-1), htf.img( glbx.IMAGE_LOCATION || 'adminc_previous.gif', cattributes=>' BORDER=0',calt=>'Previous Record' ) ));
          end if;
        end if;
      else
       if vaccess = 'EDIT'
        then
         htp.tabledata( htf.formimage( LNGS.STR_TXT_072,glbx.IMAGE_LOCATION || 'adminc_next.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
       elsif vaccess = 'READ'
        then
          htp.tabledata( htf.anchor( 'strangp.receive_bottom?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(vrecctr+1), htf.img( glbx.IMAGE_LOCATION || 'adminc_next.gif', cattributes=>' BORDER=0',calt=>'Next Record' ) ));
       end if;
     end if;

     htp.formclose;

     htp.tabledata( htf.formopen( 'strangp.receive_bottom' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
            htf.formhidden( 'SCID', scid ) || htf.formtext( 'RECCTR', 2, 5, vrecctr ) || htf.formhidden( 'CALL_NAME', call_name ) ||
            htf.formhidden( 'PARM', parm ) || htf.formhidden( 'ACCESS_ID', access_id ) || htf.formsubmit( null, 'GoTo' ) || htf.formclose );

    if seclevel in ( 'LEVEL 5','LEVEL 7','LEVEL 8' )
     then
      htp.tabledata( htf.formopen( 'strangp.menu', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', NULL ) ||
            htf.formhidden( 'RND', to_char(sysdate, 'SSSSS' )) || htf.formhidden( 'ACTION', 'SEARCH' ) || htf.formhidden( 'MTYPE', 'ENTRY_NO' ) ||
            htf.formtext( 'MSEARCH', 20, 100 ) || htf.formsubmit( null, 'Entry' ) || htf.formclose );
    end if;
    htp.tablerowclose;
    htp.tableclose;
    htp.p( '</TD>' );

  htp.tablerowclose;
 htp.tableclose;
 htp.bold( ttl );
 htp.p( '</CENTER>' );
 htp.htmlclose;

exception when others then
 glbx.error_details( 'STRANGP', 'RECEIVE_BOTTOM',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end receive_bottom;

procedure accept_receive_detailr(surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer,
                                detrid in varchar2, p1 in varchar2, p2 in varchar2 default null, p3 in varchar2, p4 in varchar2, p4L in varchar2, p4W in varchar2, p4H in varchar2, p4C in varchar2, p5 in varchar2, p6 in varchar2,p6i in varchar2, p7 in varchar2, p8 in varchar2,
                                p9 in varchar2, a1 in varchar2 default null, d5 in varchar2, d6 in varchar2, d8 in varchar2, cancel in varchar2 default null,
                                save_record in varchar2 default null, previous_record in varchar2 default null, next_record in varchar2 default null, insert_record in varchar2 default null, delete_record in varchar2 default null, split_record in varchar2 default null)
as

 cursor c2( rid rowid ) is select deliveryno,io from strang.receivals where rowid = rid;
 cursor c3( dlryno number, itn integer, lgn varchar2, rid rowid ) is
  select 'x' tot
  from strang.detailrs
  where itemno = itn and
        deliveryno = dlryno and
        logno = lgn and
        rowid <> rid;
 --cursor c4( dlryno number, sto varchar2 ) is select max(recno) tot from strang.pos where deliveryno = dlryno and site_owner = sto;
-- cursor c5( str varchar2, vste varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and cola = vste and code = str and exists
--                               (select 'x' from strang.lov where lov_name = 'CONTROLS' and cola = vste and code = str || '_DATE' and description = to_char(sysdate,'DD-MON-YYYY'));
  cursor c5( str varchar2, vste varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and cola = vste and code = str and exists
                               (select 'x' from strang.lov where lov_name = 'CONTROLS' and cola = vste and code = str || '_DATE' and description = to_char(sysdate,'DD-MON-YYYY')) and colb is null;
 -- Added by DB
 cursor c5a( str varchar2, vste varchar2, p_io varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and cola = vste and code = str and colb = p_io and exists
                               (select 'x' from strang.lov where lov_name = 'CONTROLS' and cola = vste and code = str || '_DATE' and description = to_char(sysdate,'DD-MON-YYYY') and colb = p_io); 

 cursor c6( rid rowid ) is select movement_no, camov_seal from strang.detailrs where rowid = rid;
 cursor c7( pk varchar2 ) is select 'x' from strang.lov where lov_name = 'PACKTYPES' and code = pk;
 cursor c9( whse varchar2 ) is select 'x' from strang.lov where lov_name = 'WAREHOUSES' and code = whse;
 
  cursor c10(vmovid varchar2, vseal varchar2) is
  select m.rowid as rid, movement_no, seal, container_type, movement_type, io
    from strang.movements m 
   where m.movement_no = vmovid 
     and nvl(m.seal,'|') = nvl(vseal,'|') ;
 
  cursor c11( dlryno number, itn integer ) is
  select sum(weight) sum_weight
  from strang.detailrs_item di
  where item_no = itn and
        deliveryno = dlryno;
 
 

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 --c4rec		c4%ROWTYPE;
 c6rec		c6%ROWTYPE;
 c7rec		c7%ROWTYPE;
 c9rec		c9%ROWTYPE;
 c10rec		c10%ROWTYPE;
 c11rec		c11%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 np3		varchar2(20); -- modified by DB
 vlogno		varchar2(20); -- modified by DB
 --vlogno		varchar2(9);
 pv		    number(15,3);
 pvl		number(15,3);
 pvw		number(15,3);
 pvh		number(15,3);
 pvq		number(15,3);
 pw		    number(15,1);
 qt		    integer;
 nmb1		number;
 nrowid		rowid;
 itn		number(5,2);
 am		    number(15,2);
 tam		number(15,2);
 gs		    number(15,2);
 sts		varchar2(100);
 vste		varchar2(10);
 v_weight   number;

begin

 if cancel is not null
  then
   receive_bottom(surl,rid,scid,null,parm,'x',1,LNGS.STR_TXT_359 );
   return;
 end if;

 if delete_record is not null
  then
   confirm_delete_detailrs(surl,rid,scid,detrid,parm,access_id,recctr, 'Confirm Delete of Detail'  );
   return;
 end if;

 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_RECEIVE_DETAILR' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);

 open c2( chartorowid( replace(rid,'~','+') ) );
 fetch c2 into c2rec;
 close c2;
 
 open c6( chartorowid( replace(detrid,'~','+') ) );
 fetch c6 into c6rec;
 close c6;
 

 begin itn := to_number( p1 ); exception when others then receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_074 || ': ' || p1 ); return; end;

 open c3( c2rec.deliveryno, itn, p2, detrid );
 fetch c3 into c3rec;
 if c3%FOUND
  then
    close c3;
    receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_075 || ': ' || p1 || '-' || p2 );
    return;
  end if;
  close c3;

  begin pv := to_number( replace(p4,',','') ); exception when others then receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_076 || ': ' || p4 ); return; end;
  begin pvl := to_number( replace(p4L,',','') ); exception when others then receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_076 || ': ' || p4L ); return; end;
  begin pvw := to_number( replace(p4W,',','') ); exception when others then receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_076 || ': ' || p4W ); return; end;
  begin pvh := to_number( replace(p4H,',','') ); exception when others then receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_076 || ': ' || p4H ); return; end;
  begin pvq := to_number( replace(p4C,',','') ); exception when others then receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_076 || ': ' || p4C ); return; end;
  begin pw := to_number( replace(p5,',','') ); exception when others then receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_077 || ': ' || p5 ); return; end;
  begin qt := to_number( replace(p6,',','') ); exception when others then receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_078 || ': ' || p6 ); return; end;
  pv := nvl(pv,0);
  pvq:= nvl(pvq,qt);
  if nvl(pvl,0)>0 and nvl(pvw,0)>0 and nvl(pvh,0)>0 and nvl(pvq,0)>0 then -- and nvl(pv,0)=0 then  if the individual measurements are changed, it will modify pv
   pv := pvl * pvw * pvh * pvq;
  end if;
  
  -- David Banjo 24/2/2022
  open c11(c2rec.deliveryno, itn);
  fetch c11 into c11rec;
  if c11%found then
     if c11rec.sum_weight <> pw then 
        close c11;
        receive_bottom(surl,rid,scid,null,parm,access_id,recctr,'Item Weight amount '||to_char(pw)||' (kg) different from aggregate Package unit weight');
        return;
     end if;
  end if;
  close c11;
  
  open c7(upper(p7));
  fetch c7 into c7rec;
  if c7%NOTFOUND
   then
    close c7;
    receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_360 || ': ' || p7 );
    return;
  end if;
  close c7;
  open c9(upper(p9));
  fetch c9 into c9rec;
  if c9%NOTFOUND
   then
    close c9;
    receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_360 || ': ' || p9 );
    return;
  end if;
  close c9;
  if detrid is null
   then
    begin
     if a1 = 'T' then
       if vste = 'MEL' and UPPER(p3) = 'S' then
         open c5a( 'LOGNO' || p3, vste, c2rec.io );
         fetch c5a into np3;
         if c5a%NOTFOUND
         then
            np3 := nvl(p2,new_log_no( p3, vste, c2rec.io ) );
         end if;
         close c5a;
       else
       
          open c5( 'LOGNO' || p3, vste );
          fetch c5 into np3;
          if c5%NOTFOUND
             then
             np3 := nvl(p2,new_log_no( p3, vste, c2rec.io ) );
          end if;
           close c5;
        end if;
      else
       np3 := nvl(p2,new_log_no( p3, vste, c2rec.io  ) );
     end if;
     insert into strang.detailrs( deliveryno, itemno, logno, sa, partvolume,lngth,width,height,dim_calc_qty, partweight, qty, pktpe_packtype, cl, owner, entry_no, hazard, ecn, detaildesc, warehouse, io ) values
      ( c2rec.deliveryno, itn, np3, p3, pv, pvl, pvw, pvh, pvq, pw, nvl(qt,1), upper(p7), p8,'1',nmb1, d5, d6, d8, p9, c2rec.io ) returning rowid into nrowid;
    exception
      when others then
            receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_079 || ': ' || sqlerrm );
            return;
    end;
   else
    -- Update The Row
    begin
    if a1 is null
     then
      np3 := p2;
     else
      if a1 = 'T' then
        if vste = 'MEL' and UPPER(p3) = 'S' then
           open c5a( 'LOGNO' || p3, vste, c2rec.io );
           fetch c5a into np3;
           if c5a%NOTFOUND
           then
             np3 := nvl(p2,new_log_no( p3, vste, c2rec.io ) );
           end if;
           close c5a;
        else
       
           open c5( 'LOGNO' || p3, vste );
           fetch c5 into np3;
           if c5%NOTFOUND
           then
              np3 := nvl(p2,new_log_no( p3, vste, c2rec.io ) );
           end if;
           close c5;
        end if;
       else
        np3 := nvl(p2,new_log_no( p3, vste, c2rec.io ) );
      end if;
    end if;
    update strang.detailrs
        set
         logno = np3,
         sa = p3,
         partvolume = pv,
         lngth = pvl,
         width = pvw,
         height = pvh,
         dim_calc_qty = pvq,
         partweight = pw,
         qty = qt,
         handling_unit = strang.f_sap_format(p6i,'HANDLING_UNIT'),
         pktpe_packtype = upper(p7),
         warehouse = upper(p9),
         on_hold_start_dt = case when nvl(warehouse,'xxx') <> nvl(upper(p9),'xxx') and nvl(upper(p9),'xxx')= 'ON HOLD' and on_hold_start_dt is null then sysdate else on_hold_start_dt end,
         on_hold_started_by = case when nvl(warehouse,'xxx') <> nvl(upper(p9),'xxx') and nvl(upper(p9),'xxx')= 'ON HOLD' and on_hold_start_dt is null then c1rec.username else on_hold_started_by end,
       --  on_hold_start_dt = case when nvl(warehouse,'xxx') <> nvl(upper(p9),'xxx') and nvl(upper(p9),'xxx')= 'ON HOLD' then sysdate else on_hold_start_dt end,
      --   on_hold_started_by = case when nvl(warehouse,'xxx') <> nvl(upper(p9),'xxx') and nvl(upper(p9),'xxx')= 'ON HOLD' then c1rec.username else on_hold_started_by end,
         on_hold_end_dt = case when nvl(warehouse,'xxx') <> nvl(upper(p9),'xxx') and nvl(warehouse,'xxx') = 'ON HOLD' then sysdate else on_hold_end_dt end,
         on_hold_end_by = case when nvl(warehouse,'xxx') <> nvl(upper(p9),'xxx') and nvl(warehouse,'xxx') = 'ON HOLD' then c1rec.username else on_hold_end_by end,
         cl = p8,
         hazard = d5,
         ecn = d6,
         detaildesc = d8
       where rowid = chartorowid( detrid );
        exception
             when others then
              receive_bottom(surl,rid,scid,null,parm,access_id,'Details',LNGS.STR_TXT_080 || ': ' || sqlerrm );
              return;
       end;
       
       -- Added by David Banjo 24/10/2021
       if c6rec.movement_no is not null then
          open c10(c6rec.movement_no, c6rec.camov_seal );
          fetch c10 into c10rec;
          if c10%FOUND then
             strangp.recalc_weight(  c10rec.movement_no, c10rec.container_type, c10rec.seal, c10rec.movement_type, c10rec.rid );
          end if;
          close c10;
       end if;
       
       
   end if;

 commit;

 if previous_record is not null
  then
   receive_bottom(surl,rid,scid,null,parm,access_id,recctr - 1,null );
   return;
 elsif next_record is not null
  then
   receive_bottom(surl,rid,scid,null,parm,access_id,recctr + 1,null );
   return;
 elsif insert_record is not null
  then
   receive_bottom(surl,rid,scid,null,parm,access_id,0,null );
   return;
 elsif split_record is not null
  then
   split_detailrs(surl,detrid,scid,null,parm,access_id,recctr,null );
   return;
 elsif save_record is not null
  then
   receive_bottom(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_081 );
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_RECEIVE_DETAILR',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_receive_detailr;

procedure split_detailrs(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer default 1, msg in varchar2 default NULL )
as

 cursor c2( rid rowid ) is select * from strang.detailrs where rowid = rid;


 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.SPLIT_DETAILRS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'DETAILRS', rid );

  open c2(chartorowid(replace(rid,'~','+')));
  fetch c2 into c2rec;
  close c2;
  c1rec := glbx.get_aid( owner_id, 'C', ltype );
  pfx := glbx.get_thm( c1rec.theme_name );

  glbx.main_title( surl, LNGS.STR_TXT_082,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR05',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);

  htp.nl;
  htp.p( '<CENTER>' );
  htp.formopen( 'strangp.accept_split_detailrs' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'RECCTR', recctr);
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
   htp.tablerowopen;
    htp.tabledata( htf.bold( LNGS.STR_TXT_083 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold( c2rec.qty ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold( LNGS.STR_TXT_317 ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.formradio( 'P1', 'A', 'CHECKED'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold( LNGS.STR_TXT_084 ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'P2', 5, 10 ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.formradio( 'P1', 'M'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold( LNGS.STR_TXT_085 ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'P2', 5, 10 ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
  htp.tableclose;
  htp.nl;
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_086 );
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_318 );
  htp.formclose;
  htp.p( '</CENTER>' );
  htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'SPLIT_DETAILRS',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end split_detailrs;

procedure accept_split_detailrs(surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer default 1, action in varchar2, p1 in varchar2, p2 in GLBX.MYARRAY )
as

 cursor c2( rid rowid ) is select * from strang.detailrs where rowid = rid;
 cursor c3( dlr number ) is select rowid,io from strang.receivals where deliveryno = dlr;
 cursor c4( dlr number ) is
  select max(itemno) mx
  from strang.detailrs
  where deliveryno = dlr;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 nmb		integer;
 sts		varchar2(100);
 vaccess	varchar2(20);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_SPLIT_DETAILRS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  vaccess := data_access( owner_id, 'DETAILRS', rid );

  open c2(chartorowid(replace(rid,'~','+')));
  fetch c2 into c2rec;
  close c2;
  c2rec.partweight := nvl(c2rec.partweight,0);
  c2rec.partvolume := nvl(c2rec.partvolume,0);
  c2rec.qty := nvl(c2rec.qty,0);

  open c3(c2rec.deliveryno);
  fetch c3 into c3rec;
  close c3;
  if action = LNGS.STR_TXT_318
   then
    receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_320 );
    return;
  end if;

  if p1 = 'A'
   then
    begin nmb := nvl(to_number(p2(1)),0); exception when others then receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_087 ); return; end;
   else
    begin nmb := nvl(to_number(p2(2)),0); exception when others then receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_087 ); return; end;
  end if;
  if nmb > c2rec.qty then receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_088 ); return; end if;
  if nmb = 0 then receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,'Invalid Value Entered. Number must be greater than 0. Operation Cancelled.' ); return; end if;
  open c4(c2rec.deliveryno);
  fetch c4 into c4rec;
  close c4;
  c4rec.mx := nvl(c4rec.mx,1);

  if p1 = 'A'
   then
    for j in 1..nmb loop
     if j = 1
      then
       insert into strang.detailrs
        (itemno,logno,hawb_hawbno,camov_seal,detaildesc,hazard,ecn,sa,cl,
         pktpe_packtype,owner,partvolume,partweight,qty,movement_no,
         deliveryno,entry_no,line_no,warehouse,handling_unit,io) values
        (c4rec.mx+j,c2rec.logno,c2rec.hawb_hawbno,c2rec.camov_seal,c2rec.detaildesc,c2rec.hazard,c2rec.ecn,c2rec.sa,c2rec.cl,
         c2rec.pktpe_packtype,c2rec.owner,round(c2rec.partvolume/nmb,5),trunc(c2rec.partweight/nmb) + mod(c2rec.partweight,nmb),trunc(c2rec.qty/nmb) + mod(c2rec.qty,nmb),c2rec.movement_no,
         c2rec.deliveryno,c2rec.entry_no,c2rec.line_no,c2rec.warehouse,c2rec.handling_unit,c3rec.io);
      else
       insert into strang.detailrs
        (itemno,logno,hawb_hawbno,camov_seal,detaildesc,hazard,ecn,sa,cl,
         pktpe_packtype,owner,partvolume,partweight,qty,movement_no,
         deliveryno,entry_no,line_no,warehouse,handling_unit,io) values
        (c4rec.mx+j,c2rec.logno,c2rec.hawb_hawbno,c2rec.camov_seal,c2rec.detaildesc,c2rec.hazard,c2rec.ecn,c2rec.sa,c2rec.cl,
         c2rec.pktpe_packtype,c2rec.owner,round(c2rec.partvolume/nmb,5),trunc(c2rec.partweight/nmb),trunc(c2rec.qty/nmb),c2rec.movement_no,
         c2rec.deliveryno,c2rec.entry_no,c2rec.line_no,c2rec.warehouse,c2rec.handling_unit,c3rec.io);
      end if;
    end loop;
    delete from strang.detailrs where rowid = chartorowid(replace(rid,'~','+'));
    commit;
    receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_319 );
    return;
  end if;

  c1rec := glbx.get_aid( owner_id, 'C', ltype );
  pfx := glbx.get_thm( c1rec.theme_name );

  glbx.main_title( surl, LNGS.STR_TXT_089,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR06',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);

  htp.nl;
  htp.p( '<CENTER>' );
  htp.formopen( 'strangp.accept_manual_split' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'RECCTR', recctr);
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
   htp.tablerowopen;
    htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold( LNGS.STR_TXT_083 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold( c2rec.qty ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( LNGS.STR_TXT_090,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( LNGS.STR_TXT_091,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
   for j in 1..nmb loop
    htp.tablerowopen;
     htp.tabledata( to_char(j),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     if j = 1
      then
       htp.tabledata( htf.formtext('P1',5,5,to_char(trunc(c2rec.qty/nmb) + mod(c2rec.qty,nmb))),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.formtext('P1',5,5,to_char(trunc(c2rec.qty/nmb))),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     end if;
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     if j = 1
      then
       htp.tabledata( htf.formtext( 'P2', 10, 20, to_char(trunc(c2rec.partweight/nmb) + mod(c2rec.partweight,nmb))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( htf.formtext( 'P3', 10, 20, to_char(round(c2rec.partvolume/nmb,5))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.formtext( 'P2', 10, 20, to_char(trunc(c2rec.partweight/nmb))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( htf.formtext( 'P3', 10, 20, to_char(round(c2rec.partvolume/nmb,5))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
    htp.tablerowclose;
   end loop;
   htp.tableclose;
   htp.nl;
   htp.formsubmit( 'ACTION', LNGS.STR_TXT_092 );
   htp.formsubmit( 'ACTION', LNGS.STR_TXT_318 );
   htp.formclose;
   htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_SPLIT_DETAILRS',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_split_detailrs;

procedure accept_manual_split(surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer default 1, action in varchar2, p1 in GLBX.MYARRAY, p2 in GLBX.MYARRAY, p3 in GLBX.MYARRAY )
as

 cursor c2( rid rowid ) is select * from strang.detailrs where rowid = rid;
 cursor c3( dlr number ) is select rowid,io from strang.receivals where deliveryno = dlr;
 cursor c4( dlr number ) is select max(itemno) mx from strang.detailrs where deliveryno = dlr;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 nmb		integer;
 nmb2		integer;
 nmb3		number;
 nmb4		number;
 sts		varchar2(100);
 vaccess	varchar2(20);
 tot_nmb	number;
 tot_weight	number;
 tot_volume	number;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_SPLIT_DETAILRS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'DETAILRS', rid );

  open c2(chartorowid(replace(rid,'~','+')));
  fetch c2 into c2rec;
  close c2;
  c2rec.partweight := nvl(c2rec.partweight,0);
  c2rec.partvolume := nvl(c2rec.partvolume,0);
  c2rec.qty := nvl(c2rec.qty,0);

  open c3(c2rec.deliveryno);
  fetch c3 into c3rec;
  close c3;
  if action = LNGS.STR_TXT_318
   then
    receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_320 );
    return;
  end if;
  begin nmb := p1.last; exception when others then receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_087 ); return; end;

  if nmb > c2rec.qty then receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_088 ); return; end if;
  open c4(c2rec.deliveryno);
  fetch c4 into c4rec;
  close c4;
  c4rec.mx := nvl(c4rec.mx,0);

  tot_nmb := 0;
  tot_weight := 0;
  tot_volume := 0;
  for j in 1..nmb loop
   begin nmb2 := to_number(p1(j)); exception when others then nmb2 := 0; end;
   begin nmb3 := to_number(p2(j)); exception when others then nmb3 := 0; end;
   begin nmb4 := to_number(p3(j)); exception when others then nmb4 := 0; end;
   --if nmb2 < 1 or nmb2 > c2rec.qty then nmb2 := 1; end if;

   update strang.detailrs
    set
     partvolume = nmb4,
     partweight = nmb3,
     qty = nmb2
   where
    itemno = c4rec.mx+j and
    deliveryno = c2rec.deliveryno;
   if sql%notfound
    then
     insert into strang.detailrs
         (itemno,logno,hawb_hawbno,camov_seal,detaildesc,hazard,ecn,sa,cl,pktpe_packtype,owner,
          partvolume,partweight,qty,
          movement_no,deliveryno,entry_no,line_no,warehouse,handling_unit,io) values
         (c4rec.mx+j,c2rec.logno,c2rec.hawb_hawbno,c2rec.camov_seal,c2rec.detaildesc,c2rec.hazard,c2rec.ecn,c2rec.sa,c2rec.cl,
          c2rec.pktpe_packtype,c2rec.owner,
          nmb4,nmb3,nmb2,
          c2rec.movement_no,c2rec.deliveryno,c2rec.entry_no,c2rec.line_no,c2rec.warehouse,strang.f_sap_format(c2rec.handling_unit,'HANDLING_UNIT'),c3rec.io);
    end if;

    tot_nmb := tot_nmb + nmb2;
    tot_weight := tot_weight + nmb3;
    tot_volume := tot_volume + nmb4;
  end loop;

  if tot_nmb <> c2rec.qty
   then
    rollback;
    receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_342 || ':' || to_char(tot_nmb) || '-' || to_char(c2rec.qty) );
    return;
  elsif tot_weight <> c2rec.partweight
   then
    rollback;
    receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_343 || ':' || to_char(tot_weight) || '-' || to_char(c2rec.partweight) );
    return;
  elsif tot_volume <> c2rec.partvolume
   then
    rollback;
    receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_344 || ':' || to_char(tot_volume) || '-' || to_char(c2rec.partvolume) );
    return;
  else
   delete from strang.detailrs where rowid = chartorowid(replace(rid,'~','+'));
  end if;

  commit;
  receive_bottom(surl,c3rec.rowid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_093 );
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_MANUAL_SPLIT',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_manual_split;

 procedure po_pool_list( parm in varchar2,v_delno in number, v_po in varchar2, v_poitem in number default null, ismand in boolean DEFAULT FALSE, isedit in boolean DEFAULT TRUE )
 as

  cursor c1( v_po varchar2 ) is select po_number, po_item, openqty, po_unit_iso, shipping_text, critical, manual_gr, vendor, vend_name,
  city, material, short_text, matl_group, net_price
  from strang.po_pool
  where
   po_number = v_po
   and to_number(nvl(openqty,'0')) > 0
   order by glbx.guess_number(po_item);

  cursor c2 (delno number) is select count('x') tot from strang.pos where deliveryno = delno and recno is not null;
  cursor c3 ( delno number) is select distinct r.supplier_customer_id from strang.receivals r where r.deliveryno =delno;
  cursor c4( v_po varchar2 , vVend number ) is select po_number, po_item, openqty, po_unit_iso, shipping_text, critical, manual_gr, vendor, vend_name,
  city, material, short_text, matl_group, net_price
  from strang.po_pool
  where
   vendor = vVend and
   po_number = v_po
   and to_number(nvl(openqty,'0')) > 0
   order by po_item;

  c1rec	c1%ROWTYPE;
  c2rec	c2%ROWTYPE;
  c3rec	c3%ROWTYPE;
  c4rec	c4%ROWTYPE;
  vendId   number;
  totrec   number;

 begin

  open c2(v_delno);
   fetch c2 into c2rec;
   totrec := c2rec.tot;
  close c2;
  if totrec >=2 then
   open c3(v_delno);
   fetch c3 into c3rec;
    vendId := c3rec.supplier_customer_id;
  close c3;
  end if;

  if isedit and totrec < 2
   then
    htp.formselectopen( parm );
    if not ismand then htp.formselectoption( NULL ); end if;
    for c1rec in c1( v_po ) loop
     if (v_poitem is not null) and (v_poitem = c1rec.po_item)
      then

       htp.formselectoption( c1rec.po_item||' '||c1rec.material ||' '||c1rec.openqty||' '|| c1rec.po_unit_iso||' '||substr(c1rec.short_text,1,20)||' '||to_char(c1rec.net_price, '999,999.00'), 'SELECTED', cattributes=>'VALUE="' || c1rec.po_item || '"' );
      else
       htp.formselectoption( c1rec.po_item||' '||c1rec.material ||' '||c1rec.openqty||' '|| c1rec.po_unit_iso||' '||substr(c1rec.short_text,1,20)||' '||to_char(c1rec.net_price, '999,999.00'), cattributes=>'VALUE="' || c1rec.po_item || '"' );
     end if;
    end loop;
    htp.formselectclose;
  end if;
  if isedit and totrec >= 2
   then
    htp.formselectopen( parm );
    if not ismand then htp.formselectoption( NULL ); end if;
    for c4rec in c4( v_po, vendID ) loop
     if (v_poitem is not null) and (v_poitem = c4rec.po_item)
      then
       htp.formselectoption( c4rec.po_item||' '||c4rec.material ||' '||c4rec.openqty||' '|| c4rec.po_unit_iso||' '||substr(c4rec.short_text,1,20)||' '||to_char(c4rec.net_price, '999,999.00'), 'SELECTED', cattributes=>'VALUE="' || c4rec.po_item || '"' );
      else
       htp.formselectoption( c4rec.po_item||' '||c4rec.material ||' '||c4rec.openqty||' '|| c4rec.po_unit_iso||' '||substr(c4rec.short_text,1,20)||' '||to_char(c4rec.net_price, '999,999.00'), cattributes=>'VALUE="' || c4rec.po_item || '"' );
     end if;
    end loop;
    htp.formselectclose;
  end if;
 exception
 when others then htp.p( sqlerrm );

 end po_pool_list;

procedure pooladdVendor( vdelno in number, vName in varchar2, vCustid in number, vStreet in varchar2,vCity in varchar2, vDistrict in varchar2, vRegion in varchar2, vPostl_code in varchar2, vCountry in varchar2)
as

 cursor c1 is
 select customer
 from strang.customers
 where customer = vName and
 customer_type = 'SUPPLIER';

 cursor c2 is
 select customer
 from strang.customers
 where customer_id = vCustid and
 customer_type = 'SUPPLIER';


 c1rec    c1%ROWTYPE;
 c2rec    c2%ROWTYPE;

 begin

 open c1;
 fetch c1 into c1rec;
 if c1%NOTFOUND then
  open c2;
  fetch c2 into c2rec;
  if c2%NOTFOUND then
    insert into strang.customers(customer_id,customer,street, City,suburb, state,postcode, country,customer_type) values(vCustid,vName,vStreet,vCity, vDistrict, vRegion, vPostl_code, vCountry,'SUPPLIER');
    commit;
  end if;
  close c2;
 end if;
 close c1;
 update strang.receivals set supplier_customer_id = vCustid where deliveryno = vDelno;
 commit;
end pooladdVendor;

procedure pooladdMaterial( vCode in varchar2, vDesc in varchar2, vPoUnitISO in varchar2, vMatl_group in varchar2, vVendor in varchar2)
as

 cursor c1 is
 select code
 from strang.lov
 where lov_name = 'INVENT' and
 code = vCode;

 c1rec    c1%ROWTYPE;

 begin

 open c1;
 fetch c1 into c1rec;
 if c1%NOTFOUND then
    insert into strang.lov(lov_name, code, description, colb, colc, cold) values('INVENT',vCode,nvl(vDesc,' '),nvl(vPOUnitISO,' '), nvl(vMatl_group,' '), nvl(vVendor,' '));
    commit;
 else
    update strang.lov set colc = vMatl_group where lov_name='INVENT' and code = vCode;
    commit;
  end if;
 close c1;
 end pooladdMaterial;

 procedure grnstatus_list( parm in varchar2, v_grnstatus in varchar2, ismand in boolean DEFAULT FALSE, isedit in boolean DEFAULT TRUE )
 as

  cursor c1( v_cStat varchar2 ) is
  select distinct cola, description
  from strang.lov
  where
   lov_name = 'GRN_STATUS' and
   substr(code,1,1) = v_cStat
   order by cola;

  c1rec	c1%ROWTYPE;
  ctr   integer;
 begin

  if isedit
   then
    ctr := 0;
    htp.formselectopen( parm );
    if not ismand then htp.formselectoption( NULL ); end if;
    for c1rec in c1( v_grnstatus ) loop
       ctr := ctr + 1;
       if (v_grnstatus is not null) and (v_grnstatus = c1rec.cola) then
       htp.formselectoption( c1rec.cola||' - '||c1rec.description, 'SELECTED', cattributes=>'VALUE="' || c1rec.cola || '"' );
--         htp.formselectoption( c1rec.cola, 'SELECTED', cattributes=>'VALUE="' || c1rec.cola || '"' );
       else
       htp.formselectoption( c1rec.cola||' - '||c1rec.description, cattributes=>'VALUE="' || c1rec.cola || '"' );
--         htp.formselectoption( c1rec.cola, cattributes=>'VALUE="' || c1rec.cola || '"' );
     end if;
    end loop;
    if ctr = 0 then htp.formselectoption( NULL ); end if;
    htp.formselectclose;
  end if;
 exception
 when others then htp.p( sqlerrm );
 end grnstatus_list;

function f_getMaterial( vCode in varchar2, isShortDesc in boolean )
return varchar2
as

 cursor c1 is
 select description|| '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||' Tariff: '|| nvl(cola,'TBC')||'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||' MaterialGroup: '|| colc idesc
 from strang.lov
 where lov_name = 'INVENT' and
 code = vCode;

 cursor c2 is
 select description idesc
 from strang.lov
 where lov_name = 'INVENT' and
 code = vCode;

 c1rec    c1%ROWTYPE;
 c2rec    c2%ROWTYPE;
 retvar   varchar2(1000);

 begin

 if isShortdesc then
  open c2;
  fetch c2 into c2rec;
  if c2%NOTFOUND then
     retvar := ' ';
  else
     retvar := c2rec.idesc;
  end if;
  close c2;
 else
  open c1;
  fetch c1 into c1rec;
  if c1%NOTFOUND then
     retvar := ' ';
  else
     retvar := c1rec.idesc;
  end if;
  close c1;
 end if;
 return ( substr(retvar,1,200) );
 end f_getMaterial;

function get_customer_id(aid integer, typ varchar2 default 'CUSTOMER_ID') return integer
as
cursor c1(v_aid integer, v_typ varchar2) is
 select c.customer_id
 from   strang.customers c, customer_roles cr, piction_roles pr
 where  cr.aid = v_aid
        and pr.role_id = cr.role_id
        and pr.role_type = 'PARAMETER'
        and pr.parameter_name = v_typ
        and c.customer_id = glbx.guess_number(pr.parameter_value)
 ;
 c1rec        c1%rowtype;
begin
 open c1(aid, typ);
 fetch c1 into c1rec;
 close c1;
 return(c1rec.customer_id);
exception when others then
 return( null );
end get_customer_id;

-- procedure receive_po(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer default 1, msg in varchar2 default NULL, checked_po in varchar2 default null )
procedure receive_po(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer default 1, msg in varchar2 default NULL, checked_po in varchar2 default null, p3 in varchar2 default null, p5 in varchar2 default null )
as

 cursor c2( rid rowid ) is select * from strang.receivals where rowid = rid;
 cursor c3( dlrvy number ) is
  select rowid,recno,inventoryno,po,supinv,amount,qty,unit_unitused,excise_qty, excise_unit, ctry_countrycode,gstc_gstcode,gst,tamount,delivery_charge,deliveryno,po_item_no,off_site_receipt,sap_delno,sap_delno_item,grn,state,
  PO_POOL_LOOKUP, GRN_ITEM, CRITICAL_FLAG, MANUAL_GRN, SAP_DELNO_UNIT, GRN_STATUS, SHIPPING_TEXT, SAP_DELNO_QTY, SAP_DELNO_OPEN_QTY
  , FREIGHT_MODE, ltrim(REGEXP_SUBSTR( warehouse_plant ,'(^[DI])?([[:digit:]]{4})?(/[A-Z]{1}[[:digit:]]{3})?',1,1,'i',3),'/') warehouse  
  from strang.pos
  where deliveryno = dlrvy
  order by recno,inventoryno;
 cursor c4( dlrvy number ) is select count('x') tot, max(recno) mx from strang.pos where deliveryno = dlrvy;
 cursor c5( dlryno number ) is select max(recno) tot from strang.pos where deliveryno = dlryno;
 cursor c6( vste varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'DEFAULT COUNTRY CODE' and cola = vste;
 cursor c7( dlryno number ) is
  select nvl(l.cola,'LC') wbill
  from strang.lov l, strang.detailrs dr
  where lov_name = 'PACKTYPES' and
  dr.pktpe_packtype = l.code and
  dr.deliveryno = dlryno and
  dr.itemno in
  (select min(itemno)
   from strang.detailrs
   where deliveryno = dlryno)
;

 cursor c8( v_po varchar2, v_poitem number )
 is
 select po_number, po_item, openqty, po_unit_iso, shipping_text, critical, manual_gr, vendor, vend_name, street, district, region, postl_code, countryiso,
  city, material, short_text, matl_group, net_price
  from strang.po_pool
  where
   po_number = v_po and
   po_item = v_poitem;

 cursor c9( cd varchar2, v_vste varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and code = cd and cola = v_vste;

 

 c1rec    customer_account%ROWTYPE;
 c2rec    c2%ROWTYPE;
 c3rec    c3%ROWTYPE;
 c4rec    c4%ROWTYPE;
 c5rec    c5%ROWTYPE;
 c8rec    c8%ROWTYPE;
 c9rec    c9%ROWTYPE;
 pfx    THEME%ROWTYPE;
 ltype    varchar2(100);
 stype    integer;
 owner_id integer;
 sts    varchar2(100);
 vrecctr  integer;
 vaccess  varchar2(20);
 ttl    varchar2(200);
 vste   varchar2(10);
 seclevel varchar2(100);
 interface1 boolean;
 read_only  boolean;
 vClient    boolean;
 part_read_only boolean;
 po_read_only boolean;
 isOTML     boolean;
 idesc  varchar2(200);
 def_amt    number;
 v_row_hide_switch varchar2(50);
 v_invoice varchar2(50);
 

begin

  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.RECEIVE_BOTTOM' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'POS', rid );

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 seclevel := oltp.security_role( owner_id );
/*
 open c9( 'INTERFACE1',vste );
  fetch c9 into c9rec;
  if C9%FOUND then
   if c9rec.description = 'FALSE' then
    interface1 := FALSE;
   else
    interface1 := TRUE;
   end if;
  else
   interface1 := FALSE;
  end if;
 close c9;
*/

 read_only := FALSE;
 part_read_only := FALSE;
 po_read_only := FALSE;
 isOTML := FALSE;

 open c2( replace(rid,'~','+') );
 fetch c2 into c2rec;
 close c2;

 -- ADDED by David Banjo on 20/5/2020
 if (c2rec.currdate < '01-JUN-2018') or (c2rec.io = 'O') or (c2rec.interface_flag = 'M') or (c2rec.deliveryno > 3000000 and c2rec.deliveryno < 4000000) or
((c2rec.currdate < '16-DEC-2018') and (c2rec.deliveryno > 4000000 and c2rec.deliveryno < 5000000)) then
  interface1 := FALSE;
 else
  interface1 := TRUE;
 end if;

 if c2rec.cust_customer_id = 1 then
   isOTML := TRUE;
 end if;
 if c2rec.cust_customer_id = 1 and interface1 then
  vClient := TRUE;
 else
  vClient := FALSE;
 end if;

 if access_id = 'z'
  then
   ttl := LNGS.STR_TXT_094;
   glbx.main_title( surl, NULL,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR07',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);
   return;
  else
   if recctr > 0
    then
     open c4( c2rec.deliveryno );
     fetch c4 into c4rec;
     close c4;

     vrecctr := recctr;
     if recctr > c4rec.tot then vrecctr := c4rec.tot; end if;
     ttl := nvl(msg,LNGS.STR_TXT_095 ||  '(' || vrecctr || '/' || c4rec.tot || ')');
     glbx.main_title( surl, NULL,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR07',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);
    else
     vrecctr := 0;
     ttl := nvl(msg,LNGS.STR_TXT_096);
     glbx.main_title( surl, NULL,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR07',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);
   end if;
 end if;

 if nvl(vste,'SYD') = g_outbound_site then
    v_row_hide_switch := 'style="display: none;"';
    v_invoice :=  'DAN Number';
 else 
    v_row_hide_switch := 'style="display: table-row;"';
    v_invoice :=  LNGS.STR_TXT_099;
 end if; 


 if upper(OWA_UTIL.GET_CGI_ENV('HTTP_USER_AGENT'))  like '%TRIDENT%' and parm in ('RECEIVALS','DETAILRS') then
    htp.p('<script type="text/javascript" src="/images/js/pos_direction_switch_IE.js"></script>');
 elsif parm in ('RECEIVALS','DETAILRS') then
    htp.p('<script type="text/javascript" src="/images/js/pos_direction_switch.js"></script>');
 end if;

 if upper(msg) like '%WARNING:%'
  then
   htp.p('<script>function loadImage(){alert("' || substr(msg, instr(upper(msg),('WARNING:'))) || '");}</script><body onload="loadImage()">');
 end if;

 htp.p( '<CENTER>' );
  if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_receive_po' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'RECCTR', vrecctr);
   htp.formhidden( 'CHECKED_PO', checked_po);
 end if;

 if vaccess = 'READ' and vrecctr = 0
  then
   vrecctr := 1;
 end if;

 if vrecctr > 0
  then
   open c3( c2rec.deliveryno );
   for j in 1..vrecctr loop
   fetch c3 into c3rec;
    if c3%NOTFOUND then exit; end if;
   end loop;

   READ_ONLY := FALSE;
   PART_READ_ONLY := FALSE;
   PO_READ_ONLY := FALSE;

   if vClient and substr(c3rec.po,1,2) in ('47','80')
    then
     vClient := FALSE;
   end if;

  if vClient and (nvl(c3rec.grn_status,0) in (8,9))
   then
     READ_ONLY := TRUE;
   end if;
   if vClient and (nvl(c3rec.grn_status,0) in (7))
   then
     READ_ONLY := TRUE;
     PART_READ_ONLY := TRUE;
   end if;
   if vClient and (c3rec.grn_status is not null) and nvl(c3rec.grn_status,10) in (0,1,2,3,4)
   then
     PO_READ_ONLY := TRUE;
   end if;
   close c3;
end if;

 if recctr = 0
  then
    c5rec.tot := NULL;
    open c5( c2rec.deliveryno );
    fetch c5 into c5rec;
    close c5;
    open c6(vste);
    fetch c6 into c3rec.ctry_countrycode;
    close c6;
    c3rec.unit_unitused := 'NO';
    c3rec.qty := 1;
--    c3rec.po_item_no := 1;
/*    open c7(c2rec.deliveryno);
    fetch c7 into c3rec.po_waybill_type ;
    close c7;
    if c3rec.po_waybill_type is null
      then c3rec.po_waybill_type := 'LC';
    end if;
*/ -- 20150526
 end if;
 
 if c2rec.io ='I' then
    v_invoice := LNGS.STR_TXT_099;
    v_row_hide_switch := 'style="display: table-row;"';
elsif  c2rec.io ='O' then
    v_invoice := 'DAN Number';
    v_row_hide_switch := 'style="display: none;"';
end if;

 if vaccess = 'EDIT' then htp.formhidden( 'DETRID', rowidtochar( c3rec.rowid )); end if;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
-- htp.tableopen( cattributes=>'cellspacing=2 cellpadding=2 border=1' );
  htp.tablerowopen;
   if c2rec.io = 'I' then  
    htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>'  id="P0z" BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="10"');
   else
    htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>'  id="P0z" BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="10"');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_097 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if recctr = 0
    then
     htp.tabledata( htf.bold( to_char(nvl(c5rec.tot,0) + 1) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden( 'P0', to_char(nvl(c5rec.tot,0) + 1) );
    else
     htp.tabledata( htf.bold( c3rec.recno ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden( 'P0', to_char(c3rec.recno) );
   end if;
   htp.formhidden( 'P1', c3rec.recno );

   htp.tabledata( htf.bold( LNGS.STR_TXT_098 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT' and not po_read_only
    then
     if not read_only then
       -- htp.tabledata( htf.formtext( 'P3', 15, 17, c3rec.po ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.p('<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
       htp.formtext( 'P3', 15, 17, nvl(c3rec.po, p3) );
       if vaccess = 'EDIT' and vClient
        then
         htp.formimage( LNGS.STR_TXT_067,glbx.IMAGE_LOCATION || 'adminc_save.gif');
	   end if;
	   htp.p('</TD>');
     else
       -- htp.tabledata( c3rec.po,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.p('<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
	   htp.p( c3rec.po) ;
       if vaccess = 'EDIT' and vClient
        then
         htp.formimage( LNGS.STR_TXT_067,glbx.IMAGE_LOCATION || 'adminc_save.gif');
	   end if;
	   htp.p('</TD>');
       htp.formhidden( 'P3', to_char(c3rec.po) );
     end if;
   else
       -- htp.tabledata( c3rec.po,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.p('<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
	   htp.p( c3rec.po) ;
       if vaccess = 'EDIT' and vClient
        then
         htp.formimage( LNGS.STR_TXT_067,glbx.IMAGE_LOCATION || 'adminc_save.gif');
	   end if;
	   htp.p('</TD>');
       htp.formhidden( 'P3', to_char(c3rec.po) );
   end if;
   /*
   if vaccess = 'EDIT' and vClient
    then
--     if c3rec.rowid is not null
--      then
       htp.tabledata( htf.formimage( LNGS.STR_TXT_067,glbx.IMAGE_LOCATION || 'adminc_save.gif', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' ));
--     else
--      htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
--      htp.p( '</TD>' );
--     end if;
     else
--     htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
       htp.p( '</TD>' );
    end if;
	*/

   htp.tabledata( htf.bold( 'PO Item' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');

   if vaccess = 'EDIT' and (not read_only and vClient and not po_read_only)
    then
      htp.p('<TD colspan="3" ' || glbx.QUERY_CELL_BACKGROUND || '>');
      po_pool_list('P51',c3rec.deliveryno, c3rec.po,c3rec.po_item_no);
      htp.p('</TD>') ;
    elsif (isOTML and not vClient) then
     htp.tabledata( htf.formtext( 'P51', 15, 17, c3rec.po_item_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="3"');
    else
      htp.tabledata( c3rec.po_item_no,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="3"');
      htp.formhidden( 'P51', to_char(c3rec.po_item_no) );
   end if;

   htp.tabledata( htf.bold( v_invoice ),cattributes=>'id="P5z" '||glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   
   if vaccess = 'EDIT' and not read_only
    then
     -- htp.tabledata( htf.formtext( 'P5', 15, 17, c3rec.supinv ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.formtext( 'P5', 15, 17, nvl(c3rec.supinv, p5) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( c3rec.supinv,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden( 'P5', to_char(c3rec.supinv) );
   end if;
/*
   htp.tabledata( htf.bold( 'Lookup' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT' and not read_only
     then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
        htp.formselectopen( 'P20' );
        if c3rec.po_pool_lookup = 'Y'
         then
          htp.formselectoption( 'N', cattributes=>'VALUE=""N"' );
          htp.formselectoption( 'Y', 'SELECTED', cattributes=>'VALUE="Y"' );
         else
          htp.formselectoption( 'N', 'SELECTED', cattributes=>'VALUE="N"' );
          htp.formselectoption( 'Y', cattributes=>'VALUE="Y"' );
        end if;
        htp.formselectclose;
        htp.p( '</TD>' );
     else
         htp.tabledata( c3rec.po_pool_lookup, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"' );
         htp.formhidden( 'P20', to_char(c3rec.po_pool_lookup) );
    end if;
*/
  htp.formhidden( 'P20', to_char(c3rec.po_pool_lookup) );
  htp.p( '</TD>' );
--  if vaccess = 'EDIT' and vClient then
--      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
--      htp.p( '</TD>' );
--  end if;
  htp.tablerowclose;
-- ROW 2
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_100 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
       htp.formtext( 'P2', 12, 17, c3rec.inventoryno );
       htp.anchor2( 'strangp.lov?surl=' || surl || '&call_name=strangp.lov&parm=INVENT&lrange=&src=' || c3rec.inventoryno, 'Material No.',ctarget=>'INVENT_SEARCH' );
       htp.p( '</TD>' );
--    elsif vaccess = 'EDIT' and  c3rec.po_pool_lookup = 'Y' and nvl(c3rec.grn_status,10) not in (7,8,9)
--    then
--       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
--       htp.formtext( 'P2', 12, 17, c3rec.inventoryno );
--       htp.anchor2( 'strangp.lov?surl=' || surl || '&call_name=strangp.lov&parm=INVENT&lrange=&src=' || c3rec.inventoryno, 'Inventory',ctarget=>'INVENT_SEARCH' );
--       htp.p( '</TD>' );
    else
     htp.tabledata( c3rec.inventoryno,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden( 'P2', to_char(c3rec.inventoryno) );
   end if;

   htp.tabledata( htf.bold( 'Supplied Qty' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext( 'D6', 15, 17, c3rec.qty), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
    else
     htp.tabledata( c3rec.qty, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     htp.formhidden( 'D6', to_char(c3rec.qty) );
   end if;

   htp.tabledata( htf.bold( 'Supplied Unit' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext( 'D7', 8, 17, c3rec.unit_unitused), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
    else
     htp.tabledata( c3rec.unit_unitused, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     htp.formhidden( 'D7', to_char(c3rec.unit_unitused) );
   end if;

   if isOTML then
     htp.tabledata( htf.bold( 'Critical Flag' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( c3rec.critical_flag, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   else
    htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
    htp.p( '</TD>' );
   end if;
   if vClient then
    htp.tabledata( htf.bold( 'GRN Status' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if VACCESS = 'EDIT' and not read_only
    then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );   --FALSE, FALSE, TRUE
       grnstatus_list( 'GRNST', c3rec.grn_status, TRUE, TRUE );
       htp.p( '</TD>' );
     elsif vaccess = 'EDIT' and part_read_only then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );   --FALSE, FALSE, TRUE
       grnstatus_list( 'GRNST', c3rec.grn_status, TRUE, TRUE );
       htp.p( '</TD>' );
     else
       htp.tabledata( htf.bold( c3rec.grn_status ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'GRNST', to_char(c3rec.grn_status) );
    end if;
   else
    htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
    htp.p( '</TD>' );
    htp.formhidden( 'GRNST', to_char(c3rec.grn_status) );
   end if;
  htp.tablerowclose;

-----ROW 3----------------------------------------------------------
  htp.tablerowopen (cattributes=>'Id="P53z" '|| v_row_hide_switch);  -- start here 
     htp.tabledata( htf.bold( 'Shipping Text'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( c3rec.shipping_text, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );

   htp.tabledata( htf.bold( 'OTML Receipted Qty' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT' and not read_only
    then
     if c3rec.sap_delno_open_qty is not null then
      htp.tabledata( htf.formtext( 'p53a', 15, 17, c3rec.sap_delno_qty)|| htf.bold(' OF '||c3rec.sap_delno_open_qty||' '||c3rec.sap_delno_unit), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     else
      htp.tabledata( htf.formtext( 'p53a', 15, 17, c3rec.sap_delno_qty), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     end if;
    else
     htp.tabledata( c3rec.sap_delno_qty, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     htp.formhidden( 'P53a', c3rec.sap_delno_qty);
   end if;

   htp.tabledata( htf.bold( 'Ordered Unit' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT' and not vClient
    then
     htp.tabledata( htf.formtext( 'p53', 12, 17, c3rec.sap_delno_unit), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
    else
     htp.tabledata( c3rec.sap_delno_unit, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     htp.formhidden( 'P53', c3rec.sap_delno_unit);
   end if;
   if isOTML then
    htp.tabledata( htf.bold( 'Manual GRN' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( c3rec.manual_grn, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   else
    htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
    htp.p( '</TD>' );
   end if;
   if isOTML then
    htp.tabledata( htf.bold( 'Goods Receipt No.'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT' and not vClient
     then
      htp.tabledata( htf.formtext( 'pgrn', 11, 17, c3rec.grn), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     else
      htp.tabledata( c3rec.grn, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
      htp.formhidden( 'PGRN', to_char(c3rec.grn) );
    end if;
   else
    htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
    htp.p( '</TD>' );
    htp.formhidden( 'PGRN', to_char(c3rec.grn) );
   end if;
  htp.tablerowclose;
  htp.formhidden( 'D6e', null);
  htp.formhidden( 'D7e', null);

---------------------------------------------------------------
-- ROW 4

   if isOTML then
    htp.tablerowopen;
    -- OTML Delivery No substituted with Warehouse No.
--    htp.tabledata( htf.bold( 'OTML Delivery No' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--    if vaccess = 'EDIT'
--     then
--      htp.tabledata( htf.formtext( 'p53D', 12, 15, c3rec.sap_delno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1' );
--     else
--      htp.tabledata( c3rec.sap_delno, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1' );
--      htp.formhidden( 'p53D', to_char(c3rec.sap_delno) );
--    end if;
    
    htp.tabledata( htf.bold( 'OTML Warehouse No' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( c3rec.warehouse, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1' );
    htp.formhidden( 'p53D', to_char(c3rec.sap_delno) );
    
    idesc := f_getMaterial(c3rec.inventoryno);
    -- htp.tabledata( idesc ,cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"  COLSPAN=6');
    htp.tabledata( idesc ,cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"  COLSPAN=3');
    htp.tabledata( htf.bold( 'Freight Mode'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
	   -- and not vClient
     then
      htp.tabledata( htf.formtext( 'fmode', 30, 30, c3rec.freight_mode), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2' );
     else
      htp.tabledata( c3rec.freight_mode, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2' );
      htp.formhidden( 'FMODE', to_char(c3rec.freight_mode) );
    end if;
    htp.tabledata( htf.bold( 'Goods Receipt Item.'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT' and not vClient
     then
      htp.tabledata( htf.formtext( 'grnit', 11, 17, c3rec.grn_item), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     else
      htp.tabledata( c3rec.grn_item, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
      htp.formhidden( 'GRNIT', to_char(c3rec.grn_item) );
    end if;
    htp.tablerowclose;
    
    
   else
    htp.formhidden( 'p53D', to_char(c3rec.sap_delno) );
    htp.formhidden( 'GRNIT', to_char(c3rec.grn_item) );
    htp.formhidden( 'FMODE', to_char(c3rec.freight_mode) );
   end if;
---------------------------------------------------------------
-- ROW 5
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_102 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'UNCTYTAB', 'P4', c3rec.ctry_countrycode, TRUE, TRUE, TRUE );
     htp.p( '</TD>' );
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'UNCTYTAB', 'P4', c3rec.ctry_countrycode, TRUE, TRUE, TRUE, isedit=>FALSE );
     htp.p( '</TD>' );
   end if;
   if vste NOT in ('MEL','SYD','MOT','KIU','TAB') then
    htp.tabledata( htf.bold( LNGS.STR_TXT_103 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
     then
     if seclevel in ( 'LEVEL 8' )
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3>' );
       htp.formhidden( 'D4', nvl(c3rec.gstc_gstcode,c2rec.gstc_gstcode) );
       lov_list( 'GSTCODES', 'D4', nvl(c3rec.gstc_gstcode,c2rec.gstc_gstcode), FALSE, TRUE, TRUE, isedit=>FALSE );
       htp.p( '</TD>' );
      else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3>' );
       lov_list( 'GSTCODES', 'D4', nvl(c3rec.gstc_gstcode,c2rec.gstc_gstcode), FALSE, TRUE, TRUE );
       htp.p( '</TD>' );
     end if;
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3>' );
     lov_list( 'GSTCODES', 'D4', nvl(c3rec.gstc_gstcode,c2rec.gstc_gstcode), FALSE, TRUE, TRUE, isedit=>FALSE );
     htp.p( '</TD>' );
   end if;
   htp.tabledata( htf.bold( 'State' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if VACCESS = 'EDIT'
   then
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'STATE', 'ST', c3rec.state, FALSE, FALSE, TRUE );
     htp.p( '</TD>' );
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'STATE', 'ST', c3rec.state, FALSE, FALSE, TRUE, isedit=>FALSE );
     htp.p( '</TD>' );
   end if;
   else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=6>' );
     htp.p( '</TD>' );
     htp.formhidden( 'D4', nvl(c3rec.gstc_gstcode,c2rec.gstc_gstcode) );
     htp.formhidden( 'ST', c3rec.state );
   end if;
   if isOTML then
     htp.tabledata( htf.bold( 'Off Site Receipt' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( c3rec.off_site_receipt, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   else
    htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
    htp.p( '</TD>' );
   end if;

--   htp.tabledata( htf.bold( 'PNG Warehouse' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.formhidden( 'P52', null);
--     htp.tabledata( htf.formtext( 'P52', 10, 17, c3rec.po_warehouse), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
--    else
--     htp.tabledata( c3rec.po_warehouse, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   if vste not in ('MEL','SYD','MOT','KIU','TAB') then
    htp.tabledata( htf.bold( LNGS.STR_TXT_104 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
     then
      if seclevel in ( 'LEVEL 8' )
       then
        htp.tabledata( htf.formhidden( 'D3', ltrim(to_char(c3rec.amount,LNGS.STR_FRMT_06))) || ltrim(to_char(c3rec.amount,LNGS.STR_FRMT_06)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
      else
        if c3rec.amount is null and c2rec.gstc_gstcode = 'NET' and nvl(c3rec.sap_delno_qty, 0) > 0
		 then
		  open c8(c3rec.po, c3rec.po_item_no);
		  fetch c8 into c8rec;
		  close c8;
		  def_amt := nvl(glbx.guess_number(c8rec.net_price), 0)*nvl(c3rec.sap_delno_qty,0);
		  if def_amt > 0
		   then
		    htp.tabledata( htf.formtext( 'D3', 15, 17, ltrim(to_char(def_amt,LNGS.STR_FRMT_06))), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
		  else
		    htp.tabledata( htf.formtext( 'D3', 15, 17, ltrim(to_char(c3rec.amount,LNGS.STR_FRMT_06))), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
		  end if;
		else
          htp.tabledata( htf.formtext( 'D3', 15, 17, ltrim(to_char(c3rec.amount,LNGS.STR_FRMT_06))), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
		end if;
      end if;
     else
      htp.tabledata( ltrim(to_char(c3rec.amount,LNGS.STR_FRMT_06)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
    end if;
    htp.tabledata( htf.bold( LNGS.STR_TXT_105 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
     then
      if seclevel in ( 'LEVEL 8' )
       then
        htp.tabledata( htf.formhidden( 'D5', ltrim(to_char(c3rec.gst,LNGS.STR_FRMT_06))) || ltrim(to_char(c3rec.gst,LNGS.STR_FRMT_06)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       else
        htp.tabledata( htf.formtext( 'D5', 15, 17, ltrim(to_char(c3rec.gst,LNGS.STR_FRMT_06))), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
      end if;
     else
      htp.tabledata( ltrim(to_char(c3rec.gst,LNGS.STR_FRMT_06)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
    end if;
   else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=4>' );
     htp.p( '</TD>' );
    htp.formhidden( 'D5', ltrim(to_char(c3rec.gst,LNGS.STR_FRMT_06)));
    htp.formhidden( 'D3', ltrim(to_char(c3rec.amount,LNGS.STR_FRMT_06)));
   end if;

   htp.tabledata( htf.bold( LNGS.STR_TXT_106 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext( 'D8', 15, 17, ltrim(to_char(c3rec.tamount,LNGS.STR_FRMT_06))), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
    else
     htp.tabledata( ltrim(to_char(c3rec.tamount,LNGS.STR_FRMT_06)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   end if;
     htp.tabledata( htf.bold('Freight Charge') ,cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext( 'D8a', 15, 17, ltrim(to_char(c3rec.delivery_charge,LNGS.STR_FRMT_06))), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
    else
     htp.tabledata( ltrim(to_char(c3rec.delivery_charge,LNGS.STR_FRMT_06)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   end if;
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
   htp.tablerowopen;
   if vaccess = 'EDIT'
    then
     if c3rec.rowid is not null
      then
       htp.tabledata( htf.formimage( LNGS.STR_TXT_067,glbx.IMAGE_LOCATION || 'adminc_save.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
       htp.tabledata( htf.formimage( LNGS.STR_TXT_068,glbx.IMAGE_LOCATION || 'adminc_insert.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
       if seclevel in ( 'LEVEL 8' )
        then
         null;
        else
         if not vClient then
           htp.tabledata( htf.formimage( LNGS.STR_TXT_107,glbx.IMAGE_LOCATION || 'adminc_copy.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
         end if;
       end if;
       if vrecctr <> '0' then
         if c2rec.io = 'O' then 
           htp.tabledata( htf.formimage( LNGS.STR_TXT_070,glbx.IMAGE_LOCATION || 'adminc_delete.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
         elsif nvl(c3rec.grn_status,10) not in (7,8,9) then
           htp.tabledata( htf.formimage( LNGS.STR_TXT_070,glbx.IMAGE_LOCATION || 'adminc_delete.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
         elsif nvl(c3rec.grn_status,10) in (7,8,9) and (seclevel in ('LEVEL 7')) then
           htp.tabledata( htf.formimage( LNGS.STR_TXT_070,glbx.IMAGE_LOCATION || 'adminc_delete.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
         elsif nvl(c2rec.cust_customer_id, 1) not in (1) then
           htp.tabledata( htf.formimage( LNGS.STR_TXT_070,glbx.IMAGE_LOCATION || 'adminc_delete.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
         end if;
        end if;
      else
       htp.tabledata( htf.formimage( LNGS.STR_TXT_067,glbx.IMAGE_LOCATION || 'adminc_save.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
       if recctr > 0
        then
         htp.tabledata( htf.formimage( LNGS.STR_TXT_068,glbx.IMAGE_LOCATION || 'adminc_insert.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
       else
         htp.tabledata( htf.formimage( LNGS.STR_TXT_359,glbx.IMAGE_LOCATION || 'adminc_cancel.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
       end if;
     end if;
   end if;

    if recctr = 0
     then
      if vrecctr <> '0' then htp.tabledata( htf.formimage( LNGS.STR_TXT_359,glbx.IMAGE_LOCATION || 'adminc_cancel.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' )); end if;
    elsif vrecctr > 1 and vrecctr < c4rec.tot
    then
     if vaccess = 'EDIT'
      then
       htp.tabledata( htf.formimage( LNGS.STR_TXT_410,glbx.IMAGE_LOCATION || 'adminc_first.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
       htp.tabledata( htf.formimage( LNGS.STR_TXT_071,glbx.IMAGE_LOCATION || 'adminc_previous.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
       htp.tabledata( htf.formimage( LNGS.STR_TXT_072,glbx.IMAGE_LOCATION || 'adminc_next.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
       htp.tabledata( htf.formimage( LNGS.STR_TXT_411,glbx.IMAGE_LOCATION || 'adminc_last.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
      elsif vaccess = 'READ'
       then
         htp.tabledata( htf.anchor( 'strangp.receive_po?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=1', htf.img( glbx.IMAGE_LOCATION || 'adminc_first.gif', cattributes=>' BORDER=0',calt=>'First Record' ) ));
         htp.tabledata( htf.anchor( 'strangp.receive_po?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(vrecctr-1), htf.img( glbx.IMAGE_LOCATION || 'adminc_previous.gif', cattributes=>' BORDER=0',calt=>'Previous Record' ) ));
         htp.tabledata( htf.anchor( 'strangp.receive_po?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(vrecctr+1), htf.img( glbx.IMAGE_LOCATION || 'adminc_next.gif', cattributes=>' BORDER=0',calt=>'Next Record' ) ));
      end if;
    elsif vrecctr = c4rec.tot
     then
      if vrecctr > 1
       then
        if vaccess = 'EDIT'
         then
          htp.tabledata( htf.formimage( LNGS.STR_TXT_410,glbx.IMAGE_LOCATION || 'adminc_first.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
          htp.tabledata( htf.formimage( LNGS.STR_TXT_071,glbx.IMAGE_LOCATION || 'adminc_previous.gif', cattributes=> ' BORDER=0 ALIGN="LEFT"' ));
        elsif vaccess = 'READ'
         then
          htp.tabledata( htf.anchor( 'strangp.receive_po?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=1', htf.img( glbx.IMAGE_LOCATION || 'adminc_first.gif', cattributes=>' BORDER=0',calt=>'First Record' ) ));
          htp.tabledata( htf.anchor( 'strangp.receive_po?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(vrecctr-1), htf.img( glbx.IMAGE_LOCATION || 'adminc_previous.gif', cattributes=>' BORDER=0',calt=>'Previous Record' ) ));
        end if;
      end if;
    else
     if vaccess = 'EDIT'
      then
       htp.tabledata( htf.formimage( LNGS.STR_TXT_072,glbx.IMAGE_LOCATION || 'adminc_next.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
       htp.tabledata( htf.formimage( LNGS.STR_TXT_411,glbx.IMAGE_LOCATION || 'adminc_last.gif', cattributes=>' BORDER=0 ALIGN="LEFT"' ));
      elsif vaccess = 'READ'
       then
         htp.tabledata( htf.anchor( 'strangp.receive_po?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(vrecctr+1), htf.img( glbx.IMAGE_LOCATION || 'adminc_next.gif', cattributes=>' BORDER=0',calt=>'Next Record' ) ));
     end if;
   end if;
   htp.formclose;

   htp.tabledata( htf.formopen( 'strangp.receive_po' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
          htf.formhidden( 'SCID', scid ) || htf.formtext( 'RECCTR', 2, 5, vrecctr ) || htf.formhidden( 'CALL_NAME', call_name ) ||
          htf.formhidden( 'PARM', parm ) || htf.formhidden( 'ACCESS_ID', access_id ) || htf.formsubmit( null, 'Goto' ) || htf.formclose );
    htp.tablerowclose;
    htp.tableclose;
   htp.p( '</TD>' );
--   htp.tabledata( htf.bold( '' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
       htp.p( '</TD>' );
  htp.tablerowclose;
 htp.tableclose;
 if upper(ttl) like '%WARNING:%'
  then
   ttl := substr(ttl, 1, instr(upper(ttl),('WARNING:'))-1);
 end if;
 htp.bold( ttl );
 htp.p( '</CENTER>' );
 htp.htmlclose;

exception when others then
 glbx.error_details( 'STRANGP', 'RECEIVE_PO',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end receive_po;


procedure confirm_delete_detailrs(surl in varchar2, rid in varchar2, scid in varchar2, detrid in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer default 1, msg in varchar2 default NULL )
as

 cursor c2( rid rowid ) is select * from strang.detailrs where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 ttl		varchar2(200);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.CONFIRM_DELETE_DETAILRS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'POS', rid );

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 open c2( replace(detrid,'~','+') );
 fetch c2 into c2rec;
 close c2;
 if vaccess <> 'EDIT' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 glbx.main_title( surl, 'Confirm Delete of ' || c2rec.itemno, glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR07',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);
 htp.p( '<CENTER>' );
 htp.formopen( 'strangp.accept_delete_detailrs' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'DETRID', replace(detrid,'~','+') );
 htp.formhidden( 'ACCESS_ID', access_id );
 htp.formhidden( 'RECCTR', recctr);
 htp.formsubmit( 'ACTION', LNGS.STR_TXT_450 );
 htp.formsubmit( 'ACTION', 'Delete Detail Record' );
 htp.p( '</CENTER>' );
 htp.htmlclose;

exception when others then
 glbx.error_details( 'STRANGP', 'CONFIRM_DELETE_DETAILRS',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end confirm_delete_detailrs;

procedure confirm_delete_po(surl in varchar2, rid in varchar2, scid in varchar2, detrid in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer default 1, msg in varchar2 default NULL )
as

 cursor c2( rid rowid ) is select * from strang.pos where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 ttl		varchar2(200);
 vste       varchar2(10);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.CONFIRM_DELETE_PO' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'POS', rid );

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 open c2( replace(detrid,'~','+') );
 fetch c2 into c2rec;
 close c2;
 
 vste := customer_state(c1rec.aid);
 
 if nvl(vste,'SYD') = g_outbound_site and c2rec.io = 'I'then
    htp.bold( LNGS.STR_TXT_002a ); htp.htmlclose; return;
 end if;

 if vaccess <> 'EDIT' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if c2rec.grn_status in (8,9) and c2rec.io = 'I' then
   glbx.main_title( surl, 'WARNING:  Goods Already Receipted, Please Also Reverse In SAP.'||htf.nl||'Confirm Delete of ' || c2rec.po||' '||c2rec.po_item_no, glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR07',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);
 else
   glbx.main_title( surl, 'Confirm Delete of ' || c2rec.po||' '||c2rec.po_item_no, glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR07',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);
 end if;
 htp.p( '<CENTER>' );
 htp.formopen( 'strangp.accept_delete_po' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'DETRID', replace(detrid,'~','+') );
 htp.formhidden( 'ACCESS_ID', access_id );
 htp.formhidden( 'RECCTR', recctr);
 htp.formsubmit( 'ACTION', LNGS.STR_TXT_450 );
 htp.formsubmit( 'ACTION', 'Reverse Only' );
 htp.formsubmit( 'ACTION', 'Delete Purchase Order Record' );
 htp.p( '</CENTER>' );
 htp.htmlclose;

exception when others then
 glbx.error_details( 'STRANGP', 'CONFIRM_DELETE_PO',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end confirm_delete_po;

procedure accept_delete_detailrs(surl in varchar2, rid in varchar2, scid in varchar2, detrid in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer, action in varchar2 )
as

 cursor c2( rid rowid ) is select deliveryno from strang.receivals where rowid = rid;
 cursor c6( rid rowid ) is select movement_no, camov_seal from strang.detailrs where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c6rec		c6%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 newrid		rowid;

begin
 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_DELETE_DETAILRS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );

 open c2( chartorowid( replace(rid,'~','+') ) );
 fetch c2 into c2rec;
 close c2;

 if action = 'Delete Detail Record'
  then
   open c6( chartorowid( detrid ));
   fetch c6 into c6rec;
   close c6;
   
   delete from strang.detailrs_item di
     where exists (select 1 
                     from strang.detailrs dr
                    where rowid = chartorowid( detrid )
                      and dr.deliveryno = di.deliveryno
                      and dr.itemno = di.item_no );
   
   delete from strang.detailrs where rowid = chartorowid( detrid );

   if c6rec.movement_no is not null
    then
     recalc_weight( c6rec.movement_no, sl=>c6rec.camov_seal );
   end if;
   commit;
   receive_bottom(surl,rid,scid,null,parm,access_id,recctr - 1,LNGS.STR_TXT_073 );
  else
   receive_bottom(surl,rid,scid,null,parm,access_id,recctr,'Action Cancelled' );
 end if;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_DELETE_DETAILRS',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_delete_detailrs;

procedure accept_delete_po(surl in varchar2, rid in varchar2, scid in varchar2, detrid in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer, action in varchar2 )
as

 cursor c2( rid rowid ) is select deliveryno, cust_customer_id from strang.receivals where rowid = rid;
 cursor c3( detrid rowid ) is select * from strang.pos where rowid = detrid;
 cursor c4( vpo varchar2, vpo_item_no number ) is select * from strang.po_pool where po_number = vpo and po_item = to_char(vpo_item_no);

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 newrid		rowid;

begin
 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_DELETE_PO' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );

 open c2( chartorowid( replace(rid,'~','+') ) );
 fetch c2 into c2rec;
 close c2;

 open c3( chartorowid( replace(detrid,'~','+') ) );
 fetch c3 into c3rec;
 close c3;

 if action = 'Delete Purchase Order Record'
  then
   if c2rec.cust_customer_id = 1 then
     open c4( c3rec.po, c3rec.po_item_no );
     fetch c4 into c4rec;
     if C4%FOUND then
       update strang.po_pool set openqty = to_char(nvl(to_number(openqty),0) + nvl(c3rec.sap_delno_qty,0)) where po_number = c3rec.po and po_item = to_char(c3rec.po_item_no);
       commit;
     end if;
     close c4;
   end if;
   delete from strang.pos where rowid = chartorowid( detrid );
   commit;
   if c3rec.grn_status in (7,8,9) then
     receive_po(surl,rid,scid,null,parm,access_id,recctr,'Reversal Done.  Make sure SAP is reversed as well, if need be.' );
   else
     receive_po(surl,rid,scid,null,parm,access_id,recctr - 1,LNGS.STR_TXT_073 );
   end if;
  elsif action = 'Reverse Only'
   then
   if c2rec.cust_customer_id = 1 then
     open c4( c3rec.po, c3rec.po_item_no );
     fetch c4 into c4rec;
     if C4%FOUND then
       update strang.po_pool set openqty = to_char(nvl(to_number(openqty),0) + nvl(c3rec.sap_delno_qty,0)) where po_number = c3rec.po and po_item = to_char(c3rec.po_item_no);
       commit;
     end if;
     close c4;
   end if;

   update strang.pos set po = '0',
   unit_unitused = 'NO',
   qty = 1,
   inventoryno = null,
   supinv = null,
   amount = null,
   gst = null,
   tamount = null,
   po_item_no = null,
   po_warehouse = null,
   po_waybill_type = null,
   off_site_receipt = null,
   excise_qty = null,
   excise_unit = null,
   sap_delno = null,
   sap_delno_item = null,
   grn = null,
   delivery_charge = null,
   sap_delno_qty = null,
   state = null,
   ahecc = null,
   po_pool_lookup = null,
   grn_item = null,
   critical_flag = null,
   manual_grn = null,
   sap_delno_unit = null,
   grn_status = null,
   shipping_text = null,
   sap_delno_open_qty = null,
   sap_delno_original_qty = null
   where rowid = chartorowid( detrid );
   commit;
   if c3rec.grn_status in (8,9) then
     receive_po(surl,rid,scid,null,parm,access_id,recctr,'Reversal Done.  Make sure SAP is reversed as well.' );
   else
     receive_po(surl,rid,scid,null,parm,access_id,recctr,'Reversal Done.' );
   end if;
  else
   receive_po(surl,rid,scid,null,parm,access_id,recctr,'Action Cancelled' );
 end if;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_DELETE_PO',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_delete_po;

procedure accept_receive_po(surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer,
                            detrid in varchar2, p0 in varchar2, p1 in varchar2, p2 in varchar2 default null, p20 in varchar2, p3 in varchar2, p4 in varchar2, p5 in varchar2,
                            p51 in varchar2, p52 in varchar2, p53 in varchar2, p53a in varchar2, p53d in varchar2,pgrn in varchar2,grnst in varchar2,grnit in varchar2,fmode in varchar2,
                            d3 in varchar2, d4 in varchar2, d5 in varchar2, d6 in varchar2, d7 in varchar2, st in varchar2, d6e in varchar2, d7e in varchar2, d8 in varchar2, d8a in varchar2, cancel in varchar2 default null,
                            save_record in varchar2 default null, first_record in varchar2 default null, previous_record in varchar2 default null, next_record in varchar2 default null, last_record in varchar2 default null, insert_record in varchar2 default null, delete_record in varchar2 default null, copy_record in varchar2 default null, checked_po in varchar2 default null)
as
-- Below line CHANGED by David Banjo 20/5/2020
 cursor c2( rid rowid ) is select deliveryno, cust_customer_id, supplier_customer_id, currdate, io, interface_flag from strang.receivals where rowid = rid;
 cursor c3( dlryno number, rno integer, rid rowid ) is select 'x' tot from strang.pos where recno = rno and deliveryno = dlryno and rowid <> rid;
 cursor c4( lname varchar2, inv varchar2 ) is select 'x' from strang.lov where lov_name = lname and code = inv;
 cursor c5( cde varchar2 ) is select to_number(cola) cola, colb from strang.lov where lov_name = 'GSTCODES' and code = cde;
 cursor c6( rid rowid ) is select * from strang.pos where rowid = rid;
 cursor c7( rid rowid ) is select max(recno)+1 mx from strang.pos where deliveryno = (select deliveryno from strang.pos where rowid = rid );
 cursor c8( rid rowid ) is select count('x') ctr from strang.pos where deliveryno = (select deliveryno from strang.pos where rowid = rid );

 cursor c9( v_po varchar2, v_poitem number )
 is
 select po_number, po_item, openqty, po_unit_iso, shipping_text, critical, manual_gr, vendor, vend_name, street, district, region, postl_code, countryiso,
  city, material, short_text, matl_group, preq_item, preq_name, preq_no, collect_no
  from strang.po_pool
  where
   po_number = v_po and
   po_item = v_poitem;

 cursor c10( v_po varchar2, v_poitem number )
 is
 select po_number, po_item, openqty, po_unit_iso, shipping_text, critical, manual_gr, vendor, vend_name, street, district, region, postl_code, countryiso,
  city, material, short_text, matl_group, preq_item, preq_name, preq_no, collect_no
  from strang.po_pool
  where
   po_number = v_po and
   po_item = v_poitem;

 cursor c11( v_po varchar2)
 is
 select po_number
 from strang.po_pool
 where po_number=v_po;

cursor c12 (delno number) is select count('x') tot from strang.pos where deliveryno = delno and recno is not null;

 cursor c13( delno number)
 is
 select supplier_customer_id vendor
 from strang.receivals
 where deliveryno= delno;

 cursor c14( v_po varchar2, vVend number)
 is
 select vendor
 from strang.po_pool
 where po_number=v_po and
 vendor = vVend;

 cursor c15( cd varchar2, v_vste varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and code = cd and cola = v_vste;
 cursor c16( delno number, v_sup_cust number, v_sup_inv varchar2) is
  select p.deliveryno
  from   strang.receivals r, strang.pos p
  where  upper(p.supinv) = v_sup_inv
         and p.deliveryno = r.deliveryno
		 and r.deliveryno <> delno
		 and r.supplier_customer_id = v_sup_cust
		 and rownum < 2
 ;

cursor c17( dlryno number, rno integer) is select distinct grn_status from strang.pos where recno = rno and deliveryno = dlryno;

cursor c18( lname varchar2, inv varchar2 ) is select code, 'x' from strang.lov 
                                              where lov_name = lname 
                                                and code = inv
                                                and code in ('DP-029242'
                                                            ,'DP8479.02'
                                                            ,'FLIRE95'
                                                            ,'FLUKE'
                                                            ,'FTX2-25/640');

 c1rec    customer_account%ROWTYPE;
 c2rec    c2%ROWTYPE;
 c3rec    c3%ROWTYPE;
 c4rec    c4%ROWTYPE;
 c5rec    c5%ROWTYPE;
 c6rec    c6%ROWTYPE;
 c7rec    c7%ROWTYPE;
 c8rec    c8%ROWTYPE;
 c9rec    c9%ROWTYPE;
 c10rec   c10%ROWTYPE;
 c11rec   c11%ROWTYPE;
 c12rec   c12%ROWTYPE;
 c13rec   c13%ROWTYPE;
 c14rec   c14%ROWTYPE;
 c15rec   c15%ROWTYPE;
 c16rec   c16%ROWTYPE;
 c17rec   c17%ROWTYPE;
 c18rec   c18%ROWTYPE;
 c19rec   c9%ROWTYPE;
 pfx    THEME%ROWTYPE;
 ltype    varchar2(100);
 stype    integer;
 owner_id integer;
 pv   number(15,3);
 pw   number(15,1);
 qt   number;
 itn  number(5,2);
 qte  number;
 am   number(15,2);
 tam  number(15,2);
 dc   number(15,2);
 gs   number(15,2);
 oqty number;
 lno    integer;
 vmsg   varchar2(1000);
 sts    varchar2(100);
 newrid   rowid;
 v_grn_status   number;
 --gn_status number;  -- Added by David Banjo
 interface1 boolean;
 vClient  boolean;
 vste	varchar2(10);
 v_chk  varchar2(100);
 diffqty number;


begin
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
/*
open c15( 'INTERFACE1',vste );
 fetch c15 into c15rec;
 if C15%FOUND then
  if c15rec.description = 'FALSE' then
   interface1 := FALSE;
  else
   interface1 := TRUE;
  end if;
 else
  interface1 := FALSE;
 end if;
close c15;
*/



 open c2( replace(rid,'~','+') );
 fetch c2 into c2rec;
 close c2;

-- Added by David Banjo on 20/5/2020
 if (c2rec.currdate < '01-JUN-2018') or  (c2rec.io = 'O')  or (c2rec.interface_flag = 'M')  or (c2rec.deliveryno > 3000000 and c2rec.deliveryno < 4000000) or
((c2rec.currdate < '16-DEC-2018') and (c2rec.deliveryno > 4000000 and c2rec.deliveryno < 5000000)) then
  interface1 := FALSE;
 else
  interface1 := TRUE;
 end if;

 if c2rec.cust_customer_id = 1 and interface1 then
  vClient := TRUE;
 else
  vClient := FALSE;
 end if;

   if vClient and substr(p3,1,2) in ('47','80')
    then
     vClient := FALSE;
   end if;

 if cancel is not null
  then
   receive_po(surl,rid,scid,null,parm,access_id,1,null );
   return;
 elsif first_record is not null
  then
   receive_po(surl,rid,scid,null,parm,access_id,1,null );
   return;
 elsif previous_record is not null
  then
   receive_po(surl,rid,scid,null,parm,access_id,recctr - 1,null );
   return;
 elsif next_record is not null
  then
   receive_po(surl,rid,scid,null,parm,access_id,recctr + 1,null );
   return;
 elsif last_record is not null
  then
   open c8( chartorowid(detrid) );
   fetch c8 into c8rec;
   close c8;
   receive_po(surl,rid,scid,null,parm,access_id,c8rec.ctr,null );
   return;
 elsif insert_record is not null
  then
   receive_po(surl,rid,scid,null,parm,access_id,0,null, p3=>p3, p5=>p5 );
   return;
 elsif copy_record is not null
  then
   open c6( chartorowid(detrid) );
   fetch c6 into c6rec;
   close c6;
   open c7( chartorowid(detrid) );
   fetch c7 into c7rec;
   close c7;
   insert into strang.pos(recno,inventoryno,po,supinv,amount,qty,unit_unitused,excise_qty,excise_unit,ctry_countrycode,gstc_gstcode,gst,tamount,delivery_charge,deliveryno,po_item_no,off_site_receipt,sap_delno, sap_delno_qty,grn,state,po_pool_lookup,io,grn_status) values
    (nvl(c7rec.mx,1),upper(c6rec.inventoryno),c6rec.po,c6rec.supinv,c6rec.amount,c6rec.qty,c6rec.unit_unitused,c6rec.excise_qty,c6rec.excise_unit,c6rec.ctry_countrycode,c6rec.gstc_gstcode,c6rec.gst,c6rec.tamount,c6rec.delivery_charge,c6rec.deliveryno,c6rec.po_item_no,decode(c2rec.io,'O',sysdate,c6rec.off_site_receipt),c6rec.sap_delno,c6rec.sap_delno_qty,c6rec.grn,c6rec.state,c6rec.po_pool_lookup,c2rec.io,decode(c2rec.io,'O',9,null))
    returning rowid into newrid;
   commit;

   open c8( newrid );
   fetch c8 into c8rec;
   close c8;
   receive_po(surl,rid,scid,null,parm,access_id,c8rec.ctr,null );
   return;
 elsif delete_record is not null
  then
   confirm_delete_po(surl,rid,scid,detrid,parm,access_id,recctr,'Confirm Delete of Purchase'  );
   return;
 end if;

 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_RECEIVE_PO' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );

 open c2( chartorowid( replace(rid,'~','+') ) );
 fetch c2 into c2rec;
 close c2;

 itn := to_number( p1 );
 lno := to_number( p51 );
 open c3( c2rec.deliveryno, itn, detrid );
 fetch c3 into c3rec;
 if c3%FOUND
  then
    close c3;
    receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_108 || ': ' || p1 || '-' || p2 );
    return;
  end if;
  close c3;
  
 -- Added by David Banjo 2/11/2021
 open c17( c2rec.deliveryno, itn);
 fetch c17 into c17rec;
 if c17%FOUND
  then
  --  begin gn_status := c17rec.grn_status ; exception when others then null; end;
    if c17rec.grn_status  in (8,9) and not (nvl(to_number(grnst),0) = c17rec.grn_status) then 
       close c17;
       receive_po(surl,rid,scid,null,parm,access_id,recctr,'Save Cancelled because GRN Status changed');
       return;
    end if;
  end if;
  close c17;
  
    --Added by David Banjo 27/4/2022
  open c18( 'INVENT', p2);
  fetch c18 into c18rec;
  if c18%FOUND then
       receive_po(surl,rid,scid,null,parm,access_id,recctr,'Drones and Thermal Camera inventory not allowed');
       return;
  end if;
  close c18;  
  
  if vClient and substr(p3,1,2) in ('47','80')
  then
     vClient := FALSE;
  end if;

 if vClient then
 open c11( trim(p3));
 fetch c11 into c11rec;
 if c11%NOTFOUND
 then
   close c11;
   receive_po(surl,rid,scid,null,parm,access_id,recctr,'INVALID PO: ' || p3 );
   return;
 end if;
 close c11;
 end if;

 if vClient then
  open c12( c2rec.deliveryno );
  fetch c12 into c12rec;
  close c12;
  if c12rec.tot >= 2
  then
   open c13( c2rec.deliveryno );
   fetch c13 into c13rec;
   close c13;
   open c14( p3, c13rec.vendor );
   fetch c14 into c14rec;
   if C14%NOTFOUND then
    close c14;
    receive_po(surl,rid,scid,null,parm,access_id,recctr,'PO WITH DIFFERENT VENDOR INVALID: ' || p3 );
    return;
   end if;
 close c14;
 end if;
end if;

  begin qt := to_number( d6 ); exception when others then receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_109 || ': ' || d6 ); return; end;
  begin qte := to_number( d6e ); exception when others then receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_109e || ': ' || d6e ); return; end;
  begin am := to_number( d3 ); exception when others then receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_110 || ': ' || d3 ); return; end;
  begin tam := to_number( d8 ); exception when others then receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_111 || ': ' || d8 ); return; end;
  begin gs := to_number( d5 ); exception when others then receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_112 || ': ' || d5 ); return; end;
  begin dc := to_number( nvl(d8a,'0.00') ); exception when others then receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_111 || ': ' || d8a ); return; end;
  begin oqty := to_number( p53a ); exception when others then oqty := null; end;
  begin if grnst = 7 then if (p5 is null) or (oqty is null) or (p3 is null) or (lno is null) then receive_po(surl,rid,scid,null,parm,access_id,recctr,'CANNOT UPDATE GRN STATUS TO 7 WHEN MISSING PO, PO ITEM, ORDERED QTY OR INVOICE' ); return; end if; end if; end;
--  begin if p20 = 'Y' and p2 is not null then if substr(p2,1,1) = '1' then receive_po(surl,rid,scid,null,parm,access_id,recctr,'Cannot use an inventory/material# beginning with 1' ); return; end if; end if; end;
--  begin if (c2rec.cust_customer_id <> 1) and p2 is not null then if substr(p2,1,1) = '1' then receive_po(surl,rid,scid,null,parm,access_id,recctr,'Cannot use an inventory/material# beginning with 1' ); return; end if; end if; end;

  open c4( 'INVENT', p2 );
  fetch c4 into c4rec;
  /*
  -- Inventory Check currently disabled as requested by Strang
  if c4%NOTFOUND
   then
    close c4;
    receive_po(surl,rid,scid,null,parm,access_id,recctr,'Inventory Number does not exist: ' || p2 );
    return;
  end if;
  */
  close c4;

  if d7 is not null
   then
    open c4( 'UNITS', upper(d7) );
    fetch c4 into c4rec;
    -- Inventory Check currently disabled as requested by Strang
    if c4%NOTFOUND
     then
      close c4;
      receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_379 );
      return;
    end if;
    close c4;
  end if;

  if am is null and tam is null and gs is null
   then

    -- Do not do any checking. Put in at the request of Sallie.
    NULL;

   else

    if gs is null and tam is null
     then
      open c5(d4);
      fetch c5 into c5rec;
      close c5;
      if c5rec.colb = LNGS.STR_TXT_366
       then
        gs := c5rec.cola;
        tam := am;
      elsif c5rec.colb = LNGS.STR_TXT_367
       then
        gs := c5rec.cola;
        tam := am;
        am := ((100 * tam) / (100 + nvl(gs,0) ));
        gs := am * (c5rec.cola/100);
      else
        gs := c5rec.cola;
        tam := am * (1 + (gs/100));
        gs := am * (c5rec.cola/100);
      end if;
     else
      if c5rec.colb = LNGS.STR_TXT_367
       then
        vmsg := LNGS.STR_TXT_113;
      elsif c5rec.colb = LNGS.STR_TXT_366
        then
         vmsg := LNGS.STR_TXT_114;
      end if;
    end if;

    if am is null and tam is not null and gs is not null
     then
      open c5(d4);
      fetch c5 into c5rec;
      close c5;
      am := tam - nvl(gs,0);
      if c5rec.colb = LNGS.STR_TXT_368
       then
        vmsg := LNGS.STR_TXT_115;
      end if;
     else
      -- removed as requested
      NULL;
      /*
      if c5rec.colb = LNGS.STR_TXT_367
       then
        vmsg := LNGS.STR_TXT_116;
      end if;
      */
    end if;

    if tam is null
     then
      open c5(d4);
      fetch c5 into c5rec;
      close c5;
      if c5rec.colb = LNGS.STR_TXT_366
       then
        gs := c5rec.cola;
        tam := am;
      elsif c5rec.colb = LNGS.STR_TXT_367
       then
        gs := c5rec.cola;
        tam := am;
        am := ((100 * tam) / (100 + nvl(gs,0) ));
        gs := am * (c5rec.cola/100);
      else
        gs := c5rec.cola;
        tam := am * (1 + (gs/100));
        gs := am * (c5rec.cola/100);
      end if;
      if c5rec.colb = LNGS.STR_TXT_367
       then
        vmsg := LNGS.STR_TXT_117;
      elsif c5rec.colb = LNGS.STR_TXT_368
       then
        vmsg := LNGS.STR_TXT_118;
      end if;
    end if;

  end if; /* To: are all values null */

  if detrid is null
   then
    if not vClient then
     begin
--       if p3 is not null and lno is null and c2rec.interface_flag = 'M' then 
--          receive_po(surl,rid,scid,null,parm,access_id,recctr,'Error: No PO Item no for ' || p3 );
--          return;
--       end if;
      -- insert into strang.pos(deliveryno,recno,inventoryno,po,ctry_countrycode,supinv,gstc_gstcode,gst,amount,tamount,delivery_charge,qty,unit_unitused,excise_qty,excise_unit, po_item_no,off_site_receipt,sap_delno_unit,sap_delno_qty,grn,state,po_pool_lookup,grn_status,grn_item, sap_delno) values
      -- ( c2rec.deliveryno, to_number(p0), strang.f_sap_format(p2,'INVENTORYNO'),strang.f_sap_format(p3,'PO'),p4,p5,d4 ,gs,am,tam,dc,qt,upper(d7),qte,upper(d7e),lno,p52,p53,to_number(p53a),to_number(pgrn),st,p20,9,to_number(grnit),to_number(p53d)) returning rowid into newrid;
      insert into strang.pos(deliveryno,recno,inventoryno,po,ctry_countrycode,supinv,gstc_gstcode,gst,amount,tamount,delivery_charge,qty,unit_unitused,excise_qty,excise_unit, po_item_no,off_site_receipt,sap_delno_unit,sap_delno_qty,grn,state,po_pool_lookup,grn_status,grn_item, sap_delno, freight_mode, io) values
      ( c2rec.deliveryno, to_number(p0), strang.f_sap_format(p2,'INVENTORYNO'),strang.f_sap_format(p3,'PO'),p4,p5,d4 ,gs,am,tam,dc,qt,upper(d7),qte,upper(d7e),lno,p52,p53,to_number(p53a),to_number(pgrn),st,p20,9,to_number(grnit),to_number(p53d), fmode,c2rec.io) returning rowid into newrid;
      exception
      when others then
            receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_079 || ': ' || sqlerrm );
            return;
      end;
    else
     begin
--        if p3 is not null and lno is null and c2rec.interface_flag = 'M' then 
--          receive_po(surl,rid,scid,null,parm,access_id,recctr,'Error: No PO Item no for ' || p3 );
--          return;
--        end if;
        -- insert into strang.pos(deliveryno,recno,inventoryno,po,ctry_countrycode,supinv,gstc_gstcode,gst,amount,tamount,delivery_charge,qty,unit_unitused,excise_qty,excise_unit, po_item_no,off_site_receipt,sap_delno_unit,sap_delno_qty,grn,state,po_pool_lookup,grn_status,grn_item, sap_delno) values
        --     ( c2rec.deliveryno, to_number(p0), strang.f_sap_format(p2,'INVENTORYNO'),strang.f_sap_format(p3,'PO'),p4,p5,d4 ,gs,am,tam,dc,qt,upper(d7),qte,upper(d7e),lno,p52,p53,to_number(p53a),to_number(pgrn),st,p20,grnst,to_number(grnit),to_number(p53d)) returning rowid into newrid;
        insert into strang.pos(deliveryno,recno,inventoryno,po,ctry_countrycode,supinv,gstc_gstcode,gst,amount,tamount,delivery_charge,qty,unit_unitused,excise_qty,excise_unit, po_item_no,off_site_receipt,sap_delno_unit,sap_delno_qty,grn,state,po_pool_lookup,grn_status,grn_item, sap_delno, freight_mode, io) values
            ( c2rec.deliveryno, to_number(p0), strang.f_sap_format(p2,'INVENTORYNO'),strang.f_sap_format(p3,'PO'),p4,p5,d4 ,gs,am,tam,dc,qt,upper(d7),qte,upper(d7e),lno,p52,p53,to_number(p53a),to_number(pgrn),st,p20,decode(c2rec.io,'O',9,grnst),to_number(grnit),to_number(p53d), fmode,c2rec.io) returning rowid into newrid;
     exception
      when others then
            receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_079 || ': ' || sqlerrm );
            return;
     end;
    end if;
   else

     ---  And a check for lno is null here!!!
--    if p3 is not null and lno is null and c2rec.interface_flag = 'M' then 
--       receive_po(surl,rid,scid,null,parm,access_id,recctr,'Error: No PO Item no for ' || p3 );
--       return;
--    end if;
--    
--    if p3 is not null and lno is null and p5 is not null then 
--       receive_po(surl,rid,scid,null,parm,access_id,recctr,'Error: Invoice number but no PO Item Number for ' || p3 );
--       return;
--    end if;
    
    open c9(p3,lno);
    fetch c9 into c19rec;
    close c9;
   
    if not vClient then
        -- Update The Row
        begin
             update strang.pos
              set
               inventoryno = strang.f_sap_format(p2,'INVENTORYNO'),
               po = strang.f_sap_format(p3,'PO'),
               ctry_countrycode = p4,
               supinv = p5,
               amount = am,
               gstc_gstcode = d4,
               gst = gs,
               qty = qt,
               unit_unitused = upper(d7),
               excise_qty = qte,
               excise_unit = upper(d7e),
               tamount = tam ,
               delivery_charge = dc,
               po_item_no = lno,
     	       sap_delno_unit = p53,
     	       sap_delno_qty = to_number(p53a),
     	       --   grn = strang.f_sap_format(pgrn,'GRN'),
     	       grn = to_number(pgrn),
     	       state = st,
     	       po_pool_lookup = p20,
     	       grn_status = grnst,
     	       preq_item = case when supinv is null then c19rec.preq_item else preq_item end,  -- added by David Banjo 07/9/22
     	       preq_name = case when supinv is null then c19rec.preq_name else preq_name end,  -- added by David Banjo 07/9/22
     	       preq_no = case when supinv is null then c19rec.preq_no else preq_no end,  -- added by David Banjo 07/9/22
     	       warehouse_plant = case when supinv is null then c19rec.collect_no else warehouse_plant end,  -- added by David Banjo 18/7/23
     	       grn_item = to_number(grnit),
     	       sap_delno = to_number(p53d),
		       freight_mode = fmode,
     	       off_site_receipt = sysdate
           where rowid = chartorowid( detrid );
            exception
                 when others then
                  receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_080 || ': ' || sqlerrm );
                  return;
           end;
    else
    -- Update The Row
      if c6rec.po is not null and c6rec.po_item_no is not null then
        open c9(p3,lno);
        fetch c9 into c9rec;
        close c9;
      end if;
    open c6( chartorowid(detrid) );
    fetch c6 into c6rec;
    close c6;
    begin
         update strang.pos
          set
           po = p3,
           ctry_countrycode = p4,
           supinv = p5,
           amount = am,
           gstc_gstcode = d4,
           gst = gs,
           qty = qt,
           unit_unitused = upper(d7),
           excise_qty = qte,
           excise_unit = upper(d7e),
           tamount = tam ,
           delivery_charge = dc,
           po_item_no = lno,
 	       sap_delno_unit = nvl(p53,c9rec.po_unit_iso),
 	       sap_delno_qty = oqty,
 	       --   grn = strang.f_sap_format(pgrn,'GRN'),
 	       grn = to_number(pgrn),
 	       state = st,
 	       po_pool_lookup = p20,
 	       grn_status = grnst,
 	       preq_item = case when supinv is null then c19rec.preq_item else preq_item end,  -- added by David Banjo 07/9/22
     	   preq_name = case when supinv is null then c19rec.preq_name else preq_name end,  -- added by David Banjo 07/9/22
     	   preq_no = case when supinv is null then c19rec.preq_no else preq_no end,  -- added by David Banjo 07/9/22
     	   warehouse_plant = case when supinv is null then c19rec.collect_no else warehouse_plant end,  -- added by David Banjo 18/7/23
 	       grn_item = to_number(grnit),
   	       sap_delno = to_number(p53d),
	       freight_mode = fmode,
        --   shipping_text = 'Y', --c9rec.shipping_text,
        --   critical_flag = 'Y',--c9rec.critical,
        --   manual_grn = 'Y',--c9rec.manual_gr,
           inventoryno = nvl(p2,c9rec.material)
       where rowid = chartorowid( detrid );
        exception
             when others then
              receive_po(surl,rid,scid,null,parm,access_id,recctr,LNGS.STR_TXT_080 || ': ' || sqlerrm );
              return;
       end;

      if (nvl(oqty,0) <> nvl(c6rec.sap_delno_qty,0)) then
       diffqty := nvl(oqty,0) - nvl(c6rec.sap_delno_qty,0);
       if nvl(diffqty,0) <> 0 then
        update strang.po_pool set openqty = to_char(nvl(to_number(openqty),0) - diffqty) where po_number = p3 and po_item = lno;
        commit;
       end if;
      end if;

--    if c6rec.po is not null and c6rec.po_item_no is not null then
      if (p3 is not null and lno is not null) and (nvl(p3,'|')<>nvl(c6rec.po,'|') or nvl(glbx.guess_number(lno),0)<> nvl(c6rec.po_item_no,0))
      then
        open c10(p3,lno);
        fetch c10 into c10rec;
        if c10%FOUND
         then
           if c10rec.critical = 'X' then
             v_grn_status := 2;
           else
             if c10rec.manual_gr = 'X' then
               v_grn_status := 1;
             else
               v_grn_status := 0;
             end if;
           end if;
           update strang.pos
           set
--           sap_delno_qty = c10rec.openqty,
           sap_delno_open_qty = c10rec.openqty,
           sap_delno_unit = c10rec.po_unit_iso,
           shipping_text = c10rec.shipping_text,
           critical_flag = c10rec.critical,
           manual_grn = c10rec.manual_gr,
           inventoryno = c10rec.material,
           grn_status = v_grn_status,
           preq_item = case when supinv is null then c10rec.preq_item else preq_item end,  -- added by David Banjo 07/9/22
     	   preq_name = case when supinv is null then c10rec.preq_name else preq_name end,  -- added by David Banjo 07/9/22
     	   preq_no = case when supinv is null then c10rec.preq_no else preq_no end,  -- added by David Banjo 07/9/22
     	   warehouse_plant = case when supinv is null then c10rec.collect_no else warehouse_plant end  -- added by David Banjo 18/7/23
           where rowid = chartorowid( detrid );
           if c10rec.material is null then
	    update strang.pos
	    set
	    PO_POOL_LOOKUP = 'Y'
	    where rowid = chartorowid( detrid );
	   end if;
           pooladdVendor( c6rec.deliveryno, c10rec.vend_name,c10rec.vendor,c10rec.street, c10rec.city, c10rec.district, c10rec.region, c10rec.postl_code,c10rec.countryiso);
           if c10rec.material is not null then
            pooladdMaterial(to_char(c10rec.material), c10rec.short_text, c10rec.po_unit_iso, c10rec.matl_group, c10rec.vendor);
           end if;
          end if;
        close c10;
      elsif (p3 is not null and lno is null)
       then
           update strang.pos
           set
           sap_delno_qty = null,
           sap_delno_open_qty = null,
           sap_delno_unit = null,
           shipping_text = null,
           critical_flag = null,
           manual_grn = null,
           inventoryno = null,
           grn_status = null
           where rowid = chartorowid( detrid );
      end if;
     end if;
   end if;

 commit;

 if save_record is not null
  then
   -- Check for duplicate supplier invoice
   v_chk := checked_po;
   if (p3 is not null and lno is not null and p5 is not null) and vclient
       and upper(nvl(v_chk, '|')) <> upper(p5)
    then
     open c16( c2rec.deliveryno, c2rec.supplier_customer_id, upper(trim(p5)));
	 fetch c16 into c16rec;
	 if c16%FOUND
	  then
	   vmsg := nvl(vmsg,LNGS.STR_TXT_081) || 'WARNING:\nSupplier Inv '|| p5 || ' already in use\nDelivery#: ' || c16rec.deliveryno;
	   v_chk := p5;
	 else
	   v_chk := null;
	 end if;
	 close c16;
   end if;
   if detrid is null
    then
     open c8( newrid );
     fetch c8 into c8rec;
     close c8;
     receive_po(surl,rid,scid,null,parm,access_id,c8rec.ctr,nvl(vmsg,LNGS.STR_TXT_081), checked_po=>v_chk );
    else
     receive_po(surl,rid,scid,null,parm,access_id,recctr,nvl(vmsg,LNGS.STR_TXT_081), checked_po=>v_chk );
   end if;
 end if;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_RECEIVE_PO',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_receive_po;

procedure movement(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null, c_rid in varchar2 default null )
as

 cursor c2(rid rowid) is select * from strang.movements where rowid = rid;
 cursor c2d(rid rowid) is
 select ship_id
      , complete
	  , container_type
	  , iso_container_type
	  , vgm
	  , tare
	  , dispatch_date
	  , departure
	  , arrival
	  , bol
	  , booking_ref
	  , move_description
	  , physical_pack
	  , computer_pack
	  , interface4_date
	  , full_mt
	  , io
	  , urgency
	  , REMARK
	  , remark_detail
	  , local_ship_id
	  , local_bol
	  , local_hb
	  , hb
	  , rfts
	  , dan
	  , customs_auth_no
	  , customs_cleared_date
	  , owner
	  , consignee
	  , consignee_location
	  , current_location
	  , warehouse_destination
	  , set_point
	  , overdimensional
	  , del_date
	  , del_transport_company
	  , del_truck_rego
	  , docket_no
	  , container_park
	  , otml_yard_date
	  , berth4_transfer_date
	  , intl_wharf_transfer_date
	  , brisbane_date
	  , si
	  , ptl
	  , release_date
	  , release_docket
      , wdn
      , local_ship_discharge_date
      , int_ship_discharge_date
      , idd
      , remark_date
      , idd_date
      , si_date
      , ptl_date
      , chargecode
  from   strang.movements
  where  rowid = rid;
  
 cursor c3(shp integer) is select rowid,status, shipname  from strang.ships_airway where ship_id = shp;
 cursor c4(mvid varchar2, vseal varchar2) is
  select count('x') tot
    from ( select *
             from strang.detailrs
            where movement_no = mvid
              and nvl(camov_seal, '|') = nvl(vseal, '|')
            union all
           select * 
             from strang.detailrs
            where movement_no_2 = mvid
              and nvl(camov_seal_2, '|') = nvl(vseal, '|') );  
 
--  select count('x') tot
--  from   strang.detailrs
--  where  movement_no = mvid
--         and nvl(camov_seal, '|') = nvl(vseal, '|');

 cursor c5 is select chargecode from strang.charges order by chargecode;
 cursor c6(cd varchar2, vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = cd and cola = vste;
 cursor c7 (shp integer) is select count(*) cnt from strang.bols where ship_id = shp;
 
-- cursor c8 (vmovement_type varchar2) is select distinct tmp.movement_no
--                                         from 
--                                           (select movement_no
--                                                 , date_modified
--                                                 , row_number () over (order by date_modified desc nulls last) rnk 
--                                             from strang.movements where movement_type = vmovement_type) tmp 
--                                        where tmp.rnk <= 1000
--                                        order by tmp.movement_no ASC; 
                                        
                                        
 cursor c8 (vmovement_type varchar2) is 
  select movement_no
   from (select tmp.movement_no
             , date_modified
         from 
            (select *
             from (select movement_no
                        , date_modified
                        , row_number () over (order by date_modified desc nulls last) rnk 
                        , row_number () over (partition by movement_no order by  date_modified desc nulls last) rnk2 
                     from strang.movements 
               where movement_type = vmovement_type) tmp2  
             where tmp2.rnk2 = 1) tmp
         where tmp.rnk <= 1000
  order by tmp.date_modified DESC);

            

 cursor c9(rid rowid) is select m.*, ss.rowid from strang.movements m, strang.ships_airway ss where m.rowid = rid and m.local_ship_id = ss.ship_id; 

  cursor c10 (mvid varchar2, vseal varchar2) is 
  select distinct dr.ecn
  from  strang.detailrs dr
  where dr.movement_no = mvid
    and nvl(dr.camov_seal, '|') = nvl(vseal, '|')
    and dr.ECN is not null
    order by ecn ;

 cursor c11 (shp integer ) is 
 select ship_id, li 
   from strang.ships_airway ss
   where ship_id = shp;
 --  and nvl(estarrive,sysdate) > add_months(sysdate,-2)
 
 cursor c12 (mvid varchar2) is 
 select movement_no 
   from strang.movements m
   where mawb_link = mvid 
     and movement_type = 'AIRWAY';
     
 cursor c13 is
select rd.report_id, 
       (select nvl(max(parameter_level),0)
          from websys.report_parameters
         where report_id = rd.report_id) lvl
  from websys.report_definition rd
 where UPPER(report_name) = 'FLAT RACK CONTAINER PACKING LIST REPORT'
   and rownum <2;

cursor c14 is
select rd.report_id, 
       (select nvl(max(parameter_level),0)
          from websys.report_parameters
         where report_id = rd.report_id) lvl
  from websys.report_definition rd
 where UPPER(report_name) = 'GENERAL CONTAINER PACKING LIST REPORT'
   and rownum <2;    

cursor c15 (mvid varchar2, vseal varchar2) is 
select /*+ ALL_ROWS */ 
      row_number() over (order by dr.deliveryno, dr.itemno) recno3
      , dr.deliveryno
      , dr.itemno
      , strang.f_part_shipments(dr.movement_no, dr.camov_seal, dr.deliveryno, dr.itemno) part_shipment
 from strang.detailrs dr
 where exists (select 'x'
                 from strang.detailrs dr1
                where dr1.deliveryno = dr.deliveryno
                  and dr1.itemno = dr.itemno
                  and dr1.movement_no = mvid
                  and nvl(dr1.camov_seal,'|') = nvl(vseal,'|'))
  and exists (select 'x'
                from strang.detailrs dr2
               where dr2.deliveryno = dr.deliveryno
                and NVL(dr2.movement_no,'XXX') <> NVL(mvid,'YYY')) 
order by 1;   
 
 c1rec		       customer_account%ROWTYPE;
 c2rec		       c2%ROWTYPE;
 c2drec		       c2d%ROWTYPE;
 c3rec		       c3%ROWTYPE;
 c4rec		       c4%ROWTYPE;
 c6rec		       c6%ROWTYPE;
 c7rec		       c7%ROWTYPE;
 c8rec		       c8%ROWTYPE;
 c9rec		       c9%ROWTYPE;
 c10rec		       c10%ROWTYPE;
 c11rec		       c11%ROWTYPE;
 c12rec		       c12%ROWTYPE;
 c13rec		       c13%ROWTYPE;
 c14rec		       c14%ROWTYPE;
 c15rec		       c15%ROWTYPE;
 pfx		       THEME%ROWTYPE;
 ltype		       varchar2(100);
 stype		       integer;
 owner_id	       integer;
 sts		       varchar2(100);
 vaccess	       varchar2(20);
 seclevel	       varchar2(100);
 mf		           varchar2(100);
 vste		       varchar2(10);
 v_row_hide_switch varchar2(50);
 v_table_hide_switch varchar2(50);
 v_conn_row_hide_switch varchar2(50);
 v_cargo_row_hide_switch varchar2(50);
 v_bgColor         varchar2(50);
 v_default_direction_colour varchar2(20) := g_inbound_color; 
 v_non_default_direction_colour varchar2(20):= g_outbound_color;
 v_direction varchar2(1) := 'I';
 v_container_type varchar2(20) := 'GENERAL';
 v_container varchar2(100);
 v_html varchar2(500);
 vapproval varchar2(500); -- added by David Banjo 29/11/2021
 v_link varchar2(1000);
 
begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.MOVEMENT' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 seclevel := oltp.security_role( owner_id );
 vaccess := data_access( owner_id, 'MOVEMENT', rid );
 vapproval := container_approver( owner_id ); -- Added by DB 29/11/2021

 
 if parm = 'CARGO'
  then
   glbx.main_title( surl, LNGS.STR_TXT_119,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR08',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 elsif parm = 'CONMOV'
  then
   glbx.main_title( surl, LNGS.STR_TXT_120,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR08',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 elsif parm = 'AIRWAY'
  then
   glbx.main_title( surl, LNGS.STR_TXT_121,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR08',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 end if;
 

-- if nvl(vste,'SYD') = 'BNE' then
--    v_row_hide_switch := 'style="display: none;"';
 if nvl(vste,'SYD') = g_outbound_site and parm in ('CARGO', 'CONMOV') then
    v_row_hide_switch := 'style="display: none;"';
    v_table_hide_switch := 'style="display: none;"';
    v_default_direction_colour := g_outbound_color;
    v_non_default_direction_colour := g_inbound_color; 
    v_direction := 'O';
    v_container_type := 'EMPTY';
 elsif parm in ('CARGO', 'CONMOV') and nvl(vste,'SYD') <> g_outbound_site then
    v_row_hide_switch := 'style="display: table-row;"';
    v_table_hide_switch := 'style="display: table;"';
    v_direction := 'I';
    v_container_type := 'GENERAL';
 end if;
 
 if nvl(vste,'SYD') = g_outbound_site and parm in ('AIRWAY') then
    v_default_direction_colour := g_outbound_color;
    v_non_default_direction_colour := g_inbound_color; 
    v_direction := 'O';
 elsif parm in ('AIRWAY') and nvl(vste,'SYD') <> g_outbound_site then
    v_direction := 'I';
 end if;
 
 
 if nvl(vste,'SYD') = g_outbound_site and parm = 'CONMOV' then
      v_conn_row_hide_switch := 'style="display: none;"';
 end if;
 
 htp.p('<link rel="stylesheet" type="text/css" href="/images/str/style2.css" />');  -- for ship voyage dropdown listbox

 if parm in ('CARGO') and msg in (LNGS.STR_TXT_149, LNGS.STR_TXT_156) then
    htp.p('<script type="text/javascript" src="/images/js/direction_switch.js"></script>');
    htp.p('<script type="text/javascript" src="/images/js/full_empty_switch.js"></script>');   
--    toggle_full_empty_container;
 elsif parm in ('AIRWAY') and msg in (LNGS.STR_TXT_149) then  
    htp.p('<script type="text/javascript" src="/images/js/airway_direction_switch.js"></script>');
 elsif parm = 'CONMOV' and msg in (LNGS.STR_TXT_149) then
   htp.p('<script type="text/javascript" src="/images/js/direction_switch_conmov.js"></script>');
 elsif parm = 'CARGO' and msg in (LNGS.STR_TXT_463) then
    htp.p('<script type="text/javascript" src="/images/js/full_empty_switch.js"></script>');   
 End if;

--htp.p( 'CARGO direction is: <input type="text" id="direction" size="20" >');
 
 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if access_id = 'z'
 then
    c2rec.complete := 'F';
    c2rec.dispatch_date := sysdate;
    if parm in ('CARGO') -- Added by David Banjo 20/7/2020
    then
       open c6( 'CARGODEPARTLOC', vste );
       fetch c6 into c6rec;
       close c6;
       c2rec.departure := c6rec.description;
       open c6( 'CARGOARRIVELOC', vste );
       fetch c6 into c6rec;
       close c6;
       c2rec.arrival := c6rec.description;
       
       if (v_direction = 'O' and g_outbound_site = vste) then
         open c6( 'CARGOCURRENTLOC', g_outbound_site );
         fetch c6 into c6rec;
         close c6;
         c2rec.current_location := c6rec.description;
       end if; 
       
       open c6( 'TARE_DEFAULT', vste );
       fetch c6 into c6rec;
       close c6;
       begin c2rec.tare := c6rec.description; exception when others then null; end;
       
       if msg = lngs.STR_TXT_463 -- Insert New Movement as Copy
	   or c_rid is not null
       then

       open c2d(replace(nvl(rid, c_rid),'~','+'));
       fetch c2d into c2drec;
       if c2d%FOUND then
          c2rec.ship_id := c2drec.ship_id;
          c2rec.complete := c2drec.complete;
          c2rec.container_type := c2drec.container_type;
          c2rec.iso_container_type := c2drec.iso_container_type;
          c2rec.vgm := c2drec.vgm;
          c2rec.tare := c2drec.tare;
          c2rec.dispatch_date := c2drec.dispatch_date;
          c2rec.departure := c2drec.departure;
          c2rec.arrival := c2drec.arrival;
          c2rec.bol := c2drec.bol;
          c2rec.booking_ref  := c2drec.booking_ref;
          c2rec.move_description := c2drec.move_description;
          c2rec.physical_pack := c2drec.physical_pack;
          c2rec.computer_pack := c2drec.computer_pack;
          c2rec.interface4_date :=c2drec.interface4_date;
	      c2rec.full_mt :=c2drec.full_mt;
	      c2rec.io :=c2drec.io;
	      c2rec.urgency :=c2drec.urgency;
	      c2rec.remark := c2drec.remark;
	      c2rec.remark_detail := c2drec.remark_detail;
	      c2rec.local_ship_id := c2drec.local_ship_id;
	      c2rec.local_bol := c2drec.local_bol;
	      c2rec.local_hb := c2drec.local_hb;
	      c2rec.hb := c2drec.hb;
	      c2rec.rfts := c2drec.rfts;
	      c2rec.dan := c2drec.dan;
	      c2rec.customs_auth_no :=c2drec.customs_auth_no;
	      c2rec.customs_cleared_date := c2drec.customs_cleared_date;
	      c2rec.owner := c2drec.owner; --  Removed by David Banjo 5/5/2021 -from CASS
	      c2rec.consignee := c2drec.consignee;
	      c2rec.consignee_location := c2drec.consignee_location;
	      c2rec.current_location := c2drec.current_location;
	      c2rec.warehouse_destination := c2drec.warehouse_destination;
	      c2rec.set_point := c2drec.set_point;
	      c2rec.overdimensional :=c2drec.overdimensional;
	      c2rec.del_date := c2drec.del_date;
	      c2rec.del_transport_company := c2drec.del_transport_company;
	      c2rec.del_truck_rego := c2drec.del_truck_rego;
	      c2rec.docket_no := c2drec.docket_no;
	      c2rec.container_park := c2drec.container_park;
	      c2rec.otml_yard_date := c2drec.otml_yard_date;
	      c2rec.berth4_transfer_date := c2drec.berth4_transfer_date;
	      c2rec.intl_wharf_transfer_date	:= c2drec.intl_wharf_transfer_date;
	      c2rec.brisbane_date :=	c2drec.brisbane_date;
	      c2rec.si := c2drec.si;
	      c2rec.ptl := c2drec.ptl;
	      c2rec.release_date := c2drec.release_date;
	      c2rec.release_docket := c2drec.release_docket;
          c2rec.wdn := c2drec.wdn;
          c2rec.local_ship_discharge_date := c2drec.local_ship_discharge_date;
          c2rec.int_ship_discharge_date := c2drec.int_ship_discharge_date;
          c2rec.idd := c2drec.idd;
          c2rec.remark_date := c2drec.remark_date;
          c2rec.idd_date := c2drec.idd_date;
          c2rec.si_date := c2drec.si_date;
          c2rec.ptl_date := c2drec.ptl_date;
       end if;
       close c2d;
     end if;

   elsif parm = 'CONMOV'
    then
     open c6( 'CONDEPARTLOC', vste );
     fetch c6 into c6rec;
     close c6;
     c2rec.departure := c6rec.description;
     open c6( 'CONARRIVELOC', vste );
     fetch c6 into c6rec;
     close c6;
     c2rec.arrival := c6rec.description;
     if msg = lngs.STR_TXT_463 -- Insert New Movement as Copy
	   or c_rid is not null
       then

       open c2d(replace(nvl(rid, c_rid),'~','+'));
       fetch c2d into c2drec;
       if c2d%FOUND then
          c2rec.full_mt :=c2drec.full_mt;
	      c2rec.io :=c2drec.io;
 --         c2rec.complete := c2drec.complete;
          c2rec.container_type := c2drec.container_type;
          c2rec.iso_container_type := c2drec.iso_container_type;
          c2rec.vgm := c2drec.vgm;
          c2rec.tare := c2drec.tare;
--          c2rec.dispatch_date := c2drec.dispatch_date;
          c2rec.departure := c2drec.departure;
          c2rec.arrival := c2drec.arrival;
          c2rec.bol := c2drec.bol;
          c2rec.booking_ref  := c2drec.booking_ref;
          c2rec.move_description := c2drec.move_description;      
          c2rec.ship_id := c2drec.ship_id;
          c2rec.local_ship_id := c2drec.local_ship_id;
       end if;
       close c2d;
     end if;
   elsif parm = 'AIRWAY'
    then
     open c6( 'AIRARRIVELOC', vste );
     fetch c6 into c6rec;
     close c6;
     c2rec.arrival := c6rec.description;
     open c6( 'AIRDEPARTLOC', vste );
     fetch c6 into c6rec;
     close c6;
     c2rec.departure := c6rec.description;
     open c6( 'AIRCHARGECODE', vste );
     fetch c6 into c6rec;
     close c6;
     c2rec.chargecode := c6rec.description;
     if msg = lngs.STR_TXT_463 -- Insert New Movement as Copy
	 or c_rid is not null
     then
        open c2d(replace(nvl(rid, c_rid),'~','+'));
        fetch c2d into c2drec;
        if c2d%FOUND then
           c2rec.full_mt :=c2drec.full_mt;
	       c2rec.io :=c2drec.io;
           c2rec.departure := c2drec.departure;
           c2rec.arrival := c2drec.arrival;
         --  c2rec.ship_id := c2drec.ship_id;
        --   c2rec.chargecode := c2drec.chargecode;
           c2rec.chargecode := c2drec.chargecode; 
          open c11(c2drec.ship_id);
          fetch c11 into c11rec;
          close c11;
        end if;
        close c2d;
     end if;
   end if;
  else
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
   open c9(replace(rid,'~','+'));
   fetch c9 into c9rec;
   close c9;

   open c11(c2rec.ship_id);
   fetch c11 into c11rec;
   close c11;

   open c12(c2rec.movement_no);
   fetch c12 into c12rec;
   close c12;

   /* 20180423
   if (mf is not null) and (vaccess = 'EDIT') and (c2rec.complete in ('N','F'))
    then
     -- Check if the Controlling Office. If not then Read Only Access
     if mf <> c2rec.controlling_office
      then
       vaccess := 'READ';
     end if;
   end if;
   */
 end if;

 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 htp.p('<td>');
   search( surl, parm, rid, samerow=>TRUE );
 htp.p('</td>');
  
if (UPPER(OWA_UTIL.GET_CGI_ENV('HTTP_USER_AGENT')) LIKE '%TRIDENT%' or UPPER(OWA_UTIL.GET_CGI_ENV('HTTP_USER_AGENT')) like '%MSIE%') THEN
    null;
else
 htp.p( '<datalist id="'||parm||'">' );
    for c8rec in c8(parm) loop
       htp.formselectoption( c8rec.movement_no); --, cattributes=>'VALUE="' || c7rec.ship_id || '"' );
    end loop;
 htp.p( '</datalist>' );
end if;
  
 htp.tablerowclose;
 htp.tableclose;

 htp.tableopen;
 htp.tablerowopen;
 htp.p( '<TD align="LEFT">' );

 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_movement' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', access_id );

   if access_id = 'z'
    then
     htp.formhidden( 'RID', null );
    else
   htp.formhidden( 'RID', replace(rid,'~','+') );
   end if;
 end if;

 if msg is not null
  then
   glbx.header_msg( msg );
 end if;

if c2rec.io ='I' then
    v_row_hide_switch := 'style="display: table-row;"';
    v_table_hide_switch := 'style="display: table;"';
elsif  c2rec.io ='O' and parm in ('CARGO', 'CONMOV') then
    v_row_hide_switch := 'style="display: none;"';
    v_table_hide_switch := 'style="display: none;"';  
end if;

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' || glbx.TABLE_BACKGROUND );
  if mf <> c2rec.controlling_office and mf is not null
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_309),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold(c2rec.controlling_office),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
  end if;
  htp.tablerowopen;
   if parm = 'CARGO'
   then
      htp.formhidden( 'P20B', null ); -- no local/international select box
      if vaccess = 'EDIT' and access_id = 'z'
      then 
         if c2rec.full_mt = 'FULL' or (c2rec.full_mt is null and c2rec.io ='I') then v_bgColor := 'bgcolor=":#00468C"'; 
         elsif c2rec.full_mt is null then v_bgColor := 'bgcolor='||v_default_direction_colour;
         else v_bgColor := 'bgcolor=":#4EB5E2"';     
         end if;   
         htp.p( '<TD ' || v_bgColor||' id="P20z" ALIGN="LEFT" COLSPAN=2>' );
         htp.formselectopen( cname=>'P20', cattributes=>'id="P20" ONCHANGE="full_empty_switch()"'  );
         if (c2rec.full_mt = 'FULL') or (v_default_direction_colour = g_inbound_color and c2rec.full_mt is null)
         then
            htp.formselectoption( 'FULL CONTAINER', 'SELECTED',cattributes=>'VALUE="FULL"' );
            htp.formselectoption( 'EMPTY CONTAINER',  cattributes=>'VALUE="EMPTY"' );
         else
            htp.formselectoption( 'FULL CONTAINER',  cattributes=>'VALUE="FULL"' );
            htp.formselectoption( 'EMPTY CONTAINER', 'SELECTED',cattributes=>'VALUE="EMPTY"' );
         end if;
         htp.formselectclose;
         htp.p( '</TD>' );
       
         if msg in (LNGS.STR_TXT_463) then 
            if nvl(c2rec.io,'I') = 'I' then
               htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
            else
               htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>'BGCOLOR=":#4EB5E2" BORDER="3" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
            end if;
            htp.formhidden( 'P20A', c2rec.IO );            
         else 
            if c2rec.io = 'I' then v_bgColor := 'bgcolor=":#00468C"'; 
            elsif c2rec.io is null then v_bgColor := 'bgcolor='||v_default_direction_colour;
            else v_bgColor := 'bgcolor=":#4EB5E2"'; 
            end if;      
            htp.p( '<TD ' || v_bgColor||' id="P20Az" ALIGN="LEFT" COLSPAN=2>' );
            htp.formselectopen(cname=>'P20A', cattributes=>'id="P20A" ONCHANGE="direction_switch()"' );
            if ((c2rec.io ='I') or (v_default_direction_colour = g_inbound_color and c2rec.io is null ))
            then
               htp.formselectoption( 'INBOUND DIRECTION', 'SELECTED',cattributes=>'VALUE="I"' );
               htp.formselectoption( 'OUTBOUND DIRECTION',  cattributes=>'VALUE="O"' );
            else
               htp.formselectoption( 'INBOUND DIRECTION',  cattributes=>'VALUE="I"' );
               htp.formselectoption( 'OUTBOUND DIRECTION', 'SELECTED',cattributes=>'VALUE="O"');
            end if;
            htp.formselectclose;
            htp.p( '</TD>' );
         end if;
      else
         if c2rec.full_mt = 'EMPTY' then
            htp.tabledata( htf.bold(c2rec.full_mt ||' CONTAINER'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
         else
            htp.tabledata( htf.bold(nvl(c2rec.full_mt, 'FULL') ||' CONTAINER'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
         end if;
         htp.formhidden( 'P20', c2rec.full_mt );
         if c2rec.io = 'I' then
           htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
         else
            htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
         end if;
         htp.formhidden( 'P20A', c2rec.IO );
      end if;
   elsif ( parm = 'CONMOV') then   -- conmov & airway  -- modified by David Banjo - just conmov now
       htp.formhidden( 'P20', null ); -- no seal
       htp.formhidden( 'P20B', null ); -- no local/international select box

       if ( vaccess = 'EDIT' and access_id = 'z' and msg = LNGS.STR_TXT_149 ) -- Insert New movement
        then
         if c2rec.io = 'I' then v_bgColor := 'bgcolor=":#00468C"'; 
         elsif c2rec.io is null then v_bgColor := 'bgcolor='||v_default_direction_colour;
         else v_bgColor := 'bgcolor=":#4EB5E2"'; 
         end if;    
       
      --   if nvl(c2rec.io,'I') = 'I' then v_bgColor := 'bgcolor=":#00468C"'; else v_bgColor := 'bgcolor=":#4EB5E2"'; end if;      
        
         htp.p( '<TD ' ||v_bgColor|| ' id="P20Az" ALIGN="LEFT" COLSPAN=4>' );
           
         if parm = 'AIRWAY' then
            htp.formselectopen(cname=>'P20A', cattributes=>'id="P20A" ONCHANGE="airway_direction_switch()"' );
         else 
            htp.formselectopen( 'P20A', cattributes=>'id="P20A" ONCHANGE="direction_switch()"' );
         end if;
        
         if ((c2rec.io ='I') or (v_default_direction_colour = g_inbound_color and c2rec.io is null  ))
         then
              htp.formselectoption( 'INBOUND DIRECTION', 'SELECTED',cattributes=>'VALUE="I"' );
              htp.formselectoption( 'OUTBOUND DIRECTION',  cattributes=>'VALUE="O"' );
         else
              htp.formselectoption( 'INBOUND DIRECTION',  cattributes=>'VALUE="I"' );
              htp.formselectoption( 'OUTBOUND DIRECTION', 'SELECTED',cattributes=>'VALUE="O"' );
         end if;
         htp.formselectclose;
         htp.p( '</TD>' );
      else
         if ((c2rec.io ='I') or (v_default_direction_colour = g_inbound_color and c2rec.io is null  )) then 
            htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="4"');
         else
            htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="4"');
         end if;
         htp.formhidden( 'P20A', c2rec.IO );
      end if;
   elsif ( parm = 'AIRWAY') then 
        --c2rec.ship_id := null;
       htp.formhidden( 'P20', null ); -- no seal
       if ( vaccess = 'EDIT' and access_id = 'z' and msg = LNGS.STR_TXT_149 ) -- Insert New movement
        then
         if c2rec.io = 'I' then v_bgColor := 'bgcolor=":#00468C"'; 
         elsif c2rec.io is null then v_bgColor := 'bgcolor='||v_default_direction_colour;
         else v_bgColor := 'bgcolor=":#4EB5E2"'; 
     end if;
         htp.p( '<TD ' ||v_bgColor|| ' id="P20Bx" ALIGN="LEFT" COLSPAN=2>' );
         if parm = 'AIRWAY' then
            htp.formselectopen(cname=>'P20B', cattributes=>'id="P20B" ONCHANGE="airway_location_switch()"' );
         else 
            NULL;
          --  htp.formselectopen( 'P20A', cattributes=>'id="P20A" ONCHANGE="direction_switch()"' );
   end if;
         if ((c11rec.li ='I') or (v_default_direction_colour = g_inbound_color and c11rec.li is null  ))
         then
              htp.formselectoption( 'INTERNATIONAL LEG', 'SELECTED',cattributes=>'VALUE="I"' );
              htp.formselectoption( 'LOCAL LEG',  cattributes=>'VALUE="L"' );
         else
              htp.formselectoption( 'INTERNATIONAL LEG',  cattributes=>'VALUE="I"' );
              htp.formselectoption( 'LOCAL LEG', 'SELECTED',cattributes=>'VALUE="L"' );
         end if;
         htp.formselectclose;
         htp.p( '</TD>' );
        -----   END LOCAL/INTL HERE ----
        ------   START DIRECTION HERE ----
         htp.p( '<TD ' ||v_bgColor|| ' id="P20Az" ALIGN="LEFT" COLSPAN=2>' );
         if parm = 'AIRWAY' then
            htp.formselectopen(cname=>'P20A', cattributes=>'id="P20A" ONCHANGE="airway_direction_switch()"' );
         else 
            htp.formselectopen( 'P20A', cattributes=>'id="P20A" ONCHANGE="direction_switch()"' );
         end if;
         if ((c2rec.io ='I') or (v_default_direction_colour = g_inbound_color and c2rec.io is null  ))
         then
              htp.formselectoption( 'INBOUND DIRECTION', 'SELECTED',cattributes=>'VALUE="I"' );
              htp.formselectoption( 'OUTBOUND DIRECTION',  cattributes=>'VALUE="O"' );
         else
              htp.formselectoption( 'INBOUND DIRECTION',  cattributes=>'VALUE="I"' );
              htp.formselectoption( 'OUTBOUND DIRECTION', 'SELECTED',cattributes=>'VALUE="O"' );
         end if;
         htp.formselectclose;
         htp.p( '</TD>' );
      else
         if ((c11rec.li ='I') or (v_default_direction_colour = g_inbound_color and c11rec.li is null  )) then 
            htp.tabledata( htf.bold('INTERNATIONAL LEG&nbsp;&nbsp;&nbsp;'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
         else
            htp.tabledata( htf.bold('LOCAL LEG'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
         end if;
          htp.formhidden( 'P20B', c11rec.li );
         if ((c2rec.io ='I') or (v_default_direction_colour = g_inbound_color and c2rec.io is null  )) then 
            htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
         else
            htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
         end if;
         htp.formhidden( 'P20A', c2rec.IO );
      end if;
   end if;
  htp.tablerowclose;


  htp.tablerowopen;
   if parm = 'CARGO'
    then
     htp.tabledata( htf.bold(LNGS.STR_TXT_122),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   elsif parm = 'CONMOV'
    then
     htp.tabledata( htf.bold(LNGS.STR_TXT_123),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   elsif parm = 'AIRWAY'
    then
     htp.tabledata( htf.bold(LNGS.STR_TXT_124),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   end if;

   if access_id = 'z'
    then
       htp.tabledata( htf.formtext('P1',20,40,c2rec.movement_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.movement_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' then htp.formhidden( 'P1', null ); end if;
   end if;

   if seclevel in ( 'LEVEL 8' )
   then
      htp.tabledata( '&nbsp;');
   else
      open c3( c2rec.ship_id );
      fetch c3 into c3rec;
      close c3;
      
      if parm = 'AIRWAY'
      then
         if c2rec.ship_id <> 0 then
            htp.tabledata( htf.anchor2( 'strangp.shp?surl=' || surl || '&rid=' || replace(rowidtochar(c3rec.rowid),'+','~') || '&parm=X' || parm || '&scid=' || scid || '&access_id=' || access_id,'MAWB Details',ctarget=>'NEWSHIP'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         end if;
      else
      
       --  htp.tabledata( htf.anchor2( 'strangp.shp?surl=' || surl || '&rid=' || replace(rowidtochar(c3rec.rowid),'+','~') || '&parm=X' || parm || '&scid=' || scid || '&access_id=' || access_id,LNGS.STR_TXT_126,ctarget=>'NEWSHIP', cattributes=>'title="Ship Voyage link"' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         if (parm in ('CONMOV') or UPPER(c2rec.full_mt) = 'EMPTY') then  -- Added by David Banjo 9/10/2020
            if vaccess = 'EDIT' then htp.tabledata( htf.anchor2( 'strangp.cascade_movement?surl=' || surl || '&rid=' || replace(rowidtochar(rid),'+','~') || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&oldid=' || c2rec.movement_no || '&oldseal=' || replace(c2rec.seal,' ','+') || '&mtype=' || parm,LNGS.STR_TXT_136 ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); end if;
            htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
            htp.p( '</TD>' );
         else
            if parm = 'CARGO' and access_id <> 'z' AND c2rec.movement_no is not null then
               CASE c2rec.attached_photo
                 WHEN 1 THEN
                  v_html  := htf.anchor( 'javascript: window.open(''' || '/' || glbx.extract_master_parameter('APACHE_RECEIVALS_DIR') || '/' || c2rec.movement_no||'_'||c2rec.seal || '/FRONT/' || ''',''' || 'vtyp' || ''',''height=800,width=600,scrollbars=yes,resizable=yes'');void('''');', 'FRONT' );
                 WHEN 2 THEN
                  v_html := htf.anchor( 'javascript: window.open(''' || '/' || glbx.extract_master_parameter('APACHE_RECEIVALS_DIR') || '/' || c2rec.movement_no||'_'||c2rec.seal || '/INSIDE/' || ''',''' || 'vtyp' || ''',''height=800,width=600,scrollbars=yes,resizable=yes'');void('''');', 'INSIDE' );
                 WHEN 3 THEN
                  v_html := htf.anchor( 'javascript: window.open(''' || '/' || glbx.extract_master_parameter('APACHE_RECEIVALS_DIR') || '/' || c2rec.movement_no||'_'||c2rec.seal || '/FRONT/' || ''',''' || 'vtyp' || ''',''height=800,width=600,scrollbars=yes,resizable=yes'');void('''');', 'FRONT' )||'&nbsp;&nbsp;'||htf.anchor( 'javascript: window.open(''' || '/' || glbx.extract_master_parameter('APACHE_RECEIVALS_DIR') || '/' || c2rec.movement_no||'_'||c2rec.seal || '/INSIDE/' || ''',''' || 'vtyp' || ''',''height=800,width=600,scrollbars=yes,resizable=yes'');void('''');', 'INSIDE' );
               --   v_html := v_html || '&nbsp;&nbsp;';
                 ELSE 
                   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' ); 
                   htp.p( '</TD>' );
                   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">'||htf.formsubmit( 'ACTION', 'Click to Attach Photos', cattributes=>'onclick="this.form.target=''_blank'';return true;"'  ) ); 
                   -- htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' ); 
                   htp.p( '</TD>' );
                END CASE;
                 
                if v_html is not null then
                   htp.tabledata( htf.bold('Attached Photos'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
                   htp.tabledata( v_html||'&nbsp;&nbsp;&nbsp;'||htf.formsubmit( 'ACTION', 'Click to Attach Photos', cattributes=>'onclick="this.form.target=''_blank'';return true;"' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
                  --  htp.tabledata( v_html,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
                end if;
                 
             --  htp.tabledata( htf.bold(c2rec.mawb_link),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
            else 
              
               htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
               htp.p( '</TD>' );
               htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
               htp.p( '</TD>' );
            end if;
            
         end if;

     end if;
   end if;
   if parm in ('AIRWAY') then
      if vaccess = 'EDIT' then htp.tabledata( htf.anchor2( 'strangp.cascade_movement?surl=' || surl || '&rid=' || replace(rowidtochar(rid),'+','~') || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&oldid=' || c2rec.movement_no || '&oldseal=' || replace(c2rec.seal,' ','+') || '&mtype=' || parm,LNGS.STR_TXT_136 ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); end if;
   end if;
  htp.tablerowclose;
    if ((UPPER(c2rec.full_mt) = 'FULL') or (v_default_direction_colour = g_inbound_color and c2rec.full_mt is null ))then
       htp.tablerowopen(cattributes=>'Id="P2A"'); 
    else 
       htp.tablerowopen(cattributes=>'Id="P2A" style="display: none;"'); -- David Banjo hide row based on direction ;
    end if;
     if parm = 'CARGO' 
     then
     htp.tabledata( htf.bold(LNGS.STR_TXT_063),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
       if access_id = 'z'
        then
           if ((UPPER(c2rec.full_mt) = 'FULL') or (v_default_direction_colour = g_inbound_color )) then
              -- David Banjo hide text field based on container contents ;
              htp.tabledata( htf.formtext('P2',20,20,c2rec.seal, cattributes=>'id="P2"'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
           else 
              htp.tabledata( htf.formtext('P2',20,20,c2rec.seal, cattributes=>'id="P2" style="visibility:hidden;"'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
           end if;
        else
          if (c2rec.full_mt = 'EMPTY') then
             htp.tabledata( '',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); 
             htp.formhidden( 'P2', null );
          else
             htp.tabledata( htf.bold(c2rec.seal),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
             htp.formhidden( 'P2', null );
         end if;
       end if;
      else
       htp.tabledata( htf.bold(c2rec.seal),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P2', null );
     end if;
    if (vaccess = 'EDIT' and access_id <> 'z') then htp.tabledata( htf.anchor2( 'strangp.cascade_movement?surl=' || surl || '&rid=' || replace(rowidtochar(rid),'+','~') || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&oldid=' || c2rec.movement_no || '&oldseal=' || replace(c2rec.seal,' ','+') || '&mtype=' || parm,LNGS.STR_TXT_136 ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); 
    else 
      htp.tabledata( '',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    end if;
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    htp.p( '</TD>' );
   else
     htp.formhidden( 'P2', null );
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   if parm in ('CARGO','CONMOV')
    then
     htp.tabledata( htf.bold('Intl Ship/Voy'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       if (access_id = 'z' and msg in (LNGS.STR_TXT_149)) or c2rec.ship_id is null then
        lov_ship( 'P3', 'S', 'I', c2rec.ship_id, io => nvl(c2rec.io,v_direction));
       else
        lov_ship_intl( 'P3', 'S', c2rec.ship_id, c2rec.io );
       end if;
      else
      
       if vaccess = 'EDIT' then htp.formhidden( 'P3', c2rec.ship_id ); end if;
       lov_ship_intl( 'P3', 'S', c2rec.ship_id, c2rec.io, isedit=>FALSE );
     end if;

     htp.p( '</TD>' );
     htp.tabledata( htf.anchor2( 'strangp.shp?surl=' || surl || '&rid=' || replace(rowidtochar(c3rec.rowid),'+','~') || '&parm=X' || parm || '&scid=' || scid || '&access_id=' || access_id,'Intl ShipID '||htf.bold(c2rec.ship_id),ctarget=>'NEWSHIP', cattributes=>'title="International Ship and Voyage"' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
 --   htp.tabledata( 'Intl ShipID '||htf.bold(c2rec.ship_id),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     htp.p( '</TD>' );

   elsif parm = 'AIRWAY'
    then
     htp.tabledata( htf.bold('Ship ID'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden( 'P3', c2rec.ship_id );
     htp.tabledata( htf.bold(c2rec.ship_id),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     if (seclevel in ( 'LEVEL 1','LEVEL 6', 'LEVEL 8')) or (c2rec.io = 'O')      then
         htp.tabledata( htf.bold(' '),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2');
      else
       htp.tabledata( htf.anchor2( 'strangp.edit_mawb_ecn?surl=' || surl || '&rid=' || replace(rowidtochar(c3rec.rowid),'+','~') || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&mwb=' || c2rec.movement_no,LNGS.STR_TXT_128,ctarget=>'NEWECN' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2');
     end if;
   end if;
  htp.tablerowclose;


   if parm = 'AIRWAY'
    then
    htp.tablerowopen;
         htp.tabledata( htf.bold('House Bills'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2');
     if seclevel in ( 'LEVEL 1','LEVEL 6', 'LEVEL 8')
      then
         htp.tabledata( htf.bold(' '),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2');
      else
       htp.tabledata( htf.anchor2( 'strangp.edit_mawb?surl=' || surl || '&rid=' || translate(rid,'+ ','~+') || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&mwb=' || c2rec.movement_no,'HAWB Values & Details',ctarget=>'HAWB'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2' );
     end if;
    htp.tablerowclose;
   end if;


  if parm in ('CARGO','CONMOV') then
     htp.tablerowopen;
     htp.tabledata( htf.bold('Intl Bill of Lading'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');

     htp.tabledata( htf.bold(c2rec.bol||' '||c2rec.hb),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden( 'P10', c2rec.bol );
     htp.formhidden( 'P10b', c2rec.hb );

     open c3( c2rec.ship_id );
     fetch c3 into c3rec;
     close c3;
     
     open c7(c2rec.ship_id );
     fetch c7 into c7rec;
     close c7;
      
     if (access_id = 'z') then
         htp.tabledata( htf.bold(' '),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1');
     elsif ( c7rec.cnt = 0 ) then
        htp.tabledata( htf.anchor2( 'strangp.bols?surl=' || surl || '&rid_ss=' || replace(c3rec.rowid,'+','~') || '&parm=' ||'BOLS'|| '&scid=' || scid || '&access_id=x&action='||LNGS.STR_STH_006 , LNGS.STR_STH_028,ctarget=>'NEWECN'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1' );
     else
        v_container := replace(replace(c2rec.movement_no,'&','--'),'#','__');
     --   v_container := replace(c2rec.movement_no,'&','--');
        htp.tabledata( htf.anchor2( 'strangp.containers_mass?surl=' || surl ||'&scid=' || scid ||'&rid_ss=' || replace(c3rec.rowid, '+', '~') ||'&parm=' || 'BOLS' || '&action=' || lngs.STR_STH_028 || '&access_id='|| access_id||'&msg=' || null || '&call_name=' || 'MOVEMENTS:'||v_container, LNGS.STR_STH_028, ctarget=>'NEWECN'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1' );
     end if;
--      else
--       htp.tabledata( htf.anchor2( 'strangp.edit_bol?surl=' || surl || '&rid=' || replace(rowidtochar(c3rec.rowid),'+','~') || '&rid2=' || replace(rowidtochar(rid),'+','~') || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&shpid=' || c2rec.ship_id,LNGS.STR_TXT_127,ctarget=>'NEWECN' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--     end if;
     htp.p( '<TD style="min-width:100px"' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     htp.p( '</TD>' );
     htp.tablerowclose;
  else
     htp.formhidden( 'P10', null );
     htp.formhidden( 'P10b', null );
  end if;

  if parm in ('CARGO','CONMOV')
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Intl Ship Discharge Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P3D',20,20,to_char(c2rec.int_ship_discharge_date,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(to_char(c2rec.int_ship_discharge_date,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P3D', to_char(c2rec.int_ship_discharge_date,LNGS.STR_DATE_02) );
     end if;
    htp.tabledata( htf.bold(' '),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2');
    htp.tablerowclose;
   else
       htp.formhidden( 'P3D', null );
   end if;

   if parm in ('CARGO','CONMOV')
    then
     htp.tablerowopen(cattributes=>'Id="P29A" '|| v_row_hide_switch);
     htp.tabledata( htf.bold('Customs Authority No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P29',20,20,c2rec.customs_auth_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.customs_auth_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P29', c2rec.customs_auth_no );
     end if;
     htp.tabledata( htf.bold('Customs Cleared Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       if c2rec.customs_auth_no is not null and c2rec.customs_cleared_date is null then
         htp.tabledata( htf.formtext('P30',20,20, to_char(nvl(c2rec.customs_cleared_date,sysdate),LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
         htp.tabledata( htf.formtext('P30',20,20, to_char(c2rec.customs_cleared_date,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold(c2rec.customs_cleared_date),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P30', c2rec.customs_cleared_date );
     end if;
    htp.tablerowclose;
     else
         htp.formhidden( 'P29', null );
         htp.formhidden( 'P30', null );
     end if;

    if parm in ('CARGO','CONMOV')
      then
       htp.tablerowopen(cattributes=>'Id="P48A" '|| v_row_hide_switch);
        htp.tabledata( htf.bold('Permission To Land PTL'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
         then
          htp.tabledata( htf.formtext('P48',20,20,c2rec.ptl),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         else
          htp.tabledata( htf.bold(c2rec.ptl),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
          htp.formhidden( 'P48', c2rec.ptl );
        end if;
     else
 --        if vaccess = 'EDIT' then htp.tabledata( htf.anchor2( 'strangp.cascade_movement?surl=' || surl || '&rid=' || replace(rowidtochar(rid),'+','~') || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&oldid=' || c2rec.movement_no || '&oldseal=' || replace(c2rec.seal,' ','+') || '&mtype=' || parm,LNGS.STR_TXT_136 ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); end if;
         htp.formhidden( 'P48', null );
     end if;
    if parm in ('CARGO','CONMOV')
      then
     htp.tabledata( htf.bold('PTL Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       if c2rec.ptl is not null and c2rec.ptl_date is null then
        htp.tabledata( htf.formtext('P48a',20,20, to_char(nvl(c2rec.ptl_date,sysdate),LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.formtext('P48a',20,20, to_char(c2rec.ptl_date,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
     else
       htp.tabledata( htf.bold(c2rec.ptl_date),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P48a', c2rec.ptl_date );
     end if;
      htp.tablerowclose;
     else
      htp.formhidden( 'P48a', null );
     end if;

    if parm in ('CARGO','CONMOV')
      then
       htp.tablerowopen(cattributes=>'Id="P50A" '||v_row_hide_switch);
        htp.tabledata( htf.bold('Gate Pass Release'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
         then
          htp.tabledata( htf.formtext('P50',20,20,c2rec.release_docket),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         else
          htp.tabledata( htf.bold(c2rec.release_docket),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
          htp.formhidden( 'P50', c2rec.release_docket );
        end if;
        htp.tabledata( htf.bold('Release Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
         then
          if c2rec.release_docket is not null and c2rec.release_date is null then
           htp.tabledata( htf.formtext('P49',20,20, to_char(nvl(c2rec.release_date,sysdate),LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
          else
           htp.tabledata( htf.formtext('P49',20,20, to_char(c2rec.release_date,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
          end if;
         else
          htp.tabledata( htf.bold(c2rec.release_date),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
          htp.formhidden( 'P49', c2rec.release_date );
        end if;
       htp.tablerowclose;
      else
       htp.formhidden( 'P49', null );
       htp.formhidden( 'P50', null );
     end if;

    if parm in ('CARGO','CONMOV')
      then
       htp.tablerowopen(cattributes=>'Id="P47A" '||v_row_hide_switch);
        htp.tabledata( htf.bold('POM Site Instructions SI'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
        if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
         then
          htp.tabledata( htf.formtext('P47',20,20,c2rec.si),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         else
          htp.tabledata( htf.bold(c2rec.si),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
          htp.formhidden( 'P47', c2rec.si );
        end if;
        htp.tabledata( htf.bold('SI Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
        if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
       then
         if c2rec.si is not null and c2rec.si_date is null then
          htp.tabledata( htf.formtext('P47a',20,20, to_char(nvl(c2rec.si_date,sysdate),LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         else
          htp.tabledata( htf.formtext('P47a',20,20, to_char(c2rec.si_date,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         end if;
       else
         htp.tabledata( htf.bold(c2rec.si_date),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         htp.formhidden( 'P47a', c2rec.si_date );
       end if;
       htp.tablerowclose;
    else
       htp.formhidden( 'P47', null );
       htp.formhidden( 'P47a', null );
    end if;

    if parm in ('CARGO','CONMOV')
      then
       htp.tablerowopen(cattributes=>'Id="P52A" '|| v_row_hide_switch);
       htp.tabledata( htf.bold('Import Delivery Note IDD'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
         then
          htp.tabledata( htf.formtext('P52',20,20,c2rec.idd),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
          htp.tabledata( htf.bold(c2rec.idd),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
          htp.formhidden( 'P52', c2rec.idd );
       end if;
       htp.tabledata( htf.bold('IDD Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT' then
        if c2rec.idd is not null and c2rec.idd_date is null then
         htp.tabledata( htf.formtext('P52a',20,20, to_char(nvl(c2rec.idd_date,sysdate),LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext('P52a',20,20, to_char(c2rec.idd_date,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        end if;
       else
         htp.tabledata( htf.bold(c2rec.idd_date),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         htp.formhidden( 'P52a', c2rec.idd_date );
       end if;
       htp.tablerowclose;
       htp.tablerowclose;
      else
       htp.formhidden( 'P52', null );
       htp.formhidden( 'P52a', null );
     end if;


 if parm in ('CARGO','CONMOV')
   then
    htp.tablerowopen(cattributes=>'Id="P45A" '|| v_row_hide_switch);
     htp.tabledata( htf.bold('Transfer From Intl Wharf Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P45',30,30, to_char(c2rec.INTL_WHARF_TRANSFER_DATE,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.INTL_WHARF_TRANSFER_DATE),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P45', c2rec.INTL_WHARF_TRANSFER_DATE );
     end if;
--     if c2rec.int_ship_discharge_date is not null then
 --     htp.tabledata( htf.bold('Intl Wharf Storage Days: '|| to_char(TRUNC(nvl(c2rec.intl_wharf_transfer_date,sysdate) - nvl(c2rec.int_ship_discharge_date,sysdate)-5))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2');
      htp.tabledata( htf.bold(strang.f_storage_days(c2rec.movement_no,c2rec.seal)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2');
--     else
--      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2>' );
--      htp.p( '</TD>' );
--     end if;
     htp.tablerowclose;
   else
    htp.formhidden( 'P45', null );
  end if;

 htp.tableclose;
 htp.nl;

   htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );

    if parm in ('CARGO','CONMOV')
      then
       htp.tablerowopen(cattributes=>'Id="P51A" '|| v_row_hide_switch);
        htp.tabledata( htf.bold('Wharf Delivery Note WDN'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
         then
          htp.tabledata( htf.formtext('P51',20,20,c2rec.wdn),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         else
          htp.tabledata( htf.bold(c2rec.wdn),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
          htp.formhidden( 'P51', c2rec.wdn );
        end if;
       htp.tabledata( htf.bold(' '),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tablerowclose;
      else
       htp.formhidden( 'P51', null );
     end if;

 if parm in ('CARGO','CONMOV')
   then
    htp.tablerowopen(cattributes=>'Id="P44A" '||v_row_hide_switch);
     htp.tabledata( htf.bold('Transfer To Berth#4 Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     if vaccess = 'EDIT'
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P44',30,30, to_char(c2rec.BERTH4_TRANSFER_DATE,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.BERTH4_TRANSFER_DATE),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P44', c2rec.BERTH4_TRANSFER_DATE );
     end if;
    htp.tabledata( htf.bold(' '),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
   else
    htp.formhidden( 'P44', null );
  end if;

  htp.tablerowopen;
   if parm in ('CARGO','CONMOV')
    then
     htp.tabledata( htf.bold('Local Ship/Voy'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
      if (access_id = 'z' and msg in (LNGS.STR_TXT_149)) or c2rec.local_ship_id is null then
       lov_ship( 'P21', 'S', 'L', c2rec.ship_id, io => nvl(c2rec.io,v_direction) );
      else
       lov_ship_local( 'P21', 'S', c2rec.local_ship_id, c2rec.io );
      end if;
      else
       if vaccess = 'EDIT' then htp.formhidden( 'P21', c2rec.local_ship_id,c2rec.io ); end if;
       lov_ship_local( 'P21', 'S', c2rec.local_ship_id, c2rec.io, isedit=>FALSE );
     end if;
     htp.p( '</TD>' );

     htp.tabledata( htf.anchor2( 'strangp.shp?surl=' || surl || '&rid=' || replace(rowidtochar(c9rec.rowid),'+','~') || '&parm=X' || parm || '&scid=' || scid || '&access_id=' || access_id,'Local ShipID '||htf.bold(c2rec.local_ship_id),ctarget=>'NEWSHIP', cattributes=>'title="Local Ship and Voyage"' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   --  htp.tabledata( 'Local ShipID '||htf.bold(c2rec.local_ship_id),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   elsif parm = 'AIRWAY'
    then
    htp.formhidden( 'P21', c2rec.local_ship_id );
   end if;
  htp.tablerowclose;


  if parm in ('CARGO','CONMOV')
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Local Bill of Lading'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
--      then
--       htp.tabledata( htf.formtext('P22',20,20,c2rec.local_bol),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--      else

       htp.tabledata( htf.bold(c2rec.local_bol||' '||c2rec.local_hb),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P22', c2rec.local_bol );
       htp.formhidden( 'P22a', c2rec.local_hb );
--     end if;
--     if (seclevel in ( 'LEVEL 1','LEVEL 6', 'LEVEL 8')) or (c2rec.local_ship_id in (1,2,3,4))
--      then

     -- Changed by David Banjo 1/7/2020
     open c3( c2rec.local_ship_id );
     fetch c3 into c3rec;
     close c3;
     
     open c7(c2rec.local_ship_id );
     fetch c7 into c7rec;
     close c7;
     if access_id = 'z' then
        htp.tabledata( htf.bold(' '),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     elsif ( c7rec.cnt = 0 ) then
        htp.tabledata( htf.anchor2( 'strangp.bols?surl=' || surl || '&rid_ss=' || translate(c3rec.rowid,'+ ','~+') || '&parm=' ||'BOLS'|| '&scid=' || scid || '&access_id=' || access_id||'&action='||LNGS.STR_STH_029 , LNGS.STR_STH_029,ctarget=>'NEWECN'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1' );
     else
        v_container := replace(replace(c2rec.movement_no,'&','--'),'#','__');
        htp.tabledata( htf.anchor2( 'strangp.containers_mass?surl=' || surl ||'&scid=' || scid ||'&rid_ss=' || replace(c3rec.rowid, '+', '~') ||'&parm=' || 'BOLS' || '&action=' || lngs.STR_STH_029 || '&access_id='|| access_id||'&msg=' || null || '&call_name=' || 'MOVEMENTS:'||v_container, LNGS.STR_STH_029, ctarget=>'NEWECN'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1' );
     end if;

--     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--      else
--       htp.tabledata( htf.anchor2( 'strangp.edit_local_bol?surl=' || surl || '&rid=' || replace(rowidtochar(c3rec.rowid),'+','~') || '&rid2=' || replace(rowidtochar(rid),'+','~') || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&shpid=' || c2rec.local_ship_id,'Assign Local BOL',ctarget=>'NEWECN' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
--     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P22', null );
    htp.formhidden( 'P22a', null );
  end if;

  if parm in ('CARGO','CONMOV')
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Local Ship Discharge Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     if c2rec.complete = 'F' and vaccess = 'EDIT'
    if nvl(c2rec.complete,'F') not in ('H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P3L',15,20,to_char(c2rec.local_ship_discharge_date,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(to_char(c2rec.local_ship_discharge_date,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P3L', to_char(c2rec.local_ship_discharge_date,LNGS.STR_DATE_02) );
     end if;
     htp.tabledata( htf.bold(' '),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    -- htp.p( '</TD>' );
     htp.tablerowclose;
  else
     htp.formhidden( 'P3L', null );
  end if;
  if parm in ('CARGO','CONMOV') then
   htp.tableclose;
   htp.nl;
   htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  end if;


  htp.tablerowopen;
  htp.tabledata( htf.bold('Current Location'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  if nvl(c2rec.complete,'F') <> 'H' and vaccess = 'EDIT'
  then
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   lov_list( 'LOCATIONS', 'P34', c2rec.current_location, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
  else
   htp.tabledata( htf.bold(c2rec.current_location),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.formhidden( 'P34', c2rec.current_location);
  end if;
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_150 ),cattributes=>'VALIGN="TOP"');
   htp.p( '</TD>' );
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_130),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  -- htp.anchor2( 'strangp.assign_det?surl=' || surl || '&FL=T&rid=' || translate(rid,'+ ','~+') || '&scid=' || scid || '&parm=' || parm || '&access_id=' || access_id, '[' || LNGS.STR_TXT_130 || ']',ctarget=>'ASSIGN' );

   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2>');
   if vaccess = 'EDIT'
    then
   -- htp.formselectopen( cname=>cd, cattributes=>'id="'||cd||'"' );
     htp.formselectopen( 'P4', cattributes=>'id="P4"'  );
     if c2rec.complete = 'F'
      then
       htp.formselectoption( 'INCOMPLETE', 'SELECTED', cattributes=>'VALUE="F"' );
      else
       htp.formselectoption( 'INCOMPLETE', cattributes=>'VALUE="F"' );
     end if;
     if c2rec.complete = 'P'
      then
       htp.formselectoption( 'PACKING COMPLETE', 'SELECTED', cattributes=>'VALUE="P"' );
      else
       htp.formselectoption( 'PACKING COMPLETE', cattributes=>'VALUE="P"' );
     end if;
     if c2rec.complete = 'A'
      then
       htp.formselectoption( 'ARRIVED AT PORT', 'SELECTED', cattributes=>'VALUE="A"' );
      else
       htp.formselectoption( 'ARRIVED AT PORT', cattributes=>'VALUE="A"' );
     end if;
     if c2rec.complete = 'H'
      then
       htp.formselectoption( 'ARCHIVED', 'SELECTED', cattributes=>'VALUE="H"' );
      else
       htp.formselectoption( 'ARCHIVED', cattributes=>'VALUE="H"' );
     end if;
     if c2rec.complete = 'D'
     then
       htp.formselectoption( 'READ-ONLY', 'SELECTED', cattributes=>'VALUE="D"' );
      else
       htp.formselectoption( 'READ-ONLY', cattributes=>'VALUE="D"' );
     end if;
     if c2rec.complete = 'W'
     then
       htp.formselectoption( 'AWAITING SHIPMENT', 'SELECTED', cattributes=>'VALUE="W"' );
      else
       htp.formselectoption( 'AWAITING SHIPMENT', cattributes=>'VALUE="W"' );
     end if;
     if c2rec.complete = 'S'
     then
       htp.formselectoption( 'SHIPPED', 'SELECTED', cattributes=>'VALUE="S"' );
      else
       htp.formselectoption( 'SHIPPED', cattributes=>'VALUE="S"' );
     end if;
     if parm = 'AIRWAY' then
        if c2rec.complete = 'X' 
        then
           htp.formselectoption( 'TRANSFER TO LOCAL', 'SELECTED', cattributes=>'VALUE="X"' );
        else
           htp.formselectoption( 'TRANSFER TO LOCAL', cattributes=>'VALUE="X"' );
     end if;
     end if;
   else
     htp.formhidden( 'P4',c2rec.complete );
    if c2rec.complete = 'F' then htp.bold( LNGS.STR_TXT_131 ); elsif c2rec.complete = 'H' then htp.bold( 'ARCHIVED' ); elsif c2rec.complete = 'X' then htp.bold( 'TRANSFER TO LOCAL' ); elsif c2rec.complete = 'P' then htp.bold( LNGS.STR_TXT_132 ); elsif c2rec.complete = 'A' then htp.bold( LNGS.STR_TXT_133 ); else htp.bold( LNGS.STR_TXT_134 ); end if;
   end if;

   if (access_id <> 'z' and ((c2rec.full_mt = 'FULL' and parm in ('CARGO')) or (c2rec.full_mt is null and parm in ('CONMOV','AIRWAY'))) ) then
   
    htp.tabledata( htf.anchor2( 'strangp.assign_det?surl=' || surl || '&FL=T&rid=' || translate(rid,'+ ','~+') || '&scid=' || scid || '&parm=' || parm || '&access_id=' || access_id, '[' || LNGS.STR_TXT_130 || ']',ctarget=>'ASSIGN' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   else
    htp.tabledata( htf.bold(' '), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   end if;
   
   if seclevel in ( 'LEVEL 1','LEVEL 6', 'LEVEL 8')
    then
     htp.tabledata( '&nbsp;');
    else
     if parm in ('CARGO','CONMOV') and vste not in ('MEL','SYD','MOT','TAB','KIU') then
        open c10( c2rec.movement_no, c2rec.seal );
        fetch c10 into c10rec;
        if c10%found then 
           htp.tabledata( htf.anchor2( 'strangp.edit_ecn?surl=' || surl || '&rid=' || replace(rowidtochar(rid),'+','~') || '&rid2=' || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&shpid=' || c2rec.ship_id,'Edit ECN: '||c10rec.ecn,ctarget=>'NEWECN' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
        else
           htp.tabledata( htf.anchor2( 'strangp.edit_ecn?surl=' || surl || '&rid=' || replace(rowidtochar(rid),'+','~') || '&rid2=' || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&shpid=' || c2rec.ship_id,LNGS.STR_TXT_128,ctarget=>'NEWECN' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
        end if;
        close c10;
      elsif parm = 'AIRWAY' then
       htp.p( '</TD>' );
       else
       htp.tabledata( htf.bold(' '), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       htp.p( '</TD>' );
     end if;
  end if;
  htp.tablerowclose;

  --htp.nl;
  htp.tableopen( cattributes=>'cellpadding=4 cellspacing=4 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
  htp.tabledata( htf.bold(LNGS.STR_TXT_090),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tabledata( htf.bold(to_char(c2rec.sumweight,LNGS.STR_FRMT_04)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  if parm in ('CARGO') then
    htp.tabledata( htf.bold('Gross Weight'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold(to_char(c2rec.sumweight+nvl(c2rec.tare,0),LNGS.STR_FRMT_04)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  end if;
  htp.tabledata( htf.bold(LNGS.STR_TXT_091),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tabledata( htf.bold(to_char(c2rec.sumvolume,LNGS.STR_FRMT_03)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tabledata( htf.bold(LNGS.STR_TXT_147),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tabledata( htf.bold(to_char(c2rec.revton,LNGS.STR_FRMT_03)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  if parm = 'AIRWAY'
    then
     htp.tabledata( htf.bold(LNGS.STR_TXT_148),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold(to_char(c2rec.chargeweight,LNGS.STR_FRMT_04)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
   end if;
   if vste not in ('MEL','SYD','MOT','TAB','KIU') then
     htp.tabledata( htf.bold(LNGS.STR_TXT_135),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       htp.p( '</TD>' );
     htp.tabledata( htf.bold(c2rec.invoiceno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.p( '</TD>' );
   else
       htp.tabledata( htf.bold(' '), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       htp.p( '</TD>' );
       htp.tabledata( htf.bold(' '), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
       htp.p( '</TD>' );
   end if;
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;

 if parm = 'AIRWAY'
  then
   htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
     htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_129),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      if vaccess = 'EDIT' and nvl(c3rec.status,'INCOMPLETE') <> 'COMPLETE'
       then
        htp.tabledata( htf.formtext('PX1',15,15,c2rec.carrier),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        if vaccess = 'EDIT' then htp.formhidden( 'PX1', c2rec.carrier ); end if;
        htp.tabledata( c2rec.carrier,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
    htp.tablerowclose;
     htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_275),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      if vaccess = 'EDIT' and nvl(c3rec.status,'INCOMPLETE') <> 'COMPLETE'
       then
        htp.tabledata( htf.formtext('PX2',15,15,c2rec.flight),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        if vaccess = 'EDIT' then htp.formhidden( 'PX2', c2rec.flight ); end if;
        htp.tabledata( c2rec.carrier,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
    htp.tablerowclose;
     htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_232),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      if vaccess = 'EDIT' and nvl(c3rec.status,'INCOMPLETE') <> 'COMPLETE'
       then
         htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
         htp.formselectopen( 'PX3' );
         for c5rec in c5 loop
          if c5rec.chargecode = c2rec.chargecode
           then
            htp.formselectoption( c5rec.chargecode, 'SELECTED' );
           else
            htp.formselectoption( c5rec.chargecode );
          end if;
         end loop;
         htp.formselectclose;
         htp.p( '</TD>' );
       else
        if vaccess = 'EDIT' then htp.formhidden( 'PX3', c2rec.chargecode ); end if;
        htp.tabledata( c2rec.chargecode,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
    htp.tablerowclose;
   htp.tableclose;
   htp.nl;
 else
  htp.formhidden( 'PX1',null);
  htp.formhidden( 'PX2',null);
  htp.formhidden( 'PX3',null);
 end if;

--20180423

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold('Priority'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') <> 'H' and vaccess = 'EDIT'
   then
    if c2rec.urgency is null then c2rec.urgency := 'STANDARD'; end if;
     if seclevel in ( 'LEVEL 8' )
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       htp.formhidden( 'P23', c2rec.urgency );
       if  parm = 'CARGO' then
          lov_list( 'URGENCY', 'P23', c2rec.urgency, TRUE, FALSE, FALSE, isedit=>FALSE, xtr_a=>'Y' );
       else 
          lov_list( 'URGENCY', 'P23', c2rec.urgency, TRUE, FALSE, FALSE, isedit=>FALSE);
       end if;
       htp.p( '</TD>' );
      else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       if  parm = 'CARGO' then
          lov_list( 'URGENCY', 'P23', c2rec.urgency, TRUE, FALSE, FALSE, xtr_a=>'Y' );
       else
          lov_list( 'URGENCY', 'P23', c2rec.urgency, TRUE, FALSE, FALSE);
       end if;
       htp.p( '</TD>' );
     end if;
    else
     htp.formhidden( 'P23', c2rec.urgency );
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     if  parm = 'CARGO' then
        lov_list( 'URGENCY', 'P23', c2rec.urgency, TRUE, FALSE, FALSE, isedit=>FALSE, xtr_a=>'Y');
     else
        lov_list( 'URGENCY', 'P23', c2rec.urgency, TRUE, FALSE, FALSE, isedit=>FALSE);
     end if;   
     htp.p( '</TD>' );
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Cargo Comments'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P11',70,100,c2rec.move_description),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.move_description),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden( 'P11', c2rec.move_description );
   end if;
  htp.tablerowclose;


 if parm = 'CARGO'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Reefer Setpoint'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P36',20,20,c2rec.set_point),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.set_point),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P36', c2rec.set_point );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P36', null );
  end if;

 if parm in ('CARGO','CONMOV')
   then
    htp.tablerowopen (cattributes=>'Id="P37"'); -- David Banjo hide row based on direction 
     htp.tabledata( htf.bold('Overdimensional'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P37',70,70,c2rec.overdimensional),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.overdimensional),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P37', c2rec.overdimensional );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P37', null );
  end if;

  htp.tablerowopen(cattributes=>'Id="P24"');
   htp.tabledata( htf.bold('Shipping Status Remarks'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
   then
       htp.tabledata( htf.formtext('P24',60,65,c2rec.remark),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.remark),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P24', c2rec.remark );
     end if;
    htp.tablerowclose;

 if parm in ('CARGO','CONMOV')
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Status Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P53',30,30, to_char(c2rec.REMARK_DATE,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.REMARK_DATE),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P53', c2rec.REMARK_DATE );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P53', null );
  end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Shipping Status Detail'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
     then
      htp.tabledata( htf.formtext('P25',60,65,c2rec.remark_detail),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
      htp.tabledata( htf.bold(c2rec.remark_detail),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.formhidden( 'P25', c2rec.remark_detail );
    end if;
  htp.tablerowclose;

    htp.tablerowopen;
     htp.tabledata( htf.bold('Consignee'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     if vaccess = 'EDIT'
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P32',20,20,c2rec.consignee),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.consignee),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P32', c2rec.consignee);
     end if;
    htp.tablerowclose;

    htp.tablerowopen;
     htp.tabledata( htf.bold('Consignee Location'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     if vaccess = 'EDIT'
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
      lov_list( 'LOCATIONS', 'P33', c2rec.consignee_location, FALSE, TRUE, FALSE );
      htp.p( '</TD>' );
      else
       htp.tabledata( htf.bold(c2rec.consignee_location),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P33', c2rec.consignee_location);
     end if;
    htp.tablerowclose;

    htp.tablerowopen;
     htp.tabledata( htf.bold('Warehouse Destination'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
     if nvl(c2rec.complete,'F') <> 'H' and vaccess = 'EDIT'
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list_warehouse( 'LOCATIONS', 'P35', c2rec.warehouse_destination, FALSE, TRUE, FALSE );
       htp.p( '</TD>' );
      else
       htp.tabledata( htf.bold(c2rec.warehouse_destination),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P35', c2rec.warehouse_destination);
     end if;
    htp.tablerowclose;

   htp.tableclose;
   htp.nl;


----20180423

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  if parm = 'CARGO' -- David Banjo wip
   then
     open c15(c2rec.movement_no,c2rec.seal);
     fetch c15 into c15rec;
     if c15%found then 
        htp.tablerowopen;
        htp.tabledata( htf.bold('Part Shipment'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
        htp.p(pop_up_window( 'height=400,width=500,scrollbars=yes,resizable=yes,titlebar=yes,addressbar=yes'));
        v_link := '''strangp.part_shipment_window?surl=' || surl || '&mvid='||c2rec.movement_no||'&seal='||c2rec.seal||'''';
        htp.tabledata('<a href="'||v_link||'"  onClick="popUpWindow(' || v_link || '); return false;"> Click for Details</a>',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1' );   
        htp.tablerowclose;
     end if;
     close c15;  
  end if; 

  if parm = 'CARGO'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Cargo Type'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     if c2rec.complete = 'F'
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       if vaccess = 'EDIT'
        then
         lov_list( 'CTRTYPE', 'P5', nvl(c2rec.container_type,v_container_type), TRUE, FALSE, FALSE );
        else
         lov_list( 'CTRTYPE', 'P5', nvl(c2rec.container_type,v_container_type), TRUE, FALSE, FALSE, isedit=>FALSE );
       end if;
       htp.p( '</TD>' );
      else
       htp.tabledata( htf.bold( c2rec.container_type ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P5', c2rec.container_type );
     end if;
    htp.tablerowclose;
  else
   htp.formhidden( 'P5', null );
  end if;

  if parm = 'CARGO'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('ISO Container Type'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     if c2rec.complete = 'F'
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       if vaccess = 'EDIT'
        then
         lov_list( 'UNCTNTAB', 'P5i', nvl(c2rec.iso_container_type,'22G1'), TRUE, TRUE, FALSE );
        else
         lov_list( 'UNCTNTAB', 'P5i', nvl(c2rec.iso_container_type,'22G1'), TRUE, TRUE, FALSE, isedit=>FALSE );
       end if;
       htp.p( '</TD>' );
      else
       htp.tabledata( htf.bold( c2rec.iso_container_type ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P5i', c2rec.iso_container_type );
     end if;
    htp.tablerowclose;
  else
   htp.formhidden( 'P5i', null );
  end if;

  if parm = 'CARGO'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Verified Gross Mass (KG)'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  --   if c2rec.complete = 'F' and vaccess = 'EDIT'
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
    then
       htp.tabledata( htf.formtext('P6i',15,20,to_char(c2rec.vgm)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(to_char(c2rec.vgm)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P6i', to_char(c2rec.vgm) );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P6i', null );
  end if;


  if parm = 'CARGO'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_138),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  --   if c2rec.complete = 'F' and vaccess = 'EDIT'
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
       then
       htp.tabledata( htf.formtext('P6',15,20,to_char(c2rec.tare)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(to_char(c2rec.tare)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P6', to_char(c2rec.tare) );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P6', null );
  end if;

  if parm in ('CARGO','CONMOV')
  then
     htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_139),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  --   if c2rec.complete = 'F' and vaccess = 'EDIT'
     if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
     then
        htp.tabledata( htf.formtext('P7',30,30, to_char(c2rec.dispatch_date,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
        htp.tabledata( htf.bold(to_char(c2rec.dispatch_date,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        htp.formhidden( 'P7', to_char(c2rec.dispatch_date,LNGS.STR_DATE_02) );
     end if;
     htp.tablerowclose;
   else
      htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_140),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     if c2rec.complete = 'F' and vaccess = 'EDIT'
      if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
         htp.tabledata( htf.formtext('P7',15,20,to_char(c2rec.dispatch_date,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
         htp.tabledata( htf.bold(to_char(c2rec.dispatch_date,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         htp.formhidden( 'P7', to_char(c2rec.dispatch_date,LNGS.STR_DATE_02));
      end if;
      htp.tablerowclose;
   end if;

    htp.tablerowopen;
    htp.tabledata( htf.bold(LNGS.STR_TXT_141),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--   if c2rec.complete = 'F' and vaccess = 'EDIT'
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
    then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       
       lov_list( 'LOCATIONS', 'P8', c2rec.departure, FALSE, TRUE, FALSE );
       htp.p( '</TD>' );
    else
       htp.tabledata( htf.bold(c2rec.departure),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P8', c2rec.departure );
    end if;
    htp.tablerowclose;
    htp.tablerowopen;
    htp.tabledata( htf.bold(LNGS.STR_TXT_142),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--   if c2rec.complete = 'F' and vaccess = 'EDIT'
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
    then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'LOCATIONS', 'P9', c2rec.arrival, FALSE, TRUE, FALSE );
       htp.p( '</TD>' );
    else
       htp.tabledata( htf.bold(c2rec.arrival),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P9', c2rec.arrival );
    end if;
    htp.tablerowclose;

/*
 if parm in ('CARGO','CONMOV') and vste not in ('MEL','SYD','MOT','TAB','KIU')
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Local House Bill'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     if vaccess = 'EDIT'
     if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P26',20,20,c2rec.hb),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.hb),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P26', c2rec.hb );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P26', null );
  end if;
*/

  htp.formhidden( 'P26', null );

 if parm in ('CARGO','CONMOV')
   then
    htp.tablerowopen( cattributes=>'Id="P27A" '|| v_row_hide_switch);
     htp.tabledata( htf.bold('RFTS'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     if vaccess = 'EDIT'
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P27',20,20,c2rec.rfts),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.rfts),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P27', c2rec.rfts );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P27', null );
  end if;

    htp.tablerowopen( cattributes=>'Id="P28A" '|| v_row_hide_switch);
     htp.tabledata( htf.bold('DANS'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--     if vaccess = 'EDIT'
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P28',20,20,c2rec.dan),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.dan),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P28', c2rec.dan );
     end if;
    htp.tablerowclose;
  
   if parm = 'AIRWAY' and NVL(c11rec.li,'I') = 'I' and c2rec.mawb_link is not null THEN
     htp.tablerowopen;
     htp.tabledata( htf.bold('Local MAWB'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold(c2rec.mawb_link),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tablerowclose;
  end if;
  
 if parm = 'AIRWAY' and NVL(c11rec.li,'I') = 'L' and c12rec.movement_no is not null THEN
     htp.tablerowopen;
     htp.tabledata( htf.bold('International MAWB'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold(c12rec.movement_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tablerowclose;
  end if; 
       
 if parm = 'CARGO'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Container Owner'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P31',20,20,c2rec.owner),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.owner),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P31', c2rec.owner );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P31', null );
  end if;

    htp.tableclose;
    htp.nl;
    htp.tableopen( cattributes=>'Id="P38A" '||'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND||' '||v_table_hide_switch );

    htp.tablerowopen;
     htp.tabledata( htf.bold('Delivery Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P38',30,30, to_char(c2rec.del_date,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.del_date),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P38', c2rec.del_date);
     end if;
    htp.tablerowclose;

    htp.tablerowopen;
     htp.tabledata( htf.bold('Delivery Transport Company'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P39',20,20,c2rec.del_transport_company),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.del_transport_company),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P39', c2rec.del_transport_company);
     end if;
    htp.tablerowclose;

    htp.tablerowopen;
     htp.tabledata( htf.bold('Delivery Truck Rego'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P40',20,20,c2rec.del_truck_rego),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.del_truck_rego),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P40', c2rec.del_truck_rego);
     end if;
    htp.tablerowclose;

    htp.tablerowopen ;
     htp.tabledata( htf.bold('Docket Number'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P41',20,20,c2rec.docket_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.docket_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P41', c2rec.docket_no);
     end if;
    htp.tablerowclose;

 if parm = 'CARGO'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Container Park'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P42',20,20,c2rec.container_park),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.container_park),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P42', c2rec.container_park );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P42', null );
  end if;
  --  htp.tableclose;
  --  htp.nl;
  --  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );


 if parm in ('CARGO','CONMOV') and vste not in ('MEL','SYD','MOT','TAB','KIU')
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('OTML Yard Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D')and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P43',30,30, to_char(c2rec.otml_yard_date,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.otml_yard_date),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P43', c2rec.otml_yard_date );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P43', null );
  end if;

-- htp.formhidden( 'P46, null );

 if parm in ('CARGO','CONMOV') and vste not in ('MEL','SYD','MOT','TAB','KIU')
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Brisbane Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P46',30,30, to_char(c2rec.brisbane_date,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.brisbane_date),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P46', c2rec.brisbane_date );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P46', null );
  end if;

  if parm in ('CARGO','CONMOV') and vste not in ('MEL','SYD','MOT','TAB','KIU')
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold('Booking Ref'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext('P10a',20,20,c2rec.booking_ref),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.booking_ref),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P10a', c2rec.booking_ref );
     end if;
    htp.tablerowclose;
   else
    htp.formhidden( 'P10a', null );
  end if;
   htp.tableclose;
   htp.nl;

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );

  htp.tablerowopen;
   htp.tabledata( htf.bold('Physical Packing Completed By'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('PP',30,35,c2rec.physical_pack),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.physical_pack),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden( 'PP', c2rec.physical_pack );
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Computer Packing Completed By'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if nvl(c2rec.complete,'F') not in ( 'H','D') and vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('CP',30,35,c2rec.computer_pack),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.computer_pack),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden( 'CP', c2rec.computer_pack );
   end if;
  htp.tablerowclose;

  -- The following block was added by DB on 29/11/2021

  if parm = 'CARGO' and vste in ('BNE', 'TVL','SYD')
  then
     htp.tablerowopen;
     htp.tabledata( htf.bold('Packing Approval'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   
     if nvl(c2rec.complete,'F') in ('P') and vaccess = 'EDIT' and vapproval = 'CONTAINER APPROVAL' and c2rec.attached_photo = 3  
        and ((substr(c2rec.iso_container_type, 3, 1) <> 'P') 
        or (substr(c2rec.iso_container_type, 3, 1) = 'P' and c2rec.pin_engaged = 'Y' and c2rec.timber_trimmed = 'Y' and c2rec.loose_items_checked = 'Y'))  
     then
        htp.p( '<TD  ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1>' );
        htp.formselectopen('PA', cattributes=>'id="PA"');  
        if (c2rec.pack_checked_by is null  )
        then
           htp.formselectoption( 'NOT APPROVED', 'SELECTED',cattributes=>'VALUE="N"' );
           htp.formselectoption( 'APPROVED',  cattributes=>'VALUE="A"' );
        else
           htp.formselectoption( 'NOT APPROVED', cattributes=>'VALUE="N"' );
           htp.formselectoption( 'APPROVED', 'SELECTED',cattributes=>'VALUE="A"' );
        end if;
        htp.formselectclose;
        htp.p( '</TD>' );
     else
        if (c2rec.pack_checked_by is null  ) then 
           htp.tabledata( htf.bold('NOT APPROVED'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
           htp.formhidden( 'PA', 'N');
        else 
           htp.tabledata( htf.bold('APPROVED'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
           htp.formhidden( 'PA', 'A');
        end if;
     end if;
     htp.tablerowclose;
     htp.tablerowopen;
     htp.tabledata( htf.bold('Scan Key'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold(c2rec.scan_key),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tablerowclose;
  end if;

  htp.tablerowopen;
  htp.tabledata( htf.bold('Latest Interface4 Transfer'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tabledata( htf.bold(c2rec.interface4_date),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tableclose;

  if vaccess = 'EDIT'
  then
   if access_id = 'z'
    then
     if parm = 'CARGO' and msg in (lngs.STR_TXT_463)
      then
        htp.nl;
        htp.nl;
        htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
        htp.tablerowopen;
        htp.tabledata( htf.bold('Create Multiple New Containers'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN="4"');
        htp.tablerowclose;
        htp.tablerowopen;
        htp.tabledata( htf.bold('Enter the new containers or paste list'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN="4"');
        htp.tablerowclose;
        htp.tablerowopen;
        htp.tabledata( 'The list should just be the container numbers with one container per line.<BR>Or, if you have seals, then use a comma between the container number and seal.<BR>Only one record per line.',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN="4"');
        htp.tablerowclose;
        htp.tablerowopen (cattributes=>'style="display: none;"') ;
     --   htp.tablerowopen ;
        htp.tabledata( htf.bold(LNGS.STR_TXT_145),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN="2"');
        htp.tabledata( htf.formtext('P12',10,10,'1'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="2"');
        htp.tablerowclose;
        htp.tablerowopen;
        htp.tabledata( htf.bold('&nbsp;'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN="4"');
    --    htp.tabledata( htf.bold('OR'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN="4"');
        htp.tablerowclose;
        htp.tablerowopen;
        htp.tabledata( '<textarea name="p12a" rows="10" cols="40"></textarea>',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3"');
        htp.tabledata(htf.italic('Example: '||htf.nl||'OMUX5766873,  V678'||htf.nl||'TCUT7654123,B6544'||htf.nl||'NAQW1237665 , T054'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" VALIGN="TOP" COLSPAN="1"');	
       
        htp.tablerowclose;
        htp.tableclose;
     else
        htp.formhidden( 'P12', '1' );
        htp.formhidden( 'P12a', '1' );
     end if;
   end if;
  end if;

  htp.nl;
  if c2rec.complete <> 'F' and c2rec.movement_type = 'AIRWAY'
   then
     if seclevel in ( 'LEVEL 1','LEVEL 6', 'LEVEL 8')
      then
       NULL;
      else
       htp.anchor( 'strangp.assign_hawb?surl=' || surl || '&rid=' || translate(rid,'+ ','~+') || '&scid=' || scid || '&parm=' || parm || '&access_id=' || access_id, '[' || LNGS.STR_TXT_392 || ']');
     end if;
  end if;
  htp.nl;

 htp.p( '</TD>' );
 htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT'
  then
   if access_id = 'z'
    then
      htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_149 ),cattributes=>'VALIGN="TOP"');
    else
     htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_150 ),cattributes=>'VALIGN="TOP"');
     htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_149 ),cattributes=>'VALIGN="TOP"');
     if c2rec.complete not in ('S')
      then 
         htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_463 ),cattributes=>'VALIGN="TOP"');
     end if;
     open c4( c2rec.movement_no, c2rec.seal );
     fetch c4 into c4rec;
     close c4;
     if c4rec.tot = 0
      then
        htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_151 ),cattributes=>'VALIGN="TOP"');
     end if;
   end if;
   htp.formclose;
   
      -- add button for printing Container Packlist - David Banjo
------------------------------------------------------------------------------------
if parm = 'CARGO' and vste in ('BNE', 'TVL','SYD') and vaccess = 'EDIT' 
and access_id = 'x' and vapproval = 'CONTAINER APPROVAL' then  --and c2rec.current_location in ('BNE', 'TVL','SYD') and c2rec.complete in  ('P','F')  then

  
   if substr(c2rec.iso_container_type,'3',1) = 'P'  then
      open c13;
      fetch c13 into c13rec;
      close c13;
      htp.formopen( 'oltp.run_report', ctarget=>'ASSIGN' );
      htp.formhidden( 'SURL', surl );
      htp.formhidden( 'REPID', c13rec.report_id );
      htp.formhidden( 'LVL', c13rec.lvl );
   else
      open c14;
      fetch c14 into c14rec;
      close c14;
      htp.formopen( 'oltp.run_report', ctarget=>'ASSIGN' );
      htp.formhidden( 'SURL', surl );
      htp.formhidden( 'REPID', c14rec.report_id );
      htp.formhidden( 'LVL', c14rec.lvl );
   end if;
   

    open c3(c2rec.ship_id);
    fetch c3 into c3rec;
    close c3;
    
    htp.formhidden( 'P0', 'LOGIN.OWNER_ID');
    htp.formhidden( 'P1', c1rec.aid );
    htp.formhidden( 'PTYPE', 'NO DISPLAY');
    htp.formhidden( 'P0', 'LOGIN.USERNAME');
    htp.formhidden( 'P1', c1rec.username);
    htp.formhidden( 'PTYPE', 'NO DISPLAY');
    htp.formhidden( 'P0', 'LOGIN.LOOK_AND_FEEL');
    htp.formhidden( 'P1', c1rec.theme_name);
    htp.formhidden( 'PTYPE', 'NO DISPLAY');
    htp.formhidden( 'P0', 'LOGIN.LOGIN_TYPE');
    htp.formhidden( 'P1', 'OWNER');
    htp.formhidden( 'PTYPE', 'NO DISPLAY');
    htp.formhidden( 'P0', 'LOGIN.SURL');
    htp.formhidden( 'P1', surl );
    htp.formhidden( 'PTYPE', 'NO DISPLAY');
    htp.formhidden( 'P0', 'LOGIN.BFTR172');
    htp.formhidden( 'P1', '' );
    htp.formhidden( 'PTYPE', 'NO DISPLAY');
    htp.formhidden( 'P0', 'LOGIN.BFTR173');
    htp.formhidden( 'P1', '' );
    htp.formhidden( 'PTYPE', 'NO DISPLAY');
    htp.formhidden( 'P0', 'SHIP NAME');
    htp.formhidden( 'P1', c3rec.shipname );
    htp.formhidden( 'PTYPE', 'C');
    htp.formhidden( 'P0', 'SHIP_ID');
    htp.formhidden( 'P1', c2rec.ship_id);
    htp.formhidden( 'PTYPE', 'C');
    htp.formhidden( 'P0', 'MOVEMENT_NO');
    htp.formhidden( 'P1', c2rec.movement_no );
    htp.formhidden( 'PTYPE', 'C');

------------------------------------------------------
    htp.p('<TD>' );
    if substr(c2rec.iso_container_type,'3',1) = 'P' then
      htp.p('<button type="submit" value="Submit for Further Parameters">Print PackList</button>');
    else 
       htp.formhidden( 'P0', 'SEAL');
       htp.formhidden( 'P1', c2rec.seal );
       htp.formhidden( 'PTYPE', 'C');
       htp.p('<button type="submit" value="Submit for Further Parameters">Print PackList</button>');
    end if;
    htp.p('</TD>' );
    htp.formclose;
  end if;
   
   
   
   
 end if;
 
 search( surl, parm, rid, samerow=>TRUE );
 htp.tablerowclose;
 htp.tableclose;

 if msg is not null
  then
   glbx.header_msg( msg );
 end if;

 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'MOVEMENT',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end movement;

 procedure accept_movement( surl in varchar2,  scid in integer, parm in varchar2, access_id in varchar2, rid in varchar2, action in varchar2,  msg in varchar2 default NULL,
                             p1 in varchar2,  p2 in varchar2,  p3 in varchar2,   p4 in varchar2 default 'F', p5 in varchar2, p5i in varchar2, p6i in varchar2, p6 in varchar2, p7 in varchar2,
                             p8 in varchar2,  p9 in varchar2,  p10 in varchar2,  p10a in varchar2, p10b in varchar2, p11 in varchar2, p12 in varchar2 default '1', p12a in varchar2 default null,
                             px1 in varchar2, px2 in varchar2, px3 in varchar2,  pp in varchar2, cp in varchar2, p20 in varchar2, p20a in varchar2, p20b in varchar2, p21 in varchar2, p22 in varchar2, p22a in varchar2, p23 in varchar2, p24 in varchar2,
                             p25 in varchar2, p26 in varchar2, p27 in varchar2,  p28 in varchar2, p29 in varchar2, p30 in varchar2, p31 in varchar2, p32 in varchar2, p33 in varchar2, p34 in varchar2,
			                 p35 in varchar2, p36 in varchar2, p37 in varchar2,  p38 in varchar2, p39 in varchar2, p40 in varchar2,
			                 p41 in varchar2, p42 in varchar2, p43 in varchar2,  p44 in varchar2, p45 in varchar2, p46 in varchar2, p47 in varchar2, p48 in varchar2, p49 in varchar2, p50 in varchar2,
                             p51 in varchar2, p3D in varchar2, p3L in varchar2,  p52 in varchar2, p53 in varchar2, p47a in varchar2, p48a in varchar2, p52a in varchar2, pa in varchar2 default null)
as

 cursor c1( mvid varchar2, mtype varchar2) is select 'x' from strang.movements where movement_no = mvid;
 cursor c2( mvid varchar2, sl varchar2, mtype varchar2) is select 'x' from strang.movements where movement_no = mvid and movement_type = mtype and nvl(seal,'|') = nvl(sl,'|');
 cursor c4( rid rowid ) is select movement_no,seal,ship_id, local_ship_id, io, current_location, complete, iso_container_type,pack_checked_by from strang.movements where rowid = rid;
 cursor c5( mvid varchar2 ) is select 'x' from strang.movements where movement_no = mvid and movement_type in ('CONMOV','AIRWAY');
 cursor c6( ctrtyp varchar2) is select l.description from strang.lov l where l.lov_name='CTRTYPE' and l.code = ctrtyp; -- 20140907
 cursor c7( vmvt varchar2 ) is select ship_id from strang.ships_airway s where s.voy = vmvt and s.shipname = 'MAWB' and ship_airway = 'A';
 cursor c8( rid rowid) is select 'x'
                            from strang.movements m, strang.detailrs dr
                           where m.rowid = rid
                             and m.movement_no = dr.movement_no
                             and nvl(m.seal,'|') = nvl(dr.camov_seal,'|')
                             and dr.deliveryno is not null;
 cursor c8a( rid rowid) is select cd.convoy_id
                            from strang.movements m, strang.convoy_details cd
                           where m.rowid = rid
                             and ((m.movement_no = cd.movement_no1
                             and nvl(m.seal,'|') = nvl(cd.seal1,'|'))
                             or (m.movement_no = cd.movement_no2
                             and nvl(m.seal,'|') = nvl(cd.seal2,'|'))
                             or (m.movement_no = cd.movement_no3
                             and nvl(m.seal,'|') = nvl(cd.seal3,'|'))
                             or (m.movement_no = cd.movement_no4
                             and nvl(m.seal,'|') = nvl(cd.seal4,'|'))
                             or (m.movement_no = cd.movement_no5
                             and nvl(m.seal,'|') = nvl(cd.seal5,'|'))
                             or (m.movement_no = cd.movement_no6
                             and nvl(m.seal,'|') = nvl(cd.seal6,'|')));
  cursor c8b( rid rowid) is select 'x'
                            from strang.movements m, strang.detailrs dr
                           where m.rowid = rid
                             and m.movement_no = dr.movement_no_2
                             and nvl(m.seal,'|') = nvl(dr.camov_seal_2,'|')
                             and dr.deliveryno is not null;                        
                             

 cursor c1a( sto varchar2) is select max(ship_id) ship_id from strang.ships_airway where ship_id < 9000000;
 cursor c10a(v_voy varchar2) is select ship_id from strang.ships_airway where shipname = 'MAWB' and upper(voy) = upper(v_voy);

 cursor c11( vship_id integer) is select ship_id, li, io from strang.ships_airway where ship_id = vship_id;
 
 cursor c12( mvid varchar2 ) is select movement_no from strang.movements where status <> 'H' and movement_no = mvid;
 
 cursor c13( rid rowid ) is select (select count(*) 
                                    from strang.detailrs dr
                                   where dr.movement_No = m.movement_no
                                    and  nvl(dr.camov_seal,'|') = nvl(m.seal,'|')
                                    and  dr.HAZARD is not null) haz_cnt
                                  , nvl(m.tare, 0) tare
                                  , nvl(m.sumweight,0) sumweight
                                  , (nvl(m.tare, 0) + nvl(m.sumweight,0)) grossweight   
                             from strang.movements m
                            where rowid = rid;
 
 cusrec		customer_account%ROWTYPE;
 moverec    strang.movements%ROWTYPE;
 c1rec		c1%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c5rec		c5%ROWTYPE;
 c6rec		c6%ROWTYPE; -- 20140907
 c7rec		c7%ROWTYPE;
 c8rec		c8%ROWTYPE;
 c8arec		c8a%ROWTYPE;
 c8brec		c8b%ROWTYPE;
 c1arec		c1a%ROWTYPE;
 c10arec	c10a%ROWTYPE;
 c11rec		c11%ROWTYPE;
 c12rec		c12%ROWTYPE;
 c13rec		c13%ROWTYPE;
 --c12rec		c12%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 newrid		rowid;
 sts		varchar2(100);
 nmb1		integer;
 nmb2		integer;
 nmb3		integer;
 dt		    date;
 mf		    varchar2(100);
 vste		varchar2(10);
 p11x       varchar2(100);
 ccdt		date;
 dddt		date;
 oydt		date;
 b4dt		date;
 iwdt		date;    -- INTL_WHARF_TRANSFER_DATE
 bdt 		date;    -- BERTH4_TRANSFER_DATE
 rdt 		date;
 lddt		date;
 iddt		date;
 rddt		date;
 sidt		date;
 ptldt		date;
 idddt		date;
 pp3		integer;
 emptyseal	integer;
 pp2		varchar2(100);
 v_ctr_owner varchar2(100);
 v_msg      varchar2(500);
 p12a_chk   varchar2(10000);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_MOVEMENT' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 cusrec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(cusrec.aid);
 pp2 := upper(trim(p2));
 if action = LNGS.STR_TXT_149 and access_id <> 'z'
  then
   movement(surl,null,scid,null,parm,'z',LNGS.STR_TXT_149);
   return;
 end if;

 if action in (LNGS.STR_TXT_463) and access_id <> 'z' -- Insert New Movement as Copy
  then
   movement(surl,rid,scid,null,parm,'z',action);
   return;
 end if;
 
 if upper(action) in ('CLICK TO ATTACH PHOTOS') and access_id <> 'z' then
    load_container_photos ( surl, rid );
    return;
 end if;

 begin dt := to_date(p7,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p7 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;

 begin lddt := to_date(p3L,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p30 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;
 begin iddt := to_date(p3D,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p30 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;

 begin ccdt := to_date(p30,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p30 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;
 begin dddt := to_date(p38,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p38 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;
 begin oydt := to_date(p43,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p43 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;
 begin b4dt := to_date(p44,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p44 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;
 begin iwdt := to_date(p45,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p45 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;
 begin bdt := to_date(p46,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p46 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;
 begin rdt := to_date(p49,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p49 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;
 begin rddt := to_date(p53,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p53 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;

 begin sidt := to_date(p47a,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p47a || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;
 begin ptldt := to_date(p48a,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p48a || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;
 begin idddt := to_date(p52a,LNGS.STR_DATE_02); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p52a || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;

 begin nmb1 := to_number(p6); exception when others then movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_154 || ':' || p6 || ' ' || LNGS.STR_TXT_153 || ':' || '999,999' ); return; end;
 begin nmb2 := to_number(p12); exception when others then nmb2 := 1; end;
 begin nmb3 := to_number(p6i); exception when others then movement( surl, rid, scid, null, parm, access_id, 'Verified Gross Mass:' || p6i || ' ' || LNGS.STR_TXT_153 || ':' || '999,999' ); return; end;

 if p1 is null and access_id = 'z'
  then
    movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_155 );
    return;
 end if;

 if p2 is null and access_id = 'z' and parm = 'CARGO'
  then
   if p20 = 'FULL' then
    movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_156 );
    return;
   else
    select strang.s_seal_for_empties.nextval into emptyseal from dual;
    pp2 := to_char(emptyseal);
   end if;
 end if;

 if parm in ('CARGO','CONMOV') and access_id = 'z' then
  open c11(p3);
  fetch c11 into c11rec;
  close c11;
  if c11rec.io <> p20a then
    movement( surl, rid, scid, null, parm, access_id, 'Select international ship travelling in the same direction as the container - Inbound or Outbound' );
    return;
  end if;
  open c11(p21);
  fetch c11 into c11rec;
  close c11;
  if c11rec.io <> p20a then
    movement( surl, rid, scid, null, parm, access_id, 'Select local ship travelling in the same direction as the container - Inbound or Outbound' );
    return;
  end if;
 end if;

 if action = LNGS.STR_TXT_151
  then
   open c8(chartorowid(rid));
   fetch c8 into c8rec;
   if c8%FOUND
    then
     close c8;
     movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_158a);
     return;
   end if;
   open c8a(chartorowid(rid));
   fetch c8a into c8arec;
   if c8a%FOUND
    then 
      close c8a;
      movement( surl, rid, scid, null, parm, access_id, 'The Movement Number and Seal cannot be deleted. Remove Movement from Convoy_id: '||c8arec.convoy_id );
      return;
   end if;
   close c8a;
   if parm = 'AIRWAY' then 
      open c8b(chartorowid(rid));
      fetch c8b into c8brec;
      if c8b%FOUND
       then 
         close c8b;
         movement( surl, rid, scid, null, parm, access_id, 'This MAWB cannot be deleted. Please remove transferred Deliveries');
         return;
      end if;
      close c8b;
   end if;
   
   delete from strang.movements where rowid = chartorowid( rid );
   if parm = 'AIRWAY'
   then
    open c7(p1);
    fetch c7 into c7rec;
    if c7%FOUND
    then
     delete from strang.ships_airway s where ship_id = c7rec.ship_id;
    end if;
    close c7;
   end if;
   movement( surl, newrid, scid, null, parm, 'z', LNGS.STR_TXT_157 );
   return;
 end if;

  if access_id = 'z' then
    -- Check for Uniqueness
   if parm = 'CARGO'
    then
     open c5(p1);
     fetch c5 into c5rec;
     if c5%FOUND
      then
       close c5;
          movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_159 );
       return;
     end if;
     close c5;
     open c2(p1,pp2,parm);
     fetch c2 into c2rec;
     if c2%FOUND
      then
       close c2;
          movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_158 );
       return;
     end if;
     close c2;
     
-- David BANJO : Check for Container Owner and assign value to container owner variable
--     open c12(p1);
--     fetch c12 into c12rec;
--     if c12%FOUND then
--        v_ctr_owner := c12rec.cat_company;
--     end if;
--     close c13;
     
    else
     open c1(p1,parm);
     fetch c1 into c1rec;
     if c1%FOUND
      then
       close c1;
       movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_159 );
       return;
     end if;
     close c1;
   end if;
   
   
   mf := control_code( 'OFFICE', vste );
    p11x := p11;      -- 20140907
   if parm = 'CARGO'  -- 20140907
    then
     open c6(p5);
     fetch c6 into c6rec;
     if p11x is null
      then
       p11x := c6rec.description;
      else
       if c6rec.description is not null and upper(p11x) not like '%' || upper(c6rec.description) || '%'
        then
         p11x := c6rec.description || ' / '|| p11x;
       end if;
     end if;
    close c6;
   end if;

   pp3:= p3;

   if parm = 'AIRWAY' then
    open c10a(trim(p1));
    fetch c10a into c10arec;
    if c10A%NOTFOUND then
     close c10a;
     open c1a(currsite);
      fetch c1a into c1arec;
      pp3 := nvl(c1arec.ship_id,0) + 1;
     close c1a;
      if NVL(p20b, 'I') <> 'L' then
     insert into strang.ships_airway(ship_airway,ship_id,shipname,voy,LI, estdepart,estarrive,portload,portdisc,status,manifest_created,controlling_office,io)
     values ('A',pp3,'MAWB',decode(parm,'AIRWAY',trim(p1),replace(p1,' ','')),'I',dt,dt,p8,p9,'INCOMPLETE',mf,mf,p20a);
    else
        insert into strang.ships_airway(ship_airway,ship_id,shipname,voy,LI, estdepart,estarrive,portload,portdisc,status,manifest_created,controlling_office,io)
        values ('A',pp3,'MAWB',decode(parm,'AIRWAY',trim(p1),replace(p1,' ','')),'L',dt,dt,p8,p9,'INCOMPLETE',mf,mf,p20a);
      end if;
    else
    pp3:= c10arec.ship_id; -- 20200308
     close c10a;
    end if;
   end if;
   
   p12a_chk :=  REGEXP_REPLACE(p12a, '[^\-a-zA-Z0-9]', '');
  
   if not (( nmb2 > 1 or trim(p12a_chk) is not null) and parm = 'CARGO' and nvl(trim(p12a),'x') <> '1' ) then
      insert into strang.movements(movement_type,movement_no,seal,ship_id,complete,container_type, iso_container_type,vgm,tare,dispatch_date,departure,arrival,bol,
                                booking_ref, move_description,manifest_created,controlling_office,carrier,flight,chargecode, physical_pack, computer_pack,full_mt, io,local_ship_id,local_bol,urgency,remark,
                                remark_detail, HB , RFTS , DAN , CUSTOMS_AUTH_NO , CUSTOMS_CLEARED_DATE , OWNER , CONSIGNEE , CONSIGNEE_LOCATION , CURRENT_LOCATION , WAREHOUSE_DESTINATION , SET_POINT ,
                                OVERDIMENSIONAL , DEL_DATE , DEL_TRANSPORT_COMPANY , DEL_TRUCK_REGO , DOCKET_NO , CONTAINER_PARK , OTML_YARD_DATE , BERTH4_TRANSFER_DATE , INTL_WHARF_TRANSFER_DATE , BRISBANE_DATE ,
                                SI , PTL , RELEASE_DATE , RELEASE_DOCKET ,WDN, LOCAL_SHIP_DISCHARGE_DATE, INT_SHIP_DISCHARGE_DATE, idd, remark_date, si_date, ptl_date, idd_date, date_modified ) values
      (parm,replace(decode(parm,'AIRWAY',trim(p1),replace(p1,' ','')),chr(9),''),trim(pp2),pp3,p4,p5,p5i,nmb3,nmb1,dt,p8,p9,upper(p10),upper(p10a),
      p11x,mf,mf,px1,px2,px3,pp,cp,p20,p20a,p21,p22,p23,p24,p25,p26,p27,p28,p29,ccdt, strang.f_GetDefaultCtrOwner(decode(parm,'AIRWAY',p1,replace(p1,' ','')),parm,p31),p32,p33,p34,p35,p36,p37,dddt,p39,p40,p41,p42,oydt,b4dt,iwdt,bdt,p47,p48,rdt,p50,p51,lddt,iddt, p52, rddt, sidt, ptldt, idddt, sysdate)
      returning rowid into newrid;
   else 
      select parm,replace(decode(parm,'AIRWAY',trim(p1),replace(p1,' ','')),chr(9),''),trim(pp2),pp3,p4,p5,p5i,nmb3,nmb1,dt,p8,p9,upper(p10),upper(p10a),
      p11x,mf,mf,px1,px2,px3,pp,cp,p20,p20a,p21,p22,p23,p24,p25,p26,p27,p28,p29,ccdt, strang.f_GetDefaultCtrOwner(decode(parm,'AIRWAY',p1,replace(p1,' ','')),parm,p31),p32,p33,p34,p35,p36,p37,dddt,p39,p40,p41,p42,oydt,b4dt,iwdt,bdt,p47,p48,rdt,p50,p51,lddt,iddt, p52, rddt, sidt, ptldt, idddt, sysdate
      into 
      moverec.movement_type, moverec.movement_no, moverec.seal, moverec.ship_id, moverec.complete, moverec.container_type, moverec.iso_container_type, moverec.vgm, moverec.tare, moverec.dispatch_date, moverec.departure,moverec.arrival, moverec.bol,
      moverec.booking_ref, moverec.move_description, moverec.manifest_created, moverec.controlling_office, moverec.carrier, moverec.flight, moverec.chargecode, moverec.physical_pack, moverec.computer_pack, moverec.full_mt, moverec.io, moverec.local_ship_id, moverec.local_bol, moverec.urgency, moverec.remark,
      moverec.remark_detail, moverec.hb , moverec.rfts , moverec.dan , moverec.customs_auth_no , moverec.customs_cleared_date , moverec.owner , moverec.consignee, moverec.consignee_location , moverec.current_location , moverec.warehouse_destination , moverec.set_point,
      moverec.overdimensional , moverec.del_date , moverec.del_transport_company , moverec.del_truck_rego , moverec.docket_no , moverec.container_park , moverec.otml_yard_date , moverec.berth4_transfer_date , moverec.intl_wharf_transfer_date , moverec.brisbane_date,
      moverec.si , moverec.ptl , moverec.release_date , moverec.release_docket ,moverec.wdn, moverec.local_ship_discharge_date, moverec.int_ship_discharge_date, moverec.idd, moverec.remark_date, moverec.si_date, moverec.ptl_date, moverec.idd_date, moverec.date_modified from dual;
      
   end if;  
    
   
  else
   -- This call is used to extract the Ship Id and compare
   open c4( replace(rid,'~','+') );
   fetch c4 into c4rec;
   close c4;
   mf := control_code( 'OFFICE', vste );
   update strang.movements
    set
     ship_id = p3,
     complete = p4,
     container_type = p5,
     iso_container_type = p5i,
     vgm = nmb3,
     tare = nmb1,
     dispatch_date = dt,
     departure = p8,
     arrival = p9,
--     bol = upper(p10),
     booking_ref = upper(p10a),
     move_description = p11,
     controlling_office = mf,
     carrier = px1,
     flight = px2,
     chargecode = px3,
     physical_pack = upper(pp),
     computer_pack = upper(cp),
     full_mt = p20,
     io = p20a,
     local_ship_id = p21,
--     local_bol = p22,
     urgency = p23,
     remark = p24,
     remark_detail = p25,
--     hb = p26,
     rfts = p27,
     dan = p28
   , customs_auth_no = p29
   , customs_cleared_date = ccdt
   , owner = p31
   , consignee = p32
   , consignee_location = p33
   , current_location = p34
   , warehouse_destination = p35
   , set_point = p36
   , overdimensional = p37
   , del_date = dddt
   , del_transport_company =p39
   , del_truck_rego = p40
   , docket_no = p41
   , container_park = p42
   , otml_yard_date =oydt
   , berth4_transfer_date = b4dt
   , intl_wharf_transfer_date = iwdt
   , brisbane_date = bdt
   , si = p47
   , ptl = p48
   , release_date = rdt
   , release_docket = p50
   , wdn = p51
   , local_ship_discharge_date = lddt
   , int_ship_discharge_date = iddt
   , idd = p52
   , remark_date = rddt
   , si_date = sidt
   , ptl_date = ptldt
   , idd_date = idddt
   , interface4_date = null
   , old_complete = case when p4 = 'X' and complete <> 'X' then complete else old_complete end 
   , date_modified = sysdate
   , modified_by = cusrec.username
  where rowid = chartorowid( replace(rid,'~','+') );
  --and ship_id not in (1,2,3,4);

   
  -- added by DB 29/11/2021 
--  if pa = 'A' and parm = 'CARGO' then
--      update strang.movements
--      set pack_check_date = sysdate
--        , pack_checked_by = cusrec.username  
--        , date_modified = sysdate
--      where rowid = chartorowid( replace(rid,'~','+'))
--      and pack_checked_by is null ;
      
  -- Check for gross weight above 20tonnes and hazardous goods within DB 21/7/2023
        
  if pa= 'A' and c4rec.pack_checked_by is null and parm = 'CARGO' then
     open c13( replace(rid,'~','+') );
     fetch c13 into c13rec;
     close c13;
     if c13rec.haz_cnt > 0 and c13rec.grossweight >= 20000 then
        movement( surl, rid, scid, null, parm, access_id, 'Exception: Gross Weight of Container containing hazardous cargo exceeds 20 tonnes!' );
        return;
     elsif c13rec.tare = 0 then
        movement( surl, rid, scid, null, parm, access_id, 'Exception: Tare weight of Container is 0!' );
        return;
     else
        update strang.movements
           set pack_check_date = sysdate
            , pack_checked_by = cusrec.username  
            , date_modified = sysdate
         where rowid = chartorowid( replace(rid,'~','+'))
           and pack_checked_by is null ;
     end if;
  elsif pa = 'N' and parm = 'CARGO' then
      update strang.movements
      set pack_check_date = null
        , pack_checked_by = null
        , date_modified = sysdate
        , modified_by = cusrec.username  
      where rowid = chartorowid( replace(rid,'~','+'))
      and pack_checked_by is not null;
    
  end if;  
   
   -- Added by David Banjo 1/12/2021
   --+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--    if substr(c4rec.iso_container_type,3,1) = 'P'   then
--         update strang.movements m
--         set overdimensional = SUBSTR(rtrim(case when flatrack_ends = 'UP' then 'ENDS UP; '
--                               when  flatrack_ends = 'DOWN' then 'ENDS DOWN; ' else '' end ||  
--        (case when nvl(out_width_left_side,0) <> 0 then
--        'O/W '||to_char(out_width_left_side)|| 'CM LEFT; ' end)||
--        (case when nvl(out_width_right_side,0) <> 0 then
--        'O/W '||to_char(out_width_right_side)|| 'CM RIGHT; ' end)||
--        (case when nvl(out_width_front_end,0) <> 0 then
--        'O/L '||to_char(out_width_front_end)|| 'CM FRONT; ' end )||
--        (case when nvl(out_width_rear_end,0) <> 0 then
--        'O/L '||to_char(out_width_rear_end)|| 'CM REAR; ' end )||
--        (case when nvl(out_height,0) <> 0 then
--        'O/H '||to_char(out_height)|| 'CM; ' end ),'; '),1,80)                                                 
--         where rowid = chartorowid( replace(rid,'~','+'));   
--      end if;
   
   

   newrid := replace(rid,'~','+');
   if c4rec.complete = 'F' and p4 = 'P' then
      update strang.movements
      set packed_date = sysdate 
       ,  packed_by  = cusrec.username  
      where rowid = chartorowid( replace(rid,'~','+') );
      
--      if substr(c4rec.iso_container_type,3,1) = 'P' then
--         update strang.movements m
--         set overdimensional = SUBSTR(rtrim(case when nvl(out_width_left_side,0) <> 0 then
--             'O/W '||to_char(out_width_left_side)|| 'CM LEFT; ' end||
--             (case when nvl(out_width_right_side,0) <> 0 then
--             'O/W '||to_char(out_width_right_side)|| 'CM RIGHT; ' end)||
--             (case when nvl(out_width_front_end,0) <> 0 then
--             'O/L '||to_char(out_width_front_end)|| 'CM FRONT; ' end )||
--             (case when nvl(out_width_rear_end,0) <> 0 then
--             'O/L '||to_char(out_width_rear_end)|| 'CM REAR; ' end )||
--             (case when nvl(out_height,0) <> 0 then
--             'O/H '||to_char(out_height)|| 'CM; ' end ),'; '),1,80)
--            ,move_description = case when move_description is null and flatrack_ends = 'UP' then 'ENDS UP'
--                                when move_description is null and flatrack_ends = 'DOWN' then 'ENDS DOWN'
--                                else move_description
--                                end   
--         where rowid = chartorowid( replace(rid,'~','+'));   
--      end if;
   elsif c4rec.complete = 'P' and p4 = 'F' then
      update strang.movements
      set packed_date = null
       ,  packed_by  = null
      where rowid = chartorowid( replace(rid,'~','+') );
   end if;
  -- Reset the Line No and Entry No to NULL if the SHIP_ID Changes
  if c4rec.ship_id <> p3
   then
    update strang.detailrs
     set
      line_no = NULL,
      entry_no = NULL
    where
     movement_no = c4rec.movement_no and
     nvl(camov_seal,'x') = nvl(c4rec.seal,'x');
  end if;
  if c4rec.local_ship_id <> p21
   then
    update strang.detailrs
     set
      local_line_no = NULL
    where
     movement_no = c4rec.movement_no and
     nvl(camov_seal,'x') = nvl(c4rec.seal,'x');
  end if;
    -- Reset the BILLS OF LADING AND HOUSE BILLS to NULL if the SHIP_ID Changes
    if c4rec.ship_id <> p3
     then
      update strang.movements m
       set
        m.bol = NULL,
        m.hb  = NULL
      where
       m.movement_no = c4rec.movement_no and
       nvl(m.seal,'x') = nvl(c4rec.seal,'x');
    end if;
    if c4rec.local_ship_id <> p21
     then
      update strang.movements m
       set
        m.local_bol = NULL,
        m.local_hb  = NULL
      where
       m.movement_no = c4rec.movement_no and
       nvl(m.seal,'x') = nvl(c4rec.seal,'x');
    end if;
 end if;

 commit;
  open c4( newrid );
  fetch c4 into c4rec;
  close c4;

  if p23 = 'STANDARD' then
    assign_priority( c4rec.movement_no, c4rec.seal );
  end if;
    recalc_weight(c4rec.movement_no,null,c4rec.seal);

  if parm = 'CARGO' and substr(p5,1,7)='HASTING' and nvl(p4,'F') in ('S','P')
   then
    generate_ost356( surl,c4rec.movement_no,c4rec.seal );
  end if;


 if access_id = 'z' 
  then
    if (( nmb2 > 1 or trim(p12a_chk) is not null) and parm = 'CARGO' and nvl(trim(p12a),'x') <> '1' )  -- and action = LNGS.STR_TXT_463
    then
       open c12 (p1);
       fetch c12 into c12rec;
       if c12%FOUND then
          if NVL(moverec.full_mt, 'FULL') <> 'EMPTY' then
             v_msg := LNGS.STR_TXT_160a||htf.nl||'Movement relates to container: '||c12rec.movement_no||' which should have a status of ARCHIVED.';
             mass_movement( surl, moverec, scid, null, parm, 'x', nmb2, p12a, v_msg);
          else
             v_msg := LNGS.STR_TXT_160b||htf.nl||'Movement relates to container: '||c12rec.movement_no||' which should have a status of ARCHIVED.';
             mass_movement( surl, moverec, scid, null, parm, 'x', nmb2, p12a, v_msg);
          end if;
       else 
          if NVL(moverec.full_mt, 'FULL') <> 'EMPTY' then
             v_msg := LNGS.STR_TXT_160a;
             mass_movement( surl, moverec, scid, null, parm, 'x', nmb2, p12a, v_msg);
          else
             v_msg := LNGS.STR_TXT_160b;
             mass_movement( surl, moverec, scid, null, parm, 'x', nmb2, p12a, v_msg);
          end if;
       end if;
       close c12;
--       if NVL(moverec.full_mt, 'FULL') <> 'EMPTY' then
--           mass_movement( surl, moverec, scid, null, parm, 'x', nmb2, p12a, LNGS.STR_TXT_160a );
--       else
--           mass_movement( surl, moverec, scid, null, parm, 'x', nmb2, p12a, LNGS.STR_TXT_160b );
--       end if;
    else
       open c12 (p1);
       fetch c12 into c12rec;
       if c12%FOUND then
          movement( surl, newrid, scid, null, parm, 'x', LNGS.STR_TXT_160||htf.nl||'Movement relates to container: '||c12rec.movement_no||' which should have a status of ARCHIVED.' );
       else
           movement( surl, newrid, scid, null, parm, 'x', LNGS.STR_TXT_160 );
       end if;
       close c12;
   end if;
  else
   if p34 is null or c4rec.current_location is null then
     movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_161||htf.nl||'Please add a Current Location to container' );
   else
     movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_161 );
   end if;
 end if;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_MOVEMENT',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_movement;

procedure mass_movement( surl in varchar2, crec in strang.movements%ROWTYPE, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, nmb in integer, v_list in varchar2 default null, msg in varchar2 default null )
as
 -- cursor c2(rid rowid) is select * from strang.movements where rowid = rid;
    cursor c3( mvid varchar2, v_seal varchar2) is select 'x' from strang.movements where movement_no = mvid and nvl(seal, '1') = nvl(v_seal,'|');
  
    cursor c4 (v_list varchar2) is 
     select substr(row_val,1,decode(comma,0,len, comma-1)) as movement_no 
          , substr(row_val,decode(comma, 0, len, comma +1) ,decode(comma,0,0, len - comma)) as seal 
      from (select length(regexp_substr(v_list,'[^'||chr(10)||']+', 1, level)) len, 
                   regexp_substr(v_list,'[^'||chr(10)||']+', 1, level) row_val,
                   instr(regexp_substr(v_list,'[^'||chr(10)||']+', 1, level),',',1) comma
            from dual
            connect by regexp_substr(v_list, '[^'||chr(10)||']+', 1, level) is not null) tmp
    where length(regexp_replace(UPPER(substr(row_val,1,decode(comma,0,len, comma-1))),'[^A-Z0-9]','')) > 0;
   

 errmsg      owa.vc_arr;
 error_found boolean;
 c1rec      customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c2rec		strang.movements%ROWTYPE;
 
 c5rec		varchar2(100);
 --c6rec		c6%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 p1_array       glbx.myarray;
 p2_array       glbx.myarray;
 rid_array      src_rid;
 c_ctr          integer;
 emptyseal	    integer;
 vlen           integer;
 i              integer;
 j              integer  := 0;
 itot           integer;
 newrid		    rowid;
 vlist		    varchar2(10000);
 v_msg          varchar2(500);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.MOVEMENT' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 
-- vaccess := data_access( owner_id, 'MOVEMENT', rid );
-- open c2(chartorowid(replace(rid,'~','+')));
-- fetch c2 into c2rec;
-- close c2;
 
 c2rec := crec;
 error_found := FALSE;
 
 if v_list is not null then
    vlist := v_list;
   -- vlist := regexp_replace(UPPER(v_list),'[^A-Z0-9,]','');
   --  vlist := regexp_replace(UPPER(v_list),'[^A-Z0-9'||CHR(10)||',]','');
 --  p1_array(1) := upper(trim(vlist));
 
 end if;
 
 glbx.main_title( surl,LNGS.STR_TXT_162,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR09',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 if vlist is not null
 then
 vlen := length(vlist);
 itot := regexp_count(vlist,',');
 
 i:= 0;
 if nvl(itot,0) > 0 
 then
   for r4 in c4 (v_list) loop
     i := i + 1;
     p1_array(i) := regexp_replace(UPPER(r4.movement_no),'[^A-Z0-9]','');
     p2_array(i) := regexp_replace(UPPER(r4.seal),'[^A-Z0-9]','');
     if length(p1_array(i)) <> 11  then
        errmsg(i) := 'WARNING:'||htf.nl||'Container ('''||p1_array(i)||''') is not 11 alphanumeric characters.'||htf.nl||'Please go back and change entry in the Multiple Containers Window.';
        glbx.header_msg( errmsg(i));
        RETURN;
     elsif p2_array(i) is not null and c2rec.full_mt = 'EMPTY' then
        errmsg(i) := 'WARNING:'||htf.nl||'Container ('''||p1_array(i)||''') is empty and should not have a Seal value ('''||p2_array(i)||''').'||htf.nl||'Please go back and change entry in the Multiple Containers Window';     
        glbx.header_msg( errmsg(i));
        RETURN;  
     elsif p2_array(i) is null and c2rec.full_mt = 'FULL'  then
        p2_array(i) := c2rec.seal; 
     elsif p2_array(i) is null and c2rec.full_mt = 'EMPTY'  then  
       select strang.s_seal_for_empties.nextval into emptyseal from dual;
       p2_array(i) := to_char(emptyseal);
     end if;
     
     open c3 (p1_array(i), p2_array(i) );
     fetch c3 into c3rec;
     if c3%found then
        errmsg(i) := 'WARNING:'||htf.nl||'Container ('''||p1_array(i)||''') and Seal ('''||p2_array(i)||''')  already exists in GLMS.'||htf.nl||'Please go back and change entry in the Multiple Containers Window.';
        glbx.header_msg( errmsg(i));
        close c3;
        return;
     elsif (p1_array(i) = c2rec.movement_no) then
        errmsg(i) := 'WARNING:'||htf.nl||'Container ('''||p1_array(i)||''') is same value as parent Container.'||htf.nl||'Please go back and change entry in the Multiple Containers Window.';
        glbx.header_msg( errmsg(i));
        return;
     elsif ( i > 1) then
        for j in p1_array.first .. p1_array.last loop      
           if ( p1_array(i) = p1_array(j) and i <> j ) then
              errmsg(i) := 'WARNING:'||htf.nl||'Container ('''||p1_array(i)||''') duplicated in the Multiple Container Window.'||htf.nl||'Please go back and change entry in the Multiple Containers Window.';
              glbx.header_msg( errmsg(i));
              return;
           end if;
        end loop;      
     end if;
     close c3;
      
   end loop;   
  else
   for r4 in c4 (v_list) loop
  -- itot := trunc(vlen/11);
     i := i + 1;
  --   for i in 1 .. itot loop
  --   p1_array(i) := substr( vlist , ((i*11)-10) , 11 );
     p1_array(i) := regexp_replace(UPPER(r4.movement_no),'[^A-Z0-9]','');
     if length(p1_array(i)) <> 11  then
        --error_found := TRUE;
        errmsg(i) := 'WARNING:'||htf.nl||'Container ('''||p1_array(i)||''') is not 11 alphanumeric characters.'||htf.nl||'Please go back and change entry in the Multiple Containers Window.';
        glbx.header_msg( errmsg(i));
        RETURN;
     end if;
     if c2rec.full_mt = 'FULL' then
       p2_array(i) := c2rec.seal;
     else
      select strang.s_seal_for_empties.nextval into emptyseal from dual;
      p2_array(i) := to_char(emptyseal);
     end if;
     
     if (p1_array(i) = c2rec.movement_no) then
        errmsg(i) := 'WARNING:'||htf.nl||'Container ('''||p1_array(i)||''') is same value as parent Container.'||htf.nl||'Please go back and change entry in the Multiple Containers Window.';
        glbx.header_msg( errmsg(i));
        return;
     elsif ( i > 1) then
        for j in p1_array.first .. p1_array.last loop      
           if ( p1_array(i) = p1_array(j) and i <> j ) then
              errmsg(i) := 'WARNING:'||htf.nl||'Container ('''||p1_array(i)||''') duplicated in the Multiple Container Window.'||htf.nl||'Please go back and change entry in the Multiple Containers Window.';
              glbx.header_msg( errmsg(i));
              return;
           end if;
        end loop;
     end if;
     
   end loop;
 end if;
  
 INSERT INTO strang.movements
      VALUES c2rec returning rowid into newrid;
 commit;
 
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 
 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 htp.formopen( 'strangp.accept_mass_movement' );
 htp.formhidden( 'SURL', surl );
 --htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'ACCESS_ID', access_id );

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_062), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   
   if nvl(c2rec.full_mt,'FULL') <> 'EMPTY' then
     htp.tabledata( htf.bold( LNGS.STR_TXT_063), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   End if;
   
   htp.tabledata( htf.bold( LNGS.STR_TXT_138), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   if nvl(c2rec.full_mt,'FULL') <> 'EMPTY' then
      htp.tabledata( htf.bold( LNGS.STR_TXT_163), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.bold( LNGS.STR_TXT_164), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.formhidden( 'P1', c2rec.movement_no );
   htp.formhidden( 'P2', c2rec.seal );
   htp.formhidden( 'P5', c2rec.tare );
   htp.tabledata( '1', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
   htp.tabledata( htf.bold( c2rec.movement_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
   if nvl(c2rec.full_mt,'FULL') <> 'EMPTY' then
      htp.tabledata( htf.bold( c2rec.seal ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
   End if;
   htp.tabledata( htf.bold( c2rec.tare ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
   
   if nvl(c2rec.full_mt,'FULL') <> 'EMPTY' then
      htp.tabledata( htf.formtext( 'P3', 15, 20 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P4', 15, 20 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
   end if;
  htp.tablerowclose;
 
 htp.formhidden( 'RID', replace(newrid,'~','+') );
 
 for j in p1_array.first..p1_array.last loop
   htp.tablerowopen;
    htp.tabledata( to_char(j+1), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
    htp.tabledata( htf.formtext( 'P1', 15, 40,  p1_array(j) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    if nvl(c2rec.full_mt,'FULL') <> 'EMPTY' then
       htp.tabledata( htf.formtext( 'P2', 15, 40,  p2_array(j) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    else
       htp.formhidden( 'P2', p2_array(j) );
    End if;
    htp.tabledata( htf.formtext( 'P5', 15, 20, c2rec.tare ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    if nvl(c2rec.full_mt,'FULL') <> 'EMPTY' then
       htp.tabledata( htf.formtext( 'P3', 15, 20 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
       htp.tabledata( htf.formtext( 'P4', 15, 20 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    else
      htp.formhidden( 'P3', null );
      htp.formhidden( 'P4', null );
    end if;   
       
   htp.tablerowclose;
  end loop;
 
else
  for j in 1..(nmb-1) loop
   htp.tablerowopen;
    htp.tabledata( to_char(j+1), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
    htp.tabledata( htf.formtext( 'P1', 15, 40, c2rec.movement_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    if nvl(c2rec.full_mt,'FULL') <> 'EMPTY' then
       htp.tabledata( htf.formtext( 'P2', 15, 40, c2rec.seal ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    else
       htp.formhidden( 'P2', c2rec.seal );
    End if;
    htp.tabledata( htf.formtext( 'P5', 15, 20, c2rec.tare ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    
    if nvl(c2rec.full_mt,'FULL') <> 'EMPTY' then
       htp.tabledata( htf.formtext( 'P3', 15, 20 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
       htp.tabledata( htf.formtext( 'P4', 15, 20 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    else
       htp.formhidden( 'P3', null );
       htp.formhidden( 'P4', null );
    end if;      

   htp.tablerowclose;
  end loop;
 end if;
 htp.tableclose;
 htp.nl;
 htp.formsubmit( null, LNGS.STR_TXT_165 );
 htp.formclose;
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'MASS_MOVEMENT',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end mass_movement;

procedure accept_mass_movement( surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, p1 in GLBX.MYARRAY, p2 in GLBX.MYARRAY, p3 in GLBX.MYARRAY, p4 in GLBX.MYARRAY, p5 in GLBX.MYARRAY  )
as
 
 e_deliveryno_unavailable EXCEPTION;
 cursor c1(mv varchar2, sl varchar2) is select 'x' cntr from strang.movements where nvl(movement_no,'|') = nvl(mv,'|') and nvl(seal,'|') = nvl(sl,'|');
 cursor c2(rid rowid) is select * from strang.movements where rowid = rid;


 c1rec		c1%ROWTYPE;
 c2rec		c2%ROWTYPE;

 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nmb		number;
 dlr		number;
 tr		    number;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_MASS_MOVEMENT' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  open c2(chartorowid(replace(rid,'~','+')));
  fetch c2 into c2rec;
  close c2;

  for j in p1.first..p1.last loop
   
   begin nmb := to_number(p4(j)); exception when others then nmb := null; end;
   begin dlr := to_number(p3(j)); exception when others then dlr := null; end;
   begin tr := to_number(p5(j)); exception when others then tr := null; end;
   begin 
   if j = 1
    then
     if dlr is not null and nmb is not null
      then
       update strang.detailrs
        set
         movement_no = p1(j),
         camov_seal = p2(j)
        where deliveryno = dlr and
              itemno = nmb and
              cl = 'C' and
              sa = 'S' and
              movement_no is null and
              camov_seal is null and
              nvl(io,'I') = nvl(c2rec.io,'I')
              ;
      if sql%rowcount = 0
        then
          rollback;
          raise e_deliveryno_unavailable;
       end if;
      -- recalc_weight(p1(j),c2rec.container_type,p2(j),c2rec.movement_type);
     end if;

    else

     if p1(j) is not null
      then
       open c1(p1(j),p2(j));
       fetch c1 into c1rec;
       if c1%NOTFOUND
        then
         close c1;
         insert into strang.movements(invoiceno,movement_no,bol,movement_type,seal,container_type,move_description,
          complete,departure,arrival,dispatch_date,sumvolume,sumweight,revton,
	      iso_container_type, booking_ref, physical_pack, computer_pack,
          chargeweight,ship_id,manifest_created,controlling_office,tare, full_mt
          ,io,local_ship_id,local_bol,urgency, remark, remark_detail, owner, current_location, date_modified) values
         (c2rec.invoiceno,p1(j),c2rec.bol,c2rec.movement_type,p2(j),c2rec.container_type,c2rec.move_description,
          c2rec.complete,c2rec.departure,c2rec.arrival,c2rec.dispatch_date,c2rec.sumvolume,c2rec.sumweight,c2rec.revton,
	      c2rec.iso_container_type, c2rec.booking_ref, c2rec.physical_pack, c2rec.computer_pack,
        -- c2rec.chargeweight,c2rec.ship_id,c2rec.manifest_created,c2rec.controlling_office,tr,c2rec.full_mt,c2rec.io,c2rec.local_ship_id,c2rec.local_bol,c2rec.urgency, c2rec.remark, c2rec.remark_detail, strang.f_GetDefaultCtrOwner(p1(j),c2rec.movement_type, NULL), c2rec.current_location,sysdate);
          c2rec.chargeweight,c2rec.ship_id,c2rec.manifest_created,c2rec.controlling_office,tr,c2rec.full_mt,c2rec.io,c2rec.local_ship_id,c2rec.local_bol,c2rec.urgency, c2rec.remark, c2rec.remark_detail, strang.f_GetDefaultCtrOwner(p1(j),c2rec.movement_type,c2rec.owner), c2rec.current_location,sysdate);
        else
         close c1;
       end if;
     end if;
     if dlr is not null and nmb is not null
      then
       update strang.detailrs
        set
         movement_no = p1(j),
         camov_seal = p2(j)
        where deliveryno = dlr and
              itemno = nmb and
              cl = 'C' and
              sa = 'S' and
              movement_no is null and
              camov_seal is null and
              nvl(io,'I') = nvl(c2rec.io,'I');
        
       if sql%rowcount = 0
        then
          rollback;
          raise e_deliveryno_unavailable;
       end if;      
             
      --- recalc_weight(p1(j),c2rec.container_type,p2(j),c2rec.movement_type);
     end if;
   end if;
   end;
   
  end loop;
  
  for j in p1.first..p1.last loop
    recalc_weight(p1(j),c2rec.container_type,p2(j),c2rec.movement_type);
  end loop;

  commit;
  movement( surl, rid, scid, null, parm, 'x', LNGS.STR_TXT_166 );

exception 
 when e_deliveryno_unavailable then glbx.error_details( 'STRANGP', 'ACCEPT_MASS_MOVEMENT',null,owner_id,errmsg=> 'Deliveryno '||dlr||' does not exist. Press Back Arrow and type in correct number!',extdet=>'PARM:' || parm);
 when others then glbx.error_details( 'STRANGP', 'ACCEPT_MASS_MOVEMENT',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
--exception when others then
-- glbx.error_details( 'STRANGP', 'ACCEPT_MASS_MOVEMENT',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_mass_movement;

function control_code( cd in varchar2, vste in varchar2 )
 return varchar2
as

 cursor c1( cd varchar2, vste varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and code = cd and cola = vste;

 c1rec	c1%ROWTYPE;

begin
 open c1( cd, vste );
 fetch c1 into c1rec;
 close c1;
 return( c1rec.description );
exception
 when others
  then return( NULL );
end control_code;

procedure shp(surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null )
as

 cursor c2(rid rowid) is select * from strang.ships_airway where rowid = rid;
 cursor c3(cname varchar2) is select customer_id from strang.customers where customer = cname and customer_type = 'AGENT';
 cursor c4(shid integer) is select count('x') tot from strang.movements where ship_id = shid;
 cursor c4a(shid integer) is select count('x') tot from strang.movements where local_ship_id = shid;
 cursor c5(vshipid integer) is
  select 'x'
  from strang.movements m, strang.detailrs d, strang.ships_airway s
  where d.movement_no = m.movement_no and
        nvl(m.seal,'|') = nvl(d.camov_seal,'|') and
        d.entry_no is not null and
        s.ship_id = m.ship_id and
        s.li = 'I' and
        m.ship_id = vshipid;
 cursor c6(vshipid integer) is select count(*) tot from strang.sads_by_ship_log where ship_id = vshipid;
 
 cursor c7 ( vio varchar) is select * from (select shipname||' '||voy||' ('||case when ss.io = 'I' then 'INBOUND' else 'OUTBOUND' end||' : '||case when ss.li = 'L' then 'LOCAL' else 'INTL' end||')' detail, 
                                    ss.ship_id, row_number () over (order by ship_id desc) rnk from strang.ships_airway ss where ((ss.io = vio and vio is not null) or (vio is null))) tmp where rnk <= 100 order by ship_id desc;


 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c4arec		c4a%ROWTYPE;
 c5rec		c5%ROWTYPE;
 c6rec		c6%ROWTYPE;
 c7rec		c7%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
-- vaccess2	varchar2(20); 20140529
 mf		varchar2(100);
 vste		varchar2(10);
 seclevel	varchar2(100);
 found_entry    boolean;
 loadedweight	varchar2(50);
 v_bgColor      varchar2(50);
 v_default_direction_colour varchar2(20) := g_inbound_color; 
 v_non_default_direction_colour varchar2(20):= g_outbound_color;
 v_direction varchar2(1) := 'I';


begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.SHP' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'SHP', rid );
-- vaccess2 := data_access( owner_id, 'SHP2', rid ); 20140529
 mf := control_code( 'OFFICE', vste );
 seclevel := oltp.security_role( owner_id );
 loadedweight := '0';
 glbx.main_title( surl, LNGS.STR_TXT_167,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR10',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

if nvl(vste,'SYD') = g_outbound_site then
    v_default_direction_colour := g_outbound_color;
    v_non_default_direction_colour := g_inbound_color; 
    v_direction := 'O';
 end if;

 if parm in ('SHIP_AIRWAY') then
    htp.p('<script type="text/javascript" src="/images/js/ship_direction_switch.js"></script>'); 
 End if;


 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if access_id = 'z'
  then
   -- Populate with Default Values
   begin c2rec.insurance   := control_code( 'CUSTOMS_INSURANCE', vste ); exception when others then null; end;
   begin c2rec.vat         := control_code( 'CUSTOMS_VAT', vste ); exception when others then null; end;
   begin c2rec.other_costs := control_code( 'CUSTOMS_OTHER_COSTS', vste ); exception when others then null; end;
   begin c2rec.freight     := control_code( 'CUSTOMS_FREIGHT', vste ); exception when others then null; end;
   begin c2rec.licence_no  := control_code( 'CUSTOMS_LICENCE_NO', vste ); exception when others then null; end;
   begin c2rec.p2acode     := control_code( 'CUSTOMS_P2ACODE', vste ); exception when others then null; end;
   begin c2rec.cpc         := control_code( 'CUSTOMS_CPC', vste ); exception when others then null; end;
   begin c2rec.rate        := control_code( 'CUSTOMS_RATE', vste ); exception when others then null; end;
   open c3( control_code( 'AGENTNAME', vste ));
   fetch c3 into c3rec;
   close c3;
   begin c2rec.customs_agent  := c3rec.customer_id; exception when others then null; end;
   c2rec.status := 'INCOMPLETE';
  else
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;


   if (mf is not null) and (vaccess = 'EDIT') and (c2rec.status = 'INCOMPLETE')
    then
     -- Check if the Controlling Office. If not then Read Only Access
     if (mf <> nvl(c2rec.controlling_office,mf)) -- and (vaccess2 = 'NONE') 20140529
      then
       vaccess := 'READ';
     end if;
   end if;
 end if;
 c2rec.status := nvl(c2rec.status,'INCOMPLETE');
 c2rec.sad_cuo_code := nvl(c2rec.sad_cuo_code,'POM');
 c2rec.sad_cuo_bord := nvl(c2rec.sad_cuo_bord,'POM');
 c2rec.sad_054_lop_cod := nvl(c2rec.sad_054_lop_cod,'PGPOM');
 c2rec.sad_057_loc_goods := nvl(c2rec.sad_057_loc_goods,'POM1');
 --loadedweight := strang.f_weight_capacity( c2rec.ship_id );

 htp.tableopen;
 htp.tablerowopen;
 htp.p( '<TD align="LEFT">' );
 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_shp' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', access_id );
 end if;

 if access_id = 'z'
  then
   htp.formhidden( 'RID', null );
  else
   htp.formhidden( 'RID', replace(rid,'~','+') );
 end if;

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  if (mf <> c2rec.controlling_office) and (mf is not null) and (c2rec.status = 'INCOMPLETE')
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_309),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold(c2rec.controlling_office),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
  end if;
   htp.tablerowopen;
    if vaccess = 'EDIT' and access_id = 'z'
    then
    
       if c2rec.io = 'I' then v_bgColor := 'bgcolor=":#00468C"'; 
       elsif c2rec.io is null then v_bgColor := 'bgcolor='||v_default_direction_colour;
       else v_bgColor := 'bgcolor=":#4EB5E2"';      
       end if;             
       htp.p( '<TD ' ||v_bgColor|| ' id="P20Az" ALIGN="LEFT" COLSPAN=2>' );
      -- htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2>' );
       htp.formselectopen(cname=>'P20A', cattributes=>'id="P20A" ONCHANGE="ship_direction_switch()"' );
       -- htp.formselectopen( 'P20A');
        if ((c2rec.io ='I') or (v_default_direction_colour = g_inbound_color and c2rec.io is null  ))
         then
          htp.formselectoption( 'INBOUND DIRECTION', 'SELECTED',cattributes=>'VALUE="I"' );
          htp.formselectoption( 'OUTBOUND DIRECTION',  cattributes=>'VALUE="O"' );
         else
          htp.formselectoption( 'INBOUND DIRECTION',  cattributes=>'VALUE="I"' );
          htp.formselectoption( 'OUTBOUND DIRECTION', 'SELECTED',cattributes=>'VALUE="O"' );
        end if;
        htp.formselectclose;
       htp.p( '</TD>' );
      else
       if c2rec.io = 'I' then
       htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
       else
       htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
       end if;
       htp.formhidden( 'P20A', c2rec.IO );
    end if;
  htp.tablerowclose;

  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_168),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('CUSTOMS COMPLETE', 'SAILED', 'ARRIVED', 'ARCHIVED')
      then
       if c2rec.ship_airway = 'A'
        then
         htp.tabledata( htf.formselectopen( 'P1' ) || htf.formselectoption( LNGS.STR_TXT_169, cattributes=>'VALUE="S"') || htf.formselectoption( LNGS.STR_TXT_050,'SELECTED', cattributes=>'VALUE="A"') || htf.formselectclose  || ' ' || htf.italic(c2rec.ship_id) ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formselectopen( 'P1' ) || htf.formselectoption( LNGS.STR_TXT_169,'SELECTED', cattributes=>'VALUE="S"') || htf.formselectoption( LNGS.STR_TXT_050, cattributes=>'VALUE="A"') || htf.formselectclose  || ' ' || htf.italic(c2rec.ship_id),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold( c2rec.ship_airway ) || ' - ' || htf.italic(c2rec.ship_id),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P1',C2REC.ship_airway);
     end if;

  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_170),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('CUSTOMS COMPLETE', 'SAILED', 'ARRIVED', 'ARCHIVED')
      then
       htp.tabledata( htf.formtext('P2',40,40,c2rec.shipname),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.shipname),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P2',C2REC.shipname);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_171),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('CUSTOMS COMPLETE', 'SAILED', 'ARRIVED', 'ARCHIVED')  and seclevel not in ('LEVEL 8')
      then
       htp.tabledata( htf.formtext('P3',20,20,c2rec.voy),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(c2rec.voy),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P3',C2REC.voy);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('International or Local Ship'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');

     if vaccess = 'EDIT'
      then
      if c2rec.li is not null
       then
        if c2rec.li = 'L'
         then
          htp.tabledata( htf.formhidden( 'P3i', c2rec.li ) || 'LOCAL', cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2' );
         else
          htp.tabledata( htf.formhidden( 'P3i', c2rec.li ) || 'INTERNATIONAL', cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2' );
        end if;
       else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=3>' );
        htp.formselectopen( 'P3i' );
        if nvl(c2rec.LI,'L') = 'L'
         then
          htp.formselectoption( 'INTERNATIONAL', cattributes=>'VALUE="I"' );
          htp.formselectoption( 'LOCAL', 'SELECTED', cattributes=>'VALUE="L"' );
         else
          htp.formselectoption( 'INTERNATIONAL', 'SELECTED', cattributes=>'VALUE="I"' );
          htp.formselectoption( 'LOCAL', cattributes=>'VALUE="L"' );
        end if;
        htp.formselectclose;
       htp.p( '</TD>' );
       end if;
     else
         if c2rec.li = 'I' then 
            htp.tabledata('INTERNATIONAL' , cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2' );
         else 
            htp.tabledata('LOCAL' , cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2' );
         end if;
         htp.formhidden( 'P3i', c2rec.li );
    end if;

  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_172),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
     if vaccess = 'EDIT'
      then
       htp.formselectopen( 'P1A' );
       if c2rec.status = 'INCOMPLETE'
        then
         htp.formselectoption( 'INCOMPLETE', 'SELECTED' );
        else
         htp.formselectoption( 'INCOMPLETE' );
       end if;
       if c2rec.status = 'COMPLETE'
        then
         htp.formselectoption( 'COMPLETE', 'SELECTED' );
        else
         htp.formselectoption( 'COMPLETE' );
       end if;
       if c2rec.status = 'FINAL'
        then
         htp.formselectoption( 'FINAL', 'SELECTED' );
        else
         htp.formselectoption( 'FINAL' );
       end if;
       if c2rec.status = 'CUSTOMS COMPLETE'
        then
         htp.formselectoption( 'CUSTOMS COMPLETE', 'SELECTED' );
        else
         htp.formselectoption( 'CUSTOMS COMPLETE' );
       end if;
       if c2rec.status = 'SAILED'
        then
         htp.formselectoption( 'SAILED', 'SELECTED' );
        else
         htp.formselectoption( 'SAILED' );
       end if;
       if c2rec.status = 'ARRIVED'
        then
         htp.formselectoption( 'ARRIVED', 'SELECTED' );
        else
         htp.formselectoption( 'ARRIVED' );
       end if;
       if c2rec.status = 'ARCHIVED'
        then
         htp.formselectoption( 'ARCHIVED', 'SELECTED' );
        else
         htp.formselectoption( 'ARCHIVED' );
       end if;
       htp.formselectclose;
      else
       htp.bold( c2rec.status );
       htp.formhidden( 'P1A', c2rec.status );
     end if;
     htp.p( '</TD>' );
  htp.tablerowclose;
 htp.tableclose;
 if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') = 'CUSTOMS COMPLETE' AND SECLEVEL IN ( 'LEVEL 5','LEVEL 7','LEVEL 8' )
  then
   htp.nl;
   htp.anchor( 'javascript: window.open(''' || 'strangs.accept_sads_by_ship?surl=' || surl || '&shipid=' || c2rec.ship_id  || '&vact=START' || ''',''' || 'Generate SAD' || ''',''height=800,width=1200,scrollbars=yes,resizable=yes'');void('''');', '[Generate SAD]' );
   open c6(c2rec.ship_id);
   fetch c6 into c6rec;
   close c6;
   if c6rec.tot > 0
    then
     htp.p('&nbsp;&nbsp;');
     htp.anchor( 'javascript: window.open(''' || 'strangs.accept_sads_by_ship?surl=' || surl || '&shipid=' || c2rec.ship_id  || '&vact=STATUS' || ''',''' || 'Generate SAD' || ''',''height=800,width=1200,scrollbars=yes,resizable=yes'');void('''');', '[SAD Logs]' );
   end if;
   htp.nl;
 end if;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_173),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
      then
       htp.tabledata( htf.formtext('P4',30,30, to_char(c2rec.estdepart,LNGS.STR_DATE_01)) || ' ' || htf.italic(LNGS.STR_DATE_01),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(to_char(c2rec.estdepart,LNGS.STR_DATE_01)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P4',C2REC.estdepart);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_174),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
    then
     lov_list( 'LOCATIONS', 'P5', c2rec.portload, FALSE, TRUE, FALSE );
    else
     lov_list( 'LOCATIONS', 'P5', c2rec.portload, FALSE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_175),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
      then
       htp.tabledata( htf.formtext('P6',30,30, to_char(c2rec.estarrive,LNGS.STR_DATE_01)) || ' ' || htf.italic(LNGS.STR_DATE_01),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold(to_char(c2rec.estarrive,LNGS.STR_DATE_01)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P6',C2REC.estarrive);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_176),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ( 'ARCHIVED')
    then
     lov_list( 'LOCATIONS', 'P7', c2rec.portdisc, FALSE, TRUE, FALSE );
    else
     lov_list( 'LOCATIONS', 'P7', c2rec.portdisc, FALSE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;
  htp.tablerowopen;

   if c2rec.ship_airway <> 'A'
     then
      htp.tablerowopen;
       htp.tabledata( htf.bold('Discharge Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ( 'ARCHIVED')
        then
         htp.tabledata( htf.formtext('P50',30,30, to_char(c2rec.discharge_date,LNGS.STR_DATE_01)) || ' ' || htf.italic(LNGS.STR_DATE_01),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.bold(c2rec.discharge_date),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         htp.formhidden( 'P50', c2rec.discharge_date );
       end if;
      htp.tablerowclose;
     else
      htp.formhidden( 'P50', null );
    end if;
    htp.tablerowopen;
     htp.tabledata( htf.bold('Latest Interface4 Transfer'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold(c2rec.interface4_date),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;

 htp.tableclose;

 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_177),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
    then
     if seclevel in ( 'LEVEL 8' )
      then
       htp.formhidden( 'P8', c2rec.customer_id );
       customer_list( 'AGENT', 'P8', c2rec.customer_id, FALSE, isedit=>FALSE );
      else
       customer_list( 'AGENT', 'P8', c2rec.customer_id, FALSE );
     end if;
    else
     customer_list( 'AGENT', 'P8', c2rec.customer_id, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_178),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('CUSTOMS COMPLETE', 'SAILED', 'ARRIVED', 'ARCHIVED')
    then
     if seclevel in ( 'LEVEL 8' )
      then
       htp.formhidden( 'P9', c2rec.shipcountry );
       lov_list( 'COUNTRIES', 'P9', c2rec.shipcountry, FALSE, TRUE, FALSE, isedit=>FALSE );
      else
       lov_list( 'COUNTRIES', 'P9', c2rec.shipcountry, FALSE, TRUE, FALSE );
     end if;
    else
     lov_list( 'COUNTRIES', 'P9', c2rec.shipcountry, FALSE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_179),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('CUSTOMS COMPLETE', 'SAILED', 'ARRIVED', 'ARCHIVED')
      then
       if seclevel in ( 'LEVEL 8' )
        then
         htp.tabledata( htf.formhidden( 'P10', c2rec.shipmaster ) || htf.bold(c2rec.shipmaster),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext('P10',25,25, c2rec.shipmaster),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold(c2rec.shipmaster),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'P10', c2rec.shipmaster );
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_397),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('CUSTOMS COMPLETE', 'SAILED', 'ARRIVED', 'ARCHIVED')
    then
     if seclevel in ( 'LEVEL 8' )
      then
       htp.formhidden( 'P9M', c2rec.nationality_master );
       lov_list( 'COUNTRIES', 'P9M', c2rec.nationality_master, FALSE, TRUE, FALSE, isedit=>FALSE );
      else
       lov_list( 'COUNTRIES', 'P9M', c2rec.nationality_master, FALSE, TRUE, FALSE );
     end if;
    else
     lov_list( 'COUNTRIES', 'P9M', c2rec.nationality_master, FALSE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Weight Capacity (Tonne) '),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('CUSTOMS COMPLETE', 'SAILED','ARRIVED','ARCHIVED')
      then
       if seclevel in ( 'LEVEL 8' )
        then
         htp.tabledata( htf.formhidden( 'P11', c2rec.shipweight ) || htf.bold(to_number(c2rec.shipweight)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
--         htp.tabledata( htf.formtext('P11',10,20, to_number(c2rec.shipweight)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         loadedweight := strang.f_weight_capacity_no_recalc( c2rec.ship_id );
         htp.tabledata( htf.formtext('P11',10,20, to_number(c2rec.shipweight))||
         ' Current Total Weight of Cargo ' || to_char(loadedweight,'999,999,999.999') || ' Tonne',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold(to_number(c2rec.shipweight)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P11',C2REC.shipweight);

  end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_180),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('CUSTOMS COMPLETE', 'SAILED', 'ARRIVED', 'ARCHIVED')
      then
       if seclevel in ( 'LEVEL 8' )
        then
         htp.tabledata( htf.formhidden( 'P12', c2rec.austcrew ) || htf.bold(to_number(c2rec.austcrew)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext('P12',5,20, to_number(c2rec.austcrew)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold(to_number(c2rec.austcrew)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P12',C2REC.austcrew);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_181),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('CUSTOMS COMPLETE', 'SAILED', 'ARRIVED', 'ARCHIVED')
      then
       if seclevel in ( 'LEVEL 8' )
        then
         htp.tabledata( htf.formhidden( 'P13', c2rec.pngcrew ) || htf.bold(to_number(c2rec.pngcrew)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext('P13',5,20, to_number(c2rec.pngcrew)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold(to_number(c2rec.pngcrew)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P13',C2REC.pngcrew);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_182),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('CUSTOMS COMPLETE', 'SAILED', 'ARRIVED','ARCHIVED')
      then
       if seclevel in ( 'LEVEL 8' )
        then
         htp.tabledata( htf.formhidden( 'P14', c2rec.frncrew ) || htf.bold( to_number(c2rec.frncrew)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext('P14',5,20, to_number(c2rec.frncrew)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold( to_number(c2rec.frncrew)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P14',C2REC.frncrew);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_183),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('CUSTOMS COMPLETE','SAILED','ARRIVED', 'ARCHIVED')
    then
     lov_list( 'LOCATIONS', 'P15', c2rec.finaldest, FALSE, TRUE, FALSE );
    else
     lov_list( 'LOCATIONS', 'P15', c2rec.finaldest, FALSE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Manifest Reg.'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
      then
       if seclevel in ( 'LEVEL 8' )
        then
         htp.tabledata( htf.formhidden( 'P16', c2rec.manifest_reg ) || htf.bold( to_number(c2rec.frncrew)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext('P16',20,28, to_char(c2rec.manifest_reg)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold( to_char(c2rec.manifest_reg)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P16',C2REC.manifest_reg);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Carrier'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
      then
       if seclevel in ( 'LEVEL 8' )
        then
         htp.tabledata( htf.formhidden( 'P17', c2rec.carrier ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext('P17',20,100, to_char(c2rec.carrier)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold( to_char(c2rec.carrier)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P17',c2rec.carrier);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('INCO Term'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
      then
       if seclevel in ( 'LEVEL 8' )
        then
         htp.tabledata( htf.formhidden( 'P18', c2rec.inco_term ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext('P18',20,100, to_char(c2rec.inco_term)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold( to_char(c2rec.inco_term)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P18',c2rec.inco_term);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('GLMS Reference Number'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
      then
       if seclevel in ( 'LEVEL 8' )
        then
         htp.tabledata( htf.formhidden( 'P19', c2rec.glms_ref ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext('P19',20,20, to_char(c2rec.glms_ref)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold( to_char(c2rec.glms_ref)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('P19',c2rec.glms_ref);
     end if;
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 if nvl(c2rec.li,'I') = 'I' then
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
     htp.tabledata( htf.bold('Customs Clearance Office'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
      then
       if seclevel in ( 'LEVEL 5','LEVEL 7','LEVEL 8' )
        then
         -- htp.tabledata( htf.formtext('PC1',5,20, c2rec.sad_cuo_code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
          htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
          lov_list( 'UNCUOTAB', 'PC1', c2rec.sad_cuo_code, FALSE, FALSE, FALSE );
          htp.p( '</TD>' );
        else
         htp.tabledata( htf.formhidden( 'PC1', c2rec.sad_cuo_code ) || htf.bold( c2rec.sad_cuo_code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold( c2rec.sad_cuo_code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('PC1',C2REC.sad_cuo_code);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Border Customs Office'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
      then
       if seclevel in ( 'LEVEL 5','LEVEL 7','LEVEL 8' )
        then
         -- htp.tabledata( htf.formtext('PC2',5,20, c2rec.sad_cuo_bord),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
         lov_list( 'UNCUOTAB', 'PC2', c2rec.sad_cuo_bord, FALSE, FALSE, FALSE );
         htp.p( '</TD>' );
        else
         htp.tabledata( htf.formhidden( 'PC2', c2rec.sad_cuo_bord ) || htf.bold( c2rec.sad_cuo_bord),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold( c2rec.sad_cuo_bord),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('PC2',C2REC.sad_cuo_bord);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Place of Unloading'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
      then
       if seclevel in ( 'LEVEL 5','LEVEL 7','LEVEL 8' )
        then
         -- htp.tabledata( htf.formtext('PC3',5,20, c2rec.sad_054_lop_cod),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
          htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
          lov_list( 'UNLOCTAB', 'PC3', c2rec.sad_054_lop_cod, FALSE, FALSE, FALSE );
          htp.p( '</TD>' );
        else
         htp.tabledata( htf.formhidden( 'PC3', c2rec.sad_054_lop_cod ) || htf.bold( c2rec.sad_054_lop_cod),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold( c2rec.sad_054_lop_cod),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('PC3',C2REC.sad_054_lop_cod);
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Location of Goods'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED')
      then
       if seclevel in ( 'LEVEL 5','LEVEL 7','LEVEL 8' )
        then
         -- htp.tabledata( htf.formtext('PC4',5,20, c2rec.sad_057_loc_goods),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
         lov_list( 'UNWHSTAB', 'PC4', c2rec.sad_057_loc_goods, FALSE, FALSE, FALSE );
         htp.p( '</TD>' );
        else
         htp.tabledata( htf.formhidden( 'PC4', c2rec.sad_057_loc_goods ) || htf.bold( c2rec.sad_057_loc_goods),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold( c2rec.sad_057_loc_goods),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden('PC4',C2REC.sad_057_loc_goods);
     end if;
  htp.tablerowclose;
 htp.tableclose;
 else
   htp.formhidden('PC1',C2REC.sad_cuo_code);
   htp.formhidden('PC2',C2REC.sad_cuo_bord);
   htp.formhidden('PC3',C2REC.sad_054_lop_cod);
   htp.formhidden('PC4',C2REC.sad_057_loc_goods);
 end if;
 htp.nl;

 if vaccess = 'EDIT' and nvl(c2rec.status,'INCOMPLETE') in ('CUSTOMS COMPLETE','SAILED','ARRIVED','ARCHIVED')
  then
   htp.formhidden( 'P1', null );
   htp.formhidden( 'P2', null );
   htp.formhidden( 'P3', null );
   htp.formhidden( 'P3i', null );
   htp.formhidden( 'P4', null );
   htp.formhidden( 'P5', null );
   htp.formhidden( 'P6', null );
   htp.formhidden( 'P7', null );
   htp.formhidden( 'P8', null );
   htp.formhidden( 'P9', c2rec.shipcountry );
   htp.formhidden( 'P9M', c2rec.nationality_master );
   htp.formhidden( 'P10', null );
   htp.formhidden( 'P11', null );
   htp.formhidden( 'P12', null );
   htp.formhidden( 'P13', null );
   htp.formhidden( 'P14', null );
   htp.formhidden( 'P15', c2rec.finaldest );
   htp.formhidden( 'P16', null );
   htp.formhidden( 'PC1', null );
   htp.formhidden( 'PC2', null );
   htp.formhidden( 'PC3', null );
   htp.formhidden( 'PC4', null );
   htp.formhidden( 'P20A', null );
--  htp.formhidden( 'P50', null );
 end if;

 if vaccess = 'EDIT'
  then
   if access_id = 'z'
    then
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_184 );
    else
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_185 );
     
--     htp.formsubmit( 'ACTION', 'Cargo' );
     if seclevel not in ('LEVEL 8') then
       htp.formsubmit( 'ACTION', LNGS.STR_TXT_186 );
     end if;
     open c4(c2rec.ship_id);
     fetch c4 into c4rec;
     close c4;
     open c4a(c2rec.ship_id);
     fetch c4a into c4arec;
     close c4a;
     if c4rec.tot = 0 and c4arec.tot = 0 and seclevel not in ('LEVEL 8')
      then
       htp.formsubmit( 'ACTION', LNGS.STR_TXT_187 );
     end if;
   end if;
   htp.formclose;
 end if;
   htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
   htp.tablerowopen;
--============================================================  
-- David Banjo  
    if access_id = 'x'
    then
     htp.tablerowopen;
     htp.p('<TD>');
     htp.tableopen; --( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
     htp.tablerowopen;
     htp.formopen( 'strangp.bols', ctarget=>'NEWECN' );
     htp.formhidden( 'SURL', surl );
     htp.formhidden( 'PARM', 'BOLS' );
     htp.formhidden( 'SCID', scid );
     htp.formhidden( 'ACCESS_ID', access_id );
     htp.formhidden( 'RID_SS', replace(rid,'~','+') );
     htp.p('<TD VALIGN="TOP">');
     htp.formsubmit( 'ACTION', LNGS.STR_STH_006 );
     htp.p('</TD>');
     htp.formclose;
  /*
     htp.formopen( 'strangp.hbs' );
     htp.formhidden( 'SURL', surl );
     htp.formhidden( 'PARM', 'HBS' );
     htp.formhidden( 'ACCESS_ID', 'z' );
     htp.formhidden( 'RID', replace(rid,'~','+') );
     htp.p('<TD VALIGN="TOP">');
     htp.formsubmit( 'ACTION', lngs.STR_STH_012 ); -- Edit HBs
     htp.p('</TD>');
     htp.formclose;
  */
  --   htp.tablerowclose;
    end if;
    
 ----------------------------------------------------------   
 if c2rec.ship_airway = 'S' and c2rec.io = 'I' then
      htp.p( '<TD>' );
      htp.formopen( 'STRANGP.ctrs_mass_png_alln' );
      htp.formhidden( 'SURL', surl );
      htp.formhidden( 'SHIPID', c2rec.ship_id );
      htp.formhidden( 'PARM', 'STRANGP.CTRS_MASS_PNG_ALLN' );
  --  htp.formhidden( 'ACCESS_ID', access_id );   --  vaccess := data_access( owner_id, parm, null );
      htp.p('<TD VALIGN="TOP" COLSPAN=3>');
      htp.formsubmit( 'ACTION', 'Inbound: Ship Cargo At POM' );
      htp.p('</TD>');
      htp.formclose;
      htp.p( '</TD>' );
  end if;

   if c2rec.ship_airway = 'S' and c2rec.io = 'O' then
        htp.p( '<TD>' );
        htp.formopen( 'STRANGP.ctrs_mass_png_alls' );
        htp.formhidden( 'SURL', surl );
        htp.formhidden( 'SHIPID', c2rec.ship_id );
        htp.formhidden( 'VLOC', 'MOTUKEA' );
        htp.formhidden( 'PARM', 'STRANGP.CTRS_MASS_PNG_ALLS' );
    --  htp.formhidden( 'ACCESS_ID', access_id );   --  vaccess := data_access( owner_id, parm, null );
        htp.p('<TD VALIGN="TOP" COLSPAN=3>');
        htp.formsubmit( 'ACTION', 'Outbound: Ship Cargo At POM' );
        htp.p('</TD>');
        htp.formclose;
        htp.p( '</TD>' );
    end if;


  htp.p( '<TD>' );
  search( surl, 'SHIP_AIRWAY', rid, samerow=>TRUE );
  htp.p( '</TD>' );
  htp.tablerowclose;

if (UPPER(OWA_UTIL.GET_CGI_ENV('HTTP_USER_AGENT')) LIKE '%TRIDENT%' or UPPER(OWA_UTIL.GET_CGI_ENV('HTTP_USER_AGENT')) like '%MSIE%') THEN
   NULL;
else
   htp.p( '<datalist id="SHIP_AIRWAY">' );
   
   if (v_direction =  'O') then
       for c7rec in c7('O') loop
          htp.formselectoption( c7rec.detail, cattributes=>'VALUE="' || c7rec.ship_id || '"' );
       end loop;
    else
       
      for c7rec in c7(null) loop
          htp.formselectoption( c7rec.detail, cattributes=>'VALUE="' || c7rec.ship_id || '"' );
      end loop;
    
    end if;
    htp.p( '</datalist>' );
end if;



     if seclevel in ('LEVEL 5','LEVEL 7','LEVEL 8')
      then
--htp.formsubmit( 'ACTION', LNGS.STR_TXT_188 );

 if nvl(c2rec.status,'INCOMPLETE') in ('FINAL') and seclevel in ('LEVEL 5','LEVEL 7') and c2rec.io='I' and c2rec.li='I'
  then
    open c5( c2rec.ship_id );
    fetch c5 into c5rec;
    if c5%FOUND
     then
      found_entry := TRUE;
     else
      found_entry := FALSE;
    end if;
    close c5;
    htp.tablerowopen;
    htp.p( '<TD>' );
    -- Allocate
    if not found_entry
     then
--      htp.anchor( 'strangp.confirm_genduty?surl=' || surl || '&rid=' || replace(rid,'+','~') || '&scid=' || scid || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id || '&msg=DUTY' , '[' || LNGS.STR_TXT_311 || ']' );
      htp.formsubmit( cvalue =>'Allocate Entry Nos', cattributes => 'onclick="window.location=''strangp.confirm_genduty?surl=' || surl || '&rid=' || replace(rid,'+','~') || '&scid=' || scid || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id || '&msg=DUTY'''|| '"' );
    end if;

    -- UnAllocate
    if found_entry
     then
--      htp.anchor( 'strangp.confirm_genduty?surl=' || surl || '&rid=' || replace(rid,'+','~') || '&scid=' || scid || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id || '&msg=UNALLOCATE' , '[' || LNGS.STR_TXT_314 || ']' );
      htp.formsubmit( cvalue =>'Unallocate Entry Nos', cattributes => 'onclick="window.location=''strangp.confirm_genduty?surl=' || surl || '&rid=' || replace(rid,'+','~') || '&scid=' || scid || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id || '&msg=UNALLOCATE'''|| '"' );

    end if;
    htp.p( '</TD>' );
    htp.tablerowclose;
   end if;
  end if;
-----

-- REST


 htp.tableclose;
 htp.nl;
 /*
 if nvl(c2rec.status,'INCOMPLETE') <> 'INCOMPLETE'
  then
   htp.anchor( 'strangp.genduty?surl=' || surl || '&rid=' || rid || '&scid=' || scid || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id || '&msg=LINE_NO' , LNGS.STR_TXT_313 );
   htp.nl;
   display_report( surl, owner_id, 'REPORT B','Ship Manifests',c2rec.shipname,c2rec.ship_id);
 end if;
 display_report( surl, owner_id, 'REPORT B','Bill of Lading for Combined Transport',c2rec.shipname,c2rec.ship_id);
 display_report( surl, owner_id, 'REPORT B','Drawback',c2rec.shipname,c2rec.ship_id);
 display_report( surl, owner_id, 'REPORT B','Repair and Return',c2rec.shipname,c2rec.ship_id);
 display_report( surl, owner_id, 'REPORT B','PartShipment',c2rec.shipname,c2rec.ship_id);
 display_report( surl, owner_id, 'REPORT B','ECN Report',c2rec.shipname,c2rec.ship_id);
 */
 if substr(parm,1,1) = 'X'
  then
   htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
 end if;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'SHP',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end shp;

procedure generate_containers( shpid in integer )
as

 cursor c1(shpid integer) is
  select movement_no, bol, container_type, io, full_mt
  from strang.movements
  where ship_id = shpid
 union
  select movement_no, bol, container_type, io, full_mt
  from strang.movements
  where local_ship_id = shpid
 ;

 cursor c2(shpid integer) is select * from strang.ships_airway where ship_id = shpid;

 cursor c3(mv varchar2) is select * from strang.tracking_header where containerno = mv;

 cursor c4(sno integer, sname varchar2, vy varchar2) is select * from strang.tracking_details where id = sno and ship = sname and voyage = vy;

 cursor c5(sno integer) is select nvl(max(rno),0) + 1 mx from strang.tracking_details where id = sno;

 cursor c6(v_cntr varchar2) is select * from strang.containers where upper(trim(containerno)) = upper(trim(v_cntr));

 c2rec	 c2%ROWTYPE;
 c3rec   c3%ROWTYPE;
 c4rec   c4%ROWTYPE;
 c6rec   c6%ROWTYPE;
 sno	 integer;
 calcrno integer;

begin

 open c2(shpid);
 fetch c2 into c2rec;
 close c2;
 for c1rec in c1(shpid) loop
  c6rec.cat_company := null;
  open c3( c1rec.movement_no );
  fetch c3 into c3rec;
  open c6(c3rec.containerno);
  fetch c6 into c6rec;
  close c6;
  if c3%FOUND
   then
    -- check if ship and voyage already inserted
    open c4(c3rec.id, c2rec.shipname, c2rec.voy);
    fetch c4 into c4rec;
    if c4%FOUND
     then
      update strang.tracking_details
       set
        departure_location = c2rec.portload,
        etd_date = c2rec.estdepart,
        arrival_location = nvl(c2rec.finaldest,c2rec.portdisc),
        eta_date = c2rec.estarrive,
        current_location = nvl(c2rec.finaldest,c2rec.portdisc),
        date_at_current_loc = c2rec.estarrive
      where
       id = c3rec.id and
       rno = c4rec.rno;
     else
      open c5(c3rec.id);
      fetch c5 into calcrno;
      close c5;
      insert into strang.tracking_details(id,rno,remark,movement_type,departure_location,etd_date,arrival_location,eta_date,ship,voyage,current_location,date_at_current_loc)
       values(c3rec.id,calcrno,'Bill of lading: ' || c1rec.bol,decode(c1rec.io,'O','OUTBOUND','INBOUND')||' SHIP AS '|| c1rec.full_mt||' CONTAINER',c2rec.portload,c2rec.estdepart,nvl(c2rec.finaldest,c2rec.portdisc),c2rec.estarrive,c2rec.shipname,c2rec.voy,nvl(c2rec.finaldest,c2rec.portdisc),c2rec.estarrive);
    end if;
    close c4;
    if c3rec.cat_code is null or c3rec.cat_company is null
     then
      c3rec.cat_code := nvl(c3rec.cat_code, c1rec.container_type);
      c3rec.cat_company := nvl(c3rec.cat_company, c6rec.cat_company);
      update strang.tracking_header
      set    cat_code = c3rec.cat_code
        ,    cat_company = c3rec.cat_company
      where  id = c3rec.id;
    end if;

   else

    -- insert new
    select strang.s_tracking_header.nextval into sno from dual;
    insert into strang.tracking_header(id,containerno,cat_code,cat_company) values
     (sno,c1rec.movement_no,c1rec.container_type,c6rec.cat_company);
    insert into strang.tracking_details(id,rno,remark,movement_type,departure_location,etd_date,arrival_location,eta_date,ship,voyage,current_location,date_at_current_loc)
     values(sno,1,'Bill of lading: ' || c1rec.bol,decode(c1rec.io,'O','OUTBOUND','INBOUND')||' SHIP AS '|| c1rec.full_mt||' CONTAINER',c2rec.portload,c2rec.estdepart,nvl(c2rec.finaldest,c2rec.portdisc),c2rec.estarrive,c2rec.shipname,c2rec.voy,nvl(c2rec.finaldest,c2rec.portdisc),c2rec.estarrive);

  end if;
  close c3;
 end loop;
 commit;
end generate_containers;

procedure accept_shp( surl in varchar2,  scid in integer,  parm in varchar2, access_id in varchar2, rid in varchar2, action in varchar2,
                        p1 in varchar2,   p1a in varchar2,   p2 in varchar2, p3 in varchar2, p3i in varchar2, p4 in varchar2, p5 in varchar2, p6 in varchar2, p7 in varchar2,
                        p8 in varchar2,    p9 in varchar2,  p9m in varchar2, p10 in varchar2, p11 in varchar2, p12 in varchar2, p13 in varchar2, p14 in varchar2, p15 in varchar2, p16 in varchar2,
					    p17 in varchar2,  p18 in varchar2,  p19 in varchar2,
                        pc1 in varchar2,  pc2 in varchar2,  pc3 in varchar2, pc4 in varchar2, p50 in varchar2, p20a in varchar2 )
as

 cursor c1(sto varchar2) is select max(ship_id) ship_id from strang.ships_airway;
 cursor c1a( sto varchar2) is select max(ship_id) ship_id from strang.ships_airway where ship_id < 9000000;

 cursor c2(rid rowid) is select status,ship_id,shipname,voy from strang.ships_airway where rowid = rid;
 cursor c10(v_shipname varchar2, v_voy varchar2) is select rowid from strang.ships_airway where upper(shipname) = upper(v_shipname) and upper(voy) = upper(v_voy);
 cursor c11(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'DELIVERYNO' and cola = vste;
 cursor c12(vshipid number) is
 select m.movement_no,m.seal,m.current_location, l.colc currloc, l1.colc arriveport, s.portdisc
 from strang.movements m, strang.ships_airway s, strang.lov l, strang.lov l1
 where s.ship_id = vshipid
 and s.ship_id = m.ship_id
 and l1.lov_name = 'LOCATIONS'
 and l.lov_name = 'LOCATIONS'
 and m.current_location = l.code
 and s.portdisc = l1.code
 UNION
 select m.movement_no,m.seal,m.current_location, '|' currloc, l1.colc arriveport, s.portdisc
 from strang.movements m, strang.ships_airway s, strang.lov l1
 where s.ship_id = vshipid
 and s.ship_id = m.ship_id
 and l1.lov_name = 'LOCATIONS'
 and m.current_location is null
 and s.portdisc = l1.code
 ;

 cursor c13(vshipid number) is
 select m.movement_no,m.seal,m.current_location, l.colc currloc, l1.colc arriveport, s.portdisc
 from strang.movements m, strang.ships_airway s, strang.lov l, strang.lov l1
 where s.ship_id = vshipid
 and s.ship_id = m.local_ship_id
 and l1.lov_name = 'LOCATIONS'
 and l.lov_name = 'LOCATIONS'
 and m.current_location = l.code
 and s.portdisc = l1.code
 UNION
 select m.movement_no,m.seal,m.current_location, '|' currloc, l1.colc arriveport, s.portdisc
 from strang.movements m, strang.ships_airway s, strang.lov l1
 where s.ship_id = vshipid
 and s.ship_id = m.local_ship_id
 and l1.lov_name = 'LOCATIONS'
 and m.current_location is null
 and s.portdisc = l1.code
 ;

 cusrec		customer_account%ROWTYPE;
 c1rec		c1%ROWTYPE;
 c1arec		c1a%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c10rec		c10%ROWTYPE;
 c11rec 	c11%ROWTYPE;
 c12rec 	c12%ROWTYPE;
 c13rec 	c13%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 newrid		rowid;
 sts		varchar2(100);
 nmb1		number;
 nmb2		integer;
 nmb3		integer;
 nmb4		integer;
 dt1		date;
 dt2		date;
 mf		varchar2(100);
 vste		varchar2(10);
 dt3		date;
 vshipid	integer;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_SHP' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 cusrec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(cusrec.aid);
 if action = LNGS.STR_TXT_186
  then
   shp(surl,null,scid,parm,'z',LNGS.STR_TXT_186 );
   return;
 end if;

 if action = LNGS.STR_TXT_187 then
    delete from strang.ships_airway where rowid = chartorowid( replace(rid,'~','+') );
    shp(surl,null,scid,parm,'z',LNGS.STR_TXT_189 );
    return;
 end if;

 begin dt1 := to_date(p4,LNGS.STR_DATE_01); exception when others then shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_152 || ':' || p4 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_01 ); return; end;
 begin dt2 := to_date(p6,LNGS.STR_DATE_01); exception when others then shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_152 || ':' || p6 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_01 ); return; end;
 begin dt3 := to_date(p50,LNGS.STR_DATE_01); exception when others then shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_152 || ':' || p50 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_01 ); return; end;

 if (dt1 is not null) and (dt2 is not null) and (dt2 < dt1 ) then
    shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_190 );
    return;
 end if;
 
 begin nmb1 := to_number(p11); exception when others then shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_191 || ':' || p11 || ' ' || LNGS.STR_TXT_195 ); return; end;
 begin nmb2 := to_number(p12); exception when others then shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_192 || ':' || p12 || ' ' || LNGS.STR_TXT_195 ); return; end;
 begin nmb3 := to_number(p13); exception when others then shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_193 || ':' || p13 || ' ' || LNGS.STR_TXT_195 ); return; end;
 begin nmb4 := to_number(p14); exception when others then shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_194 || ':' || p14 || ' ' || LNGS.STR_TXT_195 ); return; end;

 if p2 is null and access_id = 'z' then
    shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_196 );
    return;
 end if;

 if p3 is null and access_id = 'z' then
    shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_197 );
    return;
 end if;


 if access_id = 'z' then  

    open c10(p2,p3);
    fetch c10 into c10rec;
    if c10%FOUND then
       close c10;
       shp( surl, c10rec.rowid, scid, parm, 'x', LNGS.STR_TXT_406 );
       return;
    end if;
    close c10;
   
    open c11(vste);
    fetch c11 into c11rec;
    close c11;
   
    if p1 = 'A' then
       open c1a(currsite);
       fetch c1a into c1arec;
       close c1a;
       vshipid := nvl(c1arec.ship_id,0) + 1;
    else
       open c1(currsite);
       fetch c1 into c1rec;
       close c1;
      
       if c1rec.ship_id is null then c1rec.ship_id := c11rec.description; 
       end if;
       vshipid := nvl(c1rec.ship_id,0) + 1;
    end if;
   
    mf := control_code( 'OFFICE', vste );
      
    insert into strang.ships_airway(ship_airway,ship_id,shipname,voy,LI, shipmaster,estdepart,estarrive,portload,portdisc,shipcountry,shipweight,austcrew,pngcrew,
                                   frncrew,finaldest,customer_id,status,manifest_created,controlling_office,nationality_master, manifest_reg,
                                   sad_cuo_code, sad_cuo_bord, sad_054_lop_cod, sad_057_loc_goods, discharge_date,
								   carrier, inco_term, glms_ref, io
								      ) values
              (p1,vshipid,replace(upper(trim(p2)),chr(9),''),replace(upper(trim(p3)),chr(9),'') ,p3i,p10,dt1,dt2,p5,p7,p9,nmb1,nmb2,nmb3,nmb4,p15,p8,nvl(p1a,'INCOMPLETE'),mf,mf,p9m, p16, pc1, pc2, pc3, pc4, dt3, p17, p18, p19, p20a)
       returning rowid into newrid;
       
 else
    open c2(chartorowid( replace(rid,'~','+') ));
    fetch c2 into c2rec;
    close c2;
    
    -- Added by David Banjo 17/04/23
    if c2rec.ship_id in (1,2,3,4) then
       shp( surl, rid, scid, parm, 'x', 'Ships with IDs of 1, 2, 3 & 4 are controlled and can not be modified' );
       return;
    end if;
    
    if (c2rec.shipname <> trim(p2)) or (c2rec.voy <> trim(p3) ) then
       -- Shipname or Voyage changed, check for uniqueness
       open c10(p2,p3);
       fetch c10 into c10rec;
       if c10%FOUND then
          close c10;
          shp( surl, rid, scid, parm, 'x', LNGS.STR_TXT_406 );
          return;
       end if;
       close c10;
    end if;
    if nvl(c2rec.status,'INCOMPLETE') not in ('ARCHIVED') then
       update strang.ships_airway set
       ship_airway = p1,
       shipname = trim(p2),
       voy = trim(p3),
       li = p3i,
       shipmaster = p10,
       estdepart = dt1,
       estarrive = dt2,
       portload = p5,
       portdisc = p7,
       shipcountry = p9,
       nationality_master = p9m,
       shipweight = nmb1,
       austcrew = nmb2,
       pngcrew = nmb3,
       frncrew = nmb4,
       finaldest = p15,
       customer_id = p8,
       status = nvl(p1a,'INCOMPLETE'),
       controlling_office = mf,
       manifest_reg = p16,
       sad_cuo_code = pc1,
       sad_cuo_bord = pc2,
       sad_054_lop_cod = pc3,
       sad_057_loc_goods = pc4,
       discharge_date = dt3,
       interface4_date = null,
  	   carrier = p17,
	   inco_term = p18,
	   glms_ref = p19
       where rowid = chartorowid( replace(rid,'~','+') );
    else
       update strang.ships_airway
          set manifest_reg = p16,
              status = nvl(p1a,'INCOMPLETE')
        where rowid = chartorowid( replace(rid,'~','+') );
    end if;
   -- If the Ship is Marked as COMPLETE then update all Movements to S which stands for SHIPPED
    if nvl(p1a,'INCOMPLETE') in ('COMPLETE','FINAL','CUSTOMS COMPLETE','SAILED','ARRIVED') and ((p3i = 'I' and p20a = 'I') or (p3i = 'L' and p20a = 'O'))
    then
   ---     glbx.dbg('southbound ship captured: '||c2rec.ship_id);  -- delete David Banjo
    ---    glbx.dbg(p1a||'= status'|| c2rec.status ||' = status');
        update strang.movements
        set complete = 'S'
	      , date_modified = sysdate
        where ship_id = c2rec.ship_id;
    end if;


    if (nvl(p1a,'INCOMPLETE') <> c2rec.status ) and ( nvl(p1a,'INCOMPLETE') in ('CUSTOMS COMPLETE','SAILED'))
    then
       if p3i = 'I' and p20a = 'I' then
          for c12rec in c12(c2rec.ship_id) loop
             if c12rec.arriveport is not null then
                if nvl(c12rec.current_location,'|') <> c12rec.portdisc and nvl(c12rec.currloc,'|') not in ('KIUNGA','BIGE','TABUBIL') then
                   if c12rec.arriveport = 'KIUNGA' then
                    -- Modified by David Banjo added the interface4_date update
                      update strang.movements m set m.current_location = 'STK', m.complete = 'D', date_modified = sysdate, interface4_date = NULL where movement_no = c12rec.movement_no and nvl(seal,'|') = nvl(c12rec.seal,'|');
                   else
                      update strang.movements m set m.current_location = 'STM', date_modified = sysdate, interface4_date = NULL where movement_no = c12rec.movement_no and nvl(seal,'|') = nvl(c12rec.seal,'|');
                   end if;
                end if;
             end if;
          end loop;
       elsif p3i = 'L' and p20a = 'I' then
          for c13rec in c13(c2rec.ship_id) loop
             if c13rec.arriveport is not null then
                if nvl(c13rec.currloc,'|') <> c13rec.arriveport and nvl(c13rec.currloc,'|') not in ('KIUNGA','BIGE','TABUBIL') then
                   if c13rec.arriveport = 'KIUNGA' then
                   -- David Banjo Cleared interface4_date 
                      update strang.movements m set m.current_location = 'STK', m.complete = 'D', date_modified = sysdate, interface4_date = NULL where movement_no = c13rec.movement_no and nvl(seal,'|') = nvl(c13rec.seal,'|');
                   end if;
                end if;
             end if;
          end loop;
      --
       elsif p3i = 'I' and p20a = 'O' then
          for c12rec in c12(c2rec.ship_id) loop
             if c12rec.arriveport is not null then
         if nvl(c12rec.current_location,'|') <> c12rec.portdisc and nvl(c12rec.currloc,'|') not in ('BRISBANE') then
          if c12rec.arriveport = 'BRISBANE' then
            update strang.movements m set m.current_location = 'STB', m.complete = 'D', date_modified = sysdate, interface4_date = NULL where movement_no = c12rec.movement_no and nvl(seal,'|') = nvl(c12rec.seal,'|');
          else
            update strang.movements m set m.current_location = 'STO', date_modified = sysdate, interface4_date = NULL where movement_no = c12rec.movement_no and nvl(seal,'|') = nvl(c12rec.seal,'|');
          end if;
         end if;
        end if;
       end loop;
      elsif p3i = 'L' and p20a = 'O' then
       for c13rec in c13(c2rec.ship_id) loop
        if c13rec.arriveport is not null then
         if nvl(c13rec.currloc,'|') <> c13rec.arriveport and nvl(c13rec.currloc,'|') not in ('MOTUKEA','BRISBANE') then
          if c13rec.arriveport in ('MOTUKEA') then 
            update strang.movements m set m.current_location = 'STM', m.complete = 'S', date_modified = sysdate where movement_no = c13rec.movement_no and nvl(seal,'|') = nvl(c13rec.seal,'|');
          end if;
         end if;
        end if;
       end loop;
       
 
      --
     end if;
     commit;
   elsif (nvl(p1a,'INCOMPLETE') <> c2rec.status ) and ( nvl(p1a,'INCOMPLETE') in ('ARRIVED')) then
     if p3i = 'I' and p20a = 'I' then
      for c12rec in c12(c2rec.ship_id) loop
       if c12rec.arriveport is not null then
        if nvl(c12rec.current_location,'|') <> c12rec.portdisc and (nvl(c12rec.currloc,'|') not in ('KIUNGA','BIGE','TABUBIL')  or nvl(c12rec.current_location,'|')='STK' or nvl(c12rec.current_location,'|')='STM') then
         if c12rec.arriveport = 'KIUNGA' then
           -- David Banjo added interface4_date for reset
           update strang.movements m set m.current_location = nvl(c12rec.portdisc,'KIU'), m.complete = 'D', date_modified = sysdate, interface4_date = NULL  where movement_no = c12rec.movement_no and nvl(seal,'|') = nvl(c12rec.seal,'|');
         else
           update strang.movements m set m.current_location = nvl(c12rec.portdisc,'MI'), date_modified = sysdate, interface4_date = NULL where movement_no = c12rec.movement_no and nvl(seal,'|') = nvl(c12rec.seal,'|');
         end if;
        end if;
       end if;
      end loop;
     elsif p3i = 'L' and p20a = 'I' then
      for c13rec in c13(c2rec.ship_id) loop
       if c13rec.portdisc is not null then
        if nvl(c13rec.current_location,'|') <> c13rec.portdisc and nvl(c13rec.currloc,'|') not in ('BIGE','TABUBIL') then
           update strang.movements m set m.current_location = nvl(c13rec.portdisc,'KIU'), m.complete = 'D', date_modified = sysdate, interface4_date = NULL where movement_no = c13rec.movement_no and nvl(seal,'|') = nvl(c13rec.seal,'|');
        end if;
       end if;
      end loop;
 --
      elsif p3i = 'I' and p20a = 'O' then
       for c12rec in c12(c2rec.ship_id) loop
        if c12rec.arriveport is not null then
         if nvl(c12rec.current_location,'|') <> c12rec.portdisc and (nvl(c12rec.currloc,'|') not in ('BRISBANE')  or nvl(c12rec.current_location,'|')='STB' or nvl(c12rec.current_location,'|')='STO') then
          if c12rec.arriveport = 'BRISBANE' then
            update strang.movements m set m.current_location = nvl(c12rec.portdisc,'BNE'), m.complete = 'D', date_modified = sysdate, interface4_date = NULL where movement_no = c12rec.movement_no and nvl(seal,'|') = nvl(c12rec.seal,'|');
          else
            update strang.movements m set m.current_location = nvl(c12rec.portdisc,'O/SEAS'), date_modified = sysdate, interface4_date = NULL where movement_no = c12rec.movement_no and nvl(seal,'|') = nvl(c12rec.seal,'|');
          end if;
         end if;
        end if; 
       end loop;
      elsif p3i = 'L' and p20a = 'O' then
       for c13rec in c13(c2rec.ship_id) loop
        if c13rec.portdisc is not null then
         if nvl(c13rec.current_location,'|') <> c13rec.portdisc then -- and nvl(c13rec.currloc,'|') not in ('MOTUKEA') then
            update strang.movements m set m.current_location = nvl(c13rec.portdisc,'MOT'), m.complete = 'A', date_modified = sysdate, interface4_date = NULL where movement_no = c13rec.movement_no and nvl(seal,'|') = nvl(c13rec.seal,'|');
         end if;
        end if;
       end loop;

 --
     end if;
     commit;
   end if;

-- Can only archive international when everything archived already on local FOR INBOUND VOYAGES

   if nvl(p1a,'INCOMPLETE') in ('ARCHIVED') and p3i = 'L' and p20a = 'I'
    then
     update strang.movements
      set
       complete = 'H', date_modified = sysdate
     where
      local_ship_id = c2rec.ship_id;
    end if;

   if nvl(p1a,'INCOMPLETE') in ('ARCHIVED') and p3i = 'I' and p20a = 'O'
    then
     update strang.movements
      set
       complete = 'H', date_modified = sysdate
     where
      ship_id = c2rec.ship_id;
    end if;

   if nvl(c2rec.status,'INCOMPLETE') ='ARCHIVED' and nvl(p1a,'INCOMPLETE') not in ('ARCHIVED') and p3i = 'L' and p20a = 'I'
    then
      update strang.movements
       set
        complete = 'W', date_modified = sysdate
      where
       local_ship_id = c2rec.ship_id;
    end if;

   if nvl(p1a,'INCOMPLETE') = 'INCOMPLETE'
    then
     update strang.movements
      set
       complete = 'W', date_modified = sysdate
     where
      ship_id = c2rec.ship_id and
      complete = 'S';
    end if;

    if nvl(p50,'01-JAN-2001') > '01-JAN-2001' then
     if p3i = 'I' then
       update strang.movements m
       set m.int_ship_discharge_date = dt3,
           m.interface4_date = null, date_modified = sysdate
       where m.int_ship_discharge_date is null and
       m.ship_id = c2rec.ship_id ;
     else
       update strang.movements m
       set m.local_ship_discharge_date = dt3,
       m.interface4_date = null, date_modified = sysdate
       where m.local_ship_discharge_date is null and
       m.local_ship_id = c2rec.ship_id;
     end if;
    end if;
    if nvl(p1a,'INCOMPLETE') in ('FINAL') and nvl(c2rec.status,'INCOMPLETE') not in ('FINAL')
     then
      generate_ost256( surl, c2rec.ship_id );
      generate_ost156( surl, c2rec.ship_id );
      generate_ost157( surl, c2rec.ship_id );
      generate_ccdets( surl, c2rec.ship_id );
      generate_ccpo( surl, c2rec.ship_id );
      -- populate tracking_header and tracking_details
      generate_containers( c2rec.ship_id );
    end if;
    if nvl(c2rec.status,'INCOMPLETE') in ('FINAL') and nvl(p1a,'INCOMPLETE') not in ('FINAL')
     then
      delete from strang.tracking_details where upper(ship) = upper(c2rec.shipname) and upper(voyage) = upper(c2rec.voy);
    end if;
 end if;

 commit;
 /* 20140529
 if action = LNGS.STR_TXT_188
  then
   if access_id = 'z'
    then
     shp2( surl, newrid, scid, parm, 'x', LNGS.STR_TXT_160 );
    else
     shp2( surl, rid, scid, parm, access_id, LNGS.STR_TXT_161 );
   end if;
   return;
 end if;
 */
 if access_id = 'z'
  then
   shp( surl, newrid, scid, parm, 'x', LNGS.STR_TXT_160 );
  else
   shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_161 );
 end if;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_SHP',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_shp;

/* 20140529 removed procedure shp2 & procedure accept_shp2 */

procedure entry_maintain(surl in varchar2, strt in varchar2, strt2 in varchar2 default null, rid in varchar2, vrecctr in varchar2, msg in varchar2 default null )
as

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ENTRY_MAINTAIN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'ENTRY_MAINTAIN', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Choose Entry Number',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'Entry Maintain') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 htp.formopen( 'strangp.entry_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'PK1', NULL );
 htp.formhidden( 'PK2', NULL );
 htp.formhidden( 'PK3', NULL );
 htp.formhidden( 'V1', NULL );
 htp.formhidden( 'V1i', NULL );
 htp.formhidden( 'V8i', NULL );
 htp.formhidden( 'V8ii', NULL );
 htp.formhidden( 'V2', NULL );
 htp.formhidden( 'V3', NULL );
 htp.formhidden( 'V4', NULL );
 htp.formhidden( 'V5', NULL );
 htp.formhidden( 'V6', NULL );
 htp.formhidden( 'V7', NULL );
 htp.formhidden( 'V8', NULL );
 htp.formhidden( 'ERRMSG', NULL );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  if strt is NULL
   then
    htp.tablerowopen;
       htp.tabledata( htf.bold('Entry From'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.formtext('P1',20,30),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    htp.tablerowopen;
       htp.tabledata( htf.bold('Entry To'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.formtext('P2',20,30),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
  else
    htp.tablerowopen;
       htp.tabledata( htf.bold('Entry From'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.formtext('P1',20,30, strang.ent.get_entry_no(strt)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    htp.tablerowopen;
       htp.tabledata( htf.bold('Entry To'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.formtext('P2',20,30, strang.ent.get_entry_no(nvl(strt2, strt))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
  end if;
 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.formsubmit( null, 'Submit' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'ENTRY_MAINTAIN',null,owner_id,errmsg=>sqlerrm,extdet=>'Strt:' || strt);
end entry_maintain;

procedure entry_maintain_mass(surl in varchar2, p1 in varchar2, p2 in varchar2, rid in varchar2, vrecctr in varchar2, pk1 in GLBX.MYARRAY, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY, v1i in GLBX.MYARRAY, v8i in GLBX.MYARRAY, v8ii in GLBX.MYARRAY, errmsg in GLBX.MYARRAY, msg in varchar2 default null )
as

 cursor c2(ent_from number, ent_to number) is
  select /*+ ALL_ROWS */ distinct dr.entry_no, p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty, p.po, p.po_item_no, p.supinv, p.tamount, p.qty, p.unit_unitused, t.cola tunit, i.code,  i.description, i.cola cola
  from strang.lov i, strang.pos p, strang.detailrs dr, strang.lov t
  where dr.entry_no >= ent_from and
        dr.entry_no <= ent_to and
        dr.deliveryno = p.deliveryno and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
        t.lov_name = 'TARIFF' and
        t.code = i.cola
 union all
  select /*+ ALL_ROWS */ distinct dr.entry_no, p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty, p.po, p.po_item_no, p.supinv, p.tamount, p.qty, p.unit_unitused, null tunit, i.code,  i.description, i.cola cola
  from strang.lov i, strang.pos p, strang.detailrs dr
  where dr.entry_no >= ent_from and
        dr.entry_no <= ent_to and
        dr.deliveryno = p.deliveryno and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
    (i.cola is null or (i.cola is not null and not exists (select 'x' from strang.lov t where t.lov_name = 'TARIFF' and t.code = i.cola)))
 union all
  select /*+ ALL_ROWS */ distinct dr.entry_no, p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty, p.po, p.po_item_no, p.supinv, p.tamount, p.qty, p.unit_unitused, null tunit, p.inventoryno code, null description, null cola
  from strang.pos p, strang.detailrs dr
  where dr.entry_no >= ent_from and
        dr.entry_no <= ent_to and
        dr.deliveryno = p.deliveryno and
        (p.inventoryno is null or (p.inventoryno is not null and not exists (select 'x' from strang.lov i where i.lov_name = 'INVENT' and i.code = p.inventoryno)))
order by 1,2,3;

 cursor c3(ent_from number, ent_to number) is
  select /*+ ALL_ROWS */ distinct p.inventoryno
  from strang.pos p, strang.detailrs dr
  where dr.entry_no >= ent_from and
        dr.entry_no <= ent_to and
        dr.deliveryno = p.deliveryno;

cursor c3a(vInvent varchar2) is select * from strang.lov l where l.lov_name='INVENT' and l.code=vInvent;

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c3arec		c3a%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 foundrec	boolean;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);
 ent_from	number;
 ent_to		number;

 function vld( p_k1 in varchar2, p_k2 in varchar2, p_k3 in varchar2, fld in varchar2, defval in varchar2 )
  return varchar2
 as
 begin
  for j in pk1.first..pk1.last loop
   if pk1(j) = p_k1 and pk2(j) = p_k2 and pk3(j) = p_k3
    then
     if fld = 'ERRMSG'
      then
       return( errmsg(j) );
     elsif fld = 'V1'
      then
       return( strang.f_sap_format(v1(j),'PO') );
     elsif fld = 'V2'
      then
       return( v2(j) );
     elsif fld = 'V3'
      then
       return( v3(j) );
     elsif fld = 'V4'
      then
       return( v4(j) );
     elsif fld = 'V5'
      then
       return( v5(j) );
     elsif fld = 'V6'
      then
       return( strang.f_sap_format(v6(j),'INVENTORYNO') );
     elsif fld = 'V7'
      then
       return( v7(j) );
     elsif fld = 'V8'
      then
       return( v8(j) );
     elsif fld = 'V1i'
      then
       return( strang.f_sap_format(v1i(j),'DELIVERYNO') );
     elsif fld = 'V8i'
      then
       return( v8i(j) );
     elsif fld = 'V8ii'
      then
       return( v8ii(j) );
     end if;
   end if;
  end loop;
  return( defval );
 end vld;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ENTRY_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 if instr(p1, '.') > 0
  then
   begin ent_from := to_number(strang.ent.get_entry_no(p1)); exception when others then entry_maintain( surl, p1, p2, rid, vrecctr, 'Entry From Number is not a Valid Number' ); return; end;
 else
   begin ent_from := to_number('1' || '.' || strang.ent.get_entry_no(p1, 'D')); exception when others then entry_maintain( surl, p1, p2, rid, vrecctr, 'Entry From Number is not a Valid Number' ); return; end;
 end if;
 if instr(p2, '.') > 0
  then
   begin ent_to := to_number(strang.ent.get_entry_no(p2)); exception when others then entry_maintain( surl, p1, p2, rid, vrecctr, 'Entry To Number is not a Valid Number' ); return; end;
 else
   begin ent_to := to_number('1' || '.' || strang.ent.get_entry_no(p2, 'D')); exception when others then entry_maintain( surl, p1, p2, rid, vrecctr, 'Entry To Number is not a Valid Number' ); return; end;
 end if;
 if ent_from <= 0 or ent_from > ent_to then entry_maintain( surl, p1, p2, rid, vrecctr, 'Entry Number Range is Invalid' ); return; end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'ENTRY_MAINTAIN', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Entry Maintain Mass Edit',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'Entry Maintain Mass Edit') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.bold( 'Entries From' || ':' || strang.ent.get_entry_no(ent_from) || '&nbsp;&nbsp;&nbsp;' || 'To' || ':' || strang.ent.get_entry_no(ent_to));
 htp.nl;

 htp.formopen( 'strangp.accept_entry_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'P1', ent_from );
 htp.formhidden( 'P2', ent_to );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
    htp.tabledata( htf.bold('Entry No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Delivery No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('PO Record No.'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('OTML Delno'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('OTML Ordered Qty'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Inventory Number'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Description'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Tariff'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Purchase Order'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('PO Item'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Supplier Invoice'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Amount Orig Curr'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Quantity'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Corrected Unit'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Old Unit'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Data Entry Validation Message'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  foundrec := FALSE;
   for c3rec in c3(ent_from, ent_to) loop
      open c3a( c3rec.inventoryno);
      fetch c3a into c3arec;
      if c3a%NOTFOUND
       then
        insert into strang.lov(lov_name,code) values('INVENT',c3rec.inventoryno);
        commit;
        close c3a;
       else
        close c3a;
      end if;
  end loop;
 for c2rec in c2(ent_from, ent_to) loop
   foundrec := TRUE;
   htp.tablerowopen;
    htp.tabledata( htf.formhidden( 'PK1', c2rec.entry_no ) || htf.bold(c2rec.entry_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'PK2', c2rec.deliveryno ) || htf.bold(c2rec.deliveryno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'PK3', c2rec.recno ) || htf.bold(c2rec.recno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V1i',10,15,vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V1i',c2rec.sap_delno)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formtext( 'V8i',10,15,vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V8i',c2rec.sap_delno_qty)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'V8i', c2rec.sap_delno_qty ) || htf.bold(c2rec.sap_delno_qty),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V6',12,100,vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V6',c2rec.code)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V7',20,1000,nvl(vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V7',c2rec.description),c2rec.description)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V8',11,20,nvl(vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V8',c2rec.cola),c2rec.cola)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formtext( 'V1',12,15,vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V1',c2rec.po)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formtext( 'V8ii',8,15,vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V8ii',c2rec.po_item_no)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formtext( 'V2',8,15,vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V2',c2rec.supinv)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'V1', c2rec.po ) || htf.bold(c2rec.po),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'V8ii', c2rec.po_item_no ) || htf.bold(c2rec.po_item_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'V2', c2rec.supinv ) || htf.bold(c2rec.supinv),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'V3',10,20,vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V3',trim(to_char(c2rec.tamount,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V4',5,10,vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V4',c2rec.qty)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V5',5,8,vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V5',c2rec.tunit)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( nvl(c2rec.unit_unitused,'&nbsp;'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( nvl(vld(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'ERRMSG','&nbsp;'),'Success'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
  end loop;
 htp.tableclose;
 htp.nl;
 if not foundrec then htp.init; entry_maintain( surl, p1, p2, rid, vrecctr, 'No Entries found that Satisfy this Query' ); return; end if;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.formsubmit( null, 'Modify Data' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'ENTRY_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 || '-' || 'P2:' || p2);
end entry_maintain_mass;

procedure accept_entry_maintain_mass(surl in varchar2, p1 in varchar2, p2 in varchar2, rid in varchar2, vrecctr in varchar2, pk1 in GLBX.MYARRAY, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY, v1i in GLBX.MYARRAY, v8i in GLBX.MYARRAY, v8ii in GLBX.MYARRAY )
as

 cursor c3(lname varchar2, lcode varchar2) is select * from strang.lov where lov_name = lname and code = lcode;

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 errmsg		GLBX.MYARRAY;
 errfound	boolean;
 dupl_values	boolean;
 errunit	char(1);
 msg		varchar2(1000);
 nmb1		STRANG.POS.TAMOUNT%TYPE;
 nmb2		STRANG.POS.QTY%TYPE;
 oinv		STRANG.POS.INVENTORYNO%TYPE;
 dupctr_a	integer;
 dupctr_b	integer;
 tmp		number;
 tmp2		number;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_ENTRY_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 vaccess := data_access( owner_id, 'ENTRY_MAINTAIN', null );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 errfound := FALSE;

 for j in pk1.first..pk1.last loop
  errmsg(j) := NULL;
  if pk1(j) is not null
   then
    -- Validate Numbers Entered
    begin
      nmb1 := to_number( replace(replace(v3(j),',',''),'$','') );
    exception when others then
     begin
       nmb1 := to_number( v3(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Total Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    begin
      nmb2 := to_number( v4(j) );
      if nmb2 < 0
       then
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Quantity cannot be less than 0.';
        nmb2 := NULL;
      end if;
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Quantity Entered.';
       nmb2 := NULL;
    end;

    oinv := trim( v6(j) );

    if v1(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Purchase Order cannot be blank.';
    end if;

  --  if v8ii(j) is null
    if (v8ii(j) is null) and (pk1(j) < 2)  -- Only check for OTML CARGO (IE. ENTRY NUMBERS FOR MAIN CUSTOMER (CUSTOMER_ID = 1 ARE BETWEEN 1 AND 2)
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'PO Item cannot be blank.';
    end if;

    if v2(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Supplier Invoice cannot be blank.';
    end if;

    -- Check Unit
    c3rec.code := NULL;
    errunit := 'F';
    if v5(j) is not null
     then
      open c3( 'UNITS', upper(v5(j)));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Incorrect Current Unit.';
        errunit := 'T';
       else
        close c3;
      end if;
    end if;

    -- Update Purchase Order
    update strang.pos
     set
      sap_delno = nvl(strang.f_sap_format(v1i(j),'DELIVERYNO'),sap_delno),
 --     sap_delno_qty = nvl(v8i(j),sap_delno_qty),
 --     po = nvl(strang.f_sap_format(v1(j),'PO'),po),
 --     po_item_no = nvl(v8ii(j),po_item_no),
 --     supinv = nvl(v2(j),supinv),
      tamount = nvl(nmb1,tamount),
      qty = nvl(nmb2,qty),
      unit_unitused = decode(errunit,'F',upper(v5(j)),'T',unit_unitused),
      inventoryno = nvl(strang.f_sap_format(oinv,'INVENTORYNO'),inventoryno)
    where
     deliveryno = pk2(j) and
     recno = pk3(j);


    -- Update Purchase Order Quantities for new Form 15  19-Apr-07 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    if v5(j) = 'KG' or v5(j) = 'TONNE'
    then

     if v5(j) = 'KG'
       then
        tmp2 := null;
        select sum(nvl(partweight,0)) into tmp2 from strang.detailrs where deliveryno=pk2(j);
        select count('x') into tmp from strang.pos where deliveryno = pk2(j);
        tmp2 := round(tmp2/tmp,0);
        if tmp2 < 1
         then
          tmp2 := 1;
        end if;
     elsif v5(j) = 'TONNE'
      then
        tmp2 := null;
        select sum(nvl(partweight,0)) into tmp2 from strang.detailrs where deliveryno=pk2(j);
        select count('x') into tmp from strang.pos where deliveryno = pk2(j);
        tmp2 := round((tmp2/tmp)/1000,3);
        if tmp2 < 0.001
         then
         tmp2 := 0.001;
        end if;

     end if;
     update strang.pos
      set
      qty = tmp2
     where
      deliveryno = pk2(j) and
      recno = pk3(j);
    end if;


    -- Check if Inventory Exists
    if oinv is not null
     then

      -- Check if multiple inventory numbers have been entered, and if
      dupl_values := FALSE;
      dupctr_a := 0;
      dupctr_b := 0;
      for k in pk1.first..pk1.last loop
       if oinv is not null and trim(v6(k)) is not null and oinv = trim(v6(k))
        then
         -- Check if the Description is different and not null
         if trim(v7(j)) is not null and trim(v7(k)) is not null and trim(v7(j)) <> trim(v7(k))
          then
           dupctr_a := dupctr_a + 1;
         end if;
         -- Check if the Tariff number is different and not null
         if trim(v8(j)) is not null and trim(v8(k)) is not null and trim(v8(j)) <> trim(v8(k))
          then
           dupctr_b := dupctr_b + 1;
         end if;
       end if;
      end loop;

      if dupctr_a > 0
       then
        errmsg(j) := errmsg(j) || ' ' || 'Different descriptions exist for the same Inventory Number.';
        dupl_values := TRUE;
      end if;

      if dupctr_b > 0
       then
        errmsg(j) := errmsg(j) || ' ' || 'Different Tariff Numbers exist for the same Inventory Number.';
        dupl_values := TRUE;
      end if;

      if dupl_values
       then
        --
        errfound := TRUE;

       else
        open c3('INVENT',v6(j));
        fetch c3 into c3rec;
        if c3%FOUND
         then
          close c3;
          update strang.lov
           set
            description = nvl(v7(j),description)
          where
           lov_name = 'INVENT' and
           code = oinv;
         else
          close c3;
          insert into strang.lov(lov_name,code,description,cola) values ('INVENT',v6(j),v7(j),v8(j));
        end if;
      end if;

      -- Check if Tariff Exists
      if v8(j) is null
       then
        null;
       else
        open c3('TARIFF',v8(j));
        fetch c3 into c3rec;
        if c3%FOUND
         then
          close c3;
          update strang.lov
           set
            cola = v8(j)
          where
           lov_name = 'INVENT' and
           code = oinv;
         else
          close c3;
          errfound := TRUE;
          errmsg(j) := errmsg(j) || ' ' || 'Tariff value not found - ' || htf.anchor2( 'strangp.accept_lov?surl=' || surl || '&parm=TARIFF&SRC=&LRANGE=&P0=&P1=&P2=&P3=&P4=&P5=&ACTION=' || replace(LNGS.STR_TXT_357,' ','+'),'Insert New Tariff.', ctarget=>'INSWIND');
        end if;
      end if;
    end if;

  end if;
 end loop;
 commit;
 if errfound then msg := 'Errors found Modifying Data. Please Review each Entry Record to see what the Error was.'; end if;

 entry_maintain_mass(surl, p1, p2, rid,vrecctr, pk1, pk2, pk3, v1, v2, v3, v4, v5, v6, v7, v8, v1i, v8i, v8ii, errmsg, msg );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_ENTRY_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 || '-' || 'P2:' || p2);
end accept_entry_maintain_mass;

-- xxxxxx 20160615
procedure po_inventory_maintain(surl in varchar2, strt in varchar2, rid in varchar2, vrecctr in varchar2, msg in varchar2 default null )
as

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.po_inventory_MAINTAIN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'POS', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Choose Inventory Number',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'Update By Inventory') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 htp.formopen( 'strangp.poinventory_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'PK2', NULL );
 htp.formhidden( 'PK3', NULL );
 htp.formhidden( 'V1', NULL );
 htp.formhidden( 'V2', NULL );
 htp.formhidden( 'V9', NULL );
 htp.formhidden( 'V1i', NULL );
 htp.formhidden( 'V8i', NULL );
 htp.formhidden( 'V3_1', NULL );
 htp.formhidden( 'V3_1_1', NULL );
 htp.formhidden( 'V3_2', NULL );
 htp.formhidden( 'V3', NULL );
 htp.formhidden( 'V4', NULL );
 htp.formhidden( 'V5', NULL );
 htp.formhidden( 'V6', NULL );
 htp.formhidden( 'V7', NULL );
 htp.formhidden( 'V8', NULL );
 htp.formhidden( 'ERRMSG', NULL );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
     htp.tabledata( htf.bold('Inventory Number'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.formtext('P1',20,30, ''),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.formsubmit( null, 'Submit' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'po_inventory_MAINTAIN',null,owner_id,errmsg=>sqlerrm,extdet=>'Strt:' || strt);
end po_inventory_maintain;

procedure poinventory_maintain_mass(surl in varchar2, p1 in varchar2, rid in varchar2, vrecctr in varchar2, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v9 in GLBX.MYARRAY, v3_1 in GLBX.MYARRAY, v3_1_1 in GLBX.MYARRAY, v3_2 in GLBX.MYARRAY, v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY, v1i in GLBX.MYARRAY, v8i in GLBX.MYARRAY, errmsg in GLBX.MYARRAY, msg in varchar2 default null )
as

 cursor c2(inventno varchar2) is
  select /*+ ALL_ROWS */ distinct p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty,p.po, p.po_item_no, p.supinv, p.grn, p.amount, p.gstc_gstcode, p.gst, p.tamount, p.qty, p.unit_unitused, i.code,  i.description
  from strang.lov i, strang.pos p
  where p.inventoryno = inventno and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
        p.sap_delno is null
 union all
  select /*+ ALL_ROWS */ distinct p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty, p.po, p.po_item_no, p.supinv, p.grn, p.amount, p.gstc_gstcode, p.gst, p.tamount, p.qty, p.unit_unitused, p.inventoryno code, null description
  from strang.pos p
  where p.inventoryno = inventno and
        p.sap_delno is null and
       ( p.inventoryno not in (select i.code from strang.lov i where i.lov_name = 'INVENT'))
order by 1,2,3;

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 foundrec	boolean;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);
 inventno	integer;

 function vld( p_k2 in varchar2, p_k3 in varchar2, fld in varchar2, defval in varchar2 )
  return varchar2
 as
 begin
  for j in pk2.first..pk2.last loop
   if pk2(j) = p_k2 and pk3(j) = p_k3
    then
     if fld = 'ERRMSG'
      then
       return( errmsg(j) );
     elsif fld = 'V1'
      then
       return( v1(j) );
     elsif fld = 'V1i'
      then
       return( strang.f_sap_format(v1i(j),'DELIVERYNO') );
     elsif fld = 'V2'
      then
       return( v2(j) );
     elsif fld = 'V3_1'
      then
       return( v3_1(j) );
     elsif fld = 'V3_1_1'
      then
       return( v3_1_1(j) );
     elsif fld = 'V3_2'
      then
       return( v3_2(j) );
     elsif fld = 'V3'
      then
       return( v3(j) );
     elsif fld = 'V4'
      then
       return( v4(j) );
     elsif fld = 'V5'
      then
       return( v5(j) );
     elsif fld = 'V6'
      then
       return( v6(j) );
     elsif fld = 'V7'
      then
       return( v7(j) );
     elsif fld = 'V8'
      then
       return( v8(j) );
     elsif fld = 'V8i'
      then
       return( v8i(j) );
     elsif fld = 'V9'
      then
       return( v9(j) );
     end if;
   end if;
  end loop;
  return( defval );
 end vld;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.poinventory_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 begin inventno := to_char(p1); exception when others then po_inventory_maintain( surl, p1, rid, vrecctr, 'Inventory Number is not a Valid' ); return; end;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'po_inventory_MAINTAIN', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'PO Inventory Maintain Mass Edit',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'PO Inventory Maintain Mass Edit') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.bold( 'Inventory Number' || ':' || to_char(inventno));
 htp.nl;

 htp.formopen( 'strangp.accept_poinvent_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'P1', p1 );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
    htp.tabledata( htf.bold('Delivery No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('RecNo'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('OTML Delno'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('OTML Ordered Qty'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Purchase Order'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('PO Item'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Supplier Inv'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Goods Receipt'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Net Amount'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('GST Code'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('GST'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Total Amount'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Qty'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Unit'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Inventory'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Description'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Data Entry Validation Message'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  foundrec := FALSE;
  for c2rec in c2(inventno) loop
   foundrec := TRUE;
   htp.tablerowopen;
    htp.tabledata( htf.formhidden( 'PK2', c2rec.deliveryno ) || htf.bold(c2rec.deliveryno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'PK3', c2rec.recno ) || htf.bold(c2rec.recno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V1i',10,15,vld(c2rec.deliveryno,c2rec.recno,'V1i',c2rec.sap_delno)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'V8i', c2rec.sap_delno_qty ) || htf.bold(c2rec.sap_delno_qty),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V8i', c2rec.sap_delno_qty );

    htp.tabledata( htf.formhidden( 'V1', c2rec.po ) || htf.bold(c2rec.po),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V1', c2rec.po );
    htp.tabledata( htf.formhidden( 'V8', c2rec.po_item_no ) || htf.bold(c2rec.po_item_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V8', c2rec.po_item_no );
    htp.tabledata( htf.formhidden( 'V2', c2rec.supinv ) || htf.bold(c2rec.supinv),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V2', c2rec.supinv );
    htp.tabledata( htf.formhidden( 'V9', c2rec.grn ) || htf.bold(c2rec.grn),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V9', c2rec.grn );
    htp.tabledata( htf.formtext( 'V3_1',10,20,vld(c2rec.deliveryno,c2rec.recno,'V3_1',trim(to_char(c2rec.amount,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'GSTCODES', 'V3_1_1', c2rec.gstc_gstcode, TRUE, FALSE, FALSE, isedit=>TRUE );
     htp.p( '</TD>' );
    htp.tabledata( htf.formtext( 'V3_2',10,20,vld(c2rec.deliveryno,c2rec.recno,'V3_2',trim(to_char(c2rec.gst,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V3',10,20,vld(c2rec.deliveryno,c2rec.recno,'V3',trim(to_char(c2rec.tamount,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V4',10,12,vld(c2rec.deliveryno,c2rec.recno,'V4',c2rec.qty)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V5',5,8,vld(c2rec.deliveryno,c2rec.recno,'V5',c2rec.unit_unitused)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V6',10,12,vld(c2rec.deliveryno,c2rec.recno,'V6',c2rec.code)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formhidden( 'V6', c2rec.code ) || htf.bold(c2rec.code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.formhidden( 'V6', c2rec.code );

    htp.tabledata( htf.formtext( 'V7',20,1000,nvl(vld(c2rec.deliveryno,c2rec.recno,'V7',c2rec.description),c2rec.description)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( nvl(vld(c2rec.deliveryno,c2rec.recno,'ERRMSG','&nbsp;'),'Success'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
  end loop;
 htp.tableclose;
 htp.nl;
 if not foundrec then htp.init; po_inventory_maintain( surl, p1, rid, vrecctr, 'No Records found that Satisfy this Query' ); return; end if;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.formsubmit( null, 'Modify Data' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'poinventory_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 );
end poinventory_maintain_mass;

procedure accept_poinvent_maintain_mass(surl in varchar2, p1 in varchar2, rid in varchar2, vrecctr in varchar2, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v9 in GLBX.MYARRAY, v3_1 in GLBX.MYARRAY, v3_1_1 in GLBX.MYARRAY,v3_2 in GLBX.MYARRAY,v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY, v1i in GLBX.MYARRAY, v8i in GLBX.MYARRAY )
as

 cursor c3(lname varchar2, lcode varchar2) is select * from strang.lov where lov_name = lname and code = lcode;
 cursor c5( cde varchar2 ) is select to_number(cola) cola, colb from strang.lov where lov_name = 'GSTCODES' and code = cde;

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c5rec		c5%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 errmsg		GLBX.MYARRAY;
 errfound	boolean;
 dupl_values	boolean;
 errunit	char(1);
 msg		varchar2(1000);
 nmb1_1		STRANG.POS.AMOUNT%TYPE;
 nmb1_2		STRANG.POS.GST%TYPE;
 nmb1		STRANG.POS.TAMOUNT%TYPE;
 nmb2		STRANG.POS.QTY%TYPE;
 nmb3		STRANG.POS.GRN%TYPE;
 oinv		STRANG.POS.INVENTORYNO%TYPE;
 dupctr_a	integer;
 dupctr_b	integer;
 tmp		number;
 tmp2		number;
 vmsg   varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_ENTRY_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 vaccess := data_access( owner_id, 'po_inventory_MAINTAIN', null );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 errfound := FALSE;

 for j in pk2.first..pk2.last loop
  errmsg(j) := NULL;
  if pk2(j) is not null
   then
    -- Validate Numbers Entered
    begin
      nmb1_1 := to_number( replace(replace(v3_1(j),',',''),'$','') );
    exception when others then
     begin
       nmb1_1 := to_number( v3_1(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Net Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    begin
      nmb1_2 := to_number( replace(replace(v3_2(j),',',''),'$','') );
    exception when others then
     begin
       nmb1_2 := to_number( v3_2(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid GST Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    begin
      nmb1 := to_number( replace(replace(v3(j),',',''),'$','') );
    exception when others then
     begin
       nmb1 := to_number( v3(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Total Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    begin
      nmb2 := to_number( v4(j) );
      if nmb2 < 0
       then
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Quantity cannot be less than 0.';
        nmb2 := NULL;
      end if;
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Quantity Entered.';
       nmb2 := NULL;
    end;
    begin
      nmb2 := to_number( v1i(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid SAP Delno Entered.';
       nmb2 := NULL;
    end;


    -- Check Unit
    c3rec.code := NULL;
    errunit := 'F';
    if v5(j) is not null
     then
      open c3( 'UNITS', upper(v5(j)));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Incorrect Unit.';
        errunit := 'T';
       else
        close c3;
      end if;
    end if;

    -- Check and calculate gst and totalamount

    if nmb1_1 is not null
     then
     if nmb1_2 is null and nmb1 is null
     then
      open c5(v3_1_1(j));
      fetch c5 into c5rec;
      close c5;
      if to_number(c5rec.cola) = 0
      then
        nmb1_2 := 0 ;
        nmb1 := nmb1_1 ;
      else
        if c5rec.colb = 'Inc GST' then
          nmb1_2 := c5rec.cola;
          nmb1 := nmb1_1;
          nmb1_1 := ((100 * nmb1) / (100 + nvl(nmb1_2,0) ));
          nmb1_2 := nmb1_1 * (c5rec.cola/100);
        else
          nmb1_2 := c5rec.cola;
          nmb1 := nmb1_1 * (1 + (nmb1_2/100));
          nmb1_2 := nmb1_1 * (c5rec.cola/100);
        end if;
      end if;
     end if;
    end if;

    -- Update Purchase Order
    update strang.pos
     set
      sap_delno = nvl(strang.f_sap_format( v1i(j), 'DELIVERYNO' ),null),
      amount = nvl(nmb1_1,amount),
      gstc_gstcode = nvl(v3_1_1(j),gstc_gstcode),
      gst = nvl(nmb1_2,gst),
      tamount = nvl(nmb1,tamount),
      qty = nvl(to_number(v4(j)),qty),
      unit_unitused = decode(errunit,'F',upper(v5(j)),'T',unit_unitused)
    where
     deliveryno = pk2(j) and
     recno = pk3(j);
   end if;
 end loop;
 commit;
 if errfound then msg := 'Errors found Modifying Data. Please Review each Entry Record to see what the Error was.'; end if;

 poinventory_maintain_mass(surl, p1, rid,vrecctr, pk2, pk3, v1, v2, v9, v3_1 , v3_1_1 ,v3_2 ,v3, v4, v5, v6, v7, v8, v1i,v8i,errmsg, msg );

exception when others then
 glbx.error_details( 'STRANGP', 'accept_poinvent_maintain_mass',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 );
end accept_poinvent_maintain_mass;


-- xxxxxx 20160615
-- xxxxxx 20160714
procedure po_inventdate_maintain(surl in varchar2, strt in varchar2, rid in varchar2, vrecctr in varchar2, msg in varchar2 default null )
as

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.po_inventdate_MAINTAIN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'POS', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Choose Inventory Number',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'Update By Inventory') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 htp.formopen( 'strangp.poinvdte_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'PK2', NULL );
 htp.formhidden( 'PK3', NULL );
 htp.formhidden( 'V1', NULL );
 htp.formhidden( 'V2', NULL );
 htp.formhidden( 'V9', NULL );
 htp.formhidden( 'V1i', NULL );
 htp.formhidden( 'V8i', NULL );
 htp.formhidden( 'V3_1', NULL );
 htp.formhidden( 'V3_1_1', NULL );
 htp.formhidden( 'V3_2', NULL );
 htp.formhidden( 'V3', NULL );
 htp.formhidden( 'V4', NULL );
 htp.formhidden( 'V5', NULL );
 htp.formhidden( 'V6', NULL );
 htp.formhidden( 'V7', NULL );
 htp.formhidden( 'V8', NULL );
 htp.formhidden( 'ERRMSG', NULL );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
     htp.tabledata( htf.bold('Inventory Number'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.formtext('P1',20,30, ''),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Date From'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.formtext('P2',20,30, to_char(add_months(sysdate,-3),'DD-MON-YYYY')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.formsubmit( null, 'Submit' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'po_inventdate_MAINTAIN',null,owner_id,errmsg=>sqlerrm,extdet=>'Strt:' || strt);
end po_inventdate_maintain;

procedure poinvdte_maintain_mass(surl in varchar2, p1 in varchar2, p2 in varchar2, rid in varchar2, vrecctr in varchar2, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v9 in GLBX.MYARRAY, v3_1 in GLBX.MYARRAY, v3_1_1 in GLBX.MYARRAY, v3_2 in GLBX.MYARRAY, v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY, v1i in GLBX.MYARRAY, v8i in GLBX.MYARRAY, errmsg in GLBX.MYARRAY, msg in varchar2 default null )
as

 cursor c2(inventno varchar2, rdte varchar2) is
  select /*+ ALL_ROWS */ distinct p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty,p.po, p.po_item_no, p.supinv, p.grn, p.amount, p.gstc_gstcode, p.gst, p.tamount, p.qty, p.unit_unitused, i.code,  i.description
  from strang.lov i, strang.pos p, strang.receivals r
  where p.inventoryno = inventno and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
        p.deliveryno = r.deliveryno and
        to_date(r.currdate,'DD-MON-YYYY') >= to_date(rdte,'DD-MON-YYYY')
 union all
  select /*+ ALL_ROWS */ distinct p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty, p.po, p.po_item_no, p.supinv, p.grn, p.amount, p.gstc_gstcode, p.gst, p.tamount, p.qty, p.unit_unitused, p.inventoryno code, null description
  from strang.pos p, strang.receivals r
  where p.inventoryno = inventno and
        p.deliveryno = r.deliveryno and
        to_date(r.currdate,'DD-MON-YYYY') >= to_date(rdte,'DD-MON-YYYY') and
       ( p.inventoryno not in (select i.code from strang.lov i where i.lov_name = 'INVENT'))
order by 1,2,3;

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 foundrec	boolean;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);
 inventno	integer;
 rdte		varchar2(20);

 function vld( p_k2 in varchar2, p_k3 in varchar2, fld in varchar2, defval in varchar2 )
  return varchar2
 as
 begin
  for j in pk2.first..pk2.last loop
   if pk2(j) = p_k2 and pk3(j) = p_k3
    then
     if fld = 'ERRMSG'
      then
       return( errmsg(j) );
     elsif fld = 'V1'
      then
       return( v1(j) );
     elsif fld = 'V1i'
      then
       return( strang.f_sap_format(v1i(j),'DELIVERYNO') );
     elsif fld = 'V2'
      then
       return( v2(j) );
     elsif fld = 'V3_1'
      then
       return( v3_1(j) );
     elsif fld = 'V3_1_1'
      then
       return( v3_1_1(j) );
     elsif fld = 'V3_2'
      then
       return( v3_2(j) );
     elsif fld = 'V3'
      then
       return( v3(j) );
     elsif fld = 'V4'
      then
       return( v4(j) );
     elsif fld = 'V5'
      then
       return( v5(j) );
     elsif fld = 'V6'
      then
       return( v6(j) );
     elsif fld = 'V7'
      then
       return( v7(j) );
     elsif fld = 'V8'
      then
       return( v8(j) );
     elsif fld = 'V8i'
      then
       return( v8i(j) );
     elsif fld = 'V9'
      then
       return( v9(j) );
     end if;
   end if;
  end loop;
  return( defval );
 end vld;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.poinvdte_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 begin inventno := to_char(p1); exception when others then po_inventdate_maintain( surl, p1, rid, vrecctr, 'Inventory Number is not a Valid' ); return; end;
 begin rdte := to_date(p2,'DD-MON-YYYY'); exception when others then po_inventdate_maintain( surl, p1, rid, vrecctr, 'Date is not a Valid' ); return; end;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'po_inventdate_MAINTAIN', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'PO Inventory Maintain Mass Edit',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'PO Inventory Maintain Mass Edit') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.bold( 'Inventory Number' || ':' || to_char(inventno));
 htp.nl;

 htp.formopen( 'strangp.accept_poinvdte_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'P1', p1 );
 htp.formhidden( 'P2', p2 );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
    htp.tabledata( htf.bold('Delivery No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('RecNo'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('OTML Delno'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('OTML Ordered Qty'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Purchase Order'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('PO Item'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Supplier Inv'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Goods Receipt'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Net Amount'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('GST Code'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('GST'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Total Amount'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Qty'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Unit'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Inventory'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Description'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Data Entry Validation Message'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  foundrec := FALSE;
  for c2rec in c2(inventno,rdte) loop
   foundrec := TRUE;
   htp.tablerowopen;
    htp.tabledata( htf.formhidden( 'PK2', c2rec.deliveryno ) || htf.bold(c2rec.deliveryno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'PK3', c2rec.recno ) || htf.bold(c2rec.recno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V1i',10,15,vld(c2rec.deliveryno,c2rec.recno,'V1i',c2rec.sap_delno)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formtext( 'V8i',5,10,vld(c2rec.deliveryno,c2rec.recno,'V8i',c2rec.sap_delno_qty)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'V8i', c2rec.sap_delno_qty ) || htf.bold(c2rec.sap_delno_qty),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V8i', c2rec.sap_delno_qty );
--    htp.tabledata( htf.formtext( 'V1',12,15,vld(c2rec.deliveryno,c2rec.recno,'V1',c2rec.po)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'V1', c2rec.po ) || htf.bold(c2rec.po),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V1', c2rec.po );

--    htp.tabledata( htf.formtext( 'V8',5,10,vld(c2rec.deliveryno,c2rec.recno,'V8',c2rec.po_item_no)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'V8', c2rec.po_item_no ) || htf.bold(c2rec.po_item_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V8', c2rec.po_item_no );
--    htp.tabledata( htf.formtext( 'V2',8,15,vld(c2rec.deliveryno,c2rec.recno,'V2',c2rec.supinv)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'V2', c2rec.supinv ) || htf.bold(c2rec.supinv),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V2', c2rec.supinv );
--    htp.tabledata( htf.formtext( 'V9',12,15,vld(c2rec.deliveryno,c2rec.recno,'V9',c2rec.grn)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'V9', c2rec.grn ) || htf.bold(c2rec.grn),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V9', c2rec.grn );
    htp.tabledata( htf.formtext( 'V3_1',10,20,vld(c2rec.deliveryno,c2rec.recno,'V3_1',trim(to_char(c2rec.amount,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'GSTCODES', 'V3_1_1', c2rec.gstc_gstcode, TRUE, FALSE, FALSE, isedit=>TRUE );
     htp.p( '</TD>' );
    htp.tabledata( htf.formtext( 'V3_2',10,20,vld(c2rec.deliveryno,c2rec.recno,'V3_2',trim(to_char(c2rec.gst,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V3',10,20,vld(c2rec.deliveryno,c2rec.recno,'V3',trim(to_char(c2rec.tamount,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V4',10,12,vld(c2rec.deliveryno,c2rec.recno,'V4',c2rec.qty)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V5',5,8,vld(c2rec.deliveryno,c2rec.recno,'V5',c2rec.unit_unitused)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V6',12,100,vld(c2rec.deliveryno,c2rec.recno,'V6',c2rec.code)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formhidden( 'V6', c2rec.code ) || htf.bold(c2rec.code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.formhidden( 'V6', c2rec.code );
    htp.tabledata( htf.formtext( 'V7',20,1000,nvl(vld(c2rec.deliveryno,c2rec.recno,'V7',c2rec.description),c2rec.description)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( nvl(vld(c2rec.deliveryno,c2rec.recno,'ERRMSG','&nbsp;'),'Success'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
  end loop;
 htp.tableclose;
 htp.nl;
 if not foundrec then htp.init; po_inventdate_maintain( surl, p1, rid, vrecctr, 'No Records found that Satisfy this Query' ); return; end if;
   htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
   htp.tablerowopen;
   htp.tabledata( htf.formsubmit( null, 'Modify Data' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
   htp.tablerowclose;
   htp.tableclose;
   htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'poinvdte_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 );
end poinvdte_maintain_mass;

procedure accept_poinvdte_maintain_mass(surl in varchar2, p1 in varchar2, p2 in varchar2, rid in varchar2, vrecctr in varchar2, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v9 in GLBX.MYARRAY, v3_1 in GLBX.MYARRAY, v3_1_1 in GLBX.MYARRAY,v3_2 in GLBX.MYARRAY,v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY, v1i in GLBX.MYARRAY, v8i in GLBX.MYARRAY )
as

 cursor c3(lname varchar2, lcode varchar2) is select * from strang.lov where lov_name = lname and code = lcode;
 cursor c5( cde varchar2 ) is select to_number(cola) cola, colb from strang.lov where lov_name = 'GSTCODES' and code = cde;

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c5rec		c5%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 errmsg		GLBX.MYARRAY;
 errfound	boolean;
 dupl_values	boolean;
 errunit	char(1);
 msg		varchar2(1000);
 nmb1_1		STRANG.POS.AMOUNT%TYPE;
 nmb1_2		STRANG.POS.GST%TYPE;
 nmb1		STRANG.POS.TAMOUNT%TYPE;
 nmb2		STRANG.POS.QTY%TYPE;
 nmb3		STRANG.POS.GRN%TYPE;
 oinv		STRANG.POS.INVENTORYNO%TYPE;
 dupctr_a	integer;
 dupctr_b	integer;
 tmp		number;
 tmp2		number;
 vmsg   varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_poinvdte_maintain_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 vaccess := data_access( owner_id, 'po_inventdate_MAINTAIN', null );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 errfound := FALSE;

 for j in pk2.first..pk2.last loop
  errmsg(j) := NULL;
  if pk2(j) is not null
   then
    -- Validate Numbers Entered
    begin
      nmb1_1 := to_number( replace(replace(v3_1(j),',',''),'$','') );
    exception when others then
     begin
       nmb1_1 := to_number( v3_1(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Net Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    begin
      nmb1_2 := to_number( replace(replace(v3_2(j),',',''),'$','') );
    exception when others then
     begin
       nmb1_2 := to_number( v3_2(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid GST Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    begin
      nmb1 := to_number( replace(replace(v3(j),',',''),'$','') );
    exception when others then
     begin
       nmb1 := to_number( v3(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Total Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    begin
      nmb2 := to_number( v4(j) );
      if nmb2 < 0
       then
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Quantity cannot be less than 0.';
        nmb2 := NULL;
      end if;
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Quantity Entered.';
       nmb2 := NULL;
    end;
    begin
      nmb2 := to_number( v1i(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid SAP Delno Entered.';
       nmb2 := NULL;
    end;
    begin
      nmb2 := to_number( v8i(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid SAP Line Entered.';
       nmb2 := NULL;
    end;
    begin
      nmb3 := to_number( v9(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid GRN Entered.';
       nmb3 := NULL;
    end;

    oinv := trim( v6(j) );

    if v1(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Purchase Order cannot be blank.';
    end if;

    if v2(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Supplier Invoice cannot be blank.';
    end if;

    -- Check Unit
    c3rec.code := NULL;
    errunit := 'F';
    if v5(j) is not null
     then
      open c3( 'UNITS', upper(v5(j)));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Incorrect Unit.';
        errunit := 'T';
       else
        close c3;
      end if;
    end if;

    -- Check and calculate gst and totalamount

    if nmb1_1 is not null
     then
     if nmb1_2 is null and nmb1 is null
     then
      open c5(v3_1_1(j));
      fetch c5 into c5rec;
      close c5;
      if to_number(c5rec.cola) = 0
      then
        nmb1_2 := 0 ;
        nmb1 := nmb1_1 ;
      else
        if c5rec.colb = 'Inc GST' then
          nmb1_2 := c5rec.cola;
          nmb1 := nmb1_1;
          nmb1_1 := ((100 * nmb1) / (100 + nvl(nmb1_2,0) ));
          nmb1_2 := nmb1_1 * (c5rec.cola/100);
        else
          nmb1_2 := c5rec.cola;
          nmb1 := nmb1_1 * (1 + (nmb1_2/100));
          nmb1_2 := nmb1_1 * (c5rec.cola/100);
        end if;
      end if;
     end if;
    end if;

    -- Update Purchase Order
    update strang.pos
     set
--      po = nvl(strang.f_sap_format( v1(j), 'PO' ),po),
--      po_item_no = nvl(to_number( v8(j) ),null),
        sap_delno = nvl(strang.f_sap_format( v1i(j), 'DELIVERYNO' ),null),
--      sap_delno_qty = nvl(to_number( v8i(j) ),null),
--      supinv = nvl(v2(j),supinv),
--      grn = nvl(strang.f_sap_format( v9(j), 'GRN' ),null),
        amount = nvl(nmb1_1,amount),
        gstc_gstcode = nvl(v3_1_1(j),gstc_gstcode),
        gst = nvl(nmb1_2,gst),
        tamount = nvl(nmb1,tamount),
        qty = nvl(to_number(v4(j)),qty),
        unit_unitused = decode(errunit,'F',upper(v5(j)),'T',unit_unitused),
--      inventoryno = nvl(strang.f_sap_format( oinv, 'INVENTORYNO'),inventoryno)
        inventoryno = nvl(oinv,inventoryno)
    where
     deliveryno = pk2(j) and
     recno = pk3(j);


    -- Check if Inventory Exists
    if oinv is not null
     then

      -- Check if multiple inventory numbers have been entered, and if
      dupl_values := FALSE;
      dupctr_a := 0;
      dupctr_b := 0;
      for k in pk2.first..pk2.last loop
       if oinv is not null and trim(v6(k)) is not null and oinv = trim(v6(k))
        then
         -- Check if the Description is different and not null
         if trim(v7(j)) is not null and trim(v7(k)) is not null and trim(v7(j)) <> trim(v7(k))
          then
           dupctr_a := dupctr_a + 1;
         end if;
       end if;
      end loop;

      if dupctr_a > 0
       then
        errmsg(j) := errmsg(j) || ' ' || 'Different descriptions exist for the same Inventory Number.';
        dupl_values := TRUE;
      end if;

      if dupl_values
       then
        --
        errfound := TRUE;

       else
        open c3('INVENT',v6(j));
        fetch c3 into c3rec;
        if c3%FOUND
         then
          close c3;
          update strang.lov
           set
            description = nvl(v7(j),description)
          where
           lov_name = 'INVENT' and
           code = oinv;
         else
          close c3;
          insert into strang.lov(lov_name,code,description) values ('INVENT',v6(j),v7(j));
        end if;
      end if;

    end if;
   end if;
 end loop;
 commit;
 if errfound then msg := 'Errors found Modifying Data. Please Review each Entry Record to see what the Error was.'; end if;

 poinvdte_maintain_mass(surl, p1, p2,rid,vrecctr, pk2, pk3, v1, v2, v9, v3_1 , v3_1_1 ,v3_2 ,v3, v4, v5, v6, v7, v8, v1i,v8i,errmsg, msg );

exception when others then
 glbx.error_details( 'STRANGP', 'accept_poinvdte_maintain_mass',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 );
end accept_poinvdte_maintain_mass;


-- xxxxxx 20160714
procedure po_item_no_maintain(surl in varchar2, strt in varchar2, strt2 in varchar2 default null, rid in varchar2, vrecctr in varchar2, msg in varchar2 default null )
as

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.PO_ITEM_NO_MAINTAIN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'POS', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Choose Delivery Number',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'PO Maintain') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 htp.formopen( 'strangp.poitemno_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'PK2', NULL );
 htp.formhidden( 'PK3', NULL );
 htp.formhidden( 'V1', NULL );
 htp.formhidden( 'V2', NULL );
  htp.formhidden( 'V9_1', NULL );
  htp.formhidden( 'V9', NULL );
htp.formhidden( 'V1i', NULL );
 htp.formhidden( 'V8i', NULL );
 htp.formhidden( 'V3_1', NULL );
 htp.formhidden( 'V3_1_1', NULL );
 htp.formhidden( 'V3_2', NULL );
 htp.formhidden( 'V3', NULL );
 htp.formhidden( 'V4', NULL );
 htp.formhidden( 'V5', NULL );
 htp.formhidden( 'V6', NULL );
 htp.formhidden( 'V7', NULL );
 htp.formhidden( 'V8', NULL );
 htp.formhidden( 'ERRMSG', NULL );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
     htp.tabledata( htf.bold('Delivery From'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.formtext('P1',20,30, strt),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Delivery To'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.formtext('P2',20,30, nvl(strt2, strt)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.formsubmit( null, 'Submit' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'PO_ITEM_NO_MAINTAIN',null,owner_id,errmsg=>sqlerrm,extdet=>'Strt:' || strt);
end po_item_no_maintain;

procedure poitemno_maintain_mass(surl in varchar2, p1 in varchar2, p2 in varchar2, rid in varchar2, vrecctr in varchar2, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v9_1 in GLBX.MYARRAY, v9 in GLBX.MYARRAY, v3_1 in GLBX.MYARRAY, v3_1_1 in GLBX.MYARRAY, 
                              v3_2 in GLBX.MYARRAY, v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY, 
                              v8 in GLBX.MYARRAY, v1i in GLBX.MYARRAY, v8i in GLBX.MYARRAY, errmsg in GLBX.MYARRAY, msg in varchar2 default null )
as

 cursor c2(del_from integer, del_to integer) is
  select /*+ ALL_ROWS */ distinct p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty,p.po, p.po_item_no, r.cust_customer_id
                      , r.CURRDATE, r.interface_flag, r.io,  p.supinv, p.grn_status, p.grn, p.amount, p.gstc_gstcode
                      , p.gst, p.tamount, p.qty, p.unit_unitused, i.code,  i.description, p.shipping_text
                      , ltrim(REGEXP_SUBSTR( warehouse_plant ,'(^[DI])?([[:digit:]]{4})?(/[A-Z]{1}[[:digit:]]{3})?',1,1,'i',3),'/') warehouse
  from strang.lov i, strang.pos p, strang.receivals r
  where p.deliveryno >= del_from and
        p.deliveryno <= del_to and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
        r.deliveryno = p.deliveryno
 union all
  select /*+ ALL_ROWS */ distinct p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty, p.po, p.po_item_no, r.cust_customer_id
                      , r.CURRDATE, r.interface_flag, r.io, p.supinv, p.grn_status, p.grn, p.amount, p.gstc_gstcode
                      , p.gst, p.tamount, p.qty, p.unit_unitused, p.inventoryno code, null description, p.shipping_text
                      , ltrim(REGEXP_SUBSTR( warehouse_plant ,'(^[DI])?([[:digit:]]{4})?(/[A-Z]{1}[[:digit:]]{3})?',1,1,'i',3),'/')
  from strang.pos p, strang.receivals r
  where p.deliveryno >= del_from and
        p.deliveryno <= del_to and
        r.deliveryno = p.deliveryno and
       (p.inventoryno is null or (p.inventoryno is not null and not exists (select 'x' from strang.lov i where i.lov_name = 'INVENT' and i.code = p.inventoryno)))
order by 1,2,3;


 cursor c3(del_from integer, del_to integer) is
 select count(*) cnt
 from 
 ( select /*+ ALL_ROWS */ distinct p.deliveryno, p.recno, p.po, p.po_item_no, r.cust_customer_id, r.CURRDATE, r.interface_flag, r.io,  p.supinv, p.grn_status, p.grn, p.amount, p.gstc_gstcode, p.gst, p.tamount, p.qty, p.unit_unitused, i.code,  i.description, p.shipping_text
  from strang.lov i, strang.pos p, strang.receivals r
  where p.deliveryno >= del_from and
        p.deliveryno <= del_to and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
        r.deliveryno = p.deliveryno
 union all
  select /*+ ALL_ROWS */ distinct p.deliveryno, p.recno, p.po, p.po_item_no, r.cust_customer_id, r.CURRDATE, r.interface_flag, r.io, p.supinv, p.grn_status, p.grn, p.amount, p.gstc_gstcode, p.gst, p.tamount, p.qty, p.unit_unitused, p.inventoryno code, null description, p.shipping_text
  from strang.pos p, strang.receivals r
  where p.deliveryno >= del_from and
        p.deliveryno <= del_to and
        r.deliveryno = p.deliveryno and
       (p.inventoryno is null or (p.inventoryno is not null and not exists (select 'x' from strang.lov i where i.lov_name = 'INVENT' and i.code = p.inventoryno)))
  ) tmp
 where nvl(tmp.grn_status,0) = 0;

 c1rec		customer_account%ROWTYPE;
 c3rec      c3%rowtype;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 foundrec	boolean;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);
 del_from	integer;
 del_to		integer;
 ------ Added by DB
 read_only      boolean;
 vClient        boolean;
 part_read_only boolean;
 po_read_only   boolean;
 isOTML         boolean;
 interface1     boolean;

 function vld( p_k2 in varchar2, p_k3 in varchar2, fld in varchar2, defval in varchar2 )
  return varchar2
 as
 begin
  for j in pk2.first..pk2.last loop
   if pk2(j) = p_k2 and pk3(j) = p_k3
    then
     if fld = 'ERRMSG'
      then
       return( errmsg(j) );
     elsif fld = 'V1'
      then
       return( strang.f_sap_format(v1(j),'PO') );
     elsif fld = 'V1i'
      then
       return( strang.f_sap_format(v1i(j),'DELIVERYNO') );
     elsif fld = 'V2'
      then
       return( v2(j) );
     elsif fld = 'V3_1'
      then
       return( v3_1(j) );
     elsif fld = 'V3_1_1'
      then
       return( v3_1_1(j) );
     elsif fld = 'V3_2'
      then
       return( v3_2(j) );
     elsif fld = 'V3'
      then
       return( v3(j) );
     elsif fld = 'V4'
      then
       return( v4(j) );
     elsif fld = 'V5'
      then
       return( v5(j) );
     elsif fld = 'V6'
      then
       return( strang.f_sap_format(v6(j),'INVENTORYNO') );
     elsif fld = 'V7'
      then
       return( v7(j) );
     elsif fld = 'V8'
      then
       return( v8(j) );
     elsif fld = 'V8i'
      then
       return( v8i(j) );
     elsif fld = 'V9_1'
      then
       return( v9_1(j) );
    elsif fld = 'V9'
      then
       return( strang.f_sap_format(v9(j),'GRN') );
     end if;
   end if;
  end loop;
  return( defval );
 end vld;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.POITEMNO_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 begin del_from := to_number(p1); exception when others then po_item_no_maintain( surl, p1, p2, rid, vrecctr, 'Delivery From Number is not a Valid Number' ); return; end;
 begin del_to := to_number(p2); exception when others then po_item_no_maintain( surl, p1, p2, rid, vrecctr, 'Delivery To Number is not a Valid Number' ); return; end;
 if del_from <= 0 or del_from > del_to then po_item_no_maintain( surl, p1, p2, rid, vrecctr, 'Delivery Number Range is Invalid' ); return; end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'PO_ITEM_NO_MAINTAIN', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'PO Item No Maintain Mass Edit',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'PO Item No Maintain Mass Edit') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.bold( 'Deliveries From' || ':' || to_char(del_from) || '&nbsp;&nbsp;&nbsp;' || 'To' || ':' || to_char(del_to));
 htp.nl;

 htp.formopen( 'strangp.accept_poitemno_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'P1', p1 );
 htp.formhidden( 'P2', p2 );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
    htp.tabledata( htf.bold('Delivery No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('RecNo'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('OTML Warehouse no'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('OTML Ordered Qty'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Purchase Order'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('PO Item'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Supplier Inv'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Shipping Text'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Grn Status'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Goods Receipt'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Net Amount'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('GST Code'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('GST'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Total Amount'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Qty'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Unit'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Inventory'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Description'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Data Entry Validation Message'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  foundrec := FALSE;
  open c3 (del_from, del_to);
  fetch c3 into c3rec;
  close c3;
  for c2rec in c2(del_from, del_to) loop
   foundrec := TRUE;
    -- ADDED by David Banjo on 20/5/2020
    if (c2rec.currdate < '01-JUN-2018') or (c2rec.io = 'O') or (c2rec.interface_flag = 'M') or (c2rec.deliveryno > 3000000 and c2rec.deliveryno < 4000000) or
    ((c2rec.currdate < '16-DEC-2018') and (c2rec.deliveryno > 4000000 and c2rec.deliveryno < 5000000)) then
       interface1 := FALSE;
    else
       interface1 := TRUE;
    end if; 
    if c2rec.cust_customer_id = 1 then
       isOTML := TRUE; 
    end if;
    if c2rec.cust_customer_id = 1 and interface1 then 
       vClient := TRUE;
    else
       vClient := FALSE;
    end if;
    if vClient and substr(c2rec.po,1,2) in ('47','80')
    then
       vClient := FALSE;
    end if;
   htp.tablerowopen;
   

    htp.tabledata( htf.formhidden( 'PK2', c2rec.deliveryno ) || htf.bold(c2rec.deliveryno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'PK3', c2rec.recno ) || htf.bold(c2rec.recno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'V1i', c2rec.sap_delno ) || htf.bold(c2rec.warehouse),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  --  htp.tabledata( htf.formtext( 'V1i',10,15,vld(c2rec.deliveryno,c2rec.recno,'V1i',c2rec.sap_delno)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'V8i', c2rec.sap_delno_qty ) || htf.bold(c2rec.sap_delno_qty),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V8i', c2rec.sap_delno_qty );
    htp.tabledata( htf.bold(c2rec.po),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V1', c2rec.po );
    htp.tabledata( htf.bold(c2rec.po_item_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V8', c2rec.po_item_no );
--    if (c2rec.grn_status is null or c2rec.grn_status < 7) and vClient = TRUE and vaccess = 'EDIT' then
--       htp.tabledata( htf.formtext( 'V2', 15, 17, c2rec.supinv ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    else
    htp.tabledata( htf.bold(c2rec.supinv),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V2', c2rec.supinv );
 --   end if;
	htp.tabledata(htf.bold(c2rec.shipping_text),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
	if (c2rec.grn_status is null or c2rec.grn_status < 7) and vClient = TRUE and vaccess = 'EDIT'  then
	   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );   --FALSE, FALSE, TRUE
          grnstatus_list( 'V9_1', c2rec.grn_status, TRUE, TRUE );
       htp.p( '</TD>' );
	else 
    htp.tabledata( htf.formhidden( 'V9_1', c2rec.grn_status ) || htf.bold(c2rec.grn_status),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V9_1', c2rec.grn_status );
    end if;
    htp.tabledata( htf.formhidden( 'V9', c2rec.grn ) || htf.bold(c2rec.grn),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V9', c2rec.grn );
    htp.tabledata( htf.formtext( 'V3_1',10,20,vld(c2rec.deliveryno,c2rec.recno,'V3_1',trim(to_char(c2rec.amount,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'GSTCODES', 'V3_1_1', c2rec.gstc_gstcode, TRUE, FALSE, FALSE, isedit=>TRUE );
     htp.p( '</TD>' );
    htp.tabledata( htf.formtext( 'V3_2',10,20,vld(c2rec.deliveryno,c2rec.recno,'V3_2',trim(to_char(c2rec.gst,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V3',10,20,vld(c2rec.deliveryno,c2rec.recno,'V3',trim(to_char(c2rec.tamount,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V4',10,12,vld(c2rec.deliveryno,c2rec.recno,'V4',c2rec.qty)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V5',5,8,vld(c2rec.deliveryno,c2rec.recno,'V5',c2rec.unit_unitused)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V6',10,12,vld(c2rec.deliveryno,c2rec.recno,'V6',c2rec.code)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formhidden( 'V6', c2rec.code ) || htf.bold(c2rec.code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.formhidden( 'V6', c2rec.code );
    htp.tabledata( htf.formtext( 'V7',20,1000,nvl(vld(c2rec.deliveryno,c2rec.recno,'V7',c2rec.description),c2rec.description)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( nvl(vld(c2rec.deliveryno,c2rec.recno,'ERRMSG','&nbsp;'),'Success'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
  end loop;
 htp.tableclose;
 htp.nl;
 if not foundrec then htp.init; po_item_no_maintain( surl, p1, p2, rid, vrecctr, 'No Records found that Satisfy this Query' ); return; end if;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
  if c3rec.cnt > 0 then 
   htp.tabledata( htf.formsubmit( 'ACTION', 'Change GRN Status from 0 to 7' ) || htf.formclose );
  end if;
   htp.tabledata( htf.formsubmit( null, 'Modify Data' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'POITEMNO_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 || '-' || 'P2:' || p2);
end poitemno_maintain_mass;

procedure accept_poitemno_maintain_mass(surl in varchar2, p1 in varchar2, p2 in varchar2, rid in varchar2, vrecctr in varchar2, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v9_1 in out GLBX.MYARRAY, v9 in GLBX.MYARRAY, v3_1 in GLBX.MYARRAY, v3_1_1 in GLBX.MYARRAY,v3_2 in GLBX.MYARRAY,v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY, v1i in GLBX.MYARRAY, v8i in GLBX.MYARRAY, action in varchar2 default null  )
as

 cursor c3(lname varchar2, lcode varchar2) is select * from strang.lov where lov_name = lname and code = lcode;
 cursor c5( cde varchar2 ) is select to_number(cola) cola, colb from strang.lov where lov_name = 'GSTCODES' and code = cde;

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c5rec		c5%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 errmsg		GLBX.MYARRAY;
 errfound	boolean;
 dupl_values	boolean;
 errunit	char(1);
 msg		varchar2(1000);
 nmb1_1		STRANG.POS.AMOUNT%TYPE;
 nmb1_2		STRANG.POS.GST%TYPE;
 nmb1		STRANG.POS.TAMOUNT%TYPE;
 nmb2		STRANG.POS.QTY%TYPE;
 nmb3		STRANG.POS.GRN%TYPE;
 oinv		STRANG.POS.INVENTORYNO%TYPE;
 dupctr_a	integer;
 dupctr_b	integer;
 tmp		number;
 tmp2		number;
 vmsg   varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_ENTRY_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 vaccess := data_access( owner_id, 'PO_ITEM_NO_MAINTAIN', null );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 errfound := FALSE;

 for j in pk2.first..pk2.last loop
  errmsg(j) := NULL;
  if pk2(j) is not null
   then
    -- Validate Numbers Entered
    begin
      nmb1_1 := to_number( replace(replace(v3_1(j),',',''),'$','') );
    exception when others then
     begin
       nmb1_1 := to_number( v3_1(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Net Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    begin
      nmb1_2 := to_number( replace(replace(v3_2(j),',',''),'$','') );
    exception when others then
     begin
       nmb1_2 := to_number( v3_2(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid GST Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    begin
      nmb1 := to_number( replace(replace(v3(j),',',''),'$','') );
    exception when others then
     begin
       nmb1 := to_number( v3(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Total Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    begin
      nmb2 := to_number( v4(j) );
      if nmb2 < 0
       then
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Quantity cannot be less than 0.';
        nmb2 := NULL;
      end if;
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Quantity Entered.';
       nmb2 := NULL;
    end;
    begin
      nmb2 := to_number( v1i(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid SAP Delno Entered.';
       nmb2 := NULL;
    end;
    begin
      nmb2 := to_number( v8i(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid SAP Line Entered.';
       nmb2 := NULL;
    end;
    begin
      nmb3 := to_number( v9(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid GRN Entered.';
       nmb3 := NULL;
    end;

    if action = 'Change GRN Status from 0 to 7' and v9_1(j) = '0' -- and v9_1(1) = '7'
    then
       v9_1(j) := '7';
    end if;
    oinv := trim( v6(j) );

    if v1(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Purchase Order cannot be blank.';
    end if;

    if v2(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Supplier Invoice cannot be blank.';
    end if;

    -- Check Unit
    c3rec.code := NULL;
    errunit := 'F';
    if v5(j) is not null
     then
      open c3( 'UNITS', upper(v5(j)));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Incorrect Unit.';
        errunit := 'T';
       else
        close c3;
      end if;
    end if;

    -- Check and calculate gst and totalamount

    if nmb1_1 is not null
     then
     if nmb1_2 is null and nmb1 is null
     then
      open c5(v3_1_1(j));
      fetch c5 into c5rec;
      close c5;
      if to_number(c5rec.cola) = 0
      then
        nmb1_2 := 0 ;
        nmb1 := nmb1_1 ;
      else
        if c5rec.colb = 'Inc GST' then
          nmb1_2 := c5rec.cola;
          nmb1 := nmb1_1;
          nmb1_1 := ((100 * nmb1) / (100 + nvl(nmb1_2,0) ));
          nmb1_2 := nmb1_1 * (c5rec.cola/100);
        else
          nmb1_2 := c5rec.cola;
          nmb1 := nmb1_1 * (1 + (nmb1_2/100));
          nmb1_2 := nmb1_1 * (c5rec.cola/100);
        end if;
      end if;
     end if;
    end if;

    -- Update Purchase Order
    update strang.pos
     set
      sap_delno = nvl(strang.f_sap_format( v1i(j), 'DELIVERYNO' ),null),
      amount = nvl(nmb1_1,amount),
      gstc_gstcode = nvl(v3_1_1(j),gstc_gstcode),
      gst = nvl(nmb1_2,gst),
      tamount = nvl(nmb1,tamount),
      qty = nvl(to_number(v4(j)),qty),
      unit_unitused = decode(errunit,'F',upper(v5(j)),'T',unit_unitused),
      inventoryno = nvl(oinv,inventoryno),
   --   supinv = case when nvl(grn_status,0) <= 7 then v2(j) else supinv end,
      grn_status = case when nvl(grn_status,0) <= 7 and nvl(V9_1(j),0) <= 7 and V9_1(j) is not null then to_number(V9_1(j)) else grn_status end
    where
     deliveryno = pk2(j) and
     recno = pk3(j);

--update strang.pos
-- set grn_status = 8
--, off_site_receipt = sysdate
--where po = '4500069819';
--commit;

    -- Check if Inventory Exists
    if oinv is not null
     then

      -- Check if multiple inventory numbers have been entered, and if
      dupl_values := FALSE;
      dupctr_a := 0;
      dupctr_b := 0;
      for k in pk2.first..pk2.last loop
       if oinv is not null and trim(v6(k)) is not null and oinv = trim(v6(k))
        then
         -- Check if the Description is different and not null
         if trim(v7(j)) is not null and trim(v7(k)) is not null and trim(v7(j)) <> trim(v7(k))
          then
           dupctr_a := dupctr_a + 1;
         end if;
       end if;
      end loop;

      if dupctr_a > 0
       then
        errmsg(j) := errmsg(j) || ' ' || 'Different descriptions exist for the same Inventory Number.';
        dupl_values := TRUE;
      end if;

      if dupl_values
       then
        --
        errfound := TRUE;

       else
        open c3('INVENT',v6(j));
        fetch c3 into c3rec;
        if c3%FOUND
         then
          close c3;
          update strang.lov
           set
            description = nvl(v7(j),description)
          where
           lov_name = 'INVENT' and
           code = oinv;
         else
          close c3;
          insert into strang.lov(lov_name,code,description) values ('INVENT',v6(j),v7(j));
        end if;
      end if;

    end if;
   end if;
 end loop;
 commit;
 if errfound then msg := 'Errors found Modifying Data. Please Review each Entry Record to see what the Error was.'; end if;

 poitemno_maintain_mass(surl, p1, p2, rid,vrecctr, pk2, pk3, v1, v2, v9_1, v9, v3_1 , v3_1_1 ,v3_2 ,v3, v4, v5, v6, v7, v8, v1i,v8i,errmsg, msg );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_POITEMNO_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 || '-' || 'P2:' || p2);
end accept_poitemno_maintain_mass;

-- XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  below added 090107

procedure container_maintain(surl in varchar2, strt in varchar2, strt2 in varchar2 default null, rid in varchar2, vrecctr in varchar2, msg in varchar2 default null )
as

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.CONTAINER_MAINTAIN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'CONTAINER_MAINTAIN', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Choose Container/Connote/MAWB Number (Leave seal blank for Connote or MAWB',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'Container/Connote/MAWB Maintain') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 htp.formopen( 'strangp.container_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'PK1', NULL );
 htp.formhidden( 'PK2', NULL );
 htp.formhidden( 'PK3', NULL );
 htp.formhidden( 'V1', NULL );
 htp.formhidden( 'V2', NULL );
 htp.formhidden( 'V3', NULL );
 htp.formhidden( 'V4', NULL );
 htp.formhidden( 'V5', NULL );
 htp.formhidden( 'V6', NULL );
 htp.formhidden( 'V7', NULL );
 htp.formhidden( 'V8', NULL );
-- htp.formhidden( 'V1i', NULL ); removed by DB
 htp.formhidden( 'V8i', NULL );
 htp.formhidden( 'V8ii', NULL );
 htp.formhidden( 'V9i', NULL );
 htp.formhidden( 'V9', NULL );
 htp.formhidden( 'V10', NULL );
 htp.formhidden( 'V11', NULL ); -- Added by DB
 htp.formhidden( 'V12', NULL ); -- Adeed by DB
 htp.formhidden( 'ERRMSG', NULL );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
     htp.tabledata( htf.bold('Container / Connote / MAWB'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.formtext('P1',20,30, strt),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Seal (Leave Blank for Break Bulk or Airfreight'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.formtext('P2',20,30, strt2),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.formsubmit( null, 'Submit' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'CONTAINER_MAINTAIN',null,owner_id,errmsg=>sqlerrm,extdet=>'Strt:' || strt);
end container_maintain;

-- START HERE!


procedure container_maintain_mass(surl in varchar2, p1 in varchar2, p2 in varchar2, rid in varchar2, vrecctr in varchar2, pk1 in GLBX.MYARRAY, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY
                            , v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY
                            , v8i in GLBX.MYARRAY, v8ii in GLBX.MYARRAY, v9 in GLBX.MYARRAY, v9i in GLBX.MYARRAY, v10 in GLBX.MYARRAY, v11 in GLBX.MYARRAY, v12 in GLBX.MYARRAY, errmsg in GLBX.MYARRAY, msg in varchar2 default null )
as

 cursor c2(container varchar2, seal varchar2) is
  select /*+ ALL_ROWS */ distinct dr.movement_no,dr.camov_seal, p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty
       , p.po, p.po_item_no, p.supinv, p.amount, p.tamount, p.qty, p.unit_unitused,t.cola tunit
       , i.code,  i.description, i.cola cola, p.state, p.ahecc, p.delivery_charge, p.ctry_countrycode, i.coli,p.tariff_group, p.tariff_category
  from strang.lov i, strang.pos p, strang.detailrs dr, strang.lov t
  where dr.movement_no = container and
        nvl(dr.camov_seal,'|') = nvl(seal,'|') and
        dr.deliveryno = p.deliveryno and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
        t.lov_name = 'TARIFF' and
        t.code = i.cola
 union all
  select /*+ ALL_ROWS */ distinct dr.movement_no,dr.camov_seal, p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty
       , p.po, p.po_item_no, p.supinv, p.amount, p.tamount, p.qty, p.unit_unitused, null tunit
       , i.code,  i.description, i.cola cola, p.state, p.ahecc, p.delivery_charge, p.ctry_countrycode, i.coli, p.tariff_group, p.tariff_category
  from strang.lov i, strang.pos p, strang.detailrs dr
  where  dr.movement_no = container and
        nvl(dr.camov_seal,'|') = nvl(seal,'|') and
        dr.deliveryno = p.deliveryno and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
    (i.cola is null or (i.cola is not null and not exists (select 'x' from strang.lov t where t.lov_name = 'TARIFF' and t.code = i.cola)))
 union all
  select /*+ ALL_ROWS */ distinct dr.movement_no,dr.camov_seal, p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty
       , p.po, p.po_item_no, p.supinv, p.amount, p.tamount, p.qty, p.unit_unitused, null tunit
       , p.inventoryno code, null description, null cola, p.state, p.ahecc, p.delivery_charge, p.ctry_countrycode, null, p.tariff_group, p.tariff_category
  from strang.pos p, strang.detailrs dr
  where  dr.movement_no = container and
        nvl(dr.camov_seal,'|') = nvl(seal,'|') and
        dr.deliveryno = p.deliveryno and
        (p.inventoryno is null or (p.inventoryno is not null and not exists (select 'x' from strang.lov i where i.lov_name = 'INVENT' and i.code = p.inventoryno)))
order by 1,2,3,4;

  cursor c3(mov varchar2, seal varchar2) is
    select 'x' 
      from strang.pos p
     where exists (select 'x'
                     from strang.detailrs dr
                    where dr.movement_no = mov
                      and nvl(dr.camov_seal,'|') = nvl(seal,'|') 
                      and dr.deliveryno = p.deliveryno)
     and not exists (select 'x'
                       from strang.pos p2  
                      where p.po = p2.po
                        and p.deliveryno = p2.deliveryno
                        and p.recno = p2.recno
                        and p.po_item_no = p2.po_item_no
                        and (( nvl(p2.ctry_countrycode,'XX') = 'XX') or ( p2.ctry_countrycode = 'AU' and  p2.state is null) or (p2.ahecc is null)));

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 foundrec	boolean;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);
 container	varchar2(40);
 seal		varchar2(15);
 vFO_background constant varchar2(30) := 'bgcolor="#EECCDD"';
 vQLD_background constant varchar2(30) := 'bgcolor="#CCDDEE"';
 vTAS_background constant varchar2(30) := 'bgcolor="#d6ea6f"';
 vNSW_background constant varchar2(30) := 'bgcolor="#DDCCEE';
 vSA_background constant varchar2(30) := 'bgcolor="#CCEEDD"';
 vVIC_background constant varchar2(30) := 'bgcolor="#DCE7DE`"';
 vWA_background constant varchar2(30) := 'bgcolor="#D5F4CA"';
 vACT_background constant varchar2(30) := 'bgcolor="#E9CAF4"';
 vNT_background constant varchar2(30) := 'bgcolor="#cfd0ce"';
 vQUERY_CELL_BACKGROUND varchar2(30);
 vSQL varchar2(100);

 function vld( p_k1 in varchar2, p_k2 in varchar2, p_k3 in varchar2, fld in varchar2, defval in varchar2 )
  return varchar2
 as
 begin
  for j in pk1.first..pk1.last loop
   if pk1(j) = p_k1 and pk2(j) = p_k2 and pk3(j) = p_k3
    then
     if fld = 'ERRMSG'
      then
       return( errmsg(j) );
     elsif fld = 'V1'
      then
       return( strang.f_sap_format(v1(j),'PO') );
     elsif fld = 'V2'
      then
       return( v2(j) );
     elsif fld = 'V3'
      then
       return( v3(j) );
     elsif fld = 'V4'
      then
       return( v4(j) );
     elsif fld = 'V5'
      then
       return( v5(j) );
     elsif fld = 'V6'
      then
       return( strang.f_sap_format(v6(j),'INVENTORYNO') );
     elsif fld = 'V7'
      then
       return( v7(j) );
     elsif fld = 'V8'
      then
       return( v8(j) );
--     elsif fld = 'V1i'  -- removed by DB 25/11/22
--      then
--       return( strang.f_sap_format(v1i(j),'DELIVERYNO') );
     elsif fld = 'V8i'
      then
       return( v8i(j) );
     elsif fld = 'v8ii'
      then
       return( v8ii(j) );
     elsif fld = 'V9i'
      then
       return( v9i(j) );
     elsif fld = 'V9'
      then
       return( v9(j) );
     elsif fld = 'V10'
      then
       return( v10(j) );
     elsif fld = 'V11' -- Added by DB 25/11/22
      then
       return( v11(j) );
     elsif fld = 'V12' -- Added by DB 25/11/22
      then
       return( v12(j) );
     end if;
   end if;
  end loop;
  return( defval );
 end vld;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.CONTAINER_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 begin container := trim(p1); exception when others then container_maintain( surl, p1, p2, rid, vrecctr, 'Container is not a Valid Number' ); return; end;
 begin seal := trim(p2); exception when others then container_maintain( surl, p1, p2, rid, vrecctr, 'Seal is not a Valid Number' ); return; end;
 if container is null then container_maintain( surl, p1, p2, rid, vrecctr, 'Container is Invalid' ); return; end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'CONTAINER_MAINTAIN', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Movement Maintain Mass Edit',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'Movement Maintain Mass Edit') );

htp.p('<style>
#V12{
  width:80px;   
 }
</style>');

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.bold( 'Movement: ' || container || '&nbsp;&nbsp;&nbsp;' || 'Seal' || ':' || nvl(seal,'NONE'));
 htp.nl;

 htp.formopen( 'strangp.accept_container_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'P1', p1 );
 htp.formhidden( 'P2', p2 );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
    htp.tabledata( htf.bold('Movement'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Delivery No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('PO RecNo'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.bold('OTML Delno'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"'); removed by DB 25/11/22
    htp.tabledata( htf.bold('OTML Qty'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Purchase Order'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('PO Item'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Supplier Invoice'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Net Amount'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Total Amt Orig Curr'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Delivery Charge'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Quantity'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Corrected Unit'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Old Unit'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Inventory Number'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Description'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('PNG Tariff'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');  -- Amended by DB
    htp.tabledata( htf.bold('AHECC'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Tariff Group'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Tariff Category'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('AU Tariff'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');  -- Added by DB
    htp.tabledata( htf.bold('State'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Country'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"'); -- Added by DB
    htp.tabledata( htf.bold('Data Entry Validation Message'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  foundrec := FALSE;
  for c2rec in c2(container, seal) loop
   foundrec := TRUE;
   htp.tablerowopen;
    htp.tabledata( htf.formhidden( 'PK1', c2rec.movement_no ) || htf.bold(c2rec.movement_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'PK2', c2rec.deliveryno ) || htf.bold(c2rec.deliveryno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'PK3', c2rec.recno ) || htf.bold(c2rec.recno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formtext( 'V1i',10,15,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V1i',c2rec.sap_delno)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); Removed by DB
--    htp.tabledata( htf.formtext( 'V8i',8,10,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V8i',c2rec.sap_delno_qty)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formtext( 'V1',12,15,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V1',c2rec.po)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formtext( 'V8ii',5,10,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V8ii',c2rec.po_item_no)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formtext( 'V2',8,15,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V2',c2rec.supinv)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'V8i', c2rec.sap_delno_qty ) || htf.bold(c2rec.sap_delno_qty),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'V1', c2rec.po ) || htf.bold(c2rec.po),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'V8ii', c2rec.po_item_no ) || htf.bold(c2rec.po_item_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'V2', c2rec.supinv ) || htf.bold(c2rec.supinv),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold(to_char(c2rec.amount,LNGS.MONEY_FORMAT)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V3',10,20,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V3',trim(to_char(c2rec.tamount,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V10',5,10,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V10',trim(to_char(c2rec.delivery_charge,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V4',5,10,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V4',c2rec.qty)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V5',5,8,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V5',c2rec.tunit)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( nvl(c2rec.unit_unitused,'&nbsp;'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V6',12,100,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V6',c2rec.code)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V7',20,1000,nvl(vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V7',c2rec.description),c2rec.description)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V8',11,20,nvl(vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V8',c2rec.cola),c2rec.cola)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    -- htp.tabledata( htf.formtext( 'V9i',11,20,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V9i',strang.f_ahecc(c2rec.ahecc,c2rec.state,c2rec.tamount,c2rec.delivery_charge,container,seal))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    --htp.tabledata( htf.formtext( 'V9i',11,20,strang.f_ahecc(c2rec.ahecc,c2rec.state,c2rec.tamount,c2rec.delivery_charge,container,seal)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V9i',11,20,c2rec.ahecc),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( c2rec.tariff_group ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');  -- tariff group
    if c2rec.tariff_category = 'FO' then  
      vQUERY_CELL_BACKGROUND:= vFO_background;
      htp.tabledata( c2rec.tariff_category ,cattributes=>vQUERY_CELL_BACKGROUND  || ' ALIGN="LEFT"'); 
    elsif c2rec.tariff_category = 'QLD' then
      vQUERY_CELL_BACKGROUND:= vQLD_background;
      htp.tabledata( c2rec.tariff_category ,cattributes=>vQUERY_CELL_BACKGROUND  || ' ALIGN="LEFT"'); 
    elsif c2rec.tariff_category = 'NSW' then
      vQUERY_CELL_BACKGROUND:= vNSW_background;
      htp.tabledata( c2rec.tariff_category ,cattributes=>vQUERY_CELL_BACKGROUND  || ' ALIGN="LEFT"');   
    elsif c2rec.tariff_category = 'SA' then
      vQUERY_CELL_BACKGROUND:= vSA_background;
      htp.tabledata( c2rec.tariff_category ,cattributes=>vQUERY_CELL_BACKGROUND  || ' ALIGN="LEFT"'); 
    elsif c2rec.tariff_category = 'WA' then
      vQUERY_CELL_BACKGROUND:= vWA_background;
      htp.tabledata( c2rec.tariff_category ,cattributes=>vQUERY_CELL_BACKGROUND  || ' ALIGN="LEFT"');  
    elsif c2rec.tariff_category = 'TAS' then
      vQUERY_CELL_BACKGROUND:= vTAS_background;
      htp.tabledata( c2rec.tariff_category ,cattributes=>vQUERY_CELL_BACKGROUND  || ' ALIGN="LEFT"');   
    elsif c2rec.tariff_category = 'NT' then
      vQUERY_CELL_BACKGROUND:= vNT_background;
      htp.tabledata( c2rec.tariff_category ,cattributes=>vQUERY_CELL_BACKGROUND  || ' ALIGN="LEFT"');   
    elsif c2rec.tariff_category = 'VIC' then
      vQUERY_CELL_BACKGROUND:= vVIC_background;
      htp.tabledata( c2rec.tariff_category ,cattributes=>vQUERY_CELL_BACKGROUND  || ' ALIGN="LEFT"');  
    elsif c2rec.tariff_category = 'ACT' then
      vQUERY_CELL_BACKGROUND:= vACT_background;
      htp.tabledata( c2rec.tariff_category ,cattributes=>vQUERY_CELL_BACKGROUND  || ' ALIGN="LEFT"');    
    else  
       htp.tabledata( c2rec.tariff_category ,cattributes=>glbx.QUERY_CELL_BACKGROUND   || ' ALIGN="LEFT"');  -- tariff category
    end if;
    vQUERY_CELL_BACKGROUND := glbx.QUERY_CELL_BACKGROUND; 
    htp.tabledata( htf.formtext( 'V11',11,20,nvl(vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V11',c2rec.coli),c2rec.coli)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); -- just added
   -- htp.tabledata( htf.formtext( 'V9',3,8,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V9',c2rec.state)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   
    if vaccess = 'EDIT'
    then
       if (c2rec.ctry_countrycode = 'AU' AND c2rec.STATE is null) or (c2rec.ctry_countrycode <> 'AU' AND c2rec.STATE is not null) then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
          htp.p('<div style="border: 2px solid red; ">');
       lov_list( 'STATE', 'V9', vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V9',c2rec.state), FALSE, FALSE, TRUE );
          htp.p('</div>');
       htp.p( '</TD>' );
    else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
          lov_list( 'STATE', 'V9', vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V9',c2rec.state), FALSE, FALSE, TRUE );
          htp.p( '</TD>' );
       end if;
    else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'STATE', 'V9', vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V9',c2rec.state), FALSE, FALSE, TRUE, isedit=>FALSE );
       htp.p( '</TD>' );
    end if;
    
  --  htp.tabledata( htf.formtext( 'V12',3,8,vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V12',c2rec.country)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');  -- just added
    
    if vaccess = 'EDIT'
    then
     if c2rec.ctry_countrycode = 'XX' or c2rec.ctry_countrycode is null then
        htp.p( '<TD class="width80" ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
        htp.p('<div style="border: 2px solid red; ">');
        lov_list( 'UNCTYTAB', 'V12', vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V12',c2rec.ctry_countrycode), TRUE, TRUE, TRUE );
        htp.p('</div>');
        htp.p( '</TD>' );
     else
     htp.p( '<TD class="width80" ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'UNCTYTAB', 'V12', vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V12',c2rec.ctry_countrycode), TRUE, TRUE, TRUE );
     htp.p( '</TD>' );
     end if;
    else
     htp.p( '<TD class="width80" ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'UNCTYTAB', 'V12', vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'V12',c2rec.ctry_countrycode), TRUE, TRUE, TRUE, isedit=>FALSE );
     htp.p( '</TD>' );
     end if;
   
    htp.tabledata( nvl(vld(c2rec.movement_no,c2rec.deliveryno,c2rec.recno,'ERRMSG','&nbsp;'),'Success'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
  end loop;
 htp.tableclose;
 htp.nl;
 if not foundrec then htp.init; container_maintain( surl, p1, p2, rid, vrecctr, 'No Containers found that Satisfy this Query' ); return; end if;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
 htp.tablerowopen;
 htp.tabledata( htf.formsubmit( 'ACTION', 'Clear Ahecc Details' ) || htf.formclose );
 htp.tabledata( htf.formsubmit( 'ACTION', 'Generate Ahecc Details' ) || htf.formclose );
 htp.tabledata( htf.formsubmit( 'ACTION', 'Modify Data' ) || htf.formclose );
 --htp.tabledata( htf.formsubmit( null, 'Modify Data' ) || htf.formclose );
 htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
 
  open c3 (container, seal);
 fetch c3 into c3rec;
 if c3%found then 
   htp.formopen( 'download_fob_xml' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'p_movement_no', p1 );
   htp.formhidden( 'p_seal', p2 );
   htp.formhidden( 'msg', msg );
   htp.tabledata( htf.formsubmit( 'ACTION', 'Download FOB xml extract' ) || htf.formclose );
   htp.p('</TD>');
   htp.formclose;
 
 end if;
 close c3;  
 
 
 
 htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'CONTAINER_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 || '-' || 'P2:' || p2);
end container_maintain_mass;

--  %%%%%%%%%%%%%%%%%%%%%%%%% new work 190407 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

------------------------------------------------------------------------------------------------------------------------------------
procedure accept_container_maintain_mass(surl in varchar2, p1 in varchar2, p2 in varchar2, rid in varchar2, vrecctr in varchar2
                                        , pk1 in GLBX.MYARRAY, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY, v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY
                                        , v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY
                                        , v8 in GLBX.MYARRAY, v8i in GLBX.MYARRAY, v8ii in GLBX.MYARRAY, v9 in GLBX.MYARRAY
                                        , v9i in GLBX.MYARRAY, v10 in GLBX.MYARRAY, v11 in GLBX.MYARRAY, v12 in GLBX.MYARRAY, ACTION in varchar2 default null )
as

 cursor c3(lname varchar2, lcode varchar2) is select * from strang.lov where lov_name = lname and code = lcode;
 cursor c4 (v_deliveryno number, v_recno number) is
  select *
  from   strang.pos
  where  deliveryno = v_deliveryno
         and recno = v_recno
		 and rownum < 2
  FOR UPDATE;
  
 cursor c5(vcontainer varchar2, vSeal varchar2, vCountry varchar2, vState varchar2, vGroup varchar2, vTop integer) is 
 select count(distinct deliveryno||recno) vcount,
         COUNT(distinct CASE WHEN tariff_group is null THEN deliveryno||recno END) vcount_out,
         COUNT(distinct CASE WHEN tariff_group = vGroup THEN deliveryno||recno END) vcount_in,
         SUM(amount) vsum, 
        SUM(CASE WHEN tariff_group is null THEN amount end) vsum_out,
        SUM(CASE WHEN tariff_group = vGroup THEN amount end) vsum_in,
        SUM(CASE WHEN rnk <= vTop THEN amount END) vsum_cutoff, 
         COUNT(distinct CASE WHEN rnk <= vTop THEN deliveryno||recno END) vcount_cutoff 
  FROM ( SELECT p.amount, p.tamount, p.delivery_charge, p.tariff_group, p.deliveryno, p.recno
              , ROW_NUMBER() OVER (ORDER BY p.tamount asc ) rnk
           FROM strang.pos p
          WHERE EXISTS (SELECT 1 
                          FROM strang.detailrs dr
                         WHERE dr.deliveryno = p.deliveryno 
                           AND NVL(camov_seal,'x') = NVL(vseal,'x') 
                           AND dr.movement_no = vcontainer) 
            AND (p.tariff_group = vgroup or p.tariff_group is null) 
            AND  CASE WHEN  p.ctry_countrycode NOT IN ('AU') then 'FO' else 'AU' END = CASE WHEN vCountry NOT IN ('AU') then 'FO' ELSE 'AU' END
            AND (( p.state = vState or vState is null))
            AND  p.ctry_countrycode is not null
            AND  NVL(p.ctry_countrycode, 'XX') <> 'XX'
            AND (NVL(p.amount,0)) < 2000) tmp;
   cursor c6( vbatch varchar2 ) 
   is  select count(distinct deliveryno||recno) vcount,  
         COUNT(distinct CASE WHEN tariff_group is null THEN deliveryno||recno END) vcount_out,
      --   COUNT(distinct CASE WHEN tariff_group = vGroup THEN deliveryno||recno END) vcount_in,
         max(tariff_group) max_group,
         SUM(amount) vsum, 
         SUM(CASE WHEN tariff_group is null THEN amount end) vsum_out
      --   SUM(CASE WHEN tariff_group = vGroup THEN tamount+delivery_charge end) vsum_in,
       --  SUM(CASE WHEN rnk <= vTop THEN tamount+delivery_charge END) vsum_cutoff, 
      --   COUNT(distinct CASE WHEN rnk <= vTop THEN deliveryno||recno END) vcount_cutoff 
  FROM ( SELECT amount, delivery_charge, tariff_group, deliveryno, recno
              , ROW_NUMBER() OVER (ORDER BY amount asc ) rnk
          from strang.tmp_pos_ahecc_data 
          where batch_id = vbatch ) tmp;  -- vbatch
  cursor c7( vbatch varchar2 ) 
   is  select count(distinct deliveryno||recno) vcount,  
         COUNT(distinct CASE WHEN tariff_group is null THEN deliveryno||recno END) vcount_out,
     --    COUNT(distinct CASE WHEN tariff_group = vGroup THEN deliveryno||recno END) vcount_in,
         SUM(amount) vsum, 
         max(tariff_group) max_group,
         SUM(CASE WHEN tariff_group is null THEN amount end) vsum_out
  FROM ( SELECT amount, delivery_charge, tariff_group, deliveryno, recno
              , ROW_NUMBER() OVER (ORDER BY amount asc ) rnk
          from strang.tmp_pos_ahecc_master
          where batch_id = vbatch  ) tmp;  -- vbatch
          
  cursor c8 (vcontainer varchar2, vseal varchar2 )
    is select tmp.ctry_countrycode, tmp.state, count(*) cnt, sum(amount) amount
     from (
      SELECT case when p.ctry_countrycode <> 'AU' then 'FO' else 'AU' end ctry_countrycode , p.state,     p.amount amount, p.tariff_group, p.deliveryno, p.recno
             -- , ROW_NUMBER() OVER (ORDER BY p.tamount+p.delivery_charge asc ) rnk
           FROM strang.pos p
          WHERE EXISTS (SELECT 1 
                          FROM strang.detailrs dr
                         WHERE dr.deliveryno = p.deliveryno 
                           AND NVL(camov_seal,'x') = NVL(vseal,'x') 
                           AND dr.movement_no =  vcontainer) 
            AND  p.ctry_countrycode is not null
            AND  NVL(p.ctry_countrycode, 'XX') <> 'XX'
            AND (NVL(p.amount,0)) < 2000) tmp
     where (tmp.ctry_countrycode = 'FO' AND tmp.state is null) or (tmp.ctry_countrycode = 'AU' AND tmp.state is NOT null)
     group by tmp.ctry_countrycode, tmp.state
     order by 1, 2;

  cursor c9 (vcontainer varchar2, vseal varchar2 )  
    is 
    select *
    from strang.pos p
    where EXISTS (SELECT 1 
                          FROM strang.detailrs dr
                         WHERE dr.deliveryno = p.deliveryno 
                           AND NVL(camov_seal,'x') = NVL(vseal,'x') 
                           AND dr.movement_no =  vcontainer) 
    and ((p.ctry_countrycode is null)
    or (NVL(p.ctry_countrycode, 'XX') = 'XX')
    or (p.ctry_countrycode = 'AU' and p.state is null)
    or (p.ctry_countrycode <> 'AU' and p.state is not null));

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c5rec		c5%ROWTYPE;
 c5rec_first c5%ROWTYPE;
 c6rec		c6%ROWTYPE;
 c7rec		c7%ROWTYPE;
 c9rec		c9%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 errmsg		GLBX.MYARRAY;
 errfound	boolean;
 dupl_values	boolean;
 errunit	char(1);
 errstate	char(1);
 msg		varchar2(1000);
 nmb1		STRANG.POS.TAMOUNT%TYPE;
 nmb2		STRANG.POS.QTY%TYPE;
 nmb3		STRANG.POS.DELIVERY_CHARGE%TYPE;
 oinv		STRANG.POS.INVENTORYNO%TYPE;
 vahecc		STRANG.POS.AHECC%TYPE;
 dupctr_a	integer;
 dupctr_b	integer;
 tmp		number;
 tmp2		number;
 fo_cnt     integer := 1;
 qld_cnt    integer := 1;
 wa_cnt     integer := 1;
 nsw_cnt    integer := 1;
 tas_cnt    integer := 1;
 sa_cnt     integer := 1;
 vic_cnt    integer := 1;
 grp_cnt    integer := 1;
 v_cumm_amt number(15,2);
 v_group    integer;
 v_batch_id integer;
 v_counter  integer;
 v_count_out integer;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_CONTAINER_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 vaccess := data_access( owner_id, 'CONTAINER_MAINTAIN', null );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 errfound := FALSE;

 for j in pk1.first..pk1.last loop
  errmsg(j) := NULL;
  if pk1(j) is not null
   then
    -- Validate Numbers Entered
    begin
      nmb1 := to_number( replace(replace(v3(j),',',''),'$','') );
    exception when others then
     begin
       nmb1 := to_number( v3(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Total Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    if v10(j) is not null
    then
      begin
        nmb3 := to_number( replace(replace(v10(j),',',''),'$','') );
      exception when others then
       begin
         nmb3 := to_number( v10(j), LNGS.MONEY_FORMAT );
        exception when others then
         errfound := TRUE;
         errmsg(j) := errmsg(j) || ' ' || 'Invalid Delivery Charge Entered.';
         nmb3 := NULL;
       end;
      end;
    end if;
    begin
      nmb2 := to_number( v4(j) );
      if nmb2 < 0.001
       then
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Quantity cannot be less than 0.001';
        nmb2 := NULL;
      end if;
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Quantity Entered.';
       nmb2 := NULL;
    end;
--    begin
--      nmb2 := to_number( v1i(j) );
--      exception when others then
--       errfound := TRUE;
--       errmsg(j) := errmsg(j) || ' ' || 'Invalid SAP Delno Entered.';
--       nmb2 := NULL;
--    end;
    begin
      nmb2 := to_number( v8i(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid SAP Line Entered.';
       nmb2 := NULL;
    end;
    begin
      nmb2 := to_number( v8ii(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid PO Item Entered.';
       nmb2 := NULL;
    end;

    oinv := trim( v6(j) );

    if v1(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Purchase Order cannot be blank.';
    end if;

    if v2(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Supplier Invoice cannot be blank.';
    end if;

    -- Check Unit
    c3rec.code := NULL;
    errunit := 'F';
    if v5(j) is not null
     then
      open c3( 'UNITS', upper(v5(j)));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Incorrect Current Unit.';
        errunit := 'T';
       else
        close c3;
      end if;
    end if;

    -- Check State
    c3rec.code := NULL;
    errstate := 'F';
    if v9(j) is not null
     then
      open c3( 'STATE', upper(v9(j)));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'State should be FOR, NSW, QLD, VIC, SA, NT, WA, ACT';
        errstate := 'T';
       else
        close c3;
      end if;
    end if;

    update strang.pos
     set
--      sap_delno = nvl(strang.f_sap_format(v1i(j),'DELIVERYNO'),sap_delno),
--      sap_delno_qty = nvl(v8i(j),sap_delno_qty),
--      supinv = nvl(v2(j),supinv),
--      po = nvl(strang.f_sap_format(v1(j),'PO'),po),
--      po_item_no = nvl(v8ii(j),po_item_no),
      tamount = nvl(nmb1,tamount),
      qty = nvl(V4(j),qty),
      unit_unitused = decode(errunit,'F',upper(v5(j)),'T',unit_unitused),
      inventoryno = nvl(strang.f_sap_format(oinv,'INVENTORYNO'),inventoryno),
      state = decode(errstate,'F',upper(v9(j)),'T',state),
      ahecc = case when v9i(j) is not null and  v11(j) is null then v11(j)
                   when v9i(j) is null and v11(j) is not null then  v11(j)
                   else ahecc end,
--      ahecc = nvl(v9i(j),ahecc), --strang.f_ahecc(v9i(j),decode(errstate,'F',upper(v9(j)),'T',state),nvl(nmb1,tamount),nmb3,p1,p2)  , --nvl(v9i(j),ahecc),
--      ahecc = vahecc,
      delivery_charge = nmb3,  --v10(j)
      ctry_countrycode = v12(j)
    where
     deliveryno = pk2(j) and
     recno = pk3(j);

--	open c4(pk2(j), pk3(j));
--	fetch c4 into c4rec;
--	if c4%FOUND
--	 then
--	  vahecc := strang.f_ahecc(v9i(j),c4rec.state,nvl(nmb1,c4rec.tamount),nmb3,p1,p2);
--	  update strang.pos
--	  set    ahecc = vahecc
--	  where  current of c4;
--	end if;
--	close c4;

    -- Update Purchase Order Quantities for new Form 15  19-Apr-07 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    if v5(j) = 'KG' or v5(j) = 'TONNE'
    then

     if v5(j) = 'KG'
       then
        tmp2 := null;
        select sum(nvl(partweight,0)) into tmp2 from strang.detailrs where deliveryno=pk2(j);
        select count('x') into tmp from strang.pos where deliveryno = pk2(j);
        tmp2 := round(tmp2/tmp,0);
        if tmp2 < 1
         then
          tmp2 := 1;
        end if;
     elsif v5(j) = 'TONNE'
      then
        tmp2 := null;
        select sum(nvl(partweight,0)) into tmp2 from strang.detailrs where deliveryno=pk2(j);
        select count('x') into tmp from strang.pos where deliveryno = pk2(j);
        tmp2 := round((tmp2/tmp)/1000,3);
        if tmp2 < 0.001
         then
         tmp2 := 0.001;
        end if;

     end if;
     update strang.pos
      set
      qty = tmp2
     where
      deliveryno = pk2(j) and
      recno = pk3(j);
    end if;


    -- Check if Inventory Exists
    if oinv is not null
     then

      -- Check if multiple inventory numbers have been entered, and if
      dupl_values := FALSE;
      dupctr_a := 0;
      dupctr_b := 0;
      for k in pk1.first..pk1.last loop
       if oinv is not null and trim(v6(k)) is not null and oinv = trim(v6(k))
        then
         -- Check if the Description is different and not null
         if trim(v7(j)) is not null and trim(v7(k)) is not null and trim(v7(j)) <> trim(v7(k))
          then
           dupctr_a := dupctr_a + 1;
         end if;
         -- Check if the Tariff number is different and not null
         if trim(v8(j)) is not null and trim(v8(k)) is not null and trim(v8(j)) <> trim(v8(k))
          then
           dupctr_b := dupctr_b + 1;
         end if;
       end if;
      end loop;

      if dupctr_a > 0
       then
        errmsg(j) := errmsg(j) || ' ' || 'Different descriptions exist for the same Inventory Number.';
        dupl_values := TRUE;
      end if;

      if dupctr_b > 0
       then
        errmsg(j) := errmsg(j) || ' ' || 'Different Tariff Numbers exist for the same Inventory Number.';
        dupl_values := TRUE;
      end if;

      if dupl_values
       then
        --
        errfound := TRUE;

       else
        open c3('INVENT',v6(j));
        fetch c3 into c3rec;
        if c3%FOUND
         then
          close c3;
          update strang.lov
           set
            description = nvl(v7(j),description)
          where
           lov_name = 'INVENT' and
           code = oinv;
         else
          close c3;
          insert into strang.lov(lov_name,code,description,cola) values ('INVENT',v6(j),v7(j),v8(j));
        end if;
      end if;

      -- Check if PNG Tariff Exists
      if v8(j) is null
       then
        null;
       else
        open c3('TARIFF',v8(j));
        fetch c3 into c3rec;
        if c3%FOUND
         then
          close c3;
          update strang.lov
           set
            cola = v8(j)
          where
           lov_name = 'INVENT' and
           code = oinv;
         else
          close c3;
          errfound := TRUE;
          errmsg(j) := errmsg(j) || ' ' || 'Tariff value not found - ' || htf.anchor2( 'strangp.accept_lov?surl=' || surl || '&parm=TARIFF&SRC=&LRANGE=&P0=&P1=&P2=&P3=&P4=&P5=&ACTION=' || replace(LNGS.STR_TXT_357,' ','+'),'Insert New Tariff.', ctarget=>'INSWIND');
        end if;
      end if;
      
            
      -- Check if AU Tariff Exists
      if v11(j) is null
       then
         update strang.lov
           set
            coli = v11(j)
          where
           lov_name = 'INVENT' and
           code = oinv;
       else
        open c3('AU_TARIFF',v11(j));
        fetch c3 into c3rec;
        if c3%FOUND
         then
          close c3;
          update strang.lov
           set
            coli = v11(j)
          where
           lov_name = 'INVENT' and
           code = oinv;
         else
          close c3;
          errfound := TRUE;
          errmsg(j) := errmsg(j) || ' ' || 'AU Tariff value not found - ' || htf.anchor2( 'strangp.accept_lov?surl=' || surl || '&parm=AU_TARIFF&SRC=&LRANGE=&P0=&P1=&P2=&P3=&P4=&P5=&ACTION=' || replace(LNGS.STR_TXT_357,' ','+'),'Insert New AU Tariff.', ctarget=>'INSWIND');
          update strang.pos
             set ahecc = null
           where deliveryno = pk2(j)
             and recno = pk3(j);
        end if;
      end if;
      
    end if;

  end if;
 end loop;
 
 --------------ahecc update code starts here ----------------------------
 
 ------- Start AHECC and Group Categories here.
 if upper(ACTION) = 'CLEAR AHECC DETAILS' then
    update strang.pos p
    set tariff_group = null
      , tariff_category = null
      , ahecc = null
    where exists (select 1 
                  from  strang.detailrs dr
                 where dr.deliveryno = p.deliveryno 
                   and nvl(camov_seal,'x') = nvl(p2,'x') 
                   and dr.movement_no = p1);  
  
 elsif   upper(ACTION) = 'GENERATE AHECC DETAILS' then
    
    update strang.pos p
    set tariff_group = null
      , tariff_category = null
     -- , ahecc = null
    where exists (select 1 
                  from  strang.detailrs dr
                 where dr.deliveryno = p.deliveryno 
                   and nvl(camov_seal,'x') = nvl(p2,'x') 
                   and dr.movement_no = p1);  
 
 
    open c9( p1, p2);
    fetch c9 into c9rec;
    if c9%found then
       close c9; 
       container_maintain_mass(surl, p1, p2, rid,vrecctr, pk1, pk2, pk3, v1, v2, v3, v4, v5, v6, v7, v8, v8i, v8ii, v9, v9i, v10, v11, v12, errmsg, 'Please complete ALL country and State codes' );
       return;
    end if;
    close c9;
    For r_summary in c8(p1, p2) loop
       if r_summary.cnt < 20 or r_summary.amount < 10000 then
 	      For po_rec in (select deliveryno, recno, amount, ctry_countrycode, state,  rnk1, max_group
 	                       from 
 	                          ( select p.amount, p.ctry_countrycode, p.state, p.deliveryno, p.recno
 	                                 , row_number() over (partition by p.deliveryno, p.recno order by p.amount ) rnk
 	                                 , row_number() over (partition by  p.ctry_countrycode, p.state, p.tariff_group order by p.amount NULLS LAST) rnk1
 	                                 , max(p.tariff_group) over (partition by p.ctry_countrycode, p.state) max_group
 	                              from strang.pos p,
 	                                   strang.detailrs dr,
 	                                   strang.movements m
 	                             where p.ctry_countrycode <> 'XX'
 	                               and m.movement_no = p1
 	                               and nvl(m.seal,'|') = nvl(p2,'|')
 	                               and case when p.ctry_countrycode <> 'AU' then 'FO' else 'AU' end = r_summary.ctry_countrycode
 	                               and nvl(p.state, '|') = nvl(r_summary.state,'|')
 	                               and dr.movement_no = m.movement_no
 	                               and nvl(dr.camov_seal,'|') = nvl(m.seal, '|')
                                   and dr.deliveryno = p.deliveryno 
                                   and p.ctry_countrycode is not null
                                   and NVL(p.ctry_countrycode, 'XX') <> 'XX'
                                   and (NVL(p.amount,0)) < 2000
                               ) tmp
                           where rnk = 1
                           order by  rnk1
                        ) loop
       

             open c4(po_rec.deliveryno, po_rec.recno);
	         fetch c4 into c4rec;
 	         if c4%FOUND then 
 	   
             if c4rec.amount <  2000 then
                if c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'QLD' then
                   grp_cnt := qld_cnt;
                elsif c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'WA' then
                   grp_cnt := wa_cnt;
                elsif c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'NSW' then
                   grp_cnt := nsw_cnt;
                elsif c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'TAS' then
                   grp_cnt := tas_cnt;   
                elsif c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'SA' then
                   grp_cnt := sa_cnt;  
                elsif c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'VIC' then
                   grp_cnt := vic_cnt;  
                elsif c4rec.CTRY_COUNTRYCODE <> 'AU' then   
                   grp_cnt := fo_cnt;        
                end if;
             
                open c5(p1,p2, c4rec.ctry_countrycode, c4rec.state, grp_cnt, 10);
                fetch c5 into c5rec;
                close c5;
          

             if c5rec.vcount >= 10  and  nvl(c5rec.vsum_in,0) + nvl(c4rec.amount,0) <= 10000 and c5rec.vsum_cutoff <= 10000 then 
                update strang.pos
                   set ahecc = '98090002'
                      , tariff_group = grp_cnt
                      , tariff_category = case when c4rec.CTRY_COUNTRYCODE <> 'AU' and NVL(c4rec.CTRY_COUNTRYCODE,'ZZ') <> 'XX' then 'FO'
                                           else c4rec.state end               
        	     where current of c4;
             elsif c5rec.vcount < 10 then
                null;
             elsif nvl(c5rec.vsum_in,0) + c4rec.amount > 10000 and c5rec.vcount  >= 10 then
                open c5(p1,p2, c4rec.ctry_countrycode, c4rec.state, grp_cnt +1, 10);
                fetch c5 into c5rec;
                close c5;
            
                if c5rec.vcount >= 10  and  nvl(c5rec.vsum_in,0) + nvl(c4rec.amount,0) <= 10000 and c5rec.vsum_cutoff <= 10000 then 
                   grp_cnt := grp_cnt +1;
                   
                   if c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'QLD' then
                      qld_cnt := grp_cnt;
                   elsif c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'WA' then
                      wa_cnt := grp_cnt;
                   elsif c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'NSW' then
                      nsw_cnt := grp_cnt;
                   elsif c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'TAS' then
                      tas_cnt := grp_cnt;   
                   elsif c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'SA' then
                      sa_cnt := grp_cnt;  
                   elsif c4rec.CTRY_COUNTRYCODE = 'AU' and c4rec.state = 'VIC' then
                      vic_cnt := grp_cnt;  
                   elsif c4rec.CTRY_COUNTRYCODE <> 'AU' and NVL(c4rec.CTRY_COUNTRYCODE,'ZZ') <> 'XX' then   
                      fo_cnt := grp_cnt;        
                   end if;
            
                   update strang.pos
                      set ahecc = '98090002'
                        , tariff_group = grp_cnt
                        , tariff_category = case when c4rec.ctry_countrycode <> 'AU' and nvl(c4rec.ctry_countrycode,'ZZ') <> 'XX' 
                                                    then 'FO'
                                           else c4rec.state end               
        	        where current of c4;
        	    end if;      
             end if;
          end if;
       end if;
       close c4;
     end loop;
  else 
     select websys.tariff_grouping_seq.nextval into v_batch_id from dual;
     delete from strang.tmp_pos_ahecc_data where batch_id = v_batch_id ;
     delete from strang.tmp_pos_ahecc_master where batch_id = v_batch_id ;
     v_group := 1;
     v_counter := 0;
     v_cumm_amt := 0;
     for counter in 1..500 loop
        v_group := 1;
        v_counter := 0;
        v_cumm_amt := 0;
        delete from strang.tmp_pos_ahecc_data where batch_id = v_batch_id;
        for po_rec in 
                 (SELECT p.ctry_countrycode, p.state,p.amount, p.delivery_charge, p.tariff_group, p.deliveryno, p.recno, p.rowid row_id , row_number() over (order by dbms_random.value) rnk
                    FROM strang.pos p
                   WHERE EXISTS (SELECT 1 
                                   FROM strang.detailrs dr 
                                  WHERE dr.deliveryno = p.deliveryno 
                                   AND NVL(camov_seal,'x') = NVL(p2,'x') 
                                   AND dr.movement_no = p1) 
                                --   AND (p.tariff_group = 1 or p.tariff_group is null ) 
                                   AND  CASE WHEN  p.ctry_countrycode NOT IN ('AU') then 'FO' else 'AU' END = r_summary.ctry_countrycode
                                   AND ( nvl(p.state, 'XXX') = nvl(r_summary.state,'XXX'))
                                   AND  p.ctry_countrycode is not null
                                   AND  NVL(p.ctry_countrycode, 'XX') <> 'XX'
                                   AND (NVL(p.amount,0)) < 2000
                     order by dbms_random.value ) loop
           v_cumm_amt := v_cumm_amt + nvl(po_rec.amount,0); -- + nvl(po_rec.delivery_charge,0);
           v_counter := v_counter + 1;
           if  v_cumm_amt > 10000 and v_counter > 10 then
              update strang.tmp_pos_ahecc_data
                 set tariff_group = v_group
               where batch_id = v_batch_id
                 and tariff_group is null;
              if v_cumm_amt > 10000 then     
                 v_group := v_group +1;
                 v_cumm_amt := nvl(po_rec.amount,0); -- + nvl(po_rec.delivery_charge,0);
                 v_counter := 1;
              end if;
           elsif v_cumm_amt > 10000 and v_counter <= 10 then
    
              if nvl(v_count_out,99) <= v_counter then
                 delete from strang.tmp_pos_ahecc_data where batch_id = v_batch_id;
                 v_counter := 0;
                 v_count_out := null;
                 exit;
              end if ;
              update strang.tmp_pos_ahecc_data
                 set tariff_group = 0
               where batch_id = v_batch_id
                 and tariff_group is null;
    
              v_cumm_amt := nvl(po_rec.amount,0); --  + nvl(po_rec.delivery_charge,0);
              v_counter := 1;
           end if;
           insert into strang.tmp_pos_ahecc_data values 
           (p1,p2,po_rec.ctry_countrycode,po_rec.state,po_rec.amount,po_rec.delivery_charge
           ,po_rec.deliveryno, po_rec.recno, null, po_rec.row_id, v_batch_id);  
    end loop;
        if v_cumm_amt < 10000 and v_counter >= 10 then
           update strang.tmp_pos_ahecc_data
              set tariff_group = v_group
            where batch_id = v_batch_id
              and tariff_group is null;
           v_cumm_amt:= 0;
           v_counter := 0; 
         --  v_group := null;  
 end if;

        update strang.tmp_pos_ahecc_data
           set tariff_group = null
         where batch_id = v_batch_id
           and tariff_group = 0;
 
        v_cumm_amt:= 0;
        v_counter := 0; 
      --  v_group := null; 
 
        open c6 (v_batch_id);
        fetch c6 into c6rec;
        close c6;
 
        open c7 (v_batch_id);
        fetch c7 into c7rec;
        close c7;
       -- glbx.dbg('c6rec.vcount_out '||c6rec.vcount_out);
        if (c7rec.vcount = 0) then
           delete from strang.tmp_pos_ahecc_master where batch_id = v_batch_id;
           insert into strang.tmp_pos_ahecc_master select * from strang.tmp_pos_ahecc_data where batch_id = v_batch_id;
           v_count_out := c6rec.vcount_out;
           delete from strang.tmp_pos_ahecc_data where batch_id = v_batch_id;
        elsif c6rec.vcount_out < c7rec.vcount_out and c6rec.vcount <> 0  then--                                                                                                      ( c6rec.max_group <= c7rec.max_group and c6rec.vcount_out < c7rec.vcount_out) ) then
           delete from strang.tmp_pos_ahecc_master where batch_id = v_batch_id;
           insert into strang.tmp_pos_ahecc_master select * from strang.tmp_pos_ahecc_data where batch_id = v_batch_id;
           delete from strang.tmp_pos_ahecc_data where batch_id = v_batch_id;
           v_count_out := c6rec.vcount_out;
           if v_count_out = 0 then
              exit;
           end if;
         --  delete from strang.tmp_pos_ahecc_data where batch_id = v_batch_id;
         --  v_group := 1;
        else 
           null;
           delete from strang.tmp_pos_ahecc_data where batch_id = v_batch_id;
        end if;
     
     end loop;
     
     
     update strang.pos p
        set (ahecc, tariff_group, tariff_category)
      = (select '98090002', tariff_group
              , case when b.ctry_countrycode <> 'AU' and nvl(b.ctry_countrycode,'ZZ') <> 'XX' then 'FO'
                    else b.state end 
           from strang.tmp_pos_ahecc_master b
           where b.row_id = p.rowid
            and  b.batch_id = v_batch_id
            and b.tariff_group is not null)          
      where exists (select 1
                    from strang.tmp_pos_ahecc_master a
                    where a.row_id = p.rowid
                     and a.batch_id = v_batch_id
                     and a.tariff_group is not null);
        if v_count_out <> 0 and v_group = 2 then
           open c5(p1, p2, r_summary.ctry_countrycode, r_summary.state, 1, 10 - v_count_out );
           fetch c5 into c5rec;
           close c5;
           if ( (c5rec.vcount_in - (10 - v_count_out) >= 10 ) and ( (c5rec.vsum_cutoff + c5rec.vsum_out) < 10000) ) then
              update strang.tmp_pos_ahecc_master
                 set tariff_group = 2
               where row_id in         
                 ( select tmp.row_id
                     from (select row_id, row_number() over (order by amount asc) rnk
                            from strang.tmp_pos_ahecc_master
                           where batch_id = v_batch_id  
                             and tariff_group = 1 ) tmp
                    where tmp.rnk <= (10 - v_count_out))
                and tariff_group = 1;
              update strang.tmp_pos_ahecc_master
                 set tariff_group = 2 
               where tariff_group is null;
              update strang.pos p
                 set (ahecc, tariff_group, tariff_category)
                = (select '98090002', tariff_group
                        , case when b.ctry_countrycode <> 'AU' and nvl(b.ctry_countrycode,'ZZ') <> 'XX' then 'FO'
                                 else b.state end 
                     from strang.tmp_pos_ahecc_master b
                     where b.row_id = p.rowid
                      and b.batch_id = v_batch_id
                      and b.tariff_group = 2)          
              where exists (select 1
                              from strang.tmp_pos_ahecc_master a
                             where a.row_id = p.rowid
                               and a.batch_id = v_batch_id
                               and a.tariff_group = 2);
            end if;   
         end if;
      end if;
      v_batch_id := null;
 
    end loop;
   end if;
 
 commit;
 if errfound then msg := 'Errors found Modifying Data. Please Review each Log Record to see what the Error was.'; end if;

 container_maintain_mass(surl, p1, p2, rid,vrecctr, pk1, pk2, pk3, v1, v2, v3, v4, v5, v6, v7, v8, v8i, v8ii, v9, v9i,v10, v11, v12, errmsg, msg );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_CONTAINER_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 || '-' || 'P2:' || p2);
end accept_container_maintain_mass;

-- 20170517

procedure log_maintain(surl in varchar2, strt in varchar2, rid in varchar2, vrecctr in varchar2, msg in varchar2 default null )
as

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.LOG_MAINTAIN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'LOG_MAINTAIN', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Choose Log Number',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'Log Maintain') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 htp.formopen( 'strangp.log_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'PK1', NULL );
 htp.formhidden( 'PK2', NULL );
 htp.formhidden( 'PK3', NULL );
 htp.formhidden( 'V1', NULL );
 htp.formhidden( 'V2', NULL );
 htp.formhidden( 'V3', NULL );
 htp.formhidden( 'V4', NULL );
 htp.formhidden( 'V5', NULL );
 htp.formhidden( 'V6', NULL );
 htp.formhidden( 'V7', NULL );
 htp.formhidden( 'V8', NULL );
 htp.formhidden( 'V1i', NULL );
 htp.formhidden( 'V8i', NULL );
 htp.formhidden( 'V8ii', NULL );
 htp.formhidden( 'V9i', NULL );
 htp.formhidden( 'V9', NULL );
 htp.formhidden( 'V10', NULL );
 htp.formhidden( 'ERRMSG', NULL );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
     htp.tabledata( htf.bold('Log No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.formtext('P1',20,30, strt),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.formsubmit( null, 'Submit' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'LOG_MAINTAIN',null,owner_id,errmsg=>sqlerrm,extdet=>'Strt:' || strt);
end log_maintain;

procedure log_maintain_mass(surl in varchar2, p1 in varchar2, rid in varchar2, vrecctr in varchar2, pk1 in GLBX.MYARRAY, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, 
                              v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY, v1i in GLBX.MYARRAY, v8i in GLBX.MYARRAY, v8ii in GLBX.MYARRAY, v9 in GLBX.MYARRAY, v9i in GLBX.MYARRAY,
                              v10 in GLBX.MYARRAY, errmsg in GLBX.MYARRAY, msg in varchar2 default null )                                                 
as

 cursor c2(logno varchar2) is
  select /*+ ALL_ROWS */ distinct dr.logno,dr.movement_no, p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty, p.po, p.po_item_no, p.supinv, p.tamount, p.qty, p.unit_unitused,t.cola tunit, i.code,  i.description, i.cola cola, p.state, p.ahecc, p.delivery_charge, dr.connote, dr.dispatch_date
  from strang.lov i, strang.pos p, strang.detailrs dr, strang.lov t
  where dr.logno = p1 and
        dr.deliveryno = p.deliveryno and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
        t.lov_name = 'TARIFF' and
        t.code = i.cola
 union all
  select /*+ ALL_ROWS */ distinct dr.logno,dr.movement_no, p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty, p.po, p.po_item_no, p.supinv, p.tamount, p.qty, p.unit_unitused, null tunit, i.code,  i.description, i.cola cola, p.state, p.ahecc, p.delivery_charge, dr.connote, dr.dispatch_date
  from strang.lov i, strang.pos p, strang.detailrs dr
  where  dr.logno = p1 and
        dr.deliveryno = p.deliveryno and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
    (i.cola is null or (i.cola is not null and not exists (select 'x' from strang.lov t where t.lov_name = 'TARIFF' and t.code = i.cola)))
 union all
  select /*+ ALL_ROWS */ distinct dr.logno,dr.movement_no, p.deliveryno, p.recno, p.sap_delno, p.sap_delno_qty, p.po, p.po_item_no, p.supinv, p.tamount, p.qty, p.unit_unitused, null tunit, p.inventoryno code, null description, null cola, p.state, p.ahecc, p.delivery_charge, dr.connote, dr.dispatch_date
  from strang.pos p, strang.detailrs dr
  where  dr.logno = p1 and
        dr.deliveryno = p.deliveryno and
       (p.inventoryno is null or (p.inventoryno is not null and not exists (select 'x' from strang.lov i where i.lov_name = 'INVENT' and i.code = p.inventoryno)))
order by 1,2,3,4;

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 foundrec	boolean;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);
 logno		varchar2(15);

 function vld( p_k1 in varchar2, p_k2 in varchar2, p_k3 in varchar2, fld in varchar2, defval in varchar2 )
  return varchar2
 as
 begin
  for j in pk1.first..pk1.last loop
   if pk1(j) = p_k1 and pk2(j) = p_k2 and pk3(j) = p_k3
    then
     if fld = 'ERRMSG'
      then
       return( errmsg(j) );
     elsif fld = 'V1'
      then
       return( strang.f_sap_format(v1(j),'PO') );
     elsif fld = 'V2'
      then
       return( v2(j) );
     elsif fld = 'V3'
      then
       return( v3(j) );
     elsif fld = 'V4'
      then
       return( v4(j) );
     elsif fld = 'V5'
      then
       return( v5(j) );
     elsif fld = 'V6'
      then
       return( strang.f_sap_format(v6(j),'INVENTORYNO') );
     elsif fld = 'V7'
      then
       return( v7(j) );
     elsif fld = 'V8'
      then
       return( v8(j) );
     elsif fld = 'V1i'
      then
       return( strang.f_sap_format(v1i(j),'DELIVERYNO') );
     elsif fld = 'V8i'
      then
       return( v8i(j) );
     elsif fld = 'v8ii'
      then
       return( v8ii(j) );
     elsif fld = 'V9i'
      then
       return( v9i(j) );
     elsif fld = 'V9'
      then
       return( v9(j) );
     elsif fld = 'V10'
      then
       return( v10(j) );
     end if;
   end if;
  end loop;
  return( defval );
 end vld;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.LOG_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 begin logno := p1; exception when others then log_maintain( surl, p1, rid, vrecctr, 'Log is not a Valid Number' ); return; end;
 if logno = ' ' then log_maintain( surl, p1, rid, vrecctr, 'Log number is Invalid' ); return; end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'LOG_MAINTAIN', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Log Maintain Mass Edit',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'Log Maintain Mass Edit') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.bold( 'Log Number' || ':' || logno );
 htp.nl;

 htp.formopen( 'strangp.accept_log_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'P1', p1 );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
    htp.tabledata( htf.bold('Log No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Delivery No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('PO RecNo'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('OTML Delno'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');  -- Removed by David Banjo
    htp.tabledata( htf.bold('OTML Qty'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Purchase Order'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('PO Item'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Supplier Invoice'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Amount Orig Curr'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Delivery Charge'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Quantity'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Corrected Unit'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Old Unit'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Inventory Number'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Description'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Tariff'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('AHECC'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('State'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Data Entry Validation Message'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  foundrec := FALSE;
  for c2rec in c2(logno) loop
   foundrec := TRUE;
   htp.tablerowopen;
    htp.tabledata( htf.formhidden( 'PK1', c2rec.logno ) || htf.bold(c2rec.logno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'PK2', c2rec.deliveryno ) || htf.bold(c2rec.deliveryno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'PK3', c2rec.recno ) || htf.bold(c2rec.recno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V1i',10,15,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V1i',c2rec.sap_delno)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); -- restated by DB
  --  htp.tabledata( htf.formtext( 'V8i',8,10,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V8i',c2rec.sap_delno_qty)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.formtext( 'V11',10,15,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V11',c2rec.connote)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); -- Added by DB
--    htp.tabledata( htf.formtext( 'V12',10,15,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V12',to_char(c2rec.dispatch_date, 'DD MON YYYY'))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); -- Added by DB
    htp.tabledata( htf.formhidden( 'V8i', c2rec.sap_delno_qty ) || htf.bold(c2rec.sap_delno_qty),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V8i', c2rec.sap_delno_qty );

--    htp.tabledata( htf.formtext( 'V1',12,15,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V1',c2rec.po)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'V1', c2rec.po ) || htf.bold(c2rec.po),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V1', c2rec.po );

--    htp.tabledata( htf.formtext( 'V8ii',5,10,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V8ii',c2rec.po_item_no)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'V8ii', c2rec.po_item_no ) || htf.bold(c2rec.po_item_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V8ii', c2rec.po_item_no );

--    htp.tabledata( htf.formtext( 'V2',8,15,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V2',c2rec.supinv)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'V2', c2rec.supinv ) || htf.bold(c2rec.supinv),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formhidden( 'V2', c2rec.supinv );

    htp.tabledata( htf.formtext( 'V3',10,20,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V3',trim(to_char(c2rec.tamount,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V10',5,10,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V10',c2rec.delivery_charge)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V4',5,10,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V4',c2rec.qty)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V5',5,8,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V5',c2rec.tunit)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( nvl(c2rec.unit_unitused,'&nbsp;'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V6',12,100,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V6',c2rec.code)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  --  htp.tabledata( htf.formhidden( 'V6', c2rec.code ) || htf.bold(c2rec.code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  --  htp.formhidden( 'V6', c2rec.code );

    htp.tabledata( htf.formtext( 'V7',20,1000,nvl(vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V7',c2rec.description),c2rec.description)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V8',11,20,nvl(vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V8',c2rec.cola),c2rec.cola)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V9i',11,20,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V9i',c2rec.ahecc)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V9',3,8,vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'V9',c2rec.state)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( nvl(vld(c2rec.logno,c2rec.deliveryno,c2rec.recno,'ERRMSG','&nbsp;'),'Success'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
  end loop;
 htp.tableclose;
 htp.nl;
 if not foundrec then htp.init; log_maintain( surl, p1, rid, vrecctr, 'No Logs found that Satisfy this Query' ); return; end if;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
--   htp.formsubmit( 'ACTION', 'GRN READY' );
   htp.tabledata( htf.formsubmit( null, 'Modify Data' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'LOG_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1);
end log_maintain_mass;


--  %%%%%%%%%%%%%%%%%%%%%%%%% new work 190407 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

procedure accept_log_maintain_mass(surl in varchar2, p1 in varchar2, rid in varchar2, vrecctr in varchar2, pk1 in GLBX.MYARRAY, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY,
                              v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY, v1i in GLBX.MYARRAY, v8i in GLBX.MYARRAY, v8ii in GLBX.MYARRAY, v9 in GLBX.MYARRAY,
                              v9i in GLBX.MYARRAY, v10 in GLBX.MYARRAY ) --, v11 in GLBX.MYARRAY, v12 in GLBX.MYARRAY )
as

 cursor c3(lname varchar2, lcode varchar2) is select * from strang.lov where lov_name = lname and code = lcode;

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 errmsg		GLBX.MYARRAY;
 errfound	boolean;
 dupl_values	boolean;
 errunit	char(1);
 errstate	char(1);
 msg		varchar2(1000);
 nmb1		STRANG.POS.TAMOUNT%TYPE;
 nmb2		STRANG.POS.QTY%TYPE;
 nmb3		STRANG.POS.DELIVERY_CHARGE%TYPE;
 oinv		STRANG.POS.INVENTORYNO%TYPE;
 dupctr_a	integer;
 dupctr_b	integer;
 tmp		number;
 tmp2		number;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_LOG_MAINTAIN_MASS');
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 vaccess := data_access( owner_id, 'LOG_MAINTAIN', null );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 errfound := FALSE;

 for j in pk1.first..pk1.last loop
  errmsg(j) := NULL;
  if pk1(j) is not null
   then
    -- Validate Numbers Entered
    begin
      nmb1 := to_number( replace(replace(v3(j),',',''),'$','') );
    exception when others then
     begin
       nmb1 := to_number( v3(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Total Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    if v10(j) is not null
    then
      begin
        nmb3 := to_number( replace(replace(v10(j),',',''),'$','') );
      exception when others then
       begin
         nmb3 := to_number( v10(j), LNGS.MONEY_FORMAT );
        exception when others then
         errfound := TRUE;
         errmsg(j) := errmsg(j) || ' ' || 'Invalid Delivery Charge Entered.';
         nmb3 := NULL;
       end;
      end;
    end if;
    begin
      nmb2 := to_number( v4(j) );
      if nmb2 < 0.001
       then
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Quantity cannot be less than 0.001';
        nmb2 := NULL;
      end if;
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Quantity Entered.';
       nmb2 := NULL;
    end;
    begin
      nmb2 := to_number( v1i(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid SAP Delno Entered.';
       nmb2 := NULL;
    end;
    begin
      nmb2 := to_number( v8i(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid SAP Line Entered.';
       nmb2 := NULL;
    end;
    begin
      nmb2 := to_number( v8ii(j) );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid PO Item Entered.';
       nmb2 := NULL;
    end;

    oinv := trim( v6(j) );

    if v1(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Purchase Order cannot be blank.';
    end if;

    if v2(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Supplier Invoice cannot be blank.';
    end if;

    -- Check Unit
    c3rec.code := NULL;
    errunit := 'F';
    if v5(j) is not null
     then
      open c3( 'UNITS', upper(v5(j)));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Incorrect Current Unit.';
        errunit := 'T';
       else
        close c3;
      end if;
    end if;

    -- Check State
    c3rec.code := NULL;
    errstate := 'F';
    if v9(j) is not null
     then
      open c3( 'STATE', upper(v9(j)));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'State should be FOR, NSW, QLD, VIC, SA, NT, WA, ACT';
        errstate := 'T';
       else
        close c3;
      end if;
    end if;
    
    
    update strang.pos
     set
      sap_delno = nvl(strang.f_sap_format(v1i(j),'DELIVERYNO'),sap_delno),
--      sap_delno_qty = nvl(v8i(j),sap_delno_qty),
--      supinv = nvl(v2(j),supinv),
--      po = nvl(strang.f_sap_format(v1(j),'PO'),po),
--      po_item_no = nvl(v8ii(j),po_item_no),
      tamount = nvl(nmb1,tamount),
      qty = nvl(V4(j),qty),
      unit_unitused = decode(errunit,'F',upper(v5(j)),'T',unit_unitused),
      inventoryno = nvl(strang.f_sap_format(oinv,'INVENTORYNO'),inventoryno),
      state = decode(errstate,'F',upper(v9(j)),'T',state),
      ahecc = nvl(v9i(j),ahecc),
      delivery_charge = nmb3 --v10(j)
    where
     deliveryno = pk2(j) and
     recno = pk3(j);

    -- Update Purchase Order Quantities for new Form 15  19-Apr-07 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    if v5(j) = 'KG' or v5(j) = 'TONNE'
    then

     if v5(j) = 'KG'
       then
        tmp2 := null;
        select sum(nvl(partweight,0)) into tmp2 from strang.detailrs where deliveryno=pk2(j);
        select count('x') into tmp from strang.pos where deliveryno = pk2(j);
        tmp2 := round(tmp2/tmp,0);
        if tmp2 < 1
         then
          tmp2 := 1;
        end if;
     elsif v5(j) = 'TONNE'
      then
        tmp2 := null;
        select sum(nvl(partweight,0)) into tmp2 from strang.detailrs where deliveryno=pk2(j);
        select count('x') into tmp from strang.pos where deliveryno = pk2(j);
        tmp2 := round((tmp2/tmp)/1000,3);
        if tmp2 < 0.001
         then
         tmp2 := 0.001;
        end if;

     end if;
     update strang.pos
      set
      qty = tmp2
     where
      deliveryno = pk2(j) and
      recno = pk3(j);
    end if;


    -- Check if Inventory Exists
    if oinv is not null
     then

      -- Check if multiple inventory numbers have been entered, and if
      dupl_values := FALSE;
      dupctr_a := 0;
      dupctr_b := 0;
      for k in pk1.first..pk1.last loop
       if oinv is not null and trim(v6(k)) is not null and oinv = trim(v6(k))
        then
         -- Check if the Description is different and not null
         if trim(v7(j)) is not null and trim(v7(k)) is not null and trim(v7(j)) <> trim(v7(k))
          then
           dupctr_a := dupctr_a + 1;
         end if;
         -- Check if the Tariff number is different and not null
         if trim(v8(j)) is not null and trim(v8(k)) is not null and trim(v8(j)) <> trim(v8(k))
          then
           dupctr_b := dupctr_b + 1;
         end if;
       end if;
      end loop;

      if dupctr_a > 0
       then
        errmsg(j) := errmsg(j) || ' ' || 'Different descriptions exist for the same Inventory Number.';
        dupl_values := TRUE;
      end if;

      if dupctr_b > 0
       then
        errmsg(j) := errmsg(j) || ' ' || 'Different Tariff Numbers exist for the same Inventory Number.';
        dupl_values := TRUE;
      end if;

      if dupl_values
       then
        --
        errfound := TRUE;

       else
        open c3('INVENT',v6(j));
        fetch c3 into c3rec;
        if c3%FOUND
         then
          close c3;
          update strang.lov
           set
            description = nvl(v7(j),description)
          where
           lov_name = 'INVENT' and
           code = oinv;
         else
          close c3;
          insert into strang.lov(lov_name,code,description,cola) values ('INVENT',v6(j),v7(j),v8(j));
        end if;
      end if;
      -- Check if Tariff Exists
      if v8(j) is null
       then
        null;
       else
        open c3('TARIFF',v8(j));
        fetch c3 into c3rec;
        if c3%FOUND
         then
          close c3;
          update strang.lov
           set
            cola = v8(j)
          where
           lov_name = 'INVENT' and
           code = oinv;
         else
          close c3;
          errfound := TRUE;
          errmsg(j) := errmsg(j) || ' ' || 'Tariff value not found - ' || htf.anchor2( 'strangp.accept_lov?surl=' || surl || '&parm=TARIFF&SRC=&LRANGE=&P0=&P1=&P2=&P3=&P4=&P5=&ACTION=' || replace(LNGS.STR_TXT_357,' ','+'),'Insert New Tariff.', ctarget=>'INSWIND');
        end if;
      end if;
    end if;

  end if;
 end loop;
 commit;
 if errfound then msg := 'Errors found Modifying Data. Please Review each Log Record to see what the Error was.'; end if;

 log_maintain_mass(surl, p1, rid,vrecctr, pk1, pk2, pk3, v1, v2, v3, v4, v5, v6, v7, v8, v1i, v8i, v8ii, v9, v9i,v10, errmsg, msg );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_LOG_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 );
end accept_log_maintain_mass;


--zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
-- end 20170517
--zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
-- new work 290508

procedure delivery_maintain(surl in varchar2, strt in varchar2, strt2 in varchar2 default null, rid in varchar2, vrecctr in varchar2, msg in varchar2 default null )
as

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.DELIVERY_MAINTAIN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'DELIVERY_MAINTAIN', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Choose Delivery Number',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'Delivery Maintain') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 htp.formopen( 'strangp.delivery_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'PK1', NULL );
 htp.formhidden( 'PK2', NULL );
 htp.formhidden( 'PK3', NULL );
 htp.formhidden( 'V1', NULL );
 htp.formhidden( 'V2', NULL );
 htp.formhidden( 'V3', NULL );
 htp.formhidden( 'V4', NULL );
 htp.formhidden( 'V5', NULL );
 htp.formhidden( 'V6', NULL );
 htp.formhidden( 'V7', NULL );
 htp.formhidden( 'V8', NULL );
 htp.formhidden( 'ERRMSG', NULL );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
     htp.tabledata( htf.bold('Delivery No From'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.formtext('P1',20,30, strt),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Delivery No To'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.formtext('P2',20,30, nvl(strt2, strt)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.formsubmit( null, 'Submit' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'DELIVERY_MAINTAIN',null,owner_id,errmsg=>sqlerrm,extdet=>'Strt:' || strt);
end delivery_maintain;

procedure delivery_maintain_mass(surl in varchar2, p1 in varchar2, p2 in varchar2, rid in varchar2, vrecctr in varchar2, pk1 in GLBX.MYARRAY, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY, errmsg in GLBX.MYARRAY, msg in varchar2 default null )
as

 cursor c2(del_from integer, del_to integer) is
  select /*+ ALL_ROWS */ distinct dr.entry_no, p.deliveryno, p.recno, p.po, p.supinv, p.tamount, p.qty, p.unit_unitused, t.cola tunit, i.code,  i.description, i.cola cola
  from strang.lov i, strang.pos p, strang.detailrs dr, strang.lov t
  where dr.deliveryno >= del_from and
        dr.deliveryno <= del_to and
        dr.deliveryno = p.deliveryno and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
        t.lov_name = 'TARIFF' and
        t.code = i.cola
 union all
  select /*+ ALL_ROWS */ distinct dr.entry_no, p.deliveryno, p.recno, p.po, p.supinv, p.tamount, p.qty, p.unit_unitused, null tunit, i.code,  i.description, i.cola cola
  from strang.lov i, strang.pos p, strang.detailrs dr
  where dr.deliveryno >= del_from and
        dr.deliveryno <= del_to and
        dr.deliveryno = p.deliveryno and
        p.inventoryno = i.code and
        i.lov_name = 'INVENT' and
    (i.cola is null or (i.cola is not null and not exists (select 'x' from strang.lov t where t.lov_name = 'TARIFF' and t.code = i.cola)))
 union all
  select /*+ ALL_ROWS */ distinct dr.entry_no, p.deliveryno, p.recno, p.po, p.supinv, p.tamount, p.qty, p.unit_unitused, null tunit, p.inventoryno code, null description, null cola
  from strang.pos p, strang.detailrs dr
  where dr.deliveryno >= del_from and
        dr.deliveryno <= del_to and
        dr.deliveryno = p.deliveryno and
        (p.inventoryno is null or (p.inventoryno is not null and not exists (select 'x' from strang.lov i where i.lov_name = 'INVENT' and i.code = p.inventoryno)))
order by 2,3;

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 foundrec	boolean;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 seclevel	varchar2(100);
 del_from	integer;
 del_to		integer;

 function vldd( p_k1 in varchar2, p_k2 in varchar2, p_k3 in varchar2, fld in varchar2, defval in varchar2 )
  return varchar2
 as
 begin
  for j in pk2.first..pk2.last loop
   if pk2(j) = p_k2 and pk3(j) = p_k3
    then
     if fld = 'ERRMSG'
      then
       return( errmsg(j) );
     elsif fld = 'V1'
      then
       return( v1(j) );
     elsif fld = 'V2'
      then
       return( v2(j) );
     elsif fld = 'V3'
      then
       return( v3(j) );
     elsif fld = 'V4'
      then
       return( v4(j) );
     elsif fld = 'V5'
      then
       return( v5(j) );
     elsif fld = 'V6'
      then
       return( v6(j) );
     elsif fld = 'V7'
      then
       return( v7(j) );
     elsif fld = 'V8'
      then
       return( v8(j) );
     end if;
   end if;
  end loop;
  return( defval );
 end vldd;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.DELIVERY_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 begin del_from := to_number(p1); exception when others then delivery_maintain( surl, p1, p2, rid, vrecctr, 'Delivery From Number is not a Valid Number' ); return; end;
 begin del_to := to_number(p2); exception when others then delivery_maintain( surl, p1, p2, rid, vrecctr, 'Delivery To Number is not a Valid Number' ); return; end;
 if del_from <= 0 or del_from > del_to then delivery_maintain( surl, p1, p2, rid, vrecctr, 'Delivery Number Range is Invalid' ); return; end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'DELIVERY_MAINTAIN', null );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Delivery Maintain Mass Edit',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR30',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 glbx.header_msg( nvl(msg,'Delivery Maintain Mass Edit') );

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.bold( 'Deliveries From' || ':' || to_char(del_from) || '&nbsp;&nbsp;&nbsp;' || 'To' || ':' || to_char(del_to));
 htp.nl;

 htp.formopen( 'strangp.accept_delivery_maintain_mass' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'VRECCTR', vrecctr );
 htp.formhidden( 'P1', p1 );
 htp.formhidden( 'P2', p2 );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
    htp.tabledata( htf.bold('Entry No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Delivery No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('PO Record No.'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Purchase Order'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Supplier Invoice'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Amount Orig Curr'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Quantity'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Corrected Unit'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Old Unit'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Inventory Number'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Description'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Tariff'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Data Entry Validation Message'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  foundrec := FALSE;
  for c2rec in c2(del_from, del_to) loop
   foundrec := TRUE;
   htp.tablerowopen;
    htp.tabledata( htf.formhidden( 'PK1', c2rec.entry_no ) || htf.bold(c2rec.entry_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'PK2', c2rec.deliveryno ) || htf.bold(c2rec.deliveryno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'PK3', c2rec.recno ) || htf.bold(c2rec.recno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V1',8,15,vldd(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V1',c2rec.po)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V2',8,15,vldd(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V2',c2rec.supinv)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V3',10,20,vldd(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V3',trim(to_char(c2rec.tamount,LNGS.MONEY_FORMAT)))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V4',5,10,vldd(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V4',c2rec.qty)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V5',5,8,vldd(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V5',c2rec.tunit)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( nvl(c2rec.unit_unitused,'&nbsp;'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V6',10,100,vldd(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V6',c2rec.code)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V7',20,1000,nvl(vldd(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V7',c2rec.description),c2rec.description)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext( 'V8',11,20,nvl(vldd(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'V8',c2rec.cola),c2rec.cola)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( nvl(vldd(c2rec.entry_no,c2rec.deliveryno,c2rec.recno,'ERRMSG','&nbsp;'),'Success'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
  end loop;
 htp.tableclose;
 htp.nl;
 if not foundrec then htp.init; delivery_maintain( surl, p1, p2, rid, vrecctr, 'No Deliveries found that Satisfy this Query' ); return; end if;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.formsubmit( null, 'Modify Data' ) || htf.formclose );
   htp.tabledata( htf.formopen( 'strangp.receive', ctarget=>'_top' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'RID', replace(rid,'~','+') ) ||
                  htf.formhidden( 'SCID', NULL ) || htf.formhidden( 'VRECCTR', vrecctr ) || htf.formhidden( 'CALL_NAME', null ) || htf.formhidden( 'PARM', 'DETAILRS' ) || htf.formhidden( 'ACCESS_ID', 'x' ) || htf.formsubmit( null, 'Cancel' ) || htf.formclose );
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'DELIVERY_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 || '-' || 'P2:' || p2);
end delivery_maintain_mass;

procedure accept_delivery_maintain_mass(surl in varchar2, p1 in varchar2, p2 in varchar2, rid in varchar2, vrecctr in varchar2, pk1 in GLBX.MYARRAY, pk2 in GLBX.MYARRAY, pk3 in GLBX.MYARRAY,
                              v1 in GLBX.MYARRAY, v2 in GLBX.MYARRAY, v3 in GLBX.MYARRAY, v4 in GLBX.MYARRAY, v5 in GLBX.MYARRAY, v6 in GLBX.MYARRAY, v7 in GLBX.MYARRAY, v8 in GLBX.MYARRAY )
as

 cursor c3(lname varchar2, lcode varchar2) is select * from strang.lov where lov_name = lname and code = lcode;

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 errmsg		GLBX.MYARRAY;
 errfound	boolean;
 dupl_values	boolean;
 errunit	char(1);
 msg		varchar2(1000);
 nmb1		STRANG.POS.TAMOUNT%TYPE;
 nmb2		STRANG.POS.QTY%TYPE;
 oinv		STRANG.POS.INVENTORYNO%TYPE;
 dupctr_a	integer;
 dupctr_b	integer;
 tmp		number;
 tmp2		number;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_DELIVERY_MAINTAIN_MASS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 vaccess := data_access( owner_id, 'DELIVERY_MAINTAIN', null );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 errfound := FALSE;

 for j in pk2.first..pk2.last loop
  errmsg(j) := NULL;
  if pk1(j) is not null
   then
    -- Validate Numbers Entered
    begin
      nmb1 := to_number( replace(replace(v3(j),',',''),'$','') );
    exception when others then
     begin
       nmb1 := to_number( v3(j), LNGS.MONEY_FORMAT );
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Total Amount Entered.';
       nmb1 := NULL;
     end;
    end;
    begin
      nmb2 := to_number( v4(j) );
      if nmb2 < 0
       then
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Quantity cannot be less than 0.';
        nmb2 := NULL;
      end if;
      exception when others then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Invalid Quantity Entered.';
       nmb2 := NULL;
    end;

    oinv := trim( v6(j) );

    if v1(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Purchase Order cannot be blank.';
    end if;

    if v2(j) is null
     then
       errfound := TRUE;
       errmsg(j) := errmsg(j) || ' ' || 'Supplier Invoice cannot be blank.';
    end if;

    -- Check Unit
    c3rec.code := NULL;
    errunit := 'F';
    if v5(j) is not null
     then
      open c3( 'UNITS', upper(v5(j)));
      fetch c3 into c3rec;
      if c3%NOTFOUND
       then
        close c3;
        errfound := TRUE;
        errmsg(j) := errmsg(j) || ' ' || 'Incorrect Current Unit.';
        errunit := 'T';
       else
        close c3;
      end if;
    end if;

    -- Update Purchase Order
    update strang.pos
     set
     -- po = nvl(v1(j),po),
     -- supinv = nvl(v2(j),supinv),
      tamount = nvl(nmb1,tamount),
      qty = nvl(nmb2,qty),
      unit_unitused = decode(errunit,'F',upper(v5(j)),'T',unit_unitused),
      inventoryno = nvl(oinv,inventoryno)
    where
     deliveryno = pk2(j) and
     recno = pk3(j);


    -- Update Purchase Order Quantities for new Form 15  19-Apr-07 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    if v5(j) = 'KG' or v5(j) = 'TONNE'
    then

     if v5(j) = 'KG'
       then
        tmp2 := null;
        select sum(nvl(partweight,0)) into tmp2 from strang.detailrs where deliveryno=pk2(j);
        select count('x') into tmp from strang.pos where deliveryno = pk2(j);
        tmp2 := round(tmp2/tmp,0);
        if tmp2 < 1
         then
          tmp2 := 1;
        end if;
     elsif v5(j) = 'TONNE'
      then
        tmp2 := null;
        select sum(nvl(partweight,0)) into tmp2 from strang.detailrs where deliveryno=pk2(j);
        select count('x') into tmp from strang.pos where deliveryno = pk2(j);
        tmp2 := round((tmp2/tmp)/1000,3);
        if tmp2 < 0.001
         then
         tmp2 := 0.001;
        end if;

     end if;
     update strang.pos
      set
      qty = tmp2
     where
      deliveryno = pk2(j) and
      recno = pk3(j);
    end if;


    -- Check if Inventory Exists
    if oinv is not null
     then

      -- Check if multiple inventory numbers have been entered, and if
      dupl_values := FALSE;
      dupctr_a := 0;
      dupctr_b := 0;
      for k in pk1.first..pk1.last loop
       if oinv is not null and trim(v6(k)) is not null and oinv = trim(v6(k))
        then
         -- Check if the Description is different and not null
         if trim(v7(j)) is not null and trim(v7(k)) is not null and trim(v7(j)) <> trim(v7(k))
          then
           dupctr_a := dupctr_a + 1;
         end if;
         -- Check if the Tariff number is different and not null
         if trim(v8(j)) is not null and trim(v8(k)) is not null and trim(v8(j)) <> trim(v8(k))
          then
           dupctr_b := dupctr_b + 1;
         end if;
       end if;
      end loop;

      if dupctr_a > 0
       then
        errmsg(j) := errmsg(j) || ' ' || 'Different descriptions exist for the same Inventory Number.';
        dupl_values := TRUE;
      end if;

      if dupctr_b > 0
       then
        errmsg(j) := errmsg(j) || ' ' || 'Different Tariff Numbers exist for the same Inventory Number.';
        dupl_values := TRUE;
      end if;

      if dupl_values
       then
        --
        errfound := TRUE;

       else
        open c3('INVENT',v6(j));
        fetch c3 into c3rec;
        if c3%FOUND
         then
          close c3;
          update strang.lov
           set
            description = nvl(v7(j),description)
          where
           lov_name = 'INVENT' and
           code = oinv;
         else
          close c3;
          insert into strang.lov(lov_name,code,description,cola) values ('INVENT',v6(j),v7(j),v8(j));
        end if;
      end if;

      -- Check if Tariff Exists
      if v8(j) is null
       then
        null;
       else
        open c3('TARIFF',v8(j));
        fetch c3 into c3rec;
        if c3%FOUND
         then
          close c3;
          update strang.lov
           set
            cola = v8(j)
          where
           lov_name = 'INVENT' and
           code = oinv;
         else
          close c3;
          errfound := TRUE;
          errmsg(j) := errmsg(j) || ' ' || 'Tariff value not found - ' || htf.anchor2( 'strangp.accept_lov?surl=' || surl || '&parm=TARIFF&SRC=&LRANGE=&P0=&P1=&P2=&P3=&P4=&P5=&ACTION=' || replace(LNGS.STR_TXT_357,' ','+'),'Insert New Tariff.', ctarget=>'INSWIND');
        end if;
      end if;
    end if;

  end if;
 end loop;
 commit;
 if errfound then msg := 'Errors found Modifying Data. Please Review each Entry Record to see what the Error was.'; end if;

 delivery_maintain_mass(surl, p1, p2, rid,vrecctr, pk1, pk2, pk3, v1, v2, v3, v4, v5, v6, v7, v8, errmsg, msg );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_DELIVERY_MAINTAIN_MASS',null,owner_id,errmsg=>sqlerrm,extdet=>'P1:' || p1 || '-' || 'P2:' || p2);
end accept_delivery_maintain_mass;



--vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
procedure confirm_genduty(surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null )
as

 cursor c2(rid rowid) is select * from strang.ships_airway where rowid = rid;

 cursor c3(vship_id integer)
 is
 select distinct r.curr
 from strang.receivals r, strang.detailrs dr, strang.movements m, strang.ships_airway s, strang.customers c
 where
   m.ship_id = vship_id and
   s.ship_id = m.ship_id and
   r.deliveryno = dr.deliveryno and
   r.cust_customer_id = c.customer_id and
   c.customs_agent is not null and
   dr.movement_no = m.movement_no and
   nvl(dr.camov_seal,'|') = nvl(seal,'|') and
   not exists(select 'x' from strang.lov l
              where l.lov_name = 'UNRATTAB' and
                    l.code = r.curr and
                    nvl(to_date(glbx.guess_date(l.cola),'DD-MON-YYYY'),s.estarrive) <= s.estarrive and
		    nvl(to_date(glbx.guess_date(l.colb),'DD-MON-YYYY'),s.estarrive) >= s.estarrive);

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);
 currneeded     boolean;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.CONFIRM_GENDUTY' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'SHP2', rid );

 glbx.main_title( surl, 'Confirm', glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR11',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 htp.p( '<CENTER>' );
 htp.nl;
 currneeded := false;
 open c2(replace(rid,'~','+'));
  fetch c2 into c2rec;
  if c2%NOTFOUND
  then
    currneeded :=true;
    htp.p('Ship Id '|| replace(rid,'~','+'));
    htp.nl;
  end if;
 close c2;
 htp.formopen( 'strangp.genduty' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'ACCESS_ID', access_id );
 htp.formhidden( 'MSG', msg );
 htp.formsubmit( 'ACTION', LNGS.STR_TXT_412 );
 if msg = 'DUTY'
  then
    for c3rec in c3(c2rec.ship_id) loop
     htp.p('Currency Code Needed For ' || c3rec.curr );
     htp.nl;
     currneeded := true;
    end loop;
   if not currneeded then
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_413 );
   end if;
  else
   htp.formsubmit( 'ACTION', LNGS.STR_TXT_414 );
 end if;
 htp.formclose;
 htp.p( '</CENTER>' );
 htp.htmlclose;

exception when others then
 glbx.error_details( 'STRANGP', 'CONFIRM_GENDUTY',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end confirm_genduty;

procedure genduty(surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null, action in varchar2 default null )
as

 cursor c2(rid rowid) is select * from strang.ships_airway where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.GENDUTY' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 if action = LNGS.STR_TXT_412
  then
--    shp2( surl, rid, scid, parm, access_id, LNGS.STR_TXT_415 );
    shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_415 );
    return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'SHP2', rid );

 if vaccess in ('NONE','READ') then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if access_id <> 'z'
  then
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
   if c2rec.ship_airway = 'A'
    then
     generate_ships_manifest( c2rec.ship_id, nvl(msg,'LINE_NO'), 'AIRWAY', vste=>vste );
    else
     generate_ships_manifest( c2rec.ship_id, nvl(msg,'LINE_NO'), 'SHIP', vste=>vste );
   end if;

   if msg = 'LINE_NO'
    then
     shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_315 );
    else
     if msg = 'DUTY'
      then
       shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_312 );
      else
       shp( surl, rid, scid, parm, access_id, LNGS.STR_TXT_316 );
     end if;
   end if;
 end if;
exception when others then
 glbx.error_details( 'STRANGP', 'GENDUTY',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end genduty;

procedure inv(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null )
as

 cursor c2( rid rowid ) is select * from strang.invoices where rowid = rid;
 cursor c3( invno varchar2 ) is select rowid,inv_invoiceno,quantity,cgunit,cgdesc,cge_chargecode,cgrate,gstc_gstcode,gst from strang.invcharges where inv_invoiceno = invno order by cge_chargecode;
 cursor c4 is select * from strang.charges order by upper(chargecode);
 cursor c5( invno varchar2 ) is select cust_customer_id from strang.receivals r, strang.movements m, strang.detailrs d where d.movement_no = m.movement_no and d.deliveryno = r.deliveryno and m.invoiceno = invno;
 cursor c6( rid rowid ) is select rowid from strang.invoices where invoiceno = (select inv_invoiceno from strang.invcharges where rowid = rid );
 cursor c7(cde varchar2) is
  select colb
  from strang.lov
  where lov_name = 'GSTCODES' and
        code = cde;
 cursor c8(cde varchar2,vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = cde and cola = vste;
 cursor c9(invno varchar2 ) is select rowid,g.* from strang.general_ledger g where invoiceno = invno order by recno,transaction_type,profit_centre,cost_centre,total;
 cursor c10(cday number) is select invoiceno from strang.invoices where completed = 'COMPLETE' and status = 'GL INCOMPLETE' and (sysdate - invdate) > cday and rownum < 5;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c5rec		c5%ROWTYPE;
 c6rec		c6%ROWTYPE;
 c7rec		c7%ROWTYPE;
 c8rec		c8%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 mn		char(3);
 fnd		boolean;
 glcomplete	boolean;
 print_status	boolean;
 ttl1		number;
 ttl2		number;
 ttl3		number;
 check_day	integer;
 vaccess	varchar2(20);
 nrid		varchar2(100);
 seclevel	varchar2(100);
 vste		varchar2(10);
 tmpstr		varchar2(32767);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.INV' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 if parm = 'INVCHARGES'
  then
   open c6(replace(rid,'~','+'));
   fetch c6 into c6rec;
   close c6;
   nrid := rowidtochar( c6rec.rowid );
  else
   nrid := replace(rid,'~','+');
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'INVOICING', nrid );
 seclevel := oltp.security_role( c1rec.aid );

 glbx.main_title( surl, LNGS.STR_TXT_226,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR12',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 htp.p( '<CENTER>' );
  if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
  if seclevel in ('LEVEL 1','LEVEL 2','LEVEL 3','LEVEL 4','LEVEL 5') then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if access_id = 'z'
  then
   c2rec.invdate := sysdate;
   c2rec.billingmonth := to_char(sysdate, 'MON' );
   c2rec.billingyear := to_char(sysdate, 'YYYY' );
   open c8('CONTRACT',vste);
   fetch c8 into c8rec;
   close c8;
   c2rec.ctrk_contract := c8rec.description;
  else
   open c2(nrid);
   fetch c2 into c2rec;
   close c2;
 end if;

 if msg is not null
  then
   glbx.header_msg( msg );
  else
   begin check_day := nvl(to_number(control_code( 'GL ALERT', vste )),7); exception when others then check_day := 7; end;

   -- Previous check
   if c2rec.completed = 'INCOMPLETE' and (sysdate - c2rec.invdate) > 7
    then
     glbx.header_msg( 'Warning: This Invoice is Over 1 Week Old' );
   end if;

   tmpstr := null;
   for c10rec in c10( check_day ) loop
    tmpstr := tmpstr || ',' || c10rec.invoiceno;
   end loop;
   tmpstr := substr(tmpstr,2);
   if tmpstr is not null
    then
     glbx.header_msg( 'Warning: The following General Ledgers are over ' || check_day || ' days old:' || tmpstr );
   end if;
 end if;

 -- Fields to toggle read write and read only
 if c2rec.status = 'GL COMPLETE'
  then
   glcomplete := TRUE;
  else
   glcomplete := FALSE;
 end if;
 if c2rec.completed = 'COMPLETE'
  then
   print_status := TRUE;
  else
   print_status := FALSE;
 end if;

 htp.tableopen;
 htp.tablerowopen;
 htp.p( '<TD align="LEFT">' );
 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_inv' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', access_id );
   if access_id = 'z'
    then
     htp.formhidden( 'RID', null );
    else
   htp.formhidden( 'RID', replace(nrid,'~','+') );
   end if;
 end if;

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_227),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     if vaccess = 'EDIT'
      then
       if not(access_id = 'z')
        then
         htp.tabledata( htf.bold(c2rec.invoiceno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         htp.formhidden( 'P1', c2rec.invoiceno );
        else
         htp.tabledata( htf.formtext('P1',10,10,c2rec.invoiceno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
      else
       htp.tabledata( htf.bold(c2rec.invoiceno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
     htp.tabledata( htf.bold(LNGS.STR_TXT_228),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     if vaccess = 'EDIT' and not glcomplete and not print_status
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'CONTRACTS', 'P2', c2rec.ctrk_contract, FALSE, FALSE, FALSE );
       htp.p( '</TD>' );
       -- htp.tabledata( htf.formtext('P2',10,10,c2rec.ctrk_contract),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.formhidden( 'P2', c2rec.ctrk_contract ) || htf.bold(c2rec.ctrk_contract),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
     htp.tabledata( htf.bold(LNGS.STR_TXT_229),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     if vaccess = 'EDIT' and not glcomplete and not print_status
      then
       htp.tabledata( htf.formtext('P3',10,20,to_char(c2rec.invdate,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.formhidden( 'P3', to_char(c2rec.invdate,LNGS.STR_DATE_02) ) || htf.bold(to_char(c2rec.invdate,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
     htp.tabledata( htf.bold('Print Status'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"'); -- change from LNGS.STR_TXT_172
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
     if vaccess = 'EDIT'
      then
       htp.formselectopen( 'P4' );
       if c2rec.completed = 'COMPLETE'
        then
         htp.formselectoption( 'COMPLETE', 'SELECTED' );
         htp.formselectoption( 'INCOMPLETE' );
        else
         htp.formselectoption( 'COMPLETE' );
         htp.formselectoption( 'INCOMPLETE', 'SELECTED' );
       end if;
       htp.formselectclose;
      else
       htp.bold( c2rec.completed );
     end if;
     htp.p( '</TD>' );
     htp.tabledata( htf.bold('Branch/Profit Centre'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     if vaccess = 'EDIT' and not glcomplete and not print_status
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
        lov_list( 'JOB_BRANCH', 'P9', nvl(c2rec.job_branch, control_code( 'JOB BRANCH', vste )), TRUE, FALSE, FALSE );
       htp.p( '</TD>' );
      else
       htp.tabledata( htf.formhidden( 'P9', c2rec.job_branch ) || htf.bold(c2rec.job_branch),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
   htp.tablerowclose;
   htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_230),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
     if vaccess = 'EDIT'
      then
       htp.formselectopen( 'P5' );
       for j in 1..12 loop
        mn := to_char( to_date( '01-' || lpad( to_char(j),2,'0') || '-2000','DD-MM-YYYY'),'MON');
        if mn = c2rec.billingmonth
         then
          htp.formselectoption( mn, 'SELECTED' );
         else
          htp.formselectoption( mn );
        end if;
       end loop;
       htp.formselectclose;
      else
       htp.bold( c2rec.billingmonth );
     end if;
     htp.p( '</TD>' );
     htp.tabledata( htf.bold(LNGS.STR_TXT_231),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
     if vaccess = 'EDIT'
      then
       htp.formselectopen( 'P6' );
       for j in 2018..2040 loop
         if to_char(j) = c2rec.billingyear
         then
          htp.formselectoption( to_char(j), 'SELECTED' );
         else
          htp.formselectoption( to_char(j) );
        end if;
       end loop;
       htp.formselectclose;
      else
       htp.bold( c2rec.billingyear );
     end if;
     htp.p( '</TD>' );
     if vaccess = 'EDIT' and not glcomplete and not print_status
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2>' );
        htp.bold('Debtor Branch' || ' ');
        lov_list( 'DEBTOR_BRANCH', 'P10', nvl(c2rec.debtor_branch, control_code( 'DEBTOR BRANCH', vste )), TRUE, FALSE, FALSE );
       htp.p( '</TD>' );
      else
       htp.tabledata( htf.formhidden( 'P10', c2rec.debtor_branch ) || htf.bold('Debtor Branch') || ' ' || htf.bold(c2rec.debtor_branch),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2');
     end if;
     if vaccess = 'EDIT' and not glcomplete and not print_status
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2>' );
        htp.bold('Debtor Code' || ' ');
        lov_list( 'DEBTOR_CODE', 'P11', nvl(c2rec.debtor_code, control_code( 'DEBTOR CODE', vste )), TRUE, FALSE, FALSE );
       htp.p( '</TD>' );
      else
       htp.tabledata( htf.formhidden( 'P11', c2rec.debtor_code ) || htf.bold('Debtor Code') || ' ' || htf.bold(c2rec.debtor_code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2');
     end if;
     htp.tabledata( htf.bold('Job Code'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     if vaccess = 'EDIT' and not glcomplete and not print_status
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
        htp.formtext('P12',10,10,nvl(c2rec.job_code, c2rec.invoiceno));
       htp.p( '</TD>' );
      else
       htp.tabledata( htf.formhidden( 'P12', c2rec.job_code ) || htf.bold(c2rec.job_code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
     htp.formhidden( 'P7', '0' );
     /*
     htp.tabledata( htf.bold('Owner'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     if vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P7', 3, 1, c2rec.owner ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold( c2rec.owner ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
     */
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_059),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     if vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtextareaopen( 'P8', 5, 75 ) || c2rec.invdesc || htf.formtextareaclose,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=9');
      else
       htp.tabledata( c2rec.invdesc,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=9');
     end if;
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 htp.tableopen;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_232),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_059),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_214),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_101),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_083),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_008),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_105),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_233),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_106),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_151),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
  htp.tablerowclose;
  ttl1 := 0;
  ttl2 := 0;
  ttl3 := 0;
  if vaccess = 'EDIT'
   then
    htp.formhidden( 'R7', null );
    if c2rec.completed = 'COMPLETE' or glcomplete
     then
       htp.formhidden( 'R0', null );
       htp.formhidden( 'R1', null );
       htp.formhidden( 'R2', null );
       htp.formhidden( 'R3', null );
       htp.formhidden( 'R4', null );
       htp.formhidden( 'R5', null );
       htp.formhidden( 'R6', null );
       htp.formhidden( 'R7', null );
    end if;
  end if;

  for c3rec in c3( c2rec.invoiceno ) loop
  htp.tablerowopen;
   if c2rec.completed = 'COMPLETE' or vaccess <> 'EDIT' or glcomplete
    then
     htp.tabledata( c3rec.cge_chargecode,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.formhidden( 'R0', c3rec.cge_chargecode );
     htp.tabledata( htf.formtext( 'R1', 10, 10, c3rec.cge_chargecode ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
   if c2rec.completed = 'COMPLETE' or vaccess <> 'EDIT' or glcomplete
    then
     htp.tabledata( c3rec.cgdesc,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.formtext( 'R2', 30, 30, c3rec.cgdesc ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
   if c2rec.completed = 'COMPLETE' or vaccess <> 'EDIT' or glcomplete
    then
     htp.tabledata( ltrim(to_char(c3rec.cgrate,'99999999.9999')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.formtext( 'R3', 9, 20, ltrim(to_char(c3rec.cgrate,'99999999.9999')), cattributes=>'align="RIGHT"' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
   if c2rec.completed = 'COMPLETE' or vaccess <> 'EDIT' or glcomplete
    then
     htp.tabledata( c3rec.cgunit,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'UNITS', 'R4', c3rec.cgunit, FALSE, FALSE, FALSE );
     htp.p( '</TD>' );
   end if;
   if c2rec.completed = 'COMPLETE' or vaccess <> 'EDIT' or glcomplete
    then
     htp.tabledata( ltrim(to_char(c3rec.quantity,'99999999.999')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.formtext( 'R5', 8, 20, ltrim(to_char(c3rec.quantity,'99999999.999')), cattributes=>'align="RIGHT"' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
   htp.tabledata( to_char(round(c3rec.cgrate*c3rec.quantity,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
   ttl1 := ttl1 + round(nvl(c3rec.cgrate*c3rec.quantity,0),2);
   if c2rec.completed = 'COMPLETE' or vaccess <> 'EDIT' or glcomplete
    then
     htp.tabledata( c3rec.gstc_gstcode,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'GSTCODES', 'R6', c3rec.gstc_gstcode, FALSE, FALSE, FALSE );
     htp.p( '</TD>' );
   end if;
   htp.tabledata( to_char(round(c3rec.gst,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
   ttl2 := ttl2 + round(nvl(c3rec.gst,0),2);
   open c7(c3rec.gstc_gstcode);
   fetch c7 into c7rec;
   close c7;
   if c7rec.colb = LNGS.STR_TXT_368
    then
     htp.tabledata( to_char(round(c3rec.cgrate*c3rec.quantity+c3rec.gst,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     ttl3 := ttl3 + round(nvl(c3rec.cgrate*c3rec.quantity+c3rec.gst,0),2);
    else
     htp.tabledata( to_char(round(c3rec.cgrate*c3rec.quantity,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     ttl3 := ttl3 + round(nvl(c3rec.cgrate*c3rec.quantity,0),2);
   end if;
   if c2rec.completed = 'COMPLETE' or vaccess <> 'EDIT' or glcomplete
    then
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.formcheckbox( 'R7', c3rec.rowid ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
   end if;
  htp.tablerowclose;
  end loop;

 if c2rec.completed = 'COMPLETE' or vaccess <> 'EDIT' or glcomplete
   then
    null;
   else
    for j in 1..3 loop
    htp.tablerowopen;
     htp.formhidden( 'R0', null );
     htp.formhidden( 'R2', null );
     htp.formhidden( 'R3', null );
     htp.formhidden( 'R4', null );
     htp.formhidden( 'R6', null );
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
     htp.formselectopen( 'R1' );
     htp.formselectoption( NULL );
     for c4rec in c4 loop
      htp.formselectoption( c4rec.chargecode );
     end loop;
     htp.formselectclose;
     htp.p( '</TD>' );
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.formtext( 'R5', 8, 20, null, cattributes=>'align="RIGHT"' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    end loop;
  end if;
  htp.tablerowopen;
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_012),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(to_char(round(ttl1,2),LNGS.MONEY_FORMAT)),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold(to_char(round(ttl2,2),LNGS.MONEY_FORMAT)),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold(to_char(round(ttl3,2),LNGS.MONEY_FORMAT)),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;

 if vaccess <> 'EDIT' or glcomplete
  then
   null;
  else
   htp.formsubmit( 'ACTION', 'Populate GL' );
 end if;

 htp.nl;
 htp.tableopen;
  htp.tablerowopen;
     htp.tabledata( htf.bold('General Ledger'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     -- add status here
     if (vaccess <> 'EDIT') or (c2rec.status = 'GL COMPLETE' and c2rec.transfer_date is not null)
      then
       htp.tabledata( htf.formhidden( 'PSTS', c2rec.status ) ||
                      htf.bold(c2rec.status),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="2"');
      else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="2">');
        htp.formselectopen( 'PSTS' );
        if c2rec.status = 'GL COMPLETE'
         then
          htp.formselectoption( 'GL COMPLETE', 'SELECTED' );
         else
          htp.formselectoption( 'GL COMPLETE' );
        end if;
        if nvl(c2rec.status, 'GL INCOMPLETE') = 'GL INCOMPLETE'
         then
          htp.formselectoption( 'GL INCOMPLETE', 'SELECTED' );
         else
          htp.formselectoption( 'GL INCOMPLETE' );
        end if;
        htp.formselectclose;
       htp.p( '</TD>' );
     end if;

     if c2rec.status = 'GL COMPLETE'
      then
       if c2rec.transfer_date is null
        then
         htp.tabledata( 'Not Transferred',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" COLSPAN="3"');
        else
         htp.tabledata( 'Transferred on ' || trim(to_char(c2rec.transfer_date,'DD Mon YYYY HH24:MI' )),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" COLSPAN="3"');
       end if;
      else
       htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" COLSPAN="3"');
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Transaction Type'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     --htp.tabledata( htf.bold('Profit Centre'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold('Cost Centre'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold('Total (Incl. GST)'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold('GST'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_151),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
  htp.tablerowclose;

  if vaccess = 'EDIT'
   then
    htp.formhidden( 'G2', null ); -- moved to address issue when removing profit centres
    if c2rec.status = 'GL COMPLETE'
     then
       htp.formhidden( 'G0', null );
       htp.formhidden( 'G1', null );
       htp.formhidden( 'G3', null );
       htp.formhidden( 'G4', null );
       htp.formhidden( 'G5', null );
       htp.formhidden( 'G6', null );
    end if;
  end if;
  htp.formhidden( 'G6', null );
  fnd := FALSE;
  for c9rec in c9( c2rec.invoiceno ) loop
   fnd := TRUE;
   htp.tablerowopen;
    if c2rec.status = 'GL COMPLETE' or vaccess <> 'EDIT'
     then
      htp.tabledata( c9rec.transaction_type,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
     else
      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER">' );
       htp.formhidden( 'G0', c9rec.recno );
       htp.formselectopen( 'G1' );
       if c9rec.transaction_type = 'S'
        then
         htp.formselectoption( 'S', 'SELECTED' );
        else
         htp.formselectoption( 'S' );
       end if;
       if c9rec.transaction_type = 'C'
        then
         htp.formselectoption( 'C', 'SELECTED' );
        else
         htp.formselectoption( 'C' );
       end if;
       htp.formselectclose;
      htp.p( '</TD>' );
    end if;
    /*
    if c2rec.status = 'GL COMPLETE' or vaccess <> 'EDIT'
     then
      htp.tabledata( c9rec.profit_centre,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER">' );
        lov_list( 'PROFIT_CENTRE', 'G2', c9rec.profit_centre, TRUE, FALSE, FALSE );
       htp.p( '</TD>' );
    end if;
    */
    if c2rec.status = 'GL COMPLETE' or vaccess <> 'EDIT'
     then
      htp.tabledata( c9rec.cost_centre,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER">' );
        lov_list( 'COST_CENTRE', 'G3', c9rec.cost_centre, TRUE, FALSE, FALSE );
       htp.p( '</TD>' );
    end if;
    if c2rec.status = 'GL COMPLETE' or vaccess <> 'EDIT'
     then
      htp.tabledata( to_char(round(c9rec.total,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
      htp.tabledata( htf.formtext( 'G4', 12, 20, trim(to_char(round(c9rec.total,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    end if;
    if c2rec.status = 'GL COMPLETE' or vaccess <> 'EDIT'
     then
      htp.tabledata( to_char(round(c9rec.gst,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
      htp.tabledata( htf.formtext( 'G5', 12, 20, trim(to_char(round(c9rec.gst,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    end if;
    if vaccess <> 'EDIT' -- was c2rec.status = 'GL COMPLETE' or : changed I think at recommendation of Sallie
     then
      htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
      htp.tabledata( htf.formcheckbox( 'G6', c9rec.rowid ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    end if;

   htp.tablerowclose;
  end loop;

  if c2rec.status = 'GL COMPLETE' or vaccess <> 'EDIT'
   then
    null;
   else
    for j in 1..3 loop
    htp.tablerowopen;
     htp.formhidden( 'G0', null );
      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER">' );
       htp.formselectopen( 'G1' );
         htp.formselectoption( null, 'SELECTED' );
         htp.formselectoption( 'S' );
         htp.formselectoption( 'C' );
       htp.formselectclose;
      htp.p( '</TD>' );
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER">' );
        lov_list( 'PROFIT_CENTRE', 'G2', null, FALSE, FALSE, FALSE );
       htp.p( '</TD>' );
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER">' );
        lov_list( 'COST_CENTRE', 'G3', null, FALSE, FALSE, FALSE );
       htp.p( '</TD>' );
       if j = 1 and not fnd
        then
         htp.tabledata( htf.formtext( 'G4', 12, 20, trim(to_char(round(ttl3,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
         htp.tabledata( htf.formtext( 'G5', 12, 20, trim(to_char(round(ttl2,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
        else
         htp.tabledata( htf.formtext( 'G4', 12, 20),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
         htp.tabledata( htf.formtext( 'G5', 12, 20),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
       end if;
      htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    end loop;
  end if;

 htp.tableclose;

 htp.nl;
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT'
  then
   if access_id = 'z'
    then
     htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_234 ),cattributes=>'VALIGN="TOP"');
    else
     htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_235 ),cattributes=>'VALIGN="TOP"');
     htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_236 ),cattributes=>'VALIGN="TOP"');
     if c2rec.completed <> 'COMPLETE'
      then
       htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_237 ),cattributes=>'VALIGN="TOP"');
     end if;
     htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_398 ),cattributes=>'VALIGN="TOP"');
     htp.tabledata( htf.formsubmit( 'ACTION', 'Draft Invoice' ),cattributes=>'VALIGN="TOP"');
     htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_234 ),cattributes=>'VALIGN="TOP"');
   end if;
   htp.formclose;
 end if;

 search( surl, 'INVOICES', nrid, samerow=>TRUE );
 htp.tablerowclose;
 htp.tableclose;
 -- display_report( surl, owner_id, 'REPORT C','Invoicing',c2rec.invoiceno);
 -- display_report( surl, owner_id, 'REPORT C','Invoices Report',to_char(add_months(sysdate,-1),'DD-MON-YYY'),to_char(sysdate,'DD-MON-YYY'));
 -- display_report( surl, owner_id, 'REPORT C','Charges Report',substr(c2rec.invoiceno,3,10),substr(c2rec.invoiceno,3,10),substr(c2rec.invoiceno,1,2));
 -- display_report( surl, owner_id, 'REPORT C','Seafreight Statistics',c2rec.invoiceno);
 -- display_report( surl, owner_id, 'REPORT C','Airfreight Statistics',to_char(add_months(sysdate,-1),'DD-MON-YYY'),to_char(sysdate,'DD-MON-YYY'));
-- open c5( c2rec.invoiceno );
-- fetch c5 into c5rec;
-- close c5;
 -- display_report( surl, owner_id, 'REPORT C','GST Rebate - All Codes',to_char(add_months(sysdate,-1),'DD-MON-YYY'),to_char(sysdate,'DD-MON-YYY'),c5rec.cust_customer_id);
 -- display_report( surl, owner_id, 'REPORT C','GST Rebate - Net Only',c2rec.invoiceno);

 if seclevel = 'LEVEL 7'
  then
   download_gl( surl, rid, scid, call_name, parm, access_id, c1rec, vste, pfx, vaccess );
 end if;

 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'INV',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end inv;

procedure download_gl(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, cusrec in customer_account%ROWTYPE, vste in varchar2, pfx in THEME%ROWTYPE, vaccess in varchar2 )
as
-- cursor c1 is select * from all_jobs where upper(what) like 'STRANGP.DO_DOWNLOAD_GL%';
 cursor c1 is select * from all_scheduler_jobs where upper(job_name) like '%DO_DOWNLOAD_GL%';
 cursor c2( cd varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and code = cd and cola = 'SYD';
 c1rec  c1%ROWTYPE;
 c2rec  c2%ROWTYPE;
begin

 htp.line;
 htp.bold( 'Invoice Download Control' );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
    htp.tabledata( htf.bold('Manual Run'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3"');
  htp.tablerowclose;
  htp.formopen( 'strangp.do_download_gl' );
   open c2( 'INVOICE_INTERFACE_DIRECTORY' );
   fetch c2 into c2rec;
   close c2;
  htp.tablerowopen;
    htp.tabledata( htf.bold('Directory'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formhidden( 'RUN_ONCE', 'T' ) ||
                   htf.formtext('VDIR', 40, 100, c2rec.description ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
   c2rec.description := NULL;
   open c2( 'INVOICE_INTERFACE_FILENAME' );
   fetch c2 into c2rec;
   close c2;
  htp.tablerowopen;
    htp.tabledata( htf.bold('File Name'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext('FNAME', 40, 100, c2rec.description ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
    htp.tabledata( htf.bold('From Invoice Date'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext('FRM', 30, 100, to_char(sysdate,'DD-Mon-YYYY') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
    htp.tabledata( htf.bold('To Invoice Date'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formtext('FTO', 30, 100, to_char(sysdate,'DD-Mon-YYYY') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
    htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.formsubmit( null, 'Manual Run'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.formclose;

  htp.tablerowopen;
    htp.tabledata( htf.bold('Batch Run Details'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3"');
  htp.tablerowclose;
  open c1;
  fetch c1 into c1rec;
  if c1%FOUND
   then
    close c1;
   -- htp.tablerowopen;
   --   htp.tabledata( htf.bold('Job Number'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   --   htp.tabledata( htf.bold(c1rec.job), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   -- htp.tablerowclose;
    htp.tablerowopen;
      htp.tabledata( htf.bold('Name'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.bold(c1rec.job_name), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    htp.tablerowopen;
      htp.tabledata( htf.bold('Next Run at'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.bold(to_char(c1rec.next_run_date,'DD Mon YYYY HH24:MI')), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    htp.tablerowopen;
      htp.tabledata( htf.bold('Frequency'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.p('<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
      if c1rec.repeat_interval like '%BYDAY%'
       then
        htp.bold(regexp_replace(c1rec.repeat_interval, '^(.+)(BYDAY=)([^;]*)(;)(.+)', '\3')); htp.nl;
      end if;
      if c1rec.repeat_interval like '%BYHOUR%'
       then
        htp.bold(replace(regexp_replace(c1rec.repeat_interval, '^(.+)(BYHOUR=)([^;]*)(;)(.+)', '\3'), ',', ':00, ') || ':00');
      end if;
      htp.p('</TD>');
    htp.tablerowclose;
    htp.tablerowopen;
      htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--      htp.tabledata( htf.formopen( 'strangp.stop_batch_job' ) || htf.formsubmit( null, 'Stop Batch Job' ) || htf.formclose, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=""');
    htp.formopen( 'strangp.stop_batch_job' );
    htp.formhidden( 'SURL', surl );
    htp.formhidden( 'SCID', scid );
    htp.formhidden( 'PARM', parm );
    htp.formhidden( 'ACCESS_ID', access_id );
    htp.formhidden( 'RID', rid );

    htp.tabledata( htf.formsubmit( null, 'Stop Batch Job' ) || htf.formclose, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=""');
    htp.tablerowclose;
   else
    close c1;
    htp.tablerowopen;
      htp.tabledata( htf.bold('No Job is on the Queue'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN="2"');
    htp.tablerowclose;
    htp.tablerowopen;
      htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--      htp.tabledata( htf.formopen( 'strangp.start_batch_job' ) || htf.formsubmit( null, 'Start Batch Job' ) || htf.formclose, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.formopen( 'strangp.start_batch_job' );
    htp.formhidden( 'SURL', surl );
    htp.formhidden( 'SCID', scid );
    htp.formhidden( 'PARM', parm );
    htp.formhidden( 'ACCESS_ID', access_id );
    htp.formhidden( 'RID', rid );

    htp.tabledata( htf.formsubmit( null, 'Start Batch Job' ) || htf.formclose, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=""');
    htp.tablerowclose;
  end if;
 htp.tableclose;

end download_gl;

procedure do_download_gl( vdir in varchar2 default null, fname in varchar2 default null, frm in varchar2 default null, fto in varchar2 default null, run_once in char default 'F' )
as

 cursor c1( cd varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and code = cd and cola = 'SYD';
 cursor c2( frm date, fto date ) is
  select *
  from strang.unload_strang
  where ((frm is null) or (frm is not null and invdate >= frm)) and
        ((fto is null) or (fto is not null and invdate <= fto));

 c2rec  c2%ROWTYPE;
 frec   boolean;
 fl     utl_file.file_type;
 dr     varchar2(1000);
 fn     varchar2(1000);
 bfr    varchar2(32767);
 sd     date;
 tm     varchar2(100);
 tmp    varchar2(100);
 tmn    integer;
 jb     number;
 ctr    integer;

begin
 if vdir is null
  then
   open c1( 'INVOICE_INTERFACE_DIRECTORY' );
   fetch c1 into dr;
   close c1;
  else
   dr := vdir;
 end if;

 if fname is null
  then
   open c1( 'INVOICE_INTERFACE_FILENAME' );
   fetch c1 into fn;
   close c1;
  else
   fn := fname;
 end if;

 sd := sysdate;
 fn := fn || to_char(sd,'DD_MON_YYYY_HH24_MI' ) || '.csv';

 open c2(to_date(frm,'DD-Mon-YYYY'), to_date(fto,'DD-Mon-YYYY') + (99999/100000));
 fetch c2 into c2rec;
  frec := c2%FOUND;
 close c2;

 ctr := 0;
 if frec
  then
   begin
    fl := utl_file.fopen( dr, fn, 'w', 32767 );
   exception
    when others then
     htp.htmlopen;
      htp.header(2,'Unload Could not Run' );
      htp.header(3,'File could not be created:' || dr || '\' || fn );
      htp.nl;
      htp.header(4,'Hit Back Button to return to previous screen and try again.' );
     htp.htmlclose;
     return;
   end;

   for c2rec in c2(to_date(frm,'DD-Mon-YYYY'), to_date(fto,'DD-Mon-YYYY') + (99999/100000)) loop
    if c2rec.total < 0 then
      tmp:= 'C' ;
   else
     tmp:= 'I' ;
   end if;
    bfr := '"' || tmp || '",' ||
         '"' ||
         c2rec.debtor_branch || '","' ||
         c2rec.debtor_code || '","' ||
--         to_char(c2rec.invdate,'DD-MON-YYYY') || '","' ||
         to_char(c2rec.invdate,'DDMMYYYY') || '","' ||
         c2rec.invoiceno || '",' ||
         c2rec.total || ',' ||
         c2rec.gst || ',"' ||
         c2rec.job_branch || '","' ||
--         c2rec.profit_centre || '","' ||
         c2rec.job_code || '","' ||
         c2rec.cost_centre || '","' ||
         c2rec.transaction_type || '","' ||
         substr(trim(replace(replace(replace(c2rec.invdesc,chr(13),' '),chr(10),' '),chr(11),' ')),1,60) || '"' ;

    utl_file.put_line( fl, bfr );
    ctr := ctr + 1;
   end loop;
   utl_file.fclose( fl );

   -- Update invoice to indicate unloaded
   update strang.invoices
    set
     transfer_date = sd
   where
    (invoiceno,invdate) in
    (select invoiceno,invdate
     from strang.unload_strang
    where ((frm is null) or (frm is not null and invdate >= to_date(frm,'DD-Mon-YYYY'))) and
           ((fto is null) or (fto is not null and invdate <= to_date(fto,'DD-Mon-YYYY') + (99999/100000)))
    );

   commit;
 end if;

 if run_once = 'T'
  then
   htp.htmlopen;
    htp.header(2,'Unload has run.' );
    if ctr = 0
     then
      htp.header( 3, 'No Rows Unloaded.' );
     else
      htp.header( 3, '# Rows Unloaded: ' || ctr );
    end if;
    htp.header(3,'Check output in file:' || dr || '\' || fn );
    htp.nl;
    htp.header(4,'Hit Back Button to return to previous screen' );
   htp.htmlclose;
   return;
 end if;

 /* Remove - not needed for dbms_scheduler
 -- Resubmit
 open c1( 'INVOICE_INTERFACE_FREQUENCY' );
 fetch c1 into tm;
 close c1;
 begin tmn := to_number(tm); exception when others then tmn := null; end;
 tmn := nvl(tmn,24);

 dbms_job.submit( jb, 'strangp.do_download_gl;', sysdate + (tmn/24) );
 */

exception
 when others then
 glbx.error_details( 'STRANGP', 'DO_DOWNLOAD_GL',null,null,errmsg=>sqlerrm);
end do_download_gl;
/*
procedure start_batch_job
as
 cursor c1( cd varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and code = cd and cola = 'SYD';
 jb	number;
 tm	varchar2(100);
 tmn	integer;
begin

 -- Resubmit
 open c1( 'INVOICE_INTERFACE_FREQUENCY' );
 fetch c1 into tm;
 close c1;
 begin tmn := to_number(tm); exception when others then tmn := null; end;
 tmn := nvl(tmn,24);
 dbms_job.submit( jb, 'strangp.do_download_gl;', sysdate + (tmn/24) );
   htp.htmlopen;
    htp.header( 2,'Job Started' );
    htp.header( 2,'Click Back Button to go back' );
   htp.htmlclose;

exception
 when others then
 glbx.error_details( 'STRANGP', 'START_BATCH_JOB',null,null,errmsg=>sqlerrm);
end start_batch_job;

procedure stop_batch_job
as
 cursor c1 is select * from all_jobs where upper(what) like 'STRANGP.DO_DOWNLOAD_GL%';
 c1rec  c1%ROWTYPE;
begin
 open c1;
 fetch c1 into c1rec;
 if c1%FOUND
  then
   close c1;
   dbms_job.remove(c1rec.job);
   htp.htmlopen;
    htp.header( 2,'Job Stopped' );
    htp.header( 2,'Click Back Button to go back' );
   htp.htmlclose;
   return;
 end if;
 close c1;
 htp.htmlopen;
  htp.header( 2,'Job is not running' );
  htp.header( 2,'Click Back Button to go back' );
 htp.htmlclose;

exception
 when others then
 glbx.error_details( 'STRANGP', 'STOP_BATCH_JOB',null,null,errmsg=>sqlerrm);
end stop_batch_job;
*/

procedure start_batch_job(surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null )
as
 cursor c1( cd varchar2 ) is select description from strang.lov where lov_name = 'CONTROLS' and code = cd and cola = 'SYD';
 jb	number;
 tm	varchar2(1000);

begin

 -- Resubmit
 open c1( 'INVOICE_INTERFACE_FREQUENCY' );
 fetch c1 into tm;
 close c1;

 dbms_scheduler.create_job(  job_name=> 'do_download_gl'
                           , job_type=> 'STORED_PROCEDURE'
                           , job_action=> 'strangp.do_download_gl'
                           , repeat_interval=> 'FREQ=' || tm
                           , number_of_arguments=> 0
                           , enabled=> TRUE
                           , comments=> 'Invoice Download'
                          )
;

inv( surl, rid, scid, null, parm, access_id, 'Batch Job Started');
--   htp.htmlopen;
--    htp.header( 2,'Job Started' );
--    htp.header( 2,'Click Back Button to go back' );
--   htp.htmlclose;

exception
 when others then
 glbx.error_details( 'STRANGP', 'START_BATCH_JOB',null,null,errmsg=>sqlerrm);
end start_batch_job;

procedure stop_batch_job(surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null )
as
 cursor c1 is select * from all_scheduler_jobs where upper(job_name) like '%DO_DOWNLOAD_GL%';
 c1rec  c1%ROWTYPE;
begin
 open c1;
 fetch c1 into c1rec;
 if c1%FOUND
  then
   close c1;
   dbms_scheduler.drop_job(c1rec.job_name);
   inv( surl, rid, scid, null, parm, access_id, 'Batch Job Stopped');
--   htp.htmlopen;
--    htp.header( 2,'Job Stopped' );
--    htp.header( 2,'Click Back Button to go back' );
--   htp.htmlclose;
   return;
 end if;
 close c1;

 inv( surl, rid, scid, null, parm, access_id, 'Batch Job is not Running');

-- htp.htmlopen;
--  htp.header( 2,'Job is not running' );
--  htp.header( 2,'Click Back Button to go back' );
-- htp.htmlclose;

exception
 when others then
 glbx.error_details( 'STRANGP', 'STOP_BATCH_JOB',null,null,errmsg=>sqlerrm);
end stop_batch_job;

procedure accept_inv( surl in varchar2, scid in integer, parm in varchar2, access_id in varchar2, rid in varchar2, action in varchar2,
                      p1 in varchar2, p2 in varchar2, p3 in varchar2, p4 in varchar2, p5 in varchar2, p6 in varchar2, p7 in varchar2, p8 in varchar2,
                      p9 in varchar2, p10 in varchar2, p11 in varchar2, p12 in varchar2, psts in varchar2,
                      r0 in GLBX.MYARRAY, r1 in GLBX.MYARRAY, r2 in GLBX.MYARRAY, r3 in GLBX.MYARRAY, r4 in GLBX.MYARRAY, r5 in GLBX.MYARRAY, r6 in GLBX.MYARRAY, r7 in GLBX.MYARRAY,
                      g0 in GLBX.MYARRAY, g1 in GLBX.MYARRAY, g2 in GLBX.MYARRAY, g3 in GLBX.MYARRAY, g4 in GLBX.MYARRAY, g5 in GLBX.MYARRAY, g6 in GLBX.MYARRAY)
as

 cursor c1(invnmb varchar2) is select 'x' tot from strang.invoices where invoiceno = invnmb;
 cursor c2(rid rowid) is select invoiceno from strang.invoices where rowid = rid;
 cursor c3(cde varchar2, nmb1 number, nmb2 number)
  is
  select decode(colb,LNGS.STR_TXT_366,0,
                     LNGS.STR_TXT_367,(nmb1*nmb2) - ((100 * (nmb1*nmb2)) / (100 + nvl(cola,0) )),
                     LNGS.STR_TXT_368,(nmb1*nmb2) * ((nvl(to_number(cola),0))/100) ) subgst,
         decode(colb,LNGS.STR_TXT_366,(nmb1*nmb2),
                     LNGS.STR_TXT_367,(nmb1*nmb2),
                     LNGS.STR_TXT_368,(nmb1*nmb2) + ((nmb1*nmb2) * ((nvl(to_number(cola),0))/100)) ) newtotal
  from strang.lov
  where lov_name = 'GSTCODES' and
        code = cde;
 cursor c4(cde varchar2 ) is select * from strang.charges where chargecode = cde;
 cursor c5(inv1 varchar2, cge2 varchar2 ) is select 'x' ex from strang.invcharges where inv_invoiceno = inv1 and cge_chargecode = cge2;
 cursor c6(inv varchar2) is select nvl(max(recno),0)+1 nmb from strang.general_ledger where invoiceno = inv;
 cursor c7(lname varchar2, cd varchar2) is select cola from strang.lov where lov_name = lname and code = cd;
 cursor c8(invc varchar2) is
   select decode(nvl(i.gstc_gstcode,'EX'), 'EX', c.sales_costcentre_no_gst, c.sales_costcentre_gst) tt,
         c.costs_costcentre,
         sum( ((cgrate*quantity)+gst) ) sm,
         sum( gst ) sgst
    from strang.charges c, strang.invcharges i, strang.invoices inv
    where c.chargecode = i.cge_chargecode and
          inv.invoiceno = i.inv_invoiceno and
          inv.invoiceno = invc
    group by decode(nvl(i.gstc_gstcode,'EX'), 'EX', c.sales_costcentre_no_gst, c.sales_costcentre_gst), c.costs_costcentre;
 cursor c9(invc varchar2) is
   select c.costs_costcentre tt
    from strang.charges c, strang.invcharges i, strang.invoices inv
    where c.chargecode = i.cge_chargecode and
          inv.invoiceno = i.inv_invoiceno and
          inv.invoiceno = invc
    group by c.costs_costcentre;
 cursor c10(invc varchar2) is select status from strang.invoices where invoiceno=invc;
 cursor c11(invc varchar2, trtyp varchar2) is select sum(total) from strang.general_ledger where invoiceno=invc and transaction_type=trtyp;
 cursor c12( invno varchar2 ) is select cgrate, quantity, gst from strang.invcharges where inv_invoiceno = invno order by cge_chargecode;

 cusrec		customer_account%ROWTYPE;
 c1rec		c1%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c5rec		c5%ROWTYPE;
 c7rec		c7%ROWTYPE;
 c12rec		c12%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 pfx		THEME%ROWTYPE;
 newrid		rowid;
 sts		varchar2(100);
 nmb1		number;
 nmb2		number;
 nmb3s		number;
 nmb3t		number;
 nmb4		integer;
 rc		integer;
 dt1		date;
 err		boolean;
 prdone		char(1);
 vp8		varchar2(4000);
 vmsg		varchar2(1000);
 totsales	number;
 totchrg	number;
 ttl1		number;
 prev_status	varchar2(14);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_SHP' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 if action = LNGS.STR_TXT_234 and access_id <> 'z'
  then
   inv(surl,null,scid,null,parm,'z',LNGS.STR_TXT_234 );
   return;
 end if;

 if action = LNGS.STR_TXT_235
  then
   open c2(chartorowid( replace(rid,'~','+') ));
   fetch c2 into c2rec;
   close c2;
   open c10(c2rec.invoiceno);
   fetch c10 into prev_status;
   close c10;
 end if;

 if action = LNGS.STR_TXT_398
  then
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
   invoke_report(surl,repname=>'Invoice',r1=>c2rec.invoiceno,r2=>'Y',r3=>NULL);
   return;
 end if;

 if action = 'Draft Invoice'
  then
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
   invoke_report(surl,repname=>'draft_invoice',r1=>c2rec.invoiceno,r2=>'Y',r3=>NULL);
   return;
 end if;

 vmsg := NULL;
 begin dt1 := to_date(p3,LNGS.STR_DATE_02); exception when others then inv( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_152 || ':' || p3 || ' ' || LNGS.STR_TXT_153 || ':' || LNGS.STR_DATE_02 ); return; end;
 if p1 is null and access_id = 'z'
  then
    inv( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_238 );
    return;
 end if;
 if p2 is null and access_id = 'z'
  then
    inv( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_239 );
    return;
 end if;
 if p3 is null and access_id = 'z'
  then
    inv( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_240 );
    return;
 end if;

 if action = LNGS.STR_TXT_400 -- Confirm Deletion of this Invoice
  then
   update strang.movements set invoiceno = null, date_modified = sysdate where invoiceno = (select invoiceno from strang.invoices where rowid = chartorowid( replace(rid,'~','+') ));
   delete from strang.invcharges where inv_invoiceno = (select invoiceno from strang.invoices where rowid = chartorowid( replace(rid,'~','+') ));
   delete from strang.general_ledger where invoiceno = (select invoiceno from strang.invoices where rowid = chartorowid( replace(rid,'~','+') ));
   delete from strang.invoices where rowid = chartorowid( replace(rid,'~','+') );
   insert into strang.invdels(invoiceno,invdate,deldate) values (p1,dt1,sysdate);
   commit;
   inv(surl,null,scid,null,parm,'z',LNGS.STR_TXT_401);
   return;

 elsif action = LNGS.STR_TXT_237 -- Delete Invoice
  then
    cusrec := glbx.get_aid( owner_id, 'C', ltype );
    pfx := glbx.get_thm( cusrec.theme_name );
    open c2(replace(rid,'~','+'));
    fetch c2 into c2rec;
    close c2;
    glbx.main_title( surl, LNGS.STR_TXT_400 || ' : ' || c2rec.invoiceno,glbx.backimg(surl,cusrec.aid,pfx.text_back,cusrec.background_img,ltype),helpid=>'STR12',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
    htp.formopen( 'strangp.accept_inv' );
    htp.p( '<CENTER>' );
    htp.nl;
    htp.nl;
    htp.nl;
    htp.formhidden( 'SURL', surl );
    htp.formhidden( 'SCID', scid );
    htp.formhidden( 'PARM', parm );
    htp.formhidden( 'ACCESS_ID', access_id );
    htp.formhidden( 'RID', replace(rid,'~','+') );
    htp.formhidden( 'P1', p1 );
    htp.formhidden( 'P2', p2 );
    htp.formhidden( 'P3', p3 );
    htp.formhidden( 'P4', p4 );
    htp.formhidden( 'P5', p5 );
    htp.formhidden( 'P6', p6 );
    htp.formhidden( 'P7', p7 );
    htp.formhidden( 'P8', p8 );
    htp.formhidden( 'P9', p9 );
    htp.formhidden( 'P10', p10 );
    htp.formhidden( 'P11', p11 );
    htp.formhidden( 'P12', p12 );
    htp.formhidden( 'PSTS', psts );
    for j in r0.first..r0.last loop
     htp.formhidden( 'R0', r0(j) );
    end loop;
    for j in r1.first..r1.last loop
     htp.formhidden( 'R1', r1(j) );
    end loop;
    for j in r2.first..r2.last loop
     htp.formhidden( 'R2', r2(j) );
    end loop;
    for j in r3.first..r3.last loop
     htp.formhidden( 'R3', r3(j) );
    end loop;
    for j in r4.first..r4.last loop
     htp.formhidden( 'R4', r4(j) );
    end loop;
    for j in r5.first..r5.last loop
     htp.formhidden( 'R5', r5(j) );
    end loop;
    for j in r6.first..r6.last loop
     htp.formhidden( 'R6', r6(j) );
    end loop;
    for j in r7.first..r7.last loop
     htp.formhidden( 'R7', r7(j) );
    end loop;
    for j in g0.first..g0.last loop
     htp.formhidden( 'G0', g0(j) );
    end loop;
    for j in g1.first..g1.last loop
     htp.formhidden( 'G1', g1(j) );
    end loop;
    for j in g2.first..g2.last loop
     htp.formhidden( 'G2', g2(j) );
    end loop;
    for j in g3.first..g3.last loop
     htp.formhidden( 'G3', g3(j) );
    end loop;
    for j in g4.first..g4.last loop
     htp.formhidden( 'G4', g4(j) );
    end loop;
    for j in g5.first..g5.last loop
     htp.formhidden( 'G5', g5(j) );
    end loop;
    for j in g6.first..g6.last loop
     htp.formhidden( 'g6', g6(j) );
    end loop;
    htp.formsubmit( 'ACTION', LNGS.STR_TXT_400 );
    htp.formclose;
    htp.p( '</CENTER>' );
    htp.htmlclose;
    return;
 end if;

 vp8 := substr(p8,1,4000);
 if access_id = 'z'
  then
   open c1(p1);
   fetch c1 into c1rec;
   if c1%FOUND
    then
     close c1;
     inv( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_241 || ':' || p1 );
     return;
   end if;
   close c1;
   insert into strang.invoices(invoiceno,ctrk_contract,invdate,completed,billingmonth,billingyear,owner,invdesc,gstinclusive,job_branch,debtor_branch,debtor_code,job_code,status) values
    (p1,p2,dt1,p4,p5,p6,p7,vp8,'Y',p9,p10,p11,nvl(p12,p1),psts)
    returning rowid into newrid; -- Added change to use invoice no instead of x.
   if p12 is null then vmsg := 'Job Code must have a value'; end if;
  else
   update strang.invoices
    set
     ctrk_contract = p2,
     invdate = nvl(dt1,invdate),
     completed = p4,
     billingmonth = p5,
     billingyear = p6,
     owner = p7,
     invdesc = vp8,
     job_branch = p9,
     debtor_branch = p10,
     debtor_code = p11,
     job_code = nvl(p12,job_code),
     status = psts
   where
    rowid = chartorowid( replace(rid,'~','+') );
   if p12 is null then vmsg := 'Job Code must have a value'; end if;
   if dt1 is null then vmsg := vmsg || ' ' || 'Inv Date must have a value'; end if;
   open c2(chartorowid( replace(rid,'~','+') ));
   fetch c2 into c2rec;
   close c2;
   if c2rec.invoiceno <> p1
    then
     open c1(p1);
     fetch c1 into c1rec;
     if c1%FOUND
      then
       close c1;
       rollback;
       inv( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_241 || ':' || p1 || ' ' || vmsg);
       return;
      end if;
     close c1;
     -- Cascade Update
     update strang.invcharges set inv_invoiceno = p1 where inv_invoiceno = c2rec.invoiceno;
     update strang.invdels set invoiceno = p1 where invoiceno = c2rec.invoiceno;
     update strang.movements set invoiceno = p1, date_modified = sysdate where invoiceno = c2rec.invoiceno;
     update strang.invoices set invoiceno = p1 where rowid = chartorowid( replace(rid,'~','+') );
   end if;
 end if;

 for j in r0.first..r0.last loop
   begin nmb1 := to_number( r3(j) ); exception when others then nmb1 := null; end;
   begin nmb2 := to_number( r5(j) ); exception when others then nmb2 := null; end;
   nmb2 := nvl(nmb2,1);
   open c3(r6(j),nmb1,nmb2);
   fetch c3 into nmb3s,nmb3t;
   if c3%NOTFOUND then nmb3s := 0; end if;
   close c3;
   if r0(j) is null
   then
    -- Insert
    if r1(j) is not null
     then
     open c4( r1(j) );
     fetch c4 into c4rec;
     close c4;
     open c3(c4rec.gstc_gstcode,c4rec.rate,nmb2);
     fetch c3 into nmb3s,nmb3t;
     close c3;
     open c5(p1,c4rec.chargecode);
     fetch c5 into c5rec;
     if c5%FOUND
      then
       close c5;
      else
       close c5;
       insert into strang.invcharges(inv_invoiceno,quantity,cgunit,cgdesc,cge_chargecode,cgrate,gstc_gstcode,gst) values
       (p1,nmb2,c4rec.unit_unitused,nvl(c4rec.chargedesc,LNGS.STR_TXT_242),c4rec.chargecode,c4rec.rate,c4rec.gstc_gstcode,nmb3s);
     end if;
    end if;
   else
    -- Update
    if r1(j) = r0(j)
     then
      update strang.invcharges
       set
        quantity = nmb2,
        cgunit = r4(j),
        cgdesc = nvl(r2(j),LNGS.STR_TXT_242),
        cgrate = nmb1,
        gstc_gstcode = r6(j),
        gst = nmb3s
      where inv_invoiceno = p1 and
            cge_chargecode = r1(j);
     else
      update strang.invcharges
       set
        cge_chargecode = r1(j),
        quantity = nmb2,
        cgunit = r4(j),
        cgdesc = nvl(r2(j),LNGS.STR_TXT_242),
        cgrate = nmb1,
        gstc_gstcode = r6(j),
        gst = nmb3s
      where inv_invoiceno = p1 and
            cge_chargecode = r0(j);
    end if;
  end if;
 end loop;

 prdone := 'T';
 for j in g0.first..g0.last loop
-- glbx.dbg( 'X:' || g0.first || '-' || g0.last || ':' || j );

   begin
    nmb1 := to_number( g4(j) );
   exception when others then
    begin
     nmb1 := to_number( g4(j),LNGS.MONEY_FORMAT );
    exception when others then
     begin
      nmb1 := to_number( g4(j),LNGS.MONEY_FORMAT2 );
     exception when others then
      vmsg := vmsg || htf.nl || 'General Ledger line ' || j || ' "Total" incorrect money format: ' || g4(j);
      nmb1 := 0;
     end;
    end;
   end;
   begin nmb2 := to_number( g5(j) );
   exception when others then
    begin
     nmb2 := to_number( g5(j),LNGS.MONEY_FORMAT );
    exception when others then
     begin
      nmb2 := to_number( g5(j),LNGS.MONEY_FORMAT2 );
     exception when others then
      vmsg := vmsg || htf.nl || 'General Ledger line ' || j || ' "GST" incorrect money format: ' || g5(j);
      nmb2 := 0;
     end;
    end;
   end;
   nmb2 := nvl(nmb2,0);

   err := FALSE;
   if g3(j) is not null and g1(j) is not null
    then
     open c7('COST_CENTRE',g3(j));
     fetch c7 into c7rec;
     close c7;
   end if;
   if c7rec.cola is not null and g3(j) is not null
    then
     if g1(j) <> c7rec.cola
      then
       -- error
       err := TRUE;
       if vmsg is not null then vmsg := vmsg || htf.nl; end if;
       vmsg := vmsg || 'Cost Centre not correct for Transaction Type';
     end if;
   end if;

   if err
    then
     null;
   elsif g0(j) is null
    then

     -- Modified to remove profit centre
     if g3(j) is not null and nmb1 is not null
      then
       open c6( p1 );
       fetch c6 into nmb4;
       close c6;
       if g1(j) = 'C' then nmb2 := 0; end if;
       insert into strang.general_ledger(invoiceno,recno,transaction_type,cost_centre,total,gst) values
        (p1,nmb4,g1(j),g3(j),nmb1,nmb2);
     --elsif g2(j) is not null and g3(j) is null
   --  elsif g3(j) is null
   --   then
   --    if vmsg is not null then vmsg := vmsg || htf.nl; end if;
   --    vmsg := vmsg || 'Cost Centre not entered';
     --elsif g2(j) is null and g3(j) is not null
     -- then
     --  if vmsg is not null then vmsg := vmsg || htf.nl; end if;
     --  vmsg := vmsg || 'PROFIT CENTRE/S NEED TO BE ENTERED';
     --  prdone := 'F';
     end if;

    else

     if g1(j) = 'C' then nmb2 := 0; end if;
     update strang.general_ledger
      set
       transaction_type = g1(j),
       -- profit_centre = g2(j),
       cost_centre = g3(j),
       total = nmb1,
       gst = nmb2
     where invoiceno = p1 and
           recno = g0(j);
   end if;
 end loop;

 for j in r7.first..r7.last loop
  if r7(j) is not null
   then
    delete from strang.invcharges where rowid = chartorowid( r7(j) );
  end if;
 end loop;

 for j in g6.first..g6.last loop
  if g6(j) is not null
   then
    delete from strang.general_ledger where rowid = chartorowid( g6(j) );
  end if;
 end loop;

 if action = 'Populate GL'
  then
   delete from strang.general_ledger
    where invoiceno = p1;
   rc := 0;
   for c8rec in c8(p1) loop
    rc := rc + 1;
    insert into strang.general_ledger(invoiceno,recno,transaction_type,profit_centre,cost_centre,total,gst) values
     (p1, rc, 'S', 'X', nvl(c8rec.tt,'X'), nvl(c8rec.sm,0), nvl(c8rec.sgst,0) );
   end loop;
   for c9rec in c9(p1) loop
    rc := rc + 1;
    insert into strang.general_ledger(invoiceno,recno,transaction_type,profit_centre,cost_centre,total,gst) values
     (p1, rc, 'C', 'X', nvl(c9rec.tt,'X'), 0, 0 );
   end loop;

   -- Change status to complete automatically
   update strang.invoices
    set
     completed = decode(prdone,'T','COMPLETE',completed)
   where
    rowid = chartorowid( replace(rid,'~','+') );

 end if;

 if action = LNGS.STR_TXT_235 and    -- Update Invoice ?
    psts = 'GL COMPLETE' and         -- Status changing from GL INCOMPLETE to GL COMPLETE
    prev_status = 'GL INCOMPLETE'
  then
   open c11(c2rec.invoiceno, 'C');
   fetch c11  into totchrg;
   close c11;
   open c11(c2rec.invoiceno, 'S');
   fetch c11 into totsales;
   close c11;
   ttl1 := 0;
   for c12rec in c12(c2rec.invoiceno) loop
     ttl1 := ttl1 + round(nvl(c12rec.cgrate*c12rec.quantity+c12rec.gst,0), 2);
   end loop;
   ttl1 := round(ttl1,2);
   if totchrg > totsales or
      totsales <> ttl1
    then
     if totchrg > totsales
      then
       vmsg := 'GL COSTS CANNOT EXCEED SALES';
     end if;
     if totsales <> ttl1
      then
       vmsg := vmsg || '<BR>SALES TOTAL (' || totsales  || ') MUST EQUAL TOTAL INVOICE VALUE (' || ttl1 || ')';
     end if;
     update strang.invoices set status = 'GL INCOMPLETE' where rowid = chartorowid( replace(rid,'~','+') );
--   else
--     update strang.invoices set invdate=sysdate where rowid = chartorowid( replace(rid,'~','+') );
   end if;
 end if;

 commit;

 if access_id = 'z'
  then
   inv( surl, newrid, scid, null, parm, 'x', nvl(vmsg,LNGS.STR_TXT_243) );
  else
   if action in (LNGS.STR_TXT_235, 'Populate GL')
    then
     inv( surl, rid, scid, null, parm, access_id, nvl(vmsg,LNGS.STR_TXT_161) );
    else
     inv2( surl, rid, scid, null, parm, access_id, nvl(vmsg,LNGS.STR_TXT_161) );
    end if;
 end if;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_INV',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_inv;

procedure inv2(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null )
as

 cursor c2( rid rowid ) is select * from strang.invoices where rowid = rid;
 cursor c3( invno varchar2 ) is select rowid,movement_no,seal,movement_type from strang.movements where invoiceno = invno;
 cursor c4( mtype varchar2 ) is select rowid,movement_no,seal from strang.movements where invoiceno is null and (nvl(dispatch_date,sysdate) > (sysdate-90)) and movement_type = mtype order by 2, 3;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 mn		char(3);
 ttl1		number;
 ttl2		number;
 vaccess	varchar2(20);
 seclevel	varchar2(20);
begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.INV2' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'INVOICING', rid );
 seclevel := oltp.security_role( c1rec.aid );

 glbx.main_title( surl, LNGS.STR_TXT_236,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR13',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '<CENTER>' );
  if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
  if SECLEVEL IN ('LEVEL 1','LEVEL 2','LEVEL 3','LEVEL 4','LEVEL 5') then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 open c2(replace(rid,'~','+'));
 fetch c2 into c2rec;
 close c2;

 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_inv2' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'RID', replace(rid,'~','+') );
 end if;

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_227),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold(c2rec.invoiceno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_172),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold(c2rec.completed),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_057),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( to_char(c2rec.weight)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_058),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( to_char(c2rec.volume)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_244),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( to_char(c2rec.revton)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_245),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( to_char(c2rec.gross)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( LNGS.STR_TXT_246,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_148),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( to_char(c2rec.chargeweight)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( LNGS.STR_TXT_247,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 if vaccess = 'EDIT'
  then
   if c2rec.completed = 'COMPLETE'
    then
       htp.formhidden( 'R0', null );
       htp.formhidden( 'R1', null );
       htp.formhidden( 'R2', null );
       htp.formhidden( 'R3', null );
       htp.formhidden( 'R4', null );
       htp.formhidden( 'R5', null );
   end if;
 end if;
 htp.tableopen;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_248),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_063),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_249),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold(LNGS.STR_TXT_124),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     if c2rec.completed = 'COMPLETE'
      then
       null;
      else
       htp.tabledata( htf.bold(LNGS.STR_TXT_151),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     end if;
  htp.tablerowclose;
  htp.formhidden( 'R5', null );
  for c3rec in c3( c2rec.invoiceno ) loop
  htp.tablerowopen;
   if vaccess = 'EDIT'
    then
     htp.formhidden( 'R0', rowidtochar(c3rec.rowid) );
     htp.formhidden( 'R6', c3rec.movement_type );
     if c3rec.movement_type = 'CARGO'
      then
       if c2rec.completed = 'COMPLETE'
        then
         htp.tabledata( c3rec.movement_no,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         htp.tabledata( c3rec.seal,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext( 'R1', 15, 15, c3rec.movement_no ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         htp.tabledata( htf.formtext( 'R2', 15, 15, c3rec.seal ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
       htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'R3', null );
       htp.formhidden( 'R4', null );
     elsif c3rec.movement_type = 'CONMOV'
      then
       htp.formhidden( 'R1', null );
       htp.formhidden( 'R2', null );
       htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       if c2rec.completed = 'COMPLETE'
        then
         htp.tabledata( c3rec.movement_no,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext( 'R3', 15, 15, c3rec.movement_no ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
       htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.formhidden( 'R4', null );
     elsif c3rec.movement_type = 'AIRWAY'
      then
       htp.formhidden( 'R1', null );
       htp.formhidden( 'R2', null );
       htp.formhidden( 'R3', null );
       htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       if c2rec.completed = 'COMPLETE'
        then
         htp.tabledata( c3rec.movement_no,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        else
         htp.tabledata( htf.formtext( 'R4', 15, 15, c3rec.movement_no ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
     end if;
     if c2rec.completed = 'COMPLETE'
      then
       null;
      else
       htp.tabledata( htf.formcheckbox( 'R5', c3rec.rowid ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
     end if;
   else
    if c3rec.movement_type = 'CARGO'
     then
      htp.tabledata( c3rec.movement_no,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.seal,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    elsif c3rec.movement_type = 'CONMOV'
     then
      htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.movement_no,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    elsif c3rec.movement_type = 'AIRWAY'
     then
      htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.movement_no,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    end if;
   end if;
  htp.tablerowclose;
  end loop;

 if c2rec.completed = 'COMPLETE' or vaccess <> 'EDIT'
  then
   null;
  else
   htp.tablerowopen;
     htp.formhidden( 'R0', null );
     htp.formhidden( 'R6', 'CARGO' );
     htp.formhidden( 'R2', null );
     htp.formhidden( 'R3', null );
     htp.formhidden( 'R4', null );
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
     htp.formselectopen( 'R1' );
     htp.formselectoption( NULL );
     for c4rec in c4( 'CARGO' ) loop
      htp.formselectoption( c4rec.movement_no || '-' || c4rec.seal, cattributes=>'VALUE="' || c4rec.rowid || '"'  );
     end loop;
     htp.formselectclose;
     htp.p( '</TD>' );
     htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
   htp.tablerowclose;

   htp.tablerowopen;
     htp.formhidden( 'R0', null );
     htp.formhidden( 'R6', 'CONMOV' );
     htp.formhidden( 'R1', null );
     htp.formhidden( 'R2', null );
     htp.formhidden( 'R4', null );
     htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
     htp.formselectopen( 'R3' );
     htp.formselectoption( NULL );
     for c4rec in c4( 'CONMOV' ) loop
      htp.formselectoption( c4rec.movement_no, cattributes=>'VALUE="' || c4rec.rowid || '"'  );
     end loop;
     htp.formselectclose;
     htp.p( '</TD>' );
     htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
   htp.tablerowclose;

   htp.tablerowopen;
     htp.formhidden( 'R0', null );
     htp.formhidden( 'R6', 'AIRWAY' );
     htp.formhidden( 'R1', null );
     htp.formhidden( 'R2', null );
     htp.formhidden( 'R3', null );
     htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( '&nbsp;' ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
     htp.formselectopen( 'R4' );
     htp.formselectoption( NULL );
     for c4rec in c4( 'AIRWAY' ) loop
      htp.formselectoption( c4rec.movement_no, cattributes=>'VALUE="' || c4rec.rowid || '"'  );
     end loop;
     htp.formselectclose;
     htp.p( '</TD>' );
     htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
   htp.tablerowclose;
 end if;
 htp.tableclose;
 htp.nl;
 if vaccess = 'EDIT'
  then
   if c2rec.completed = 'COMPLETE'
    then
     htp.formhidden( 'R0', null );
     htp.formhidden( 'R1', null );
     htp.formhidden( 'R2', null );
     htp.formhidden( 'R3', null );
     htp.formhidden( 'R4', null );
     htp.formhidden( 'R5', null );
     htp.formhidden( 'R6', null );
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_250 );
    else
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_251 );
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_252 );
   end if;
   htp.formclose;
 end if;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'INV2',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end inv2;

procedure accept_inv2( surl in varchar2, scid in integer, parm in varchar2, access_id in varchar2, rid in varchar2, action in varchar2,
                       r0 in GLBX.MYARRAY, r1 in GLBX.MYARRAY, r2 in GLBX.MYARRAY, r3 in GLBX.MYARRAY, r4 in GLBX.MYARRAY, r5 in GLBX.MYARRAY, r6 in GLBX.MYARRAY )
as

 cursor c1(rid rowid) is select invoiceno,completed from strang.invoices where rowid = rid;

 c1rec		c1%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 dt1		date;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_SHP' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 if action = LNGS.STR_TXT_250
  then
   inv( surl, rid, scid, null, parm, access_id, null );
   return;
 end if;

 open c1(chartorowid( replace(rid,'~','+') ));
 fetch c1 into c1rec;
 close c1;
 if c1rec.completed = 'COMPLETE'
  then
   inv( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_253 );
   return;
 end if;

 for j in r0.first..r0.last loop
  if r0(j) is null
  then
   if r6(j) = 'CARGO'
    then
     update strang.movements
      set
       invoiceno = c1rec.invoiceno, date_modified = sysdate
      where
       rowid = chartorowid(r1(j));
    elsif r6(j) = 'CONMOV'
     then
     update strang.movements
      set
       invoiceno = c1rec.invoiceno, date_modified = sysdate
      where
       rowid = chartorowid(r3(j));
    elsif r6(j) = 'AIRWAY'
     then
     update strang.movements
      set
       invoiceno = c1rec.invoiceno, date_modified = sysdate
      where
       rowid = chartorowid(r4(j));
   end if;
  else
   /*
   if r6(j) = 'CARGO'
    then
     update strang.movements
      set
       movement_no = r1(j),
       seal = r2(j), date_modified = sysdate
      where
       rowid = chartorowid( r0(j) );
    elsif r6(j) = 'CONMOV'
     then
     update strang.movements
      set
       movement_no = r3(j), date_modified = sysdate
      where
       rowid = chartorowid( r0(j) );
    elsif r6(j) = 'AIRWAY'
     then
     update strang.movements
      set
       movement_no = r4(j), date_modified = sysdate
      where
       rowid = chartorowid( r0(j) );
   end if;
   */
   NULL; -- commented out at the request of Sallie
  end if;
 end loop;

 for j in r5.first..r5.last loop
  if r5(j) is not null
   then
     update strang.movements
      set
       invoiceno = null, date_modified = sysdate
      where
       rowid = chartorowid( r5(j) );
  end if;
 end loop;
 commit;

 update strang.invoices i
  set
   volume = (select sum(sumvolume) from strang.movements m where m.invoiceno = i.invoiceno),
   gross = (select sum(nvl(sumweight,0)+nvl(tare,0)) from strang.movements m where m.invoiceno = i.invoiceno),
   weight = (select sum(sumweight) from strang.movements m where m.invoiceno = i.invoiceno),
   revton = (select sum(revton) from strang.movements m where m.invoiceno = i.invoiceno),
   chargeweight = (select sum(chargeweight) from strang.movements m where m.invoiceno = i.invoiceno)
 where
  invoiceno = c1rec.invoiceno;

 if action = LNGS.STR_TXT_251
  then
    inv2( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_161 );
   else
    inv( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_161 );
 end if;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_INV2',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_inv2;

procedure edit_mawb( surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, mwb in varchar2 default null, msg in varchar2 default null )
as

 cursor c2( mwb varchar2 ) is 
 select distinct h.mawb, h.hawb, h.value, dr.deliveryno, dr.itemno, h.domestic_carrier, h.domestic_flight_date, hawb_warehouse_dest
 from strang.hawbs h, strang.detailrs dr
 where h.mawb like mwb || '%' and
 h.mawb = dr.movement_no and
 nvl(dr.camov_seal,'|') = '|' and
 h.hawb=dr.hawb_hawbno
 order by hawb;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 foundrec	boolean;
 ttl1		number;
 ttl2		number;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.EDIT_MAWB' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, LNGS.STR_TXT_254,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR14',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '<CENTER>' );

 htp.formopen( 'strangp.accept_edit_mawb' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'P0', mwb );

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_124), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
   htp.tabledata( htf.formhidden( 'P1', mwb ) || htf.bold( mwb ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 if mwb is null
  then
   htp.formhidden( 'P2', null );
   htp.formhidden( 'P3', null );
   htp.formsubmit( null, LNGS.STR_TXT_255 );
   htp.formclose;
   htp.nl;
   htp.htmlclose;
   return;
 end if;
 htp.formhidden( 'P4', null );

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_163), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_164), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_256), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_017), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Domestic Carrier'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Domestic Flight Date'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Warehouse Destination'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   --htp.tabledata( htf.bold( LNGS.STR_TXT_151), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
  
  htp.tablerowclose;
  foundrec := FALSE;
  for c2rec in c2( mwb ) loop
   foundrec := TRUE;
   htp.tablerowopen;
    htp.formhidden( 'P2', c2rec.hawb );
    htp.formhidden( 'P5', c2rec.hawb );
    htp.tabledata( c2rec.deliveryno, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( c2rec.itemno, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( c2rec.hawb, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
--    htp.tabledata( htf.formtext( 'P3', 15, 1000, to_char(c2rec.value,LNGS.MONEY_FORMAT)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
    htp.tabledata( htf.formtext( 'P3', 15, 1000, to_char(nvl(c2rec.value,strang.f_display_po_total(c2rec.deliveryno)),LNGS.MONEY_FORMAT)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
    htp.tabledata( htf.formtext( 'P6', 40, 1000, c2rec.domestic_carrier), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    htp.tabledata( htf.formtext( 'P7', 15, 1000, to_char(c2rec.domestic_flight_date,LNGS.STR_DATE_02)) || ' ' || htf.italic(LNGS.STR_DATE_02),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    lov_list_warehouse( 'LOCATIONS', 'P8', c2rec.hawb_warehouse_dest, FALSE, TRUE, FALSE );
    htp.p( '</TD>' );

    -- delete removed as requested by Strang
    htp.formhidden( 'P4', null );
    -- htp.tabledata( htf.formcheckbox( 'P4', c2rec.hawb ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
   htp.tablerowclose;
  end loop;
  /*
  for j in 1..5 loop
   htp.tablerowopen;
    htp.formhidden( 'P5', null );
    htp.tabledata( htf.formtext( 'P2', 20, 1000, null), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    htp.tabledata( htf.formtext( 'P3', 20, 1000, null), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
    --htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
   htp.tablerowclose;
  end loop;
  */
  htp.tableclose;
  if not foundrec
   then
     htp.formhidden( 'P2', null );
     htp.formhidden( 'P3', null );
     htp.formhidden( 'P4', null );
     htp.formhidden( 'P5', null );
     htp.formhidden( 'P6', null );
     htp.formhidden( 'P7', null );
     htp.formhidden( 'P8', null );
     htp.formclose;
     htp.htmlclose;
     htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
    return;
    htp.bold( LNGS.STR_TXT_257 );
    htp.nl;
    htp.formsubmit( null, LNGS.STR_TXT_258 );
    htp.formclose;
    htp.nl;
    htp.htmlclose;
   return;
  end if;
  htp.nl;
  htp.formsubmit( 'ACTION', 'Carrier: Repeat 1st value' );
  htp.formsubmit( 'ACTION', 'Flight Date: Repeat 1st value' );
  htp.formsubmit( 'ACTION', 'Warehouse: Repeat 1st value' );
  htp.nl;
  htp.nl;
  htp.formsubmit( null, LNGS.STR_TXT_259 );
 htp.formclose;
  htp.nl;
  htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
  htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'EDIT_MAB',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end edit_mawb;

procedure accept_edit_mawb( surl in varchar2, scid in integer, parm in varchar2, access_id in varchar2, rid in varchar2, p0 in varchar2, p1 in varchar2, p2 in GLBX.MYARRAY, p3 in GLBX.MYARRAY, p4 in GLBX.MYARRAY, p5 in GLBX.MYARRAY,
                            p6 in GLBX.MYARRAY, p7 in GLBX.MYARRAY, p8 in GLBX.MYARRAY, action in varchar2 default 'NO_REPEAT'  )
as

 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 nmb		number(15,2);
 sts		varchar2(100);
 fdte		date;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_EDIT_MAB' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  if p0 is null
   then
    edit_mawb(surl, rid, scid, parm, access_id, p1 );
    return;
  end if;

  for j in p2.first..p2.last loop
   begin
    nmb := to_number(p3(j),LNGS.MONEY_FORMAT);
   exception
    when others
     then
      begin
       nmb := to_number(p3(j));
      exception
       when others then nmb := NULL;
      end;
    end;
    fdte := NULL;
    if p7(j) is not null then
     begin
      fdte := to_date(p7(j),LNGS.STR_DATE_02);
      exception
       when others then fdte := NULL;
     end;
    end if;
   if p2(j) is not null
    then
     if p5(j) is null
      then
       null;
       --insert into strang.hawbs(hawb,mawb,value) values (p2(j),nvl(p0,p1),nmb);
     else
       update strang.hawbs set value = nvl(nmb,value),
                               domestic_carrier = p6(j),
                               domestic_flight_date = fdte,
                               hawb_warehouse_dest = p8(j) where hawb = p2(j) and mawb = nvl(p0,p1);
       if action = 'Carrier: Repeat 1st value'
       then
        if p6(j) is null
        then
         update strang.hawbs set domestic_carrier = p6(1)where hawb = p2(j) and mawb = nvl(p0,p1);
        end if;
       end if;
       if action = 'Flight Date: Repeat 1st value'
       then
        if p7(j) is null
         then
          update strang.hawbs set domestic_flight_date = p7(1)where hawb = p2(j) and mawb = nvl(p0,p1);
        end if;
       end if;
       if action = 'Warehouse: Repeat 1st value'
       then
        if p8(j) is null
         then
          update strang.hawbs set hawb_warehouse_dest = p8(1)where hawb = p2(j) and mawb = nvl(p0,p1);
         end if;
       end if;
     end if;
   end if;
  end loop;

  /*
  for j in p4.first..p4.last loop
   if p4(j) is not null
    then
     delete from strang.hawbs where hawb = p4(j) and mawb = nvl(p0,p1);
   end if;
  end loop;
  */

  commit;

  edit_mawb(surl, rid, scid, parm, access_id, p1, LNGS.STR_TXT_260 );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_EDIT_MAWB',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_edit_mawb;
------------------------- 20180409
/* -- 20200506 Use Allocate_bols which appears on ship screen
procedure edit_local_bol( surl in varchar2, rid in varchar2, rid2 in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, shpid in varchar2 default null, msg in varchar2 default null )
as

 cursor c2( shpid integer) is select shipname,voy from strang.ships_airway where ship_id = shpid;

 cursor c3( shpid integer ) is
  select rowid,movement_no,seal,container_type,booking_ref, local_bol
  from strang.movements m
  where local_ship_id = shpid
  order by container_type, movement_no;

cursor c4(rid rowid) is
 select *
 from strang.movements
 where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 foundrec	boolean;
 ttl1		number;
 ttl2		number;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.EDIT_LOCAL_BOL' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, LNGS.STR_TXT_261,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR15',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 htp.p( '<CENTER>' );

 htp.formopen( 'strangp.accept_edit_local_bol' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'ACCESS_ID', access_id );
 htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'RID2', replace(rid2,'~','+') );
 htp.formhidden( 'P0', shpid );

 open c2(shpid);
 fetch c2 into c2rec;
 close c2;
 open c4(chartorowid(replace(rid2,'~','+')));
 fetch c4 into c4rec;
 close c4;

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_169), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
   htp.tabledata( htf.bold( c2rec.shipname), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( c2rec.voy), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.formhidden( 'P1', shpid );
  htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_248), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_063), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Cargo Type'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Booking Reference'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'LOCAL BOL'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
  htp.tablerowclose;
  foundrec := FALSE;
    for c3rec in c3( shpid ) loop
     foundrec := TRUE;
     htp.tablerowopen;
     htp.formhidden( 'P2', rowidtochar( c3rec.rowid ) );
      htp.tabledata( c3rec.movement_no, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.seal, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.container_type, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext( 'P3a', 20, 1000, c3rec.booking_ref), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P3', 20, 1000, c3rec.local_bol), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
     htp.tablerowclose;
    end loop;
  htp.tableclose;
  if not foundrec
   then
    htp.formhidden( 'P2', null );
    htp.formhidden( 'P3a', null );
    htp.formhidden( 'P3', null );
    htp.nl;
    htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>');
    htp.formclose;
    htp.p( '</CENTER>' );
    htp.htmlclose;
   return;
  end if;
  htp.nl;
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_263 );
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_264 );
  htp.formclose;
  if c4rec.movement_no is null
   then
    htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
   else
    htp.anchor( 'javascript: parent.opener.location = ''' || 'strangp.menu?surl=' || surl || '&rnd=' || to_char(sysdate,'SSSSS') || '&msearch=' || replace(c4rec.movement_no,' ','+') || '&mtype=' || c4rec.movement_type || '&action=SEARCH' || '''; parent.close();', LNG.GLB_TXT_033);
  end if;

  if msg is not null
   then
    glbx.header_msg( msg );
  end if;
  htp.p( '</CENTER>' );
  htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'EDIT_LOCAL_BOL',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end edit_local_bol;

procedure accept_edit_local_bol( surl in varchar2, scid in integer, parm in varchar2, access_id in varchar2, rid in varchar2, rid2 in varchar2, p0 in varchar2, p1 in varchar2, action in varchar2, p2 in GLBX.MYARRAY, p3a in GLBX.MYARRAY, p3 in GLBX.MYARRAY )
as

 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_EDIT_LOCAL_BOL' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  if p0 is null
   then
    edit_local_bol(surl, rid, rid2, scid, parm, access_id, p1 );
    return;
  end if;

  for j in p2.first..p2.last loop
     if p2(j) is not null
      then
       if action = LNGS.STR_TXT_263
        then
         update strang.movements set booking_ref = p3a(j), date_modified = sysdate where rowid = chartorowid( p2(j) );
         update strang.movements set local_bol = p3(j), date_modified = sysdate where rowid = chartorowid( p2(j) );
       elsif action = LNGS.STR_TXT_264
        then
         if p3(j) is null
          then
           update strang.movements set booking_ref = p3a(1), date_modified = sysdate where rowid = chartorowid( p2(j) );
           update strang.movements set local_bol = p3(1), date_modified = sysdate where rowid = chartorowid( p2(j) );
          else
           update strang.movements set booking_ref = p3a(j), date_modified = sysdate where rowid = chartorowid( p2(j) );
           update strang.movements set local_bol = p3(j), date_modified = sysdate where rowid = chartorowid( p2(j) );
         end if;
       end if;
       update strang.movements set interface4_date = null, date_modified = sysdate where rowid = chartorowid( p2(j) );
     end if;
  end loop;

  commit;

  edit_local_bol(surl, rid, rid2, scid, parm, access_id, p1, LNGS.STR_TXT_265 );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_EDIT_LOCAL_BOL',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_edit_local_bol;
*/

--20180409
/* -- 20200506 -- allow allocation of bills on from ships screen -- see alternate routine allocate_bills
procedure edit_bol( surl in varchar2, rid in varchar2, rid2 in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, shpid in varchar2 default null, msg in varchar2 default null )
as

 cursor c2( shpid integer) is select shipname,voy,li,io from strang.ships_airway where ship_id = shpid;

 cursor c3( shpid integer ) is
  select rowid,movement_no,seal,container_type,booking_ref, bol, INT_SHIP_DISCHARGE_DATE,INTL_WHARF_TRANSFER_DATE,BERTH4_TRANSFER_DATE,CUSTOMS_CLEARED_DATE,SI
  from strang.movements m
  where ship_id = shpid
  order by container_type, movement_no;

cursor c4(rid rowid) is
 select *
 from strang.movements
 where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 foundrec	boolean;
 ttl1		number;
 ttl2		number;
 vste		varchar2(10);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.EDIT_BOL' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 vste := customer_state(c1rec.aid);

 glbx.main_title( surl, LNGS.STR_TXT_261,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR15',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 htp.p( '<CENTER>' );

 htp.formopen( 'strangp.accept_edit_bol' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'ACCESS_ID', access_id );
 htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'RID2', replace(rid2,'~','+') );
 htp.formhidden( 'P0', shpid );

 open c2(shpid);
 fetch c2 into c2rec;
 close c2;
 open c4(chartorowid(replace(rid2,'~','+')));
 fetch c4 into c4rec;
 close c4;

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_169), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
   htp.tabledata( htf.bold( c2rec.shipname), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( c2rec.voy), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.formhidden( 'P1', shpid );
   -- htp.tabledata( htf.anchor2( 'strangp.edit_bol?surl=' || surl || '&rid=' || translate(rid,'+ ','~+') || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&shpid=' || shpid,'List of Ships',ctarget=>'HAWB'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_248), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_063), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Cargo Type'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Booking Reference'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Intl BOL'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Intl Discharge Date<BR>DD-MON-YYY'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Customs Cleared Date<BR>DD-MON-YYY'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Transfer From Intl Wharf Date<BR>DD-MON-YYY'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Transfer To Berth#4<BR>DD-MON-YYY'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Site Instruction'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
  htp.tablerowclose;
  foundrec := FALSE;
  if vste not in ('MEL','SYD','MOT','TAB','KIU') and c2rec.li='I' and c2rec.io='I' then
    for c3rec in c3( shpid ) loop
     foundrec := TRUE;
     htp.tablerowopen;
     htp.formhidden( 'P2', rowidtochar( c3rec.rowid ) );
      htp.tabledata( c3rec.movement_no, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.seal, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.container_type, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext( 'P3a', 20, 1000, c3rec.booking_ref), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P3', 20, 1000, c3rec.bol), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext('P4',30,30, to_char(c3rec.INT_SHIP_DISCHARGE_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext('P5',30,30, to_char(c3rec.CUSTOMS_CLEARED_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext('P6',30,30, to_char(c3rec.INTL_WHARF_TRANSFER_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext('P7',30,30, to_char(c3rec.BERTH4_TRANSFER_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext( 'P8', 20, 1000, c3rec.si), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
     htp.tablerowclose;
    end loop;
   elsif c2rec.li='I' and c2rec.io='O' then
    for c3rec in c3( shpid ) loop
     foundrec := TRUE;
     htp.tablerowopen;
     htp.formhidden( 'P2', rowidtochar( c3rec.rowid ) );
      htp.tabledata( c3rec.movement_no, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.seal, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.container_type, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext( 'P3a', 20, 1000, c3rec.booking_ref), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P3', 20, 1000, c3rec.bol), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext('P4',30,30, to_char(c3rec.INT_SHIP_DISCHARGE_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext('P5',30,30, to_char(c3rec.CUSTOMS_CLEARED_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext('P6',30,30, to_char(c3rec.INTL_WHARF_TRANSFER_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext('P7',30,30, to_char(c3rec.BERTH4_TRANSFER_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext( 'P8', 20, 1000, c3rec.si), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
     htp.tablerowclose;
    end loop;
   else
    for c3rec in c3( shpid ) loop
      foundrec := TRUE;
      htp.tablerowopen;
      htp.formhidden( 'P2', rowidtochar( c3rec.rowid ) );
      htp.formhidden( 'P3a', c3rec.booking_ref );
      htp.formhidden( 'P3', c3rec.bol );
      htp.tabledata( c3rec.movement_no, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.seal, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.container_type, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.booking_ref, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( c3rec.bol, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext('P4',30,30, to_char(c3rec.INT_SHIP_DISCHARGE_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext('P5',30,30, to_char(c3rec.CUSTOMS_CLEARED_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext('P6',30,30, to_char(c3rec.INTL_WHARF_TRANSFER_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext('P7',30,30, to_char(c3rec.BERTH4_TRANSFER_DATE,LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext( 'P8', 20, 1000, c3rec.si), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
     htp.tablerowclose;
    end loop;
   end if;
  htp.tableclose;
  if not foundrec
   then
    htp.formhidden( 'P2', null );
    htp.formhidden( 'P3a', null );
    htp.formhidden( 'P3', null );
    htp.formhidden( 'P4', null );
    htp.formhidden( 'P5', null );
    htp.formhidden( 'P6', null );
    htp.formhidden( 'P7', null );
    htp.formhidden( 'P8', null );
    htp.nl;
    htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>');
    htp.formclose;
    htp.p( '</CENTER>' );
    htp.htmlclose;
   return;
  end if;
  htp.nl;
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_263 );
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_264 );
  htp.formclose;
  if c4rec.movement_no is null
   then
    htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
   else
    htp.anchor( 'javascript: parent.opener.location = ''' || 'strangp.menu?surl=' || surl || '&rnd=' || to_char(sysdate,'SSSSS') || '&msearch=' || replace(c4rec.movement_no,' ','+') || '&mtype=' || c4rec.movement_type || '&action=SEARCH' || '''; parent.close();', LNG.GLB_TXT_033);
  end if;

  if msg is not null
   then
    glbx.header_msg( msg );
  end if;
  htp.p( '</CENTER>' );
  htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'EDIT_BOL',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end edit_bol;

procedure accept_edit_bol( surl in varchar2, scid in integer, parm in varchar2, access_id in varchar2, rid in varchar2, rid2 in varchar2, p0 in varchar2, p1 in varchar2, action in varchar2, p2 in GLBX.MYARRAY, p3a in GLBX.MYARRAY, p3 in GLBX.MYARRAY, p4 in GLBX.MYARRAY, p5 in GLBX.MYARRAY, p6 in GLBX.MYARRAY, p7 in GLBX.MYARRAY, p8 in GLBX.MYARRAY )
as

 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_EDIT_BOL' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  if p0 is null
   then
    edit_bol(surl, rid, rid2, scid, parm, access_id, p1 );
    return;
  end if;

  for j in p2.first..p2.last loop
     if p2(j) is not null
      then
       if action = LNGS.STR_TXT_263
        then
         update strang.movements set date_modified = sysdate, booking_ref = p3a(j) where rowid = chartorowid( p2(j) );
         update strang.movements set date_modified = sysdate, bol = p3(j) where rowid = chartorowid( p2(j) );
         update strang.movements set date_modified = sysdate, INT_SHIP_DISCHARGE_DATE = p4(j) where rowid = chartorowid( p2(j) );
         update strang.movements set date_modified = sysdate, CUSTOMS_CLEARED_DATE = p5(j) where rowid = chartorowid( p2(j) );
         update strang.movements set date_modified = sysdate, INTL_WHARF_TRANSFER_DATE = p6(j) where rowid = chartorowid( p2(j) );
         update strang.movements set date_modified = sysdate, BERTH4_TRANSFER_DATE = p7(j) where rowid = chartorowid( p2(j) );
         update strang.movements set date_modified = sysdate, si = p8(j) where rowid = chartorowid( p2(j) );
         update strang.movements set date_modified = sysdate, interface4_date = null where rowid = chartorowid( p2(j) );
       elsif action = LNGS.STR_TXT_264
        then
         if p3(j) is null
          then
           update strang.movements set booking_ref = p3a(1), date_modified = sysdate where rowid = chartorowid( p2(j) );
           update strang.movements set bol = p3(1), date_modified = sysdate where rowid = chartorowid( p2(j) );
          else
           update strang.movements set booking_ref = p3a(j), date_modified = sysdate where rowid = chartorowid( p2(j) );
           update strang.movements set bol = p3(j), date_modified = sysdate where rowid = chartorowid( p2(j) );
         end if;
         if p4(j) is null
          then
            update strang.movements set INT_SHIP_DISCHARGE_DATE = p4(1), date_modified = sysdate where rowid = chartorowid( p2(j) );
         else
            update strang.movements set INT_SHIP_DISCHARGE_DATE = p4(j), date_modified = sysdate where rowid = chartorowid( p2(j) );
         end if;
         if p6(j) is null
         then
           update strang.movements set INTL_WHARF_TRANSFER_DATE = p6(1), date_modified = sysdate where rowid = chartorowid( p2(j) );
         else
           update strang.movements set INTL_WHARF_TRANSFER_DATE = p6(j), date_modified = sysdate where rowid = chartorowid( p2(j) );
         end if;
         if p7(j) is null then
           update strang.movements set BERTH4_TRANSFER_DATE = p7(1), date_modified = sysdate where rowid = chartorowid( p2(j) );
         else
           update strang.movements set BERTH4_TRANSFER_DATE = p7(j), date_modified = sysdate where rowid = chartorowid( p2(j) );
         end if;
         if p8(j) is null then
           update strang.movements set si = p8(1), date_modified = sysdate where rowid = chartorowid( p2(j) );
         else
           update strang.movements set si = p8(j), date_modified = sysdate where rowid = chartorowid( p2(j) );
         end if;
         update strang.movements set interface4_date = null, date_modified = sysdate where rowid = chartorowid( p2(j) );
       end if;
     end if;
  end loop;

  commit;

  edit_bol(surl, rid, rid2, scid, parm, access_id, p1, LNGS.STR_TXT_265 );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_EDIT_BOL',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_edit_bol;
*/
-- 20200506
-- 20180409
procedure edit_ecn( surl in varchar2, rid in varchar2, rid2 in varchar2 default null, scid in varchar2, parm in varchar2, access_id in varchar2 default null, shpid in varchar2 default null, msg in varchar2 default null )
as

 cursor c2( shpid integer) is select shipname,voy from strang.ships_airway where ship_id = shpid;

 cursor c3( mv varchar2, sl varchar2 ) is
  select d.rowid,d.movement_no,d.camov_seal seal,deliveryno,ecn,itemno, handling_unit
  from strang.detailrs d
  where d.movement_no = mv and
        nvl(d.camov_seal,'x') = nvl(sl,'x')
  order by deliveryno;

 cursor c4( rid rowid ) is select * from strang.movements where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 foundrec	boolean;
 ttl1		number;
 ttl2		number;
 -- Added by DB on 23/7/2021
 v_row_hide_switch varchar2(50) := 'style="display: none;"';

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.EDIT_ECN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, LNGS.STR_TXT_266,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR16',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 htp.p( '<CENTER>' );

 htp.formopen( 'strangp.accept_edit_ecn' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'ACCESS_ID', access_id );
 htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'P0', shpid );
 htp.formhidden( 'RID2', replace(rid2,'~','+') );

 open c2(shpid);
 fetch c2 into c2rec;
 close c2;
 open c4(replace(rid,'~','+'));
 fetch c4 into c4rec;
 close c4;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_169), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
   htp.tabledata( htf.bold( c2rec.shipname), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( c2rec.voy), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.formhidden( 'P1', shpid );
   -- htp.tabledata( htf.anchor2( 'strangp.edit_bol?surl=' || surl || '&rid=' || translate(rid,'+ ','~+') || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&shpid=' || shpid,'List of Ships',ctarget=>'HAWB'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   if c4rec.movement_type = 'CARGO'
    then
     htp.tabledata( htf.bold( LNGS.STR_TXT_248), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   elsif c4rec.movement_type = 'CONMOV'
    then
     htp.tabledata( htf.bold( LNGS.STR_TXT_249), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   else
     htp.tabledata( htf.bold( LNGS.STR_TXT_066), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   end if;
   if c4rec.movement_type = 'CARGO'
    then
     htp.tabledata( htf.bold( LNGS.STR_TXT_063), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   end if;
   htp.tabledata( htf.bold( LNGS.STR_TXT_163), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_045), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_060), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Handling Unit'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER" '||v_row_hide_switch);
  htp.tablerowclose;
  foundrec := FALSE;
    for c3rec in c3( c4rec.movement_no, c4rec.seal ) loop
     foundrec := TRUE;
     htp.tablerowopen;
     htp.formhidden( 'P2', rowidtochar( c3rec.rowid ) );
      htp.tabledata( c3rec.movement_no, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      if c4rec.movement_type = 'CARGO'
       then
        htp.tabledata( c3rec.seal, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
      htp.tabledata( c3rec.deliveryno, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.itemno, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext( 'P3', 20, 1000, c3rec.ecn), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P3i', 20, 1000, c3rec.handling_unit), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER" '||v_row_hide_switch);
     htp.tablerowclose;
    end loop;
  htp.tableclose;
  if not foundrec
   then
    htp.formhidden( 'P2', null );
    htp.formhidden( 'P3', null );
    htp.formhidden( 'P3i', null );
    htp.nl;
    htp.formsubmit( null, LNGS.STR_TXT_364 );
    htp.formclose;
    htp.nl;
    htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
    htp.htmlclose;
   return;
  end if;
  htp.nl;
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_267 );
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_264 );
  htp.formclose;
  htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
  htp.p( '</CENTER>' );
  htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'EDIT_ECN',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end edit_ecn;

procedure accept_edit_ecn( surl in varchar2, scid in integer, parm in varchar2, access_id in varchar2, rid in varchar2, rid2 in varchar2, p0 in varchar2, p1 in varchar2, action in varchar2, p2 in GLBX.MYARRAY, p3 in GLBX.MYARRAY, p3i in GLBX.MYARRAY )
as

 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_EDIT_ECN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  if p0 is null
   then
    edit_ecn(surl, rid, rid2, scid, parm, access_id, p1 );
    return;
  end if;

  for j in p2.first..p2.last loop
     if p2(j) is not null
      then
       if action = LNGS.STR_TXT_267
        then
         update strang.detailrs set ecn = p3(j) where rowid = chartorowid( p2(j) );
         update strang.detailrs set handling_unit = strang.f_sap_format(p3i(j),'HANDLING_UNIT') where rowid = chartorowid( p2(j) );
       elsif action = LNGS.STR_TXT_264
        then
         if p3(j) is null
          then
           update strang.detailrs set ecn = p3(1) where rowid = chartorowid( p2(j) );
         update strang.detailrs set handling_unit = strang.f_sap_format(p3i(j),'HANDLING_UNIT') where rowid = chartorowid( p2(j) );
          else
           update strang.detailrs set ecn = p3(j) where rowid = chartorowid( p2(j) );
         update strang.detailrs set handling_unit = strang.f_sap_format(p3i(j),'HANDLING_UNIT') where rowid = chartorowid( p2(j) );
         end if;
       end if;
     end if;
  end loop;

  commit;

  edit_ecn(surl, rid, rid2, scid, parm, access_id, p1, LNGS.STR_TXT_268 );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_EDIT_ECN',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_edit_ecn;

procedure edit_mawb_ecn( surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, mwb in varchar2 default null, msg in varchar2 default null )
as

 cursor c2( mwb varchar2 ) is
  select rowid,hawb_hawbno,deliveryno,itemno,ecn,cl,handling_unit
  from strang.detailrs
  where hawb_hawbno in (select hawb from strang.hawbs where mawb like mwb || '%')
  order by hawb_hawbno;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 foundrec	boolean;
 ttl1		number;
 ttl2		number;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.EDIT_MAWB_ECN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, LNGS.STR_TXT_269,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR17',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '<CENTER>' );

 htp.formopen( 'strangp.accept_edit_mawb_ecn' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'ACCESS_ID', access_id );
 htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'P0', mwb );

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_124), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
   --htp.tabledata( htf.formtext( 'P1', 20, 1000, mwb ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( mwb ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   -- Disabled as requested by SS
   --htp.tabledata( htf.anchor2( 'strangp.edit_mawb?surl=' || surl || '&rid=' || translate(rid,'+ ','~+') || '&parm=' || parm || '&scid=' || scid || '&access_id=' || access_id || '&mwb=' || mwb,LNGS.STR_TXT_270,ctarget=>'HAWB'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;

 if mwb is null
  then
   htp.formhidden( 'P1', mwb );
   htp.formhidden( 'P2', null );
   htp.formhidden( 'P3', null );
   -- htp.formsubmit( null, LNGS.STR_TXT_255 );
   htp.formclose;
   htp.nl;
   htp.htmlclose;
   return;
 end if;

 htp.formhidden( 'P1', mwb );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_066), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_163), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_164), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_060), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Handling Unit'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
  htp.tablerowclose;
  foundrec := FALSE;
    for c2rec in c2( mwb ) loop
     foundrec := TRUE;
     htp.tablerowopen;
     htp.formhidden( 'P2', rowidtochar( c2rec.rowid ) );
      htp.tabledata( c2rec.hawb_hawbno, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c2rec.deliveryno, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c2rec.itemno, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext( 'P3', 20, 1000, c2rec.ecn), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P3i', 20, 1000, c2rec.handling_unit), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
     htp.tablerowclose;
    end loop;
  htp.tableclose;
  if not foundrec
   then
    htp.formhidden( 'P2', null );
    htp.formhidden( 'P3', null );
    htp.nl;
    htp.bold( LNGS.STR_TXT_257 );
    htp.formclose;
    htp.nl;
    htp.htmlclose;
   return;
  end if;
  htp.nl;
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_267 );
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_264 );
  htp.formclose;
  htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
  htp.p( '</CENTER>' );
  htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'EDIT_MAWB_ECN',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end edit_mawb_ecn;

procedure accept_edit_mawb_ecn( surl in varchar2, scid in integer, parm in varchar2, access_id in varchar2, rid in varchar2, p0 in varchar2, p1 in varchar2, action in varchar2, p2 in GLBX.MYARRAY, p3 in GLBX.MYARRAY, p3i in GLBX.MYARRAY )
as

 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_EDIT_MAWB_ECN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  if p0 is null
   then
    edit_mawb_ecn(surl, rid, scid, parm, access_id, p1 );
    return;
  end if;

  for j in p2.first..p2.last loop
     if p2(j) is not null
      then
       if action = LNGS.STR_TXT_267
        then
         update strang.detailrs set ecn = p3(j) where rowid = chartorowid( p2(j) );
         update strang.detailrs set handling_unit = strang.f_sap_format(p3i(j),'HANDLING_UNIT') where rowid = chartorowid( p2(j) );
       elsif action = LNGS.STR_TXT_264
        then
         if p3(j) is null
          then
           update strang.detailrs set ecn = p3(1) where rowid = chartorowid( p2(j) );
           update strang.detailrs set handling_unit = strang.f_sap_format(p3i(j),'HANDLING_UNIT') where rowid = chartorowid( p2(j) );
          else
           update strang.detailrs set ecn = p3(j) where rowid = chartorowid( p2(j) );
           update strang.detailrs set handling_unit = strang.f_sap_format(p3i(j),'HANDLING_UNIT') where rowid = chartorowid( p2(j) );
         end if;
       end if;
     end if;
  end loop;

  commit;

  edit_mawb_ecn(surl, rid, scid, parm, access_id, p1, LNGS.STR_TXT_268 );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_EDIT_MAWB_ECN',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_edit_mawb_ecn;

procedure assign_priority( mv in varchar2, sl in varchar2 )
as

 cursor c1(vMv varchar2,vSl varchar2)
 is select distinct r.status priority
 from strang.receivals r, strang.detailrs dr, strang.movements m
 where r.deliveryno = dr.deliveryno
 and dr.movement_no = m.movement_no
 and nvl(dr.camov_seal,'|') = nvl(m.seal,'|')
 and dr.movement_no = vMv
 and nvl(dr.camov_seal,'|') = nvl(vSl,'|');

cursor c2(vMv varchar2,vSl varchar2)
is select m.urgency from strang.movements m
where
m.movement_no = vMv
and nvl(m.seal,'|') = nvl(vSl,'|');

 c1rec	c1%ROWTYPE;
 c2rec	c2%ROWTYPE;
 priority  varchar2(50);

begin
 open c2(mv,sl);
 fetch c2 into c2rec;
 if C2%NOTFOUND then
   close c2;
   return;
 end if;
 priority := c2rec.urgency;
 close c2;
 if priority = 'SUPER URGENT' then
   return;
 end if;
for c1rec in c1(mv,sl) loop
  if c1rec.priority = 'SUPER URGENT' then
    priority := c1rec.priority;
  elsif c1rec.priority = 'VMR' then
    if priority not in ('SUPER URGENT') then
      priority := c1rec.priority;
    end if;
  elsif c1rec.priority = 'URGENT PROJECT' then
    if priority not in ('SUPER URGENT','VMR') then
      priority := c1rec.priority;
    end if;
  elsif c1rec.priority = 'FOOD' then
    if priority not in ('SUPER URGENT','VMR','URGENT PROJECT') then
      priority := c1rec.priority;
    end if;
  else  priority := 'STANDARD';
  end if;
end loop;
 update strang.movements set urgency = priority, interface4_date = null, date_modified = sysdate where  movement_no = mv and nvl(seal,'x') = nvl(sl,'x');
 commit;
end assign_priority;

--- DAVID BANJO
------************************************
procedure assign_det( surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null, fl in varchar2, lcl in varchar2 default 'F' )
as

 cursor c2( rid rowid ) is
  select seal,shipname,voy,movement_no,movement_type,complete,m.io, sa.ship_airway as sa, sa.li, m.departure, m.mawb_link, m.dispatch_date
  from strang.movements m,strang.ships_airway sa
  where m.rowid = rid and sa.ship_id = m.ship_id;

 cursor c3( mv varchar2, mtype varchar2, sl varchar2, cd varchar2, vio varchar2 ) is
  select rowid, deliveryno, itemno, 1 unitno, dr.movement_no, max (dr.movement_no) over () max_movement_no, qty||' X '||PKTPE_PACKTYPE||' STB '||detaildesc drdesc
  from strang.detailrs dr
  where ((movement_no = mv and nvl(camov_seal,'x') = nvl(sl,'x')) or
        (movement_no is null and
         ((mtype = 'CARGO' and sa = 'S' and cl = 'C') or (mtype <> 'CARGO')) and
         ((mtype = 'CONMOV' and sa = 'S' and cl = 'L') or (mtype <> 'CONMOV')) and
         ((mtype = 'AIRWAY' and sa = 'A') or (mtype <> 'AIRWAY'))
        ) and
        ((cd is null) or (cd is not null and substr(to_char(deliveryno),1,1) = cd)) and
        io = vio)
   and not exists (select 'x'
                     from strang.detailrs_item di
                    where di.deliveryno = dr.deliveryno
                      and di.item_no = dr.itemno)
  order by deliveryno,itemno;
  
 -- Amended by David Banjo to exclude outbound shipments
 cursor c7 (mv varchar2, sl varchar2, v_sa varchar2, cd varchar2, vste varchar2, vio varchar2 )is
  select rowid, smp_no, movement_no, seal, max (sm.movement_no) over () max_movement_no
  from strang.smp sm
  where (((movement_no is null and ((cd is null) or (cd is not null and vste = 'BNE'))) or 
  (movement_no is not null and movement_no = mv and nvl(seal, '|') = nvl(sl,'|')))
  and sa = v_sa)
  and sm.complete != 'F'
  and nvl(sm.io,'I') = vio 
  and exists (select 'x'
                from strang.detailrs_item di
               where di.smp_no = sm.smp_no)
  order by smp_no, movement_no, seal ;
  
  
 cursor c6(v_smp_no varchar2, v_sa varchar2, cd varchar2, vio varchar2) is
  select di.rowid, di.deliveryno, di.item_no, di.order_by unitno, count(*) over () cnt
  , di.movement_no, '1'||' X '||di.pktpe_packtype||' STB '||(select dr.detaildesc from strang.detailrs dr where dr.deliveryno = di.deliveryno and dr.itemno = di.item_no and rownum <2)  drdesc
    from strang.detailrs_item di
    where (di.smp_no =  v_smp_no ) 
    and exists (select 'x'
                 from strang.detailrs dr2 
                where ((dr2.sa = v_sa and dr2.sa = 'S' and dr2.cl = 'C') or (v_sa <> 'S'))
                 and ((dr2.sa = v_sa and dr2.sa = 'A' ) or (v_sa <> 'A'))
               --  and ((cd is null) or (cd is not null and substr(to_char(dr2.deliveryno),1,1) = cd)) 
                 and dr2.io = vio
                 and di.deliveryno = dr2.deliveryno
                 and di.item_no = dr2.itemno)
  order by di.deliveryno, di.item_no, di.order_by;  

 cursor c4( mv varchar2, cd varchar2, vio varchar2 ) is
  select rowid, deliveryno, itemno, movement_no, qty||' X '||PKTPE_PACKTYPE||' STB '||detaildesc drdesc
  from strang.detailrs
  where movement_no = mv and
        ((cd is null) or (cd is not null and substr(to_char(deliveryno),1,1) = cd)) and
        io = vio
  order by deliveryno;
  
 cursor c5( mv varchar2, mtype varchar2, sl varchar2, v_sa varchar2, cd varchar2, vio varchar2 ) is
  select di.rowid, di.deliveryno, di.item_no, di.order_by unitno, di.movement_no, '1'||' X '||di.pktpe_packtype||' STB '||(select dr.detaildesc from strang.detailrs dr where dr.deliveryno = di.deliveryno and dr.itemno = di.item_no and rownum <2)  drdesc
        , max (di.movement_no) over () max_movement_no
    from strang.detailrs_item di
    where ((di.movement_no = mv and nvl(di.seal,'x') = nvl(sl,'x') and di.smp_no is null) or
    (di.movement_no is null and di.seal is null and di.SMP_NO is null )
    and exists (select 'x'
                from strang.detailrs dr2 
               where ((mtype = 'CARGO' and dr2.sa = 'S' and dr2.cl = 'C') or (mtype <> 'CARGO')) 
                 and ((mtype = 'CONMOV' and dr2.sa = 'S' and dr2.cl = 'L') or (mtype <> 'CONMOV'))
                 and ((mtype = 'AIRWAY' and dr2.sa = 'A') or (mtype <> 'AIRWAY'))
                 and ((cd is null) or (cd is not null and substr(to_char(dr2.deliveryno),1,1) = cd)) 
                 and dr2.io = vio
                 and di.deliveryno = dr2.deliveryno
                 and di.item_no = dr2.itemno))
  order by di.deliveryno, di.item_no, di.order_by;
  
  cursor c8( mv varchar2, mtype varchar2, sl varchar2, v_sa varchar2, cd varchar2, vio varchar2 ) is
  select di.rowid, di.deliveryno, di.item_no, di.order_by unitno, di.movement_no, '1'||' X '||di.PKTPE_PACKTYPE||' STB '||(select dr.detaildesc from strang.detailrs dr where dr.deliveryno = di.deliveryno and dr.itemno = di.item_no and rownum <2)  drdesc
  from strang.detailrs_item di
  where (di.movement_no = mv and nvl(di.seal,'|') = nvl(sl,'|') and di.smp_no is null) and
        ((cd is null) or (cd is not null and substr(to_char(deliveryno),1,1) = cd)
    and exists (select 'x'
                from strang.detailrs dr2 
               where ((mtype = 'CARGO' and dr2.sa = 'S' and dr2.cl = 'C') or (mtype <> 'CARGO')) 
                 and ((mtype = 'CONMOV' and dr2.sa = 'S' and dr2.cl = 'L') or (mtype <> 'CONMOV'))
                 and ((mtype = 'AIRWAY' and dr2.sa = 'A') or (mtype <> 'AIRWAY'))
                 and ((cd is null) or (cd is not null and substr(to_char(dr2.deliveryno),1,1) = cd)) 
                 and dr2.io = vio
                 and di.deliveryno = dr2.deliveryno
                 and di.item_no = dr2.itemno))
  order by di.deliveryno, di.item_no, di.order_by;
---------------------------------------------------------------------------------------------------------------------------------------------------------  
 -- BLOCK OF CODE TO HANDLE MAWB local
 -- added by DB on 6/11/2022
  cursor c9( local_mv varchar2, mv varchar2, mtype varchar2, sl varchar2, cd varchar2, vio varchar2, vli varchar2, vlocation varchar2 ) is
  select dr.rowid, dr.movement_no, deliveryno, itemno, 1 unitno, dr.movement_no_2, max (dr.movement_no_2) over () max_movement_no, qty||' X '||PKTPE_PACKTYPE||' STB '||detaildesc drdesc
  from strang.detailrs dr
  where exists (
        select 'x' 
        from strang.movements m1
        where m1.movement_no = mv
          and (dr.movement_no_2 is null or dr.movement_no_2 = local_mv)
          and m1.io = 'I'
          and m1.movement_no = dr.MOVEMENT_NO
          and m1.movement_type = 'AIRWAY'
          and exists (select 1
                        from strang.ships_airway ss
                        where m1.ship_id = ss.ship_id 
                          and ss.li  = 'I'
                          and ss.io = m1.io))
  order by deliveryno,itemno;
  
 
-- BELOW REPLACED BY DB ON 6/11/2022

-- cursor c9( mv varchar2, mtype varchar2, sl varchar2, cd varchar2, vio varchar2, vli varchar2, vlocation varchar2 ) is
--  select dr.rowid, dr.movement_no, deliveryno, itemno, 1 unitno, dr.movement_no_2, max (dr.movement_no_2) over () max_movement_no, qty||' X '||PKTPE_PACKTYPE||' STB '||detaildesc drdesc
--  from strang.detailrs dr
--  where  (movement_no_2 = mv and nvl(camov_seal_2,'x') = nvl(sl,'x')) or
--        ((movement_no_2 is null and (mtype = 'AIRWAY' and sa = 'A')  
--        ) and
--        ((cd is null) or (cd is not null and substr(to_char(deliveryno),1,1) = cd)) and
--        (io = 'I')
--        and exists (
--        select 'x' 
--        from strang.movements m1
--        where arrival = vlocation
--          and m1.complete = 'X'
--          and mawb_link is null
--          and m1.io = 'I'
--          and m1.movement_no = dr.MOVEMENT_NO
--          and m1.movement_type = 'AIRWAY'
--          and exists (select 1
--                        from strang.ships_airway ss
--                        where m1.ship_id = ss.ship_id 
--                          and ss.li  = 'I'
--                          and ss.io = m1.io)))
--  order by deliveryno,itemno;

-- REMOVED by DB on 6/11/2022 not used.

--SELECTALL_LOCAL
-- cursor c12( mv varchar2, cd varchar2, vio varchar2, vli varchar2, vlocation varchar2 ) is
--  select rowid, deliveryno, itemno, movement_no_2, qty||' X '||PKTPE_PACKTYPE||' STB '||detaildesc drdesc
--  from strang.detailrs dr
--  where dr.movement_no  = mv
--  and   ((cd is null) or (cd is not null and substr(to_char(deliveryno),1,1) = cd)) 
--  and dr.io = vio and vli = 'L'
--  order by deliveryno;

-- REMOVED by DB on 6/11/2022 not used.

-- cursor c13(mv varchar2, vlocation varchar2) is 
-- select movement_No, selectall_local, rowid 
--        from strang.movements m1
--        where ((m1.mawb_link = mv) or
--       (arrival = vlocation 
--          and m1.complete = 'X'
--          and m1.io = 'I'
--          and m1.movement_type = 'AIRWAY'
--          and exists (select 1
--                        from strang.ships_airway ss
--                        where m1.ship_id = ss.ship_id 
--                          and ss.li  = 'I'
--                          and ss.io = m1.io)));

 -- added by DB on 6/11/2022
 cursor c13(mv varchar2, vlocation varchar2, vdeparture_dt date) is 
 select m1.movement_No, m1.selectall_local, m1.rowid 
   from strang.movements m1, strang.ships_airway sa
  where sa.ship_id = m1.ship_id
    and arrival = vlocation 
    and m1.complete = 'X'
    and m1.io = 'I'
    and m1.movement_type = 'AIRWAY'
    and trunc(sa.estarrive) <=  trunc(nvl(vdeparture_dt,sa.estarrive))
    and exists (select 1
                  from strang.ships_airway ss
                 where m1.ship_id = ss.ship_id 
                   and ss.li  = 'I'
                   and ss.io = m1.io)
   union 
   select movement_No, selectall_local, rowid 
    from strang.movements m2
    where exists (select 1
                   from strang.detailrs dr
                  where dr.movement_no = m2.movement_no
                    and dr.movement_no_2 = mv ) ;  


---------------------------------------------------------------------------------------------------------------------------------------------------------
 cursor c10(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'SEE_ALL_DELIVERIES' and cola = vste;
 cursor c11(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'DELIVERYNO' and cola = vste;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c5rec		c5%ROWTYPE;
 c7arec		c7%ROWTYPE;
 c10rec 	c10%ROWTYPE;
 c11rec 	c11%ROWTYPE;
 c9rec 	    c9%ROWTYPE;
 --c12rec 	c12%ROWTYPE;
 c13rec 	c13%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 foundrec	boolean;
 ttl1		number;
 ttl2		number;
 cd		    varchar2(10);
 vaccess	varchar2(20);
 vste		varchar2(10);
 vvio		varchar2(1);
 v_tot      number:= 0;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ASSIGN_DET' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 vste := customer_state(c1rec.aid);
 vaccess := data_access( owner_id, 'ASSIGN', rid );

 glbx.main_title( surl, LNGS.STR_TXT_271,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR18',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 htp.p( '<CENTER>' );
  if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_assign_det' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'P1', null );
   htp.formhidden( 'P1A', null );
   htp.formhidden( 'P2', null );
   htp.formhidden( 'P2A', null );
   htp.formhidden( 'P3', null );
   htp.formhidden( 'P4', null );
   htp.formhidden( 'P5', null );
   htp.formhidden( 'P6', null );
   htp.formhidden( 'P7', null );
   htp.formhidden( 'P7A', null );
   if fl in ('X','Y')
    then
     htp.formhidden( 'FL', 'T' );
    else
     if fl = 'Y1'
      then
       htp.formhidden( 'FL', 'F' );
      else
       htp.formhidden( 'FL', fl );
     end if;
   end if;
 end if;

 open c2( chartorowid( replace(rid,'~','+') ));
 fetch c2 into c2rec;
 close c2;
-- open c13( c2rec.movement_no, c2rec.departure );
-- fetch c13 into c13rec;
-- close c13;
 vvio:=c2rec.io;
 open c10(vste);
 fetch c10 into c10rec;
 close c10;
 open c11(vste);
 fetch c11 into c11rec;
 close c11;
 if c10rec.description = 'YES' and c1rec.username <> 'DAWN' and lcl = 'F'
  then
   cd := NULL;
  else
   cd := substr(c11rec.description,1,1);
 end if;

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   if c2rec.movement_type = 'CONMOV'
    then
     htp.tabledata( htf.bold( LNGS.STR_TXT_272), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
   elsif c2rec.movement_type = 'CARGO'
    then
     htp.tabledata( htf.bold( LNGS.STR_TXT_273), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
   else
     htp.tabledata( htf.bold( LNGS.STR_TXT_274), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
   end if;
   htp.tabledata( htf.bold( c2rec.movement_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  if c2rec.movement_type = 'CARGO'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_063), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( c2rec.seal ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
  end if;
  if c2rec.movement_type = 'AIRWAY'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_129), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( c2rec.shipname ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_275), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( c2rec.voy ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
   else
    htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_169), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( c2rec.shipname ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_276), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( c2rec.voy ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    htp.tablerowopen;
    if c2rec.io = 'I' then
     htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
    else
     htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
    end if;
    htp.tablerowclose;
  end if;
 htp.tableclose;
 htp.nl;

 -- Added by David Banjo 12/7/2021 
 -- START COMMENT HERE
 open c3( c2rec.movement_no, c2rec.movement_type, c2rec.seal, cd, vvio );
 fetch c3 into c3rec;
 if c3%found and (c2rec.complete = 'F' or (c2rec.complete <> 'F' and c3rec.max_movement_no is not null)) then
    htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
    htp.tablerowopen;
    htp.tabledata( htf.bold('Table'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT" COLSPAN = "2"');
    htp.tabledata( htf.bold('Deliveries without Print Labels'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" COLSPAN = "2"');
    htp.tablerowclose;
    htp.tablerowopen;
    htp.tabledata( htf.bold( LNGS.STR_TXT_163), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
    htp.tabledata( htf.bold( LNGS.STR_TXT_164), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
    if c2rec.complete = 'F' then
       htp.tabledata( htf.bold( LNGS.STR_TXT_310), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
    end if;
    htp.tabledata( htf.bold( 'Description'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
    htp.tablerowclose;
    close c3;
--------------------------------------------------------------------------------
    if fl in ('T','X','Y') then
       for c3rec in c3( c2rec.movement_no, c2rec.movement_type, c2rec.seal, cd, vvio ) loop
          if (c2rec.complete = 'F') or (c2rec.complete <> 'F' and c3rec.movement_no is not null) then
             htp.tablerowopen;
             htp.tabledata( htf.bold( c3rec.deliveryno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
             htp.tabledata( htf.bold( c3rec.itemno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
             if c2rec.complete = 'F' then
                if c3rec.movement_no is null then
                   if fl = 'X' then
                      if vaccess = 'EDIT' then
                         htp.tabledata( htf.formcheckbox( 'P1', c3rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                      else
                         htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                      end if;
                   else
                      if vaccess = 'EDIT' then
                         htp.tabledata( htf.formcheckbox( 'P1', c3rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                      else
                         htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                      end if;
                   end if;
                else
                   if fl = 'Y' then
                      if vaccess = 'EDIT' then
                         htp.tabledata( htf.formcheckbox( 'P1', c3rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                      else
                         htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                      end if;
                   else
                      if vaccess = 'EDIT' then
                         htp.tabledata( htf.formcheckbox( 'P1', c3rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                      else
                         htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                      end if;
                   end if;
                   htp.formhidden( 'P2', c3rec.rowid );
                end if;
             end if;
             htp.tabledata( htf.bold( c3rec.drdesc), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
             htp.tablerowclose;
          end if;
       end loop;
    else
       for c4rec in c4( c2rec.movement_no, cd, vvio ) loop
          htp.tablerowopen;
          htp.tabledata( htf.bold( c4rec.deliveryno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
          htp.tabledata( htf.bold( c4rec.itemno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
          if c2rec.complete = 'F' then
             if c4rec.movement_no is null then
                if fl = 'X' then
                   if vaccess = 'EDIT' then
                      htp.tabledata( htf.formcheckbox( 'P1', c4rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   else
                      htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   end if;
                else
                   if vaccess = 'EDIT' then
                      htp.tabledata( htf.formcheckbox( 'P1', c4rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   else
                      htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   end if;
                end if;
             else
                if fl in ('Y','Y1') then
                   if vaccess = 'EDIT' then
                      htp.tabledata( htf.formcheckbox( 'P1', c4rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   else
                      htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   end if;
                else
                   if vaccess = 'EDIT' then
                      htp.tabledata( htf.formcheckbox( 'P1', c4rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   else
                      htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   end if;
                end if;
                if vaccess = 'EDIT' then htp.formhidden( 'P2', c4rec.rowid ); end if;
             end if;
          end if;
          htp.tabledata( htf.bold( c4rec.drdesc), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
          htp.tablerowclose;
       end loop;
    end if;
 htp.tableclose;
 htp.nl;
 end if;
 ------------------------------------------------------------------------------------------------------------------------------------
 -- END OF NORMAL PART WITH NO units
 -- START LOCAL AIRWAY SHIPMENTS HERE!!
 -- START COMMENT HERE
 ------------------------------------------------------------------------------------------------------------------------------------

 if c2rec.li = 'L' then
 
    for c13rec in  c13( c2rec.movement_no, c2rec.departure, c2rec.dispatch_date ) loop
   
       if c13%rowcount = 1 then   
          htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
       end if;
       open c9( c2rec.movement_no, c13rec.movement_no, c2rec.movement_type, c2rec.seal, cd, vvio, c2rec.li, c2rec.departure );
       fetch c9 into c9rec;
       if c9%found and (c2rec.complete = 'F' or (c2rec.complete <> 'F' and c9rec.max_movement_no is not null)) then
          htp.tablerowopen;
          htp.tabledata( htf.bold('Table'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT" COLSPAN = "1"');
          if c2rec.complete = 'F' then
             if c13rec.selectall_local IS NULL then 
                if fl = 'X' then
                   if vaccess = 'EDIT' then
                      htp.tabledata( htf.formcheckbox( 'P7', c13rec.rowid, 'CHECKED'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT" COLSPAN = "1"');
                   else
                      htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   end if;
                else
                   if vaccess = 'EDIT' then
                      htp.tabledata( htf.formcheckbox( 'P7', c13rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER" COLSPAN = "1"');
                   else
                      htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   end if;
                end if;
                htp.formhidden( 'P7A', c13rec.rowid);  
             else 
                if fl = 'Y' then
                   if vaccess = 'EDIT' then
                      htp.tabledata( htf.formcheckbox( 'P7', c13rec.rowid),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT" COLSPAN = "1"');
                   else 
                      htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   end if ;
                else
                   if vaccess = 'EDIT' then
                      htp.tabledata( htf.formcheckbox( 'P7', c13rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   else
                      htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                   end if;
                end if;
                htp.formhidden( 'P7A', c13rec.rowid);  
             end if;
             htp.tabledata( htf.bold('Deliveries from MAWB '||c13rec.movement_no), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" COLSPAN = "2"');
          else 
             htp.tabledata( htf.bold('Deliveries from MAWB '||c13rec.movement_no), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" COLSPAN = "3"');
          end if;
 
          htp.tablerowclose;
          htp.tablerowopen;
          htp.tabledata( htf.bold( LNGS.STR_TXT_163), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
          htp.tabledata( htf.bold( LNGS.STR_TXT_164), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
          if c2rec.complete = 'F' then
             htp.tabledata( htf.bold( LNGS.STR_TXT_310), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
          end if;
          htp.tabledata( htf.bold( 'Description'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
          htp.tablerowclose;
----------------------------------------------------------------------------------------------------------------------

          if fl in ('T','X','Y') then
             if c9%isopen then
                close c9;
             end if;
             for c9rec in c9( c2rec.movement_no, c13rec.movement_no, c2rec.movement_type, c2rec.seal, cd, vvio,  c2rec.li, c2rec.departure ) loop
                if (c2rec.complete = 'F') or (c2rec.complete <> 'F' and c9rec.movement_no_2 is not null) then
                   htp.tablerowopen;
                   htp.tabledata( htf.bold( c9rec.deliveryno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
                   htp.tabledata( htf.bold( c9rec.itemno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
                   if c2rec.complete = 'F' then
                      if c9rec.movement_no_2 is null then
                         if fl = 'X' then
                            if vaccess = 'EDIT' then
                               htp.tabledata( htf.formcheckbox( 'P1A', c9rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                            else
                               htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                            end if;
                         else
                            if vaccess = 'EDIT' then
                               htp.tabledata( htf.formcheckbox( 'P1A', c9rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                            else
                               htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                            end if;
                         end if;
                     else
                         if fl = 'Y' then
                            if vaccess = 'EDIT' then
                               htp.tabledata( htf.formcheckbox( 'P1A', c9rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                            else
                               htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                            end if;
                         else
                            if vaccess = 'EDIT' then
                               htp.tabledata( htf.formcheckbox( 'P1A', c9rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                            else
                               htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                            end if;
                         end if;
                         htp.formhidden( 'P2A', c9rec.rowid );
                     end if;
                  end if;
                  htp.tabledata( htf.bold( c9rec.drdesc), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       --      htp.tablerowclose;
               end if;
            end loop;
         end if;
         htp.tablerowopen;
         htp.tabledata( htf.bold( '&nbsp;'), cattributes=>glbx.TABLE_BACKGROUND|| ' ALIGN="CENTER" COLSPAN = "4"');
         htp.tablerowopen;
  
       end if;
       if c9%isopen then close c9; end if;
    end loop;
    htp.tableclose;
    htp.nl;
 end if;
 
 -------------------------------------------------------------------------------------------------------------------------------------
 -- START OF NEW DELIVERIES WITH UNITS
    -- commented out by David Banjo 15/6/2021 - PLEASE TEST AGAIN
 open c5( c2rec.movement_no, c2rec.movement_type, c2rec.seal, c2rec.sa, cd, vvio );
 fetch c5 into c5rec;
 if c5%found and (c2rec.complete = 'F' or (c2rec.complete <> 'F' and c5rec.max_movement_no is not null)) then
    htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
    htp.tablerowopen;
    htp.tabledata( htf.bold('Table'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT" COLSPAN = "2"');
    htp.tabledata( htf.bold('Deliveries with Print Labels'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" COLSPAN = "3"');
    --htp.tabledata( htf.bold('Deliveries with Print Labels'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tablerowclose;
    -- htp.tableclose;
    -- htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
    htp.tablerowopen;
    htp.tabledata( htf.bold( LNGS.STR_TXT_163), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
    htp.tabledata( htf.bold( LNGS.STR_TXT_164), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
    htp.tabledata( htf.bold( LNGS.STR_TXT_164a), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
    if c2rec.complete = 'F' then
       htp.tabledata( htf.bold( LNGS.STR_TXT_310), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     end if;
     htp.tabledata( htf.bold( 'Description'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
  htp.tablerowclose;
 end if; 
 close c5; 
  if fl in ('T','X','Y')
   then
    for c5rec in c5( c2rec.movement_no, c2rec.movement_type, c2rec.seal, c2rec.sa, cd, vvio ) loop
     if (c2rec.complete = 'F') or (c2rec.complete <> 'F' and c5rec.movement_no is not null)
     then
     htp.tablerowopen;
       htp.tabledata( htf.bold( c5rec.deliveryno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.bold( c5rec.item_no), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.bold( c5rec.unitno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       if c2rec.complete = 'F'
        then
         if c5rec.movement_no is null
          then
           if fl = 'X'
            then
             if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000')) 
              then
               htp.tabledata( htf.formcheckbox( 'P3', c5rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
            else
             if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000')) 
              then
               htp.tabledata( htf.formcheckbox( 'P3', c5rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
            end if;
          else
           if fl = 'Y'
            then
             if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000')) 
              then
               htp.tabledata( htf.formcheckbox( 'P3', c5rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
            else
             if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000')) 
              then
               htp.tabledata( htf.formcheckbox( 'P3', c5rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
           end if;
           htp.formhidden( 'P4', c5rec.rowid );
        end if;
       end if;
     htp.tabledata( htf.bold( c5rec.drdesc), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tablerowclose;
     end if;
    end loop;
  else
    for c8rec in c8(  c2rec.movement_no, c2rec.movement_type, c2rec.seal, c2rec.sa, cd, vvio ) loop
     htp.tablerowopen;
       htp.tabledata( htf.bold( c8rec.deliveryno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.bold( c8rec.item_no), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.bold( c8rec.unitno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       if c2rec.complete = 'F'
        then
         if c8rec.movement_no is null
          then
           if fl = 'X'
            then
             if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000')) 
              then
               htp.tabledata( htf.formcheckbox( 'P3', c8rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
            else
             if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000')) 
              then
               htp.tabledata( htf.formcheckbox( 'P3', c8rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
           end if;
          else
           if fl in ('Y','Y1')
            then
             if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000')) 
              then
               htp.tabledata( htf.formcheckbox( 'P3', c8rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
            else
             if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000')) 
              then
               htp.tabledata( htf.formcheckbox( 'P3', c8rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
           end if;
           if vaccess = 'EDIT' then htp.formhidden( 'P4', c8rec.rowid ); end if;
         end if;
       end if;
     htp.tabledata( htf.bold( c8rec.drdesc), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tablerowclose;
    end loop;
 end if;
 htp.tableclose;
 htp.nl;
 ---- START SMP DELIVERIES HERE:
 if c2rec.movement_type <> 'CONMOV' then
    open c7( c2rec.movement_no, c2rec.seal, c2rec.sa, cd, vste, vvio );
    fetch c7 into c7arec;
    close c7;
    if c2rec.complete = 'F' or (c2rec.complete <> 'F' and c7arec.max_movement_no is not null) then
       for c7rec in  c7( c2rec.movement_no, c2rec.seal, c2rec.sa, cd, vste, vvio ) loop 
          if c7%rowcount = 1 then   
             htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
          end if;
          if (c2rec.complete = 'F') or (c2rec.complete <> 'F' and c7rec.movement_no is not null)  then -- Added by DB on 6/10/2021 to remove additional SMPs when Status is not INCOMPLETE
             htp.tablerowopen;
             htp.tabledata( htf.bold( LNGS.STR_STH_034), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
             if fl in ('T','X','Y') then 
             --   if (c2rec.complete = 'F') or (c2rec.complete <> 'F' and c7rec.movement_no is not null)
             --   then
                if c2rec.complete = 'F' then 
                   if c7rec.movement_no is null then
                      if fl = 'X' then 
                         if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000'))  then
                            --  htp.tabledata( htf.formcheckbox( 'P5', c7rec.rowid, 'CHECKED' )|| htf.bold( c7rec.smp_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                            htp.tabledata( htf.formcheckbox( 'P5', c7rec.rowid, 'CHECKED' )||'&nbsp;&nbsp;&nbsp;'|| htf.anchor2('STRANGP.mng_smp?surl=' || surl || '&rid='|| replace(c7rec.rowid, '+', '~')||'&parm=SMP&access_id=x&msg=', htf.bold( c7rec.smp_no ) ,ctarget=>'NEWECN'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                         else
                            htp.tabledata( htf.bold( 'X' )|| htf.bold( c7rec.smp_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                         end if;
                      else
                         if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000')) 
                         then
                            -- htp.tabledata( htf.formcheckbox( 'P5', c7rec.rowid )|| htf.bold( c7rec.smp_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                            htp.tabledata( htf.formcheckbox( 'P5', c7rec.rowid )||'&nbsp;&nbsp;&nbsp;'|| htf.anchor2('STRANGP.mng_smp?surl=' || surl || '&rid='|| replace(c7rec.rowid, '+', '~')||'&parm=SMP&access_id=x&msg=', htf.bold( c7rec.smp_no ) ,ctarget=>'NEWECN'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                         else
                            htp.tabledata( '&nbsp;'||htf.bold( c7rec.smp_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                         end if;
                      end if;
                   else  
                      if fl in ('Y','Y1')
                      then
                         if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000')) then
                            -- htp.tabledata( htf.formcheckbox( 'P5', c7rec.rowid )|| htf.bold( c7rec.smp_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                            htp.tabledata( htf.formcheckbox( 'P5', c7rec.rowid )||'&nbsp;&nbsp;&nbsp;'|| htf.anchor2('STRANGP.mng_smp?surl=' || surl || '&rid='|| replace(c7rec.rowid, '+', '~')||'&parm=SMP&access_id=x&msg=', htf.bold( c7rec.smp_no ) ,ctarget=>'NEWECN'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                         else
                            htp.tabledata( '&nbsp;'||htf.bold( c7rec.smp_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                         end if;
                      else
                         if vaccess = 'EDIT' and ((c10rec.description = 'YES') or (c10rec.description = 'NO' and c11rec.description = '1000000')) 
                         then 
                            --  htp.tabledata( htf.formcheckbox( 'P5', c7rec.rowid, 'CHECKED' )|| htf.bold( c7rec.smp_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                            htp.tabledata( htf.formcheckbox( 'P5', c7rec.rowid, 'CHECKED' )||'&nbsp;&nbsp;&nbsp;'|| htf.anchor2('STRANGP.mng_smp?surl=' || surl || '&rid='|| replace(c7rec.rowid, '+', '~')||'&parm=SMP&access_id=x&msg=', htf.bold( c7rec.smp_no ) ,ctarget=>'NEWECN'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                         else
                            -- htp.tabledata( htf.bold( 'X' )||htf.bold( c7rec.smp_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                            htp.tabledata(htf.bold( c7rec.smp_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"  COLSPAN = "4"');
                         end if;
                      end if;
                      if vaccess = 'EDIT' then htp.formhidden( 'P6', c7rec.rowid ); end if;
                   end if; 
                else
                   htp.tabledata( htf.bold( c7rec.smp_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER" COLSPAN = "4"');    
                end if;
             --   end if;
             end if;
             htp.tablerowclose;
             --htp.tableclose;
             -- htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
             htp.tablerowopen;
             htp.tabledata( htf.bold( LNGS.STR_TXT_163), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
             htp.tabledata( htf.bold( LNGS.STR_TXT_164), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
             htp.tabledata( htf.bold( LNGS.STR_TXT_164a), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
             htp.tabledata( htf.bold( LNGS.STR_TXT_310), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
             htp.tabledata( htf.bold( 'Description'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
             if fl in ('T','X','Y')
             then  
                v_tot := 0;
                for c6rec in c6( c7rec.smp_no , c2rec.sa, cd, vvio ) loop
                   if v_tot = 0 then
                      v_tot := c6rec.cnt;
                   end if;
                   if (c2rec.complete = 'F') or (c2rec.complete <> 'F' and c7rec.movement_no is not null)
                   then
                      htp.tablerowopen;
                      htp.tabledata( htf.bold( c6rec.deliveryno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
                      htp.tabledata( htf.bold( c6rec.item_no), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
                      htp.tabledata( htf.bold( c6rec.unitno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
                      htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
                      htp.tabledata( htf.bold( c6rec.drdesc), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
                      htp.tablerowclose;
                   end if;
                end loop;
             end if;
             htp.tablerowopen;
             htp.tabledata( htf.bold( 'Total'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER" COLSPAN = "1"');
             htp.tabledata( htf.bold( to_char(v_tot)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER" COLSPAN = "1"');
             htp.tablerowopen;
          --  htp.tableclose;
          -- htp.nl;
          end if;
       end loop;
       htp.tableclose;
       htp.nl;
    end if;
 end if;
 
 if vaccess = 'EDIT'
  then
   if fl in ('T','X','Y') and c2rec.complete = 'F'
    then
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_277 );
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_278 );
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_279 );
     if c10rec.description = 'YES' and c1rec.username <> 'DAWN' and lcl = 'F'
      then
       htp.formsubmit( 'ACTION', LNGS.STR_TXT_416 );
     elsif c10rec.description = 'YES' and c1rec.username <> 'DAWN' and lcl = 'T'
      then
       htp.formsubmit( 'ACTION', LNGS.STR_TXT_417 );
     end if;
    --  htp.formsubmit( 'ACTION', LNGS.STR_TXT_146 );
  end if;
   htp.formclose;
 end if;
 htp.nl;
 htp.nl;
 htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'ASSIGN_DET',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end assign_det;

procedure accept_assign_det( surl in varchar2, scid in integer, parm in varchar2, access_id in varchar2, rid in varchar2
                           , action in varchar2, fl in varchar2, p1 in GLBX.MYARRAY, p2 in GLBX.MYARRAY
                           , p1A in GLBX.MYARRAY, p2A in GLBX.MYARRAY
                           , p3 in GLBX.MYARRAY, p4 in GLBX.MYARRAY
                           , p5 in GLBX.MYARRAY, p6 in GLBX.MYARRAY
                           , p7 in GLBX.MYARRAY, p7A in GLBX.MYARRAY )
as

 cursor c2( rid rowid ) is select movement_no, seal, container_type, movement_type, io, departure from strang.movements m where m.rowid = rid;
 cursor c3( rid rowid ) is select movement_no, seal, sa, io from strang.smp sm where sm.rowid = rid;
 cursor c4( rid rowid ) is select movement_no, seal, selectall_local from strang.movements m where m.rowid = rid;
 cursor c5( mv varchar2, sl varchar2) is
  select deliveryno, item_no, order_by, di.movement_no, di.seal
   from strang.detailrs_item di
   where movement_no is not null
    and  movement_no <> mv
    and exists (select 'x'
                  from strang.detailrs_item di1
                 where di1.movement_no = mv
                   and nvl(di1.seal,'|') = nvl(sl,'|')
                   and di1.deliveryno = di.deliveryno
                   and di1.item_no = di.item_no);
--------------------------------------------------------------------------------
 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c4rec		c4%ROWTYPE;  -- added bY DAVID BANJO 30/8/2021 - LOCAL FLIGHTS
 c5rec		c5%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 newrid		rowid;
 sts		varchar2(100);
 priority	varchar2(100);
 v_error_msg varchar2(500);

 function isdel( p1 in GLBX.MYARRAY, p2 in varchar2 ) return boolean
 as
 begin
  for j in p1.first..p1.last loop
   if p1(j) = p2
    then
     return( FALSE );
   end if;
  end loop;
  return( TRUE );
 end;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_MOVEMENT' );
 if sts is not null
  then
   glbx.redisplay_login_page( sts, TRUE );
   return;
 end if;
  c1rec := glbx.get_aid( owner_id, 'C', ltype );

 if action = LNGS.STR_TXT_416 then assign_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_416, fl,'T' ); return; end if;
 if action = LNGS.STR_TXT_417 then assign_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_417, fl,'F' ); return; end if;
 if action = LNGS.STR_TXT_278 then assign_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_418, 'X' ); return; end if;
 if fl = 'F'
  then
   if action = LNGS.STR_TXT_279 then assign_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_419, 'Y1' ); return; end if;
  else
   if action = LNGS.STR_TXT_279 then assign_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_419, 'Y' ); return; end if;
 end if;

 open c2( chartorowid( replace(rid,'~','+') ) );
 fetch c2 into c2rec;
 close c2;
begin

 for j in p2.first..p2.last loop
  -- Check to see if the appropriate record can have its values set to null.
  -- If it is found in P1 it means it has been checked and is not to be deleted
  if isdel(p1,p2(j))
   then
    update strang.detailrs set movement_no = null, camov_seal = null, hawb_hawbno = null where rowid = chartorowid( p2(j) ) and c2rec.io = io;
  end if;
 end loop;

 for j in p1.first..p1.last loop
  update strang.detailrs set movement_no = c2rec.movement_no, camov_seal = c2rec.seal where rowid = chartorowid( p1(j) ) and c2rec.io = io;
 end loop;

-- DEAL WITH DELIVERIES WITH PRINT LABELS
 for j in p4.first..p4.last loop
  if isdel(p3,p4(j))
   then  
    update strang.detailrs_item 
    set movement_no = null, seal = null, packed_date = null, packed_by = null
    where rowid = chartorowid( p4(j) )
     and  movement_no is not null;
    update strang.detailrs dr
       set movement_no = null, camov_seal = null, hawb_hawbno = null 
     where exists (select 'x' 
                     from strang.detailrs_item di
                    where di.deliveryno = dr.deliveryno
                      and di.item_no   = dr.itemno
                      and di.rowid = chartorowid( p4(j) )) 
     and c2rec.io = dr.io;
  end if;
 end loop;
 
--  delete from strang.hawbs h
--  where mawb = c2rec.movement_no 
--   and not exists (select 'x'
--                     from strang.detailrs dr
--                    where dr.movement_no = c2rec.movement_no
--                      and dr.hawb_hawbno = h.hawb);
 
  for j in p3.first..p3.last loop
   update strang.detailrs_item 
   set movement_no = c2rec.movement_no
     , seal = c2rec.seal 
     , packed_date = sysdate
     , packed_by = c1rec.username  
   where rowid = chartorowid( p3(j)) and movement_no is null;
   update strang.detailrs dr
   set movement_no = c2rec.movement_no, camov_seal = c2rec.seal 
   where exists (select 'x' 
                   from strang.detailrs_item di
                  where di.deliveryno = dr.deliveryno
                    and di.item_no   = dr.itemno
                    and di.rowid = chartorowid( p3(j))) 
    and not exists (select 'x'
                      from strang.detailrs_item di
                  where di.deliveryno = dr.deliveryno
                    and di.item_no   = dr.itemno 
                    and di.movement_no is null)
    and dr.movement_no is null
    and c2rec.io = io;
 end loop;
 for j in p6.first..p6.last loop
  if isdel(p5,p6(j))
   then
    update strang.smp set movement_no = null, seal = null, modified_date = sysdate, modified_by = c1rec.username   
    where rowid = chartorowid( p6(j) ) and c2rec.io = io 
    and movement_no is not null;
  -- end if; REMOVED by DBANJO
    update strang.detailrs_item di
      set movement_no = null, seal = null, modified_date = sysdate, modified_by = c1rec.username  
    where exists (select 'x' 
                   from strang.smp sm
                   where di.smp_no = sm.smp_no 
                   and   sm.rowid = chartorowid( p6(j)))
     and movement_no is not null;
    update strang.detailrs dr
       set movement_no = null, camov_seal = null, hawb_hawbno = null 
    where exists (select 'x' 
                   from strang.smp sm, strang.detailrs_item di
                   where sm.rowid = chartorowid( p6(j))
                    and  sm.smp_no = di.smp_no
                    and  di.deliveryno = dr.deliveryno
                    and  di.item_no = dr.itemno)
     and  movement_no is not null;
    end if; -- Added by DB
    
 end loop;
 for j in p5.first..p5.last loop
   update strang.smp 
      set movement_no = c2rec.movement_no, seal = c2rec.seal,modified_date = sysdate, modified_by = c1rec.username   
    where rowid = chartorowid( p5(j) ) 
      and c2rec.io = io
      and not( nvl(movement_no,'#!#') = nvl(c2rec.movement_no,'#!#') and nvl(seal,'|') = nvl(c2rec.seal,'|'))
    ;
   update strang.detailrs_item di
      set movement_no = c2rec.movement_no, seal = c2rec.seal, modified_date = sysdate, modified_by = c1rec.username 
    where exists (select 'x' 
                    from strang.smp sm
                   where di.smp_no = sm.smp_no 
                     and sm.rowid = chartorowid( p5(j)))
     and movement_no is null;
   update strang.detailrs dr
   set movement_no = c2rec.movement_no, camov_seal = c2rec.seal 
   where exists (select 'x' 
                  from strang.smp sm, strang.detailrs_item di
                  where sm.rowid = chartorowid( p5(j))
                    and  sm.smp_no = di.smp_no
                    and  di.deliveryno = dr.deliveryno
                    and  di.item_no = dr.itemno)
    and not exists (select 'x'  
                      from strang.detailrs_item di2
                  where di2.deliveryno = dr.deliveryno
                    and di2.item_no   = dr.itemno 
                    and di2.movement_no is null)
   and movement_no is null
   and c2rec.io = io;
 end loop;
---------------------------------------------------------------------------------
-- LOCAL MAWB amendments start here 

 for i in p7a.first..p7a.last loop
 
   if not(isdel(p7,p7A(i)))  then   
   
      update strang.detailrs dr
      set dr.movement_no_2 = c2rec.movement_no 
      where exists (select 'x'
                      from strang.movements m
                     where dr.movement_no = m.movement_no
                       and rowid = chartorowid( p7A(i) ) and c2rec.io = m.io )
       and movement_no_2 is null;
                       
      update strang.movements m
         set selectall_local = 'Y'
           , mawb_link = c2rec.movement_no 
       where m.movement_type = 'AIRWAY'
       and m.rowid = chartorowid(p7A(i))
       and not exists (select 1 
                        from strang.detailrs dr
                        where movement_no = m.movement_no
                          and dr.movement_no_2 is not null
                          and dr.movement_no_2 <> c2rec.movement_no)   ;
       
       update strang.movements m
         set mawb_link = c2rec.movement_no
           , complete = old_complete
        --   , old_complete = null
       where m.movement_type = 'AIRWAY'
       and m.COMPLETE  = 'X'
       and m.rowid = chartorowid(p7A(i))
       and exists (select 1
                    from strang.detailrs dr
                    where dr.movement_no = m.movement_no
                     and  dr.movement_no_2 = c2rec.movement_no);
                                        
                     
   else
     
   
      glbx.dbg ('in the ELSE section');
      glbx.dbg ('p7A('||to_char(i)||')'||p7A(i));
      glbx.dbg ('c2rec.movement_no '||c2rec.movement_no);
   
   
    
     open c4 (chartorowid( p7a(i)));
     fetch c4 into c4rec;
     close c4;
     
     for j in p2A.first..p2A.last loop
        if isdel(p1A,p2A(j))
        then
           update strang.detailrs dr set movement_no_2 = null, hawb_hawbno_2 = null 
           where rowid = chartorowid( p2A(j) ) 
           and c2rec.io = io
           and dr.movement_no_2 is not null
           and dr.movement_no_2 = c2rec.movement_no ;
        end if;
     end loop;
     if c4rec.selectall_local is not null then     
        update strang.movements m
         set selectall_local = null
       where m.movement_type = 'AIRWAY'
       and m.rowid = chartorowid(p7A(i)) ;  
       
       update strang.detailrs dr
        set movement_no_2 = null
        where exists (select 1
                      from strang.movements m
                      where dr.movement_no = m.movement_no
                      and m.movement_type = 'AIRWAY'
                      and m.rowid = chartorowid(p7A(i)))
        and dr.movement_no_2 = c2rec.movement_no  ;  
     end if;
     for j in p1A.first..p1A.last loop
      --  glbx.dbg ('p1A(1) '|| p1A(j));
        update strang.detailrs dr
        set movement_no_2 = c2rec.movement_no 
        where rowid = chartorowid( p1A(j) ) 
        and c2rec.io = io
        and exists (select 1
                      from strang.movements m
                     where m.movement_no = dr.movement_no 
                       and m.rowid = chartorowid( p7a(i)))
        and  ((dr.movement_no_2 is null) or (dr.movement_no_2 =  c2rec.movement_no)); 

     end loop;
      update strang.movements m
         set mawb_link = null
           , complete = old_complete
        --   , old_complete = null
       where m.movement_type = 'AIRWAY'
       and m.mawb_link =  c2rec.movement_no
      -- and m.COMPLETE = 'X'
       and m.rowid = chartorowid(p7A(i))
       and not exists (select 1
                    from strang.detailrs dr
                    where dr.movement_no = m.movement_no
                     and  dr.movement_no_2 = c2rec.movement_no);
                     
 --   glbx.dbg ('SQL%ROWCOUNT 1 '||SQL%ROWCOUNT);      
                     
      update strang.movements m
         set mawb_link = c2rec.movement_no
           , complete = old_complete
         --  , old_complete = null
       where m.movement_type = 'AIRWAY'
    --   and m.mawb_link is null 
     --  and m.COMPLETE  = 'X'
       and m.rowid = chartorowid(p7A(i))
       and exists (select 1
                    from strang.detailrs dr
                    where dr.movement_no = m.movement_no
                     and  dr.movement_no_2 = c2rec.movement_no);
     --  glbx.dbg ('SQL%ROWCOUNT 2 '||SQL%ROWCOUNT);    
     
   end if;
 end loop;
 
 -------------------------------------------------------------------------------------------
 
-- check for package unit already assigned.
 open c5 (c2rec.movement_no, nvl(c2rec.seal,'|'));
 fetch c5 into c5rec;
 if c5%found then 
   close c5;
   for c5rec2 in c5 (c2rec.movement_no, nvl(c2rec.seal,'|')) loop
      if c5%ROWCOUNT = 1 then
         v_error_msg := 'Deliveryno: '||c5rec2.deliveryno||' item no: '||c5rec2.item_no||' already assigned to '||c5rec2.movement_no;
      else
         v_error_msg := v_error_msg||htf.nl||'Deliveryno: '||c5rec2.deliveryno||' item no: '||c5rec2.item_no||' already assigned to '||c5rec2.movement_no;
      end if;
   end loop;
   rollback;
   assign_det( surl, rid, scid, parm, access_id,v_error_msg, fl );
   return;
 end if;
 close c5;
 end;
----------------------------------------------------------------------------
 commit;
 recalc_weight(  c2rec.movement_no, c2rec.container_type, c2rec.seal, c2rec.movement_type, rid );
 delete from strang.hawbs
  where
   mawb = c2rec.movement_no and
   hawb not in
    (select nvl(hawb_hawbno,99999999) from strang.detailrs where movement_no = c2rec.movement_no);

 commit;

 assign_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_280, fl );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_ASSIGN_DET',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_assign_det;

function new_log_no( p1 in varchar2, vste in varchar2, io varchar2 default 'I' )
 return varchar2
as

 cursor c1(vste varchar2) is select substr(decode(upper(description), 'PORT MORESBY','KIUNGA',description),1,1) code 
                               from strang.lov 
                               where lov_name = 'CONTROLS' 
                               and code = 'REGION' and cola = vste;
                               
 cursor c2( str varchar2, sto varchar2 ) is select max(to_number(substr(logno,1,3))) nmb from strang.detailrs where substr(logno,4) = str;




 c1rec 	c1%ROWTYPE;
 c2rec 	c2%ROWTYPE;
 tmp	varchar2(20);

begin
 open c1(vste);
 fetch c1 into c1rec;
 close c1;
 
 if c1rec.code = 'M' and UPPER(p1) = 'S' then
    tmp := '-' || c1rec.code || p1 ||upper(io)|| '/' || to_char(sysdate,'YY');
 else
    tmp := '-' || c1rec.code || p1 || '/' || to_char(sysdate,'YY');
 end if;
 
  glbx.dbg(tmp);
 open c2(tmp,currsite);
 fetch c2 into c2rec;
 if c2%FOUND
  then
   close c2;
   tmp := lpad(to_char(nvl(c2rec.nmb,0) + 1),3,'0') || tmp;
  else
   close c2;
   tmp := '001' || tmp;
 end if;
 
 if c1rec.code = 'M' and UPPER(p1) = 'S' then
 
    update strang.lov
       set description = to_char(sysdate,LNGS.STR_DATE_02)
     where code = 'LOGNO' || p1 || '_DATE' and
     lov_name = 'CONTROLS' and
     cola = vste and
     colb = upper(io);
      
    update strang.lov
       set description = tmp
     where code = 'LOGNO' || p1 and
     lov_name = 'CONTROLS' and
     cola = vste and
     colb = upper(io);
     
 else 
 
    update strang.lov
       set description = to_char(sysdate,LNGS.STR_DATE_02)
     where code = 'LOGNO' || p1 || '_DATE' and
     lov_name = 'CONTROLS' and
     cola = vste and
     colb is null;
  
    update strang.lov
      set description = tmp
    where code = 'LOGNO' || p1 and
    lov_name = 'CONTROLS' and
    cola = vste and colb is null;
  end if;
  
 glbx.dbg(tmp);
 return( tmp );
end new_log_no;


procedure recalc_weight( mvid varchar2, ctrtype varchar2 default null, sl in varchar2 default null, mtype in varchar2 default null, rid varchar2 default null )
as

 cursor c1(mvid varchar2) is select rowid rid, container_type,movement_type from strang.movements where movement_no = mvid;
 cursor c1a(mvid varchar2, sl varchar2) is select rowid rid, container_type,movement_type from strang.movements where movement_no = mvid and seal = sl;
 cursor c2(ctr varchar2) is select colb from strang.lov where lov_name = 'CTRTYPE' and code = ctr;
 cursor c3(mvid varchar2, sl varchar2) is select sum(to_number(tare)) smp_tare from strang.smp where movement_no = mvid and nvl(seal,'|') = nvl(sl,'|');

 c1rec	c1%ROWTYPE;
 c2rec	c2%ROWTYPE;
 c3rec	c3%ROWTYPE;
 v_rowid varchar2(500);

begin
 if mvid is null then return; end if;
 if ctrtype is null
  then
   if sl is not null
    then
     open c1a(mvid,sl);
     fetch c1a into c1rec;
     close c1a;
    else
     open c1(mvid);
     fetch c1 into c1rec;
     close c1;
   end if;
  else
   c1rec.container_type := ctrtype;
 end if;
 
  open c3(mvid,sl);
  fetch c3 into c3rec;
     if c3%notfound then
        c3rec.smp_tare := 0.0;
     end if;
  close c3;
  
 ----------------------------------------------------------------------------------
 -- Added by David Banjo on 28/10/2023
   update strang.movements m
     set urgency = 'VMR'
   where m.movement_type = 'CARGO'
     and m.movement_no = mvid and nvl(m.seal,'|') = nvl(sl,'|')
  -- and m.rowid = v_rowid
     and exists (select 1
                   from strang.detailrs dr
                  where dr.movement_no = m.movement_no
                    and nvl(dr.camov_seal,'|') = m.seal
                    and exists (select 1
                                  from strang.pos p
                                 where p.deliveryno = dr.deliveryno 
                                  and exists (select 1
                                               from strang.lov l
                                              where l.code = p.inventoryno
                                               and  l.lov_name = 'INVENT'
                                               and  l.colj = 'VMR')
                                 )
                 );
  
 ------------------------------------------------------------------------------------------------------------------------------------------------------- 
   update strang.movements m
      set sumweight = (select sum(nvl(di.WEIGHT,0))
                       from strang.detailrs_item di
                        where m.movement_no = di.movement_no and nvl(m.seal,'|') = nvl(di.seal,'|'))
        , sumvolume = (select sum(round(vol1,3))
                      from (select sum(nvl((di.lngth/100.0)*(di.width/100.0)*(di.height/100.0),0)) over (partition by di.deliveryno, di.item_no) vol1
                                 , row_number() over (partition by di.deliveryno, di.item_no order by order_by) rnk
                              from strang.detailrs_item di
                             where mvid = di.movement_no and nvl(sl,'|') = nvl(di.seal,'|')) tmp
                       where tmp.rnk = 1)
    where  movement_no = mvid and nvl(seal,'|') = nvl(sl,'|');
 -------------------------------------------------------------------------------------------------------------------------------------------------------
 update strang.movements m
  set
   sumweight = nvl(sumweight,0.0) + nvl(c3rec.smp_tare,0.0) + 
                                  nvl((select sum(nvl(partweight,0.0))  
                                     from strang.detailrs dr
                                    where dr.movement_no = mvid 
                                    and nvl(dr.camov_seal,'|') = nvl(sl,'|')
                                    and not exists (select 'x'
                                                      from strang.detailrs_item di
                                                     where di.deliveryno = dr.deliveryno
                                                       and di.item_no = dr.itemno)
                                    ),0),
   sumvolume = nvl(sumvolume,0.0) + NVL((select sum(nvl(partvolume,0.0)) 
                                     from strang.detailrs dr
                                     where dr.movement_no = mvid 
                                     and nvl(dr.camov_seal,'|') = nvl(sl,'|')
                                     and not exists (select 'x'
                                                        from strang.detailrs_item di
                                                       where di.deliveryno = dr.deliveryno
                                                         and di.item_no = dr.itemno)),0)
   ,interface4_date = null, date_modified = sysdate
 where
  --m.rowid = c1rec.rid;
  movement_no = mvid and nvl(seal,'|') = nvl(sl,'|');
 commit;

--------------------------------------------------------------------------------
    -- COMPUTE ADDITIONAL WEIGHT AND VOLUME DUE for LOCAL FLIGHTS here.  
--------------------------------------------------------------------------------  
 update strang.movements m
  set
   sumweight = nvl(sumweight,0.0) + 
                                  nvl((select sum(nvl(partweight,0.0))  
                                     from strang.detailrs dr
                                    where dr.movement_no_2 = mvid 
                                    and nvl(dr.camov_seal_2,'|') = nvl(sl,'|')),0),
   sumvolume = nvl(sumvolume,0.0) + NVL((select sum(nvl(partvolume,0.0)) 
                                     from strang.detailrs dr
                                     where dr.movement_no_2 = mvid 
                                     and nvl(dr.camov_seal_2,'|') = nvl(sl,'|')),0)
   ,interface4_date = null, date_modified = sysdate
 where
  movement_no = mvid and nvl(seal,'|') = nvl(sl,'|');
 commit;
 -------------------------------------------------------------------------------
 open c2( c1rec.container_type );
 fetch c2 into c2rec;
 close c2;
 if c2rec.colb is not null
  then
    
    update strang.movements m
      set revton = (select strang.revenue_tonne(sum(nvl(tmp.weight,0)), sum(nvl(round(vol1,3),0)))
                      from (select sum(di.weight) over (partition by di.deliveryno, di.item_no) weight
                                , sum(nvl((di.lngth/100.0)*(di.width/100.0)*(di.height/100.0),0)) over (partition by di.deliveryno, di.item_no) vol1
                                , row_number() over (partition by di.deliveryno, di.item_no order by order_by) rnk
                              from strang.detailrs_item di
                             where mvid = di.movement_no and nvl(sl,'|') = nvl(di.seal,'|')) tmp
                       where tmp.rnk = 1)
    where  movement_no = mvid and nvl(seal,'|') = nvl(sl,'|');
    update strang.movements m
    set revton = nvl(revton,0) + nvl(c3rec.smp_tare,0)/1000 + NVL((select strang.revenue_tonne(sum(nvl(partweight,0)),sum(nvl(partvolume,0))) 
                                        from strang.detailrs dr
                                       where dr.movement_no = mvid 
                                         and nvl(dr.camov_seal,'|') = nvl(sl,'|')
                                         and not exists (select 'x'
                                                           from strang.detailrs_item di
                                                          where di.deliveryno = dr.deliveryno
                                                            and di.item_no = dr.itemno)
                                    ),0)
      ,interface4_date = null, date_modified = sysdate
    where movement_no = mvid and nvl(seal,'|') = nvl(sl,'|');
  else
  
    
    update strang.movements m
    set revton = (select sum(strang.revenue_tonne(nvl(tmp.weight,0), nvl(round(vol1,3),0)))
                      from (select sum(di.weight) over (partition by di.deliveryno, di.item_no) weight
                                , sum(nvl((di.lngth/100.0)*(di.width/100.0)*(di.height/100.0),0)) over (partition by di.deliveryno, di.item_no) vol1
                                , row_number() over (partition by di.deliveryno, di.item_no order by order_by) rnk
                              from strang.detailrs_item di
                             where mvid = di.movement_no and nvl(sl,'|') = nvl(di.seal,'|')) tmp
                       where tmp.rnk = 1)
    where  movement_no = mvid and nvl(seal,'|') = nvl(sl,'|');
    update strang.movements m
    set revton = nvl(revton,0) +nvl(c3rec.smp_tare,0)/1000 + NVL((select sum(strang.revenue_tonne(nvl(partweight,0),nvl(partvolume,0))) 
                                        from strang.detailrs dr
                                       where dr.movement_no = mvid 
                                         and nvl(dr.camov_seal,'|') = nvl(sl,'|')
                                         and not exists (select 'x'
                                                           from strang.detailrs_item di
                                                          where di.deliveryno = dr.deliveryno
                                                            and di.item_no = dr.itemno)
                                    ),0)
      ,interface4_date = null, date_modified = sysdate
    where movement_no = mvid and nvl(seal,'|') = nvl(sl,'|');    
--------------------------------------------------------------------------------
    -- COMPUTE ADDITIONAL REV TONNE DUE for LOCAL FLIGHTS here.  
--------------------------------------------------------------------------------  
    update strang.movements m
    set revton = nvl(revton,0) + NVL((select sum(strang.revenue_tonne(nvl(partweight,0),nvl(partvolume,0))) 
                                        from strang.detailrs dr
                                       where dr.movement_no_2 = mvid 
                                         and nvl(dr.camov_seal_2,'|') = nvl(sl,'|')),0)
      ,interface4_date = null, date_modified = sysdate
    where movement_no = mvid and nvl(seal,'|') = nvl(sl,'|');  
 end if;

 if mtype = 'AIRWAY'
  then
   
    update strang.movements m
       set chargeweight = NVL(( select sum(strang.chargeable_weight(nvl(tmp.weight,0), nvl(round(vol1,3),0)))    
                              from (select sum(di.weight) over (partition by di.deliveryno, di.item_no) weight
                                         , sum(nvl((di.lngth/100.0)*(di.width/100.0)*(di.height/100.0),0)) over (partition by di.deliveryno, di.item_no) vol1
                                         , row_number() over (partition by di.deliveryno, di.item_no order by order_by) rnk
                                     from strang.detailrs_item di
                                    where mvid = di.movement_no and nvl(sl,'|') = nvl(di.seal,'|')) tmp
                             where tmp.rnk = 1),0)
     where movement_no = mvid and nvl(seal,'|') = nvl(sl,'|');
    update strang.movements m
    set
     chargeweight = nvl(chargeweight,0) + nvl(c3rec.smp_tare,0)  + NVL((select sum(strang.chargeable_weight(nvl(partweight,0),nvl(partvolume,0))) 
                                                                         from strang.detailrs dr
                                                                        where movement_no = mvid 
                                                                          and nvl(camov_seal,'x') = nvl(sl,'x')
                                                                          and not exists (select 'x'
                                                                                           from strang.detailrs_item di
                                                                                          where di.deliveryno = dr.deliveryno
                                                                                            and di.item_no = dr.itemno)
                                                                     ),0)
     , interface4_date = null, date_modified = sysdate
    where -- m.rowid = c1rec.rid;
      movement_no = mvid and nvl(seal,'x') = nvl(sl,'x');
--------------------------------------------------------------------------------
    -- COMPUTE ADDITIONAL CHARGE WEIGHT DUE for LOCAL FLIGHTS here.  
--------------------------------------------------------------------------------      
    update strang.movements m
    set
     chargeweight = nvl(chargeweight,0) + NVL((select sum(strang.chargeable_weight(nvl(partweight,0),nvl(partvolume,0))) 
                                                 from strang.detailrs dr
                                                where movement_no_2 = mvid 
                                                  and nvl(camov_seal_2,'x') = nvl(sl,'x') ),0)
     , interface4_date = null, date_modified = sysdate
    where -- m.rowid = c1rec.rid;
      movement_no = mvid and nvl(seal,'x') = nvl(sl,'x');  
 end if;
 update strang.invoices i
  set
   volume = (select sum(sumvolume) from strang.movements m where m.invoiceno = i.invoiceno),
   gross = (select sum(nvl(sumweight,0)+nvl(tare,0)) from strang.movements m where m.invoiceno = i.invoiceno),
   weight = (select sum(sumweight) from strang.movements m where m.invoiceno = i.invoiceno),
   revton = (select sum(revton) from strang.movements m where m.invoiceno = i.invoiceno),
   chargeweight = (select sum(chargeweight) from strang.movements m where m.invoiceno = i.invoiceno)
 where
  invoiceno in (select invoiceno from strang.movements where movement_no = mvid);

 commit;

end recalc_weight;

procedure cascade_movement( surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, oldid in varchar2, oldseal in varchar2, mtype in varchar2, msg in varchar2 default null )
as

 cursor c2(vrid varchar2) is select * from strang.movements where rowid = vrid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 emptyseal	integer;
 v_full_mt  varchar2(10);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.CASCADE_MOVEMENT' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 

 glbx.main_title( surl, LNGS.STR_TXT_281,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR19',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 
  open c2(replace(rid,'~','+'));
  fetch c2 into c2rec;
  close c2;
 
 htp.p( '<CENTER>' );

 htp.formopen( 'strangp.accept_cascade_movement' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'MTYPE', mtype );

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_282), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( mtype ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_283), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold(oldid), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
    htp.formhidden( 'OLD_MOVEMENT', oldid );

  htp.tablerowclose;
  if mtype = 'CARGO' and nvl(upper(c2rec.full_mt),'FULL') <> 'EMPTY'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_284), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold(oldseal), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
    htp.formhidden( 'OLD_SEAL', oldseal );
    htp.tablerowclose;
   elsif mtype = 'CARGO' and nvl(c2rec.full_mt,'FULL') = 'EMPTY'
    then
    htp.formhidden( 'OLD_SEAL', c2rec.seal );
   else
    htp.formhidden( 'OLD_SEAL', null );
  end if;
  htp.tablerowopen;
  htp.tabledata( htf.bold( LNGS.STR_TXT_285), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tabledata( htf.formtext('NEW_MOVEMENT',20,30), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
  if mtype = 'CARGO' and nvl(upper(c2rec.full_mt),'FULL') <> 'EMPTY'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_286), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.formtext('NEW_SEAL',20,30), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
    htp.tablerowclose;
  elsif mtype = 'CARGO' and nvl(c2rec.full_mt,'FULL') = 'EMPTY'
    then
      if c2rec.seal is null
      then 
         select strang.s_seal_for_empties.nextval into emptyseal from dual;
         htp.formhidden( 'NEW_SEAL', to_char(emptyseal));
      else 
         htp.formhidden( 'NEW_SEAL', to_char(c2rec.seal));
      end if;
   else
    htp.formhidden( 'NEW_SEAL', null );
  end if;
 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=1 cellspacing=1 border=0' );
 htp.tablerowopen;
 htp.tabledata( htf.formsubmit( null, LNGS.STR_TXT_287 ));
 htp.formclose;
 htp.formopen( 'strangp.movement' );
 htp.formhidden( 'SURL', surl );
   htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'CALL_NAME', null );
 htp.formhidden( 'ACCESS_ID', access_id );
 htp.tabledata( htf.formsubmit( null, LNGS.STR_TXT_318 ));
 htp.formclose;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'CASCADE_MOVEMENT',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end cascade_movement;

procedure accept_cascade_movement( surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2, mtype in varchar2, old_movement in varchar2, old_seal in varchar2 default null, new_movement in varchar2, new_seal in varchar2 default null)
as

 cursor c2( vmov varchar2, sl varchar2 ) is select 'x' from strang.movements where movement_no = vmov and nvl(seal,'|') = nvl(sl,'|');

 c1rec		    customer_account%ROWTYPE;
 c2rec          c2%ROWTYPE;
 pfx		    THEME%ROWTYPE;
 ltype		    varchar2(100);
 stype		    integer;
 owner_id	    integer;
 sts		    varchar2(100);
 vio		    char;
 v_full_mt      varchar2(10);
 v_dir1         varchar2(100);
 v_file1        varchar2(100);
 v_dir2         varchar2(100);
 v_file2        varchar2(100);
 v_dir          varchar2(100);
 t_dir          varchar2(100);
 v_old_movement varchar2(100);
 v_old_seal     varchar2(100);
 v_new_movement varchar2(100);
 v_new_seal     varchar2(100);
 
 
begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_CASCADE_MOVEMENT' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  c1rec := glbx.get_aid( owner_id, 'C', ltype );
  pfx := glbx.get_thm( c1rec.theme_name );
  
  v_old_movement := regexp_replace(old_movement, '[^0-9A-Za-z]', '');
  v_old_seal := regexp_replace(old_seal, '[^0-9A-Za-z]', '');
  v_new_movement := regexp_replace(new_movement, '[^0-9A-Za-z]', '');
  v_new_seal := regexp_replace(new_seal, '[^0-9A-Za-z]', '');
 
 open c2 (rtrim(ltrim(new_movement)), nvl(new_seal,'|'));
 fetch c2 into c2rec;
 if c2%found then
    close c2;
    cascade_movement( surl, rid, scid, parm, access_id, old_movement, old_seal, mtype, 'The New Movement No/Seal already exists!!' );
    return;
 end if;
 close c2;

 if old_movement is null then cascade_movement( surl, rid, scid, parm, access_id, old_movement, old_seal, mtype, 'Old Movement No must be entered' ); return; end if;
 if new_movement is null then cascade_movement( surl, rid, scid, parm, access_id, old_movement, old_seal, mtype, 'New Movement No must be entered' ); return; end if;
 if mtype = 'CARGO' and new_seal is null then cascade_movement( surl, rid, scid, parm, access_id, old_movement, old_seal, mtype, 'A New Seal must be entered' ); return; end if;
 
 if old_seal is null
  then
   -- If we cascade update HAWBS, just do a safety check and make sure it is an AIR type
   
    update strang.movements
    set
     movement_no = upper(trim(new_movement)),
     interface4_date = null, date_modified = sysdate
    where
     movement_no = old_movement;
   
   update strang.hawbs
    set
     mawb = upper(trim(new_movement))
    where
     mawb = old_movement and
     exists (select 'x' from strang.movements where movement_type = 'AIRWAY' and movement_no = old_movement);
   update strang.detailrs
    set
     movement_no = upper(trim(new_movement))
    where
     movement_no = old_movement;
     
    --------- Added by DAVID BANJO on 20210907
    
    update strang.smp
    set
     movement_no = upper(trim(new_movement)),
     modified_date = sysdate
    where
     movement_no = old_movement;
    
    update strang.detailrs_item
    set
     movement_no = upper(trim(new_movement)),
     modified_date = sysdate
    where
     movement_no = old_movement;
     

  else
  
   update strang.movements
    set
     movement_no = upper(trim(new_movement)),
     seal = upper(trim(new_seal)),
     interface4_date = null, date_modified = sysdate
    where
     movement_no = old_movement and
     seal = old_seal;
     
   update strang.detailrs
    set
     movement_no = upper(trim(new_movement)),
     camov_seal = upper(trim(new_seal))
    where
     movement_no = old_movement and
     camov_seal = old_seal;
     
     
    --------- Added by DAVID BANJO on 20210907
   update strang.smp
    set
     movement_no = upper(trim(new_movement)),
     seal = upper(trim(new_seal)),
     modified_date = sysdate
    where
     movement_no = old_movement and
     seal = old_seal; 
     
     
    update strang.detailrs_item
    set
     movement_no = upper(trim(new_movement)),
     seal = upper(trim(new_seal)),
     modified_date = sysdate
    where
     movement_no = old_movement and
     seal = old_seal; 
  
     
 end if;
 -- Added by David Banjo 7/9/2021
   
 FOR smp_record IN (select rowid rid from strang.smp where upper(movement_no) = upper(trim(new_movement)) and nvl(upper(trim(seal)),'|') = nvl(upper(trim(new_seal)),'|') )
 LOOP
     recalc_weight_smp (smp_record.rid, null);
 END LOOP; 
 
  -- Handle Inside and front photo movements here
  
  if old_seal is not null then

   v_dir1 := glbx.extract_master_parameter('STRANG_RECEIVALS_DIR') || decs.UNIX_OR_NT || v_old_movement||'_'||v_old_seal|| decs.UNIX_OR_NT ||'FRONT';
   v_file1 := v_old_movement||'_'||v_old_seal||'_'||'FRONT.png';
     
   v_dir2 := glbx.extract_master_parameter('STRANG_RECEIVALS_DIR') || decs.UNIX_OR_NT || v_old_movement||'_'||v_old_seal|| decs.UNIX_OR_NT ||'INSIDE';
   v_file2 := v_old_movement||'_'||v_old_seal||'_'||'INSIDE.png';
   v_dir := glbx.extract_master_parameter('STRANG_RECEIVALS_DIR') || decs.UNIX_OR_NT || v_old_movement||'_'||v_old_seal;
   t_dir := v_new_movement||'_'||v_new_seal;
  
   if file_exists(v_dir1, v_file1) then
   if utl_os.renamedir(v_dir1||decs.UNIX_OR_NT ||v_file1 , v_new_movement||'_'||v_new_seal||'_'||'FRONT.png') then null; end if;
   end if;
   
   if file_exists(v_dir2, v_file2) then
   if utl_os.renamedir(v_dir2||decs.UNIX_OR_NT ||v_file2 , v_new_movement||'_'||v_new_seal||'_'||'INSIDE.png') then null; end if;
   end if;

   if file_exists(v_dir1, v_new_movement||'_'||v_new_seal||'_'||'FRONT.png') or file_exists(v_dir2, v_new_movement||'_'||v_new_seal||'_'||'INSIDE.png')
   then
      if utl_os.renamedir(v_dir, t_dir) then null; end if;
   end if;
 end if;
   
 commit;
  
 
   
 recalc_weight( upper(trim(new_movement)), upper(trim(new_seal)) );
 menu( surl, null, mtype, upper(trim(new_movement)), 'SEARCH' );
exception
 when
  others
   then
    glbx.main_title( surl, 'Error on Update',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR19',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
    htp.nl;
    htp.nl;
    htp.bold( 'Error Found: ' || sqlerrm );
    htp.nl;
    htp.nl;
    htp.bold( 'Likely cause: This Movement No already exists' );
    htp.nl;
    htp.nl;
    htp.italic( LNGS.STR_TXT_420 );
    htp.nl;
    htp.htmlclose;
    glbx.error_details( 'STRANGP', 'ACCEPT_CASCADE_MOVEMENT',null,null,errmsg=>sqlerrm,extdet=>'MTYPE:' || mtype);
    rollback;
    return;
end accept_cascade_movement;

function data_access( acid in integer, typ in varchar2, rid in rowid, ext in varchar2 default null )
 return varchar2
as

 seclevel	varchar2(100);
 vapproval  varchar2(500); 
         
         

begin
 -- RECEIVAL, DETAILRS, MOVEMENT, SHP, INVOICING, POS, ASSIGN, DUTY, CODES

  vapproval := approver( acid, 'CONTAINER PACKLIST');
  
  if NVL(vapproval, 'xxx') <> 'CONTAINER PACKLIST' and typ in ( 'MOVEMENT')  and rid = 'AAAE/KAAFAADLOyAAV'  then
     return( 'NONE' );
  end if;
 
 seclevel := oltp.security_role( acid );
 if seclevel = 'LEVEL 7' then return( 'EDIT' ); end if;

 -- Screens
 



 if typ in ( 'MOVEMENT', 'ASSIGN' )
  then
   if seclevel in ( 'LEVEL 6','LEVEL 8' ) then return( 'READ' ); elsif seclevel in ('LEVEL 2','LEVEL 3','LEVEL 4','LEVEL 5' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ in ( 'SHP')
  then
   if seclevel in ( 'LEVEL 1','LEVEL 6' ) then return( 'READ' ); elsif seclevel in ('LEVEL 2','LEVEL 3','LEVEL 4','LEVEL 5','LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
-- xxxSouthbound Start
 elsif typ in ( 'SHP_SB')
  then
   if seclevel in ( 'LEVEL 1','LEVEL 6' ) then return( 'READ' ); elsif seclevel in ('LEVEL 2','LEVEL 3','LEVEL 4','LEVEL 5','LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
-- xxxSouthbound End
 elsif typ in ( 'ENTRY_MAINTAIN')
  then
   if seclevel in ('LEVEL 5','LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ in ( 'CONTAINER_MAINTAIN')
  then
   if seclevel in ( 'LEVEL 1','LEVEL 6' ) then return( 'READ' ); elsif seclevel in ('LEVEL 2','LEVEL 3','LEVEL 4','LEVEL 5','LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ in ( 'DELIVERY_MAINTAIN')
  then
   if seclevel in ('LEVEL 5','LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ in ( 'RECEIVAL' )
  then
   if seclevel in ( 'LEVEL 1', 'LEVEL 6') then return( 'READ' ); elsif seclevel in ('LEVEL 2','LEVEL 3','LEVEL 4','LEVEL 5','LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ in ( 'POS', 'DETAILRS' )
  then
   if seclevel in (  'LEVEL 1','LEVEL 6') then return( 'READ' ); elsif seclevel in ('LEVEL 2','LEVEL 3','LEVEL 4','LEVEL 5','LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ = 'SHP2'
  then
   if seclevel in ('LEVEL 5','LEVEL 8') then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ = 'DELLOV'
  then
   return( 'NONE' );
 elsif typ = 'HOTSYNC'
  then
   if seclevel in ('LEVEL 3','LEVEL 4','LEVEL 5') then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ = 'HOTSYNC_SUPER'
  then
   return( 'NONE' );
 elsif typ in ( 'INVOICING','CHARGES', 'INVCONTROLS')
  then
   if seclevel in ('LEVEL 5','LEVEL 6' ) then return( 'EDIT' ); else return( 'NONE' ); end if;

 -- Control Codes
 elsif typ in ( 'CONTROLS','CONTRACTS','GSTCODES' )
  then
   if seclevel in ('LEVEL 3', 'LEVEL 4', 'LEVEL 5', 'LEVEL 6' ) then return( 'READ' ); else return( 'NONE' ); end if;
 elsif typ in ('TARIFF','INVENT')
  then
   if seclevel in (  'LEVEL 1','LEVEL 6' ) then return( 'READ' ); elsif seclevel in ('LEVEL 3','LEVEL 4','LEVEL 5', 'LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ in ('SAD')
  then
   if seclevel in (  'LEVEL 9' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ = 'DUTY'
  then
   if seclevel in (  'LEVEL 1','LEVEL 6' ) then return( 'READ' ); elsif seclevel in ('LEVEL 5','LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ in ( 'OPERATORS','TRAILERS','TRUCKS','UNRATTAB','CURRENCY', 'COUNTRIES', 'CUSTOMERS' , 'CTRTYPE','LOCATIONS','PACKTYPES','UNITS','DEBTOR_BRANCH','DEBTOR_CODE','JOB_BRANCH','PROFIT_CENTRE','COST_CENTRE','WAREHOUSES','URGENCY','HAZARD_CLASS','SMP_PACKTYPES')
  then
   if seclevel in ( 'LEVEL 6','LEVEL 8' ) then return( 'READ' ); elsif seclevel in ( 'LEVEL 2', 'LEVEL 3','LEVEL 4', 'LEVEL 5') then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ = 'MANENTRY'
  then
   if seclevel in (  'LEVEL 1','LEVEL 6' ) then return( 'READ' ); elsif seclevel in ('LEVEL 4','LEVEL 5','LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ = 'CONTAINERS'
  then
   if seclevel in ( 'LEVEL 1','LEVEL 8' ) then return( 'READ' ); elsif seclevel in ('LEVEL 4','LEVEL 5','LEVEL 6' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ in ( 'SMP' )
  then
   if seclevel in ( 'LEVEL 1', 'LEVEL 6') then return( 'READ' ); elsif seclevel in ('LEVEL 2','LEVEL 3','LEVEL 4','LEVEL 5','LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 -- Reports
 elsif typ = 'REPORT A'
  then
   if seclevel in ( 'LEVEL 1','LEVEL 2','LEVEL 3','LEVEL 4','LEVEL 5','LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ = 'REPORT B'
  then
   if seclevel in ( 'LEVEL 2','LEVEL 3','LEVEL 8' ) then return( 'EDIT' ); elsif seclevel in ('LEVEL 1','LEVEL 4','LEVEL 5' ) then return( 'READ' ); else return( 'NONE' ); end if;
 elsif typ = 'REPORT C'
  then
   if seclevel in ( 'LEVEL 1' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ = 'REPORT D'
  then
   if seclevel in ( 'LEVEL 3','LEVEL 4' ) then return( 'EDIT' ); elsif seclevel in ('LEVEL 1','LEVEL 2','LEVEL 5','LEVEL 8' ) then return( 'READ' ); else return( 'NONE' ); end if;
 elsif typ = 'REPORT E'
  then
   if seclevel in ( 'LEVEL 3','LEVEL 4' ) then return( 'EDIT' ); elsif seclevel in ('LEVEL 1','LEVEL 2','LEVEL 5','LEVEL 8' ) then return( 'READ' ); else return( 'NONE' ); end if;
 elsif typ = 'REPORT F'
  then
   if seclevel in ( 'LEVEL 1','LEVEL 3','LEVEL 4' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ = 'REPORT G'
  then
   if seclevel in ( 'LEVEL 3','LEVEL 4' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ = 'SMP'
   then 
   if seclevel in ( 'LEVEL 3','LEVEL 4','LEVEL 5','LEVEL 6', 'LEVEL 7', 'LEVEL 8' ) then return( 'EDIT' ); else return( 'NONE' ); end if;
 elsif typ = 'PO_ITEM_NO_MAINTAIN'
   then 
   if seclevel in ( 'LEVEL 1', 'LEVEL 3') then return( 'READ' );  else return( 'EDIT' ); end if;
 else
   if seclevel in ('LEVEL 1','LEVEL 4','LEVEL 5' ) then return( 'READ' ); else return( 'EDIT' ); end if;
 end if;
 return( 'READ' );

exception
 when others then return( 'NONE' );
end data_access;

procedure menu( surl in varchar2, rnd in varchar2, mtype in varchar2, msearch in varchar2 default null, action in varchar2 default 'SEARCH', rid in varchar2 default null )
as

 cursor c2( sname varchar2 ) is select screen_id from oltp_overview where screen_name = sname;

 cursor c1 is select rowid from strang.receivals order by deliveryno desc;
 cursor c1s( nmb number )is select rowid from strang.receivals where to_char(deliveryno) like to_char(nmb) || '%';
 cursor c1x( dlr varchar2 ) is select rowid from strang.receivals where substr(to_char(deliveryno),1,1) = dlr order by deliveryno desc;
 cursor c1sx( nmb number, dlr varchar2 )is select rowid from strang.receivals where to_char(deliveryno) like to_char(nmb) || '%' and substr(to_char(deliveryno),1,1) = dlr;
 cursor c3( mtype varchar2 ) is select rowid from strang.movements where movement_type = mtype order by movement_no, dispatch_date desc;
 -- cursor c3s( mtype varchar2, msearch varchar2 ) is select rowid from strang.movements where movement_type = mtype and upper(movement_no) like upper(msearch) || '%' order by movement_no, dispatch_date desc;
 cursor c3s( mtype varchar2, msearch varchar2 ) is
  select rowid
  from   strang.movements
  where  movement_type = mtype
         and upper(ltrim(movement_no, chr(9))) like upper(msearch) || '%'
  order by movement_no, date_modified desc nulls last;
 cursor c4 is select rowid from strang.invoices order by invoiceno;
 cursor c4s( msearch varchar2 ) is select rowid from strang.invoices where upper(invoiceno) like upper(msearch) || '%';
 cursor c5 is select rowid from strang.duty order by entry_no;
-- cursor c5s( msearch varchar2 ) is select rowid from strang.duty where to_char(entry_no) like strang.ent.get_entry_no(msearch) || '%';
-- cursor c5s( msearch varchar2 ) is select rowid from strang.duty where to_char(strang.ent.get_entry_no(entry_no)) like msearch || '%';
 cursor c5s( m_search integer ) is select rowid from strang.duty where entry_no = strang.ent.get_entry_no(m_search);
 cursor c6 is select rowid from strang.ships_airway order by shipname,voy asc;
 cursor c6s( msearch varchar2 ) is
  select rowid
  from strang.ships_airway
  where (upper(voy) like upper(msearch) || '%' and instr(msearch,'-') = 0) or
        (instr(msearch,'-') > 0 and upper(voy) = substr(upper(msearch),1,instr(msearch,'-')-1) and upper(shipname) like substr(upper(msearch),instr(msearch,'-')+1) || '%')
  order by shipname,voy asc;
 cursor c6ss( shipid integer ) is select rowid from strang.ships_airway where (ship_id = shipid or sap_ship_id = shipid) and rownum < 2;
 cursor c7 is select rowid from strang.customers order by customer;
 cursor c7s( msearch varchar2 ) is select rowid from strang.customers where upper(customer) like upper(msearch) || '%' order by customer;
 cursor c7n( msearch integer ) is select rowid from strang.customers where customer_id = msearch order by customer;
 cursor c8 is select rowid,chargecode from strang.charges order by chargecode;
 cursor c8s( msearch varchar2 ) is select rowid,chargecode from strang.charges where upper(chargecode) like upper(msearch) || '%';
 cursor c9 is select rowid,entry_no from strang.detailrs where entry_no is not null order by entry_no,line_no;
 cursor c9a(lrid rowid) is select rowid from strang.receivals where deliveryno = (select deliveryno from strang.detailrs where rowid = lrid);
 cursor c9b(lrid rowid) is select rowid from strang.detailrs where deliveryno in (select deliveryno from strang.receivals where rowid = lrid) order by itemno,logno;
 cursor c9s( msearch integer ) is select rowid,entry_no from strang.detailrs where entry_no = strang.ent.get_entry_no(msearch);
 cursor c10(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'SEE_ALL_DELIVERIES' and cola = vste;
 cursor c11(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'DELIVERYNO' and cola = vste;
 cursor c12 is select rowid,convoy_id from strang.convoy order by convoy_id desc;
 cursor c12s( nmb number ) is select rowid,convoy_id from strang.convoy where to_char(convoy_id) like to_char(nmb) || '%';
 cursor c12x is select count('x') tot from strang.convoy;
 cursor c14(ent integer) is select rowid,convoy_id from strang.convoy_details where convoy_id = ent order by rno;
 cursor c14s( ent integer, nmb number ) is select rowid,convoy_id from strang.convoy_details where convoy_id = ent and to_char(rno) like to_char(nmb) || '%' order by rno;
 cursor c14x(ent integer) is select count('x') tot from strang.convoy_details where convoy_id = ent;
 cursor c14z(nrid rowid) is select convoy_id from strang.convoy_details where rowid = nrid;
 cursor c15 is select rowid from strang.containers order by containerno, timeshired desc;
 cursor c15s( msearch varchar2 ) is select rowid from strang.containers where containerno like msearch || '%' order by containerno, timeshired desc;
 -- xxx change to reference categories
 cursor c16 is select rowid from strang.categories order by contract,company,codedesc;
 cursor c16s( msearch varchar2 ) is select rowid from strang.categories where contract||codedesc||company like '%' || msearch || '%' order by contract,company,codedesc;
 cursor c17 is select rowid from strang.onlocs order by cat_contract,cat_company,cat_code;
 cursor c17s( msearch varchar2 ) is select rowid from strang.onlocs where replace(cat_contract||cat_company||cat_code,' ','') like '%' || replace(upper(msearch),' ','') || '%' order by cat_contract,cat_company,cat_code;
 cursor c18 is select rowid from strang.offlocs order by cat_contract,cat_company,cat_code;
 cursor c18s( msearch varchar2 ) is select rowid from strang.offlocs where replace(cat_contract||cat_company||cat_code ,' ','') like '%' || replace(upper(msearch),' ','') || '%' order by cat_contract,cat_company,cat_code;
 cursor c19 is select rowid from strang.tracking_header order by containerno, cat_code, cat_company;
 cursor c19s( msearch varchar2 ) is select rowid from strang.tracking_header where containerno like msearch || '%' order by containerno, cat_code, cat_company;
 -- Added by DB for SMP searches
 cursor c20 is select rowid from strang.smp order by smp_no;
 cursor c20s( msearch varchar2 ) is select rowid from strang.smp where upper(smp_no) like upper(msearch) || '%' order by smp_no;
 cursor c20n( msearch integer ) is select rowid from strang.smp where smp_id = msearch order by smp_no;


 c1rec	c1%ROWTYPE;
 c2rec	c2%ROWTYPE;
 c3rec	c3%ROWTYPE;
 c4rec	c4%ROWTYPE;
 c5rec	c5%ROWTYPE;
 c6rec	c6%ROWTYPE;
 c7rec	c7%ROWTYPE;
 c8rec	c8%ROWTYPE;
 c9rec	c9%ROWTYPE;
 c9arec	c9a%ROWTYPE;
 c10rec c10%ROWTYPE;
 c11rec c11%ROWTYPE;
 c12rec c12%ROWTYPE;
 c14rec c14%ROWTYPE;
 c15rec c15%ROWTYPE;
 c16rec c16%ROWTYPE;
 c17rec c17%ROWTYPE;
 c18rec c18%ROWTYPE;
 c19rec c19%ROWTYPE;
 c20rec c20%ROWTYPE;

 -- xxx (remember this bit, add what here?)

 nmb		number;
 lrid		rowid;
 cusrec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 rctr		integer;
 tot		integer;
 ent		integer;
 vste		varchar2(10);
 arr_rid	src_rid;
 v_search   varchar2(1000);
 v_cus		integer;
 v_smp		integer;
 v_ship_search	integer;
 
begin

  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.MENU' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  cusrec := glbx.get_aid( owner_id, 'C', ltype );
  vste := customer_state(cusrec.aid);

 if mtype = 'RECEIVALS'
  then
   open c10(vste);
   fetch c10 into c10rec;
   close c10;
   if action = 'SEARCH'
    then
     if msearch is null
      then
       if c10rec.description = 'YES' and cusrec.username <> 'DAWN'
        then
         open c1;
         fetch c1 into c1rec;
         close c1;
        else
         open c11(vste);
         fetch c11 into c11rec;
         close c11;
         open c1x( substr(c11rec.description,1,1) );
         fetch c1x into c1rec;
         close c1x;
       end if;
      else
       begin nmb := to_number( msearch ); exception when others then nmb := NULL; end;
       if c10rec.description = 'YES' and cusrec.username <> 'DAWN'
        then
         open c1s( nmb );
         fetch c1s into c1rec;
         close c1s;
        else
         open c11(vste);
         fetch c11 into c11rec;
         close c11;
         open c1sx( nmb,substr(c11rec.description,1,1)  );
         fetch c1sx into c1rec;
         close c1sx;
       end if;
     end if;
     open c2( 'Receival' );
     fetch c2 into c2rec;
     close c2;
   elsif action = 'PREVIOUS'
    then
     if c10rec.description = 'YES'  and cusrec.username <> 'DAWN'
      then
       open c1;
      else
       open c11(vste);
       fetch c11 into c11rec;
       close c11;
       open c1x(substr(c11rec.description,1,1) );
     end if;
     lrid := NULL;
     loop
      if c10rec.description = 'YES'  and cusrec.username <> 'DAWN'
       then
        fetch c1 into c1rec;
        if c1%NOTFOUND then c1rec.rowid := lrid; exit; end if;
       else
        fetch c1x into c1rec;
        if c1x%NOTFOUND then c1rec.rowid := lrid; exit; end if;
      end if;
      exit when c1rec.rowid = replace(rid,'~','+');
      lrid := c1rec.rowid;
     end loop;
     if c10rec.description = 'YES' and cusrec.username <> 'DAWN' then close c1; else close c1x; end if;
     if lrid is not null then c1rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     if c10rec.description = 'YES'  and cusrec.username <> 'DAWN'
      then
       open c1;
      else
       open c11(vste);
       fetch c11 into c11rec;
       close c11;
       open c1x(substr(c11rec.description,1,1) );
     end if;
     lrid := NULL;
     loop
      if c10rec.description = 'YES'  and cusrec.username <> 'DAWN'
       then
        fetch c1 into c1rec;
        if c1%NOTFOUND then c1rec.rowid := lrid; exit; end if;
       else
        fetch c1x into c1rec;
        if c1x%NOTFOUND then c1rec.rowid := lrid; exit; end if;
      end if;
      if c1rec.rowid = replace(rid,'~','+')
       then
        lrid := c1rec.rowid;
        if c10rec.description = 'YES'  and cusrec.username <> 'DAWN'
         then
          fetch c1 into c1rec;
          if c1%NOTFOUND then c1rec.rowid := lrid; end if;
         else
          fetch c1x into c1rec;
          if c1x%NOTFOUND then c1rec.rowid := lrid; end if;
        end if;
        exit;
      end if;
      lrid := c1rec.rowid;
     end loop;
     if c10rec.description = 'YES'  and cusrec.username <> 'DAWN' then close c1; else close c1x; end if;
   end if;
   if c1rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_288 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   receive(surl,c1rec.rowid, c2rec.screen_id, 'strangp.receive', 'RECEIVALS', 'x', null );
   return;
 end if;

 if mtype in ('CARGO','CONMOV','AIRWAY')
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c3( mtype );
       fetch c3 into c3rec;
       close c3;
      else
       open c3s( mtype, trim(msearch) );
       fetch c3s into c3rec;
       close c3s;
     end if;
     if mtype = 'CARGO'
      then
       open c2( 'Cargo' );
     elsif mtype = 'CONMOV'
      then
       open c2( 'Consignment' );
     else
       open c2( 'Air Freight' );
     end if;
     fetch c2 into c2rec;
     close c2;
   elsif action = 'PREVIOUS'
    then
     open c3( mtype );
     lrid := NULL;
     loop
      fetch c3 into c3rec;
      if c3%NOTFOUND then c3rec.rowid := lrid; exit; end if;
      exit when c3rec.rowid = replace(rid,'~','+');
      lrid := c3rec.rowid;
     end loop;
     close c3;
     if lrid is not null then c3rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     open c3( mtype );
     lrid := NULL;
     loop
      fetch c3 into c3rec;
      if c3%NOTFOUND then c3rec.rowid := lrid; exit; end if;
      if c3rec.rowid = replace(rid,'~','+')
       then
        lrid := c3rec.rowid;
        fetch c3 into c3rec;
        if c3%NOTFOUND then c3rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c3rec.rowid;
     end loop;
     close c3;
   end if;
   if c3rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_291 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   movement(surl,c3rec.rowid, c2rec.screen_id, 'strangp.movement', mtype, 'x', null );
   return;
 end if;

 if mtype = 'INVOICES'
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c4;
       fetch c4 into c4rec;
       close c4;
      else
       open c4s( trim(msearch) );
       fetch c4s into c4rec;
       close c4s;
     end if;
     open c2( 'Invoicing' );
     fetch c2 into c2rec;
     close c2;
   elsif action = 'PREVIOUS'
    then
     open c4;
     lrid := NULL;
     loop
      fetch c4 into c4rec;
      if c4%NOTFOUND then c4rec.rowid := lrid; exit; end if;
      exit when c4rec.rowid = replace(rid,'~','+');
      lrid := c4rec.rowid;
     end loop;
     close c4;
     if lrid is not null then c4rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     open c4;
     lrid := NULL;
     loop
      fetch c4 into c4rec;
      if c4%NOTFOUND then c4rec.rowid := lrid; exit; end if;
      if c4rec.rowid = replace(rid,'~','+')
       then
        lrid := c4rec.rowid;
        fetch c4 into c4rec;
        if c4%NOTFOUND then c4rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c4rec.rowid;
     end loop;
     close c4;
   end if;
   if c4rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_292 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   inv(surl,c4rec.rowid, c2rec.screen_id, 'strangp.inv', 'INVOICES', 'x', null );
   return;
 end if;

 if mtype = 'DUTY'
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c5;
       fetch c5 into c5rec;
       close c5;
      else
       if instr(msearch, '.') > 0
        then
         begin nmb := to_number(strang.ent.get_entry_no(msearch)); exception when others then nmb := null; end;
       else
         begin nmb := to_number('1' || '.' || strang.ent.get_entry_no(msearch, 'D')); exception when others then nmb := null; end;
       end if;
       open c5s( nmb );
--       open c5s( trim(msearch) );
       fetch c5s into c5rec;
       close c5s;
     end if;
     open c2( 'Duty' );
     fetch c2 into c2rec;
     close c2;
   elsif action = 'PREVIOUS'
    then
     open c5;
     lrid := NULL;
     loop
      fetch c5 into c5rec;
      if c5%NOTFOUND then c5rec.rowid := lrid; exit; end if;
      exit when c5rec.rowid = replace(rid,'~','+');
      lrid := c5rec.rowid;
     end loop;
     close c5;
     if lrid is not null then c5rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     open c5;
     lrid := NULL;
     loop
      fetch c5 into c5rec;
      if c5%NOTFOUND then c5rec.rowid := lrid; exit; end if;
      if c5rec.rowid = replace(rid,'~','+')
       then
        lrid := c5rec.rowid;
        fetch c5 into c5rec;
        if c5%NOTFOUND then c5rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c5rec.rowid;
     end loop;
     close c5;
   end if;
   if c5rec.rowid is null
    then
     htp.htmlopen;
--      htp.header(3,LNGS.STR_TXT_293 || ' : ' || msearch, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_293 || ' : ' || nvl(to_char(nmb), trim(msearch)), 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   duty_edit(surl,c5rec.rowid, c2rec.screen_id, 'DUTY', 'x', null );
   return;
 end if;
 

 if mtype = 'SHIP_AIRWAY'
  then
   if action = 'SEARCH'
    then

     if msearch is null
      then
       open c6;
       fetch c6 into c6rec;
       close c6;
     else
       v_ship_search := glbx.guess_number(trim(msearch));
       if v_ship_search is not null
       then
        open c6ss( v_ship_search );
        fetch c6ss into c6rec;
        close c6ss;
       else
        open c6s( trim(msearch) );
        fetch c6s into c6rec;
        close c6s;
       end if;
     end if;
     open c2( 'Ship/Air' );
     fetch c2 into c2rec;
     close c2;
   elsif action = 'PREVIOUS'
    then
     open c6;
     lrid := NULL;
     loop
      fetch c6 into c6rec;
      if c6%NOTFOUND then c6rec.rowid := lrid; exit; end if;
      exit when c6rec.rowid = replace(rid,'~','+');
      lrid := c6rec.rowid;
     end loop;
     close c6;
     if lrid is not null then c6rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     open c6;
     lrid := NULL;
     loop
      fetch c6 into c6rec;
      if c6%NOTFOUND then c6rec.rowid := lrid; exit; end if;
      if c6rec.rowid = replace(rid,'~','+')
       then
        lrid := c6rec.rowid;
        fetch c6 into c6rec;
        if c6%NOTFOUND then c6rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c6rec.rowid;
     end loop;
     close c6;
   end if;
   if c6rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_294 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   shp(surl,c6rec.rowid, c2rec.screen_id, 'SHIP_AIRWAY', 'x', null );
   return;
 end if;



 if mtype = 'CUSTOMERS'
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c7;
       fetch c7 into c7rec;
       close c7;
       else
       v_cus := glbx.guess_number(msearch);
       if v_cus is not null
        then
        open c7n( v_cus );
        fetch c7n into c7rec;
        close c7n;
       else
        open c7s( trim(msearch) );
        fetch c7s into c7rec;
        close c7s;
       end if;
     end if;
     open c2( 'Customers' );
     fetch c2 into c2rec;
     close c2;
   elsif action = 'PREVIOUS'
    then
     open c7;
     lrid := NULL;
     loop
      fetch c7 into c7rec;
      if c7%NOTFOUND then c7rec.rowid := lrid; exit; end if;
      exit when c7rec.rowid = replace(rid,'~','+');
      lrid := c7rec.rowid;
     end loop;
     close c7;
     if lrid is not null then c7rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     open c7;
     lrid := NULL;
     loop
      fetch c7 into c7rec;
      if c7%NOTFOUND then c7rec.rowid := lrid; exit; end if;
      if c7rec.rowid = replace(rid,'~','+')
       then
        lrid := c7rec.rowid;
        fetch c7 into c7rec;
        if c7%NOTFOUND then c7rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c7rec.rowid;
     end loop;
     close c7;
   end if;
   if c7rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_294 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   mng_cust(surl,c7rec.rowid, 'x', null );
   return;
 end if;

 if mtype = 'CHARGES'
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c8;
       fetch c8 into c8rec;
       close c8;
       else
       open c8s( trim(msearch) );
       fetch c8s into c8rec;
       close c8s;
     end if;
     open c2( 'Charge Codes' );
     fetch c2 into c2rec;
     close c2;
   elsif action = 'PREVIOUS'
    then
     open c8;
     lrid := NULL;
     loop
      fetch c8 into c8rec;
      if c8%NOTFOUND then c8rec.rowid := lrid; exit; end if;
      exit when c8rec.rowid = replace(rid,'~','+');
      lrid := c8rec.rowid;
     end loop;
     close c8;
     if lrid is not null then c8rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     open c8;
     lrid := NULL;
     loop
      fetch c8 into c8rec;
      if c8%NOTFOUND then c8rec.rowid := lrid; exit; end if;
      if c8rec.rowid = replace(rid,'~','+')
       then
        lrid := c8rec.rowid;
        fetch c8 into c8rec;
        if c8%NOTFOUND then c8rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c8rec.rowid;
     end loop;
     close c8;
   end if;
   if c8rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_375 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   mng_charge(surl,c8rec.rowid, 'x', null );
   return;
 end if;

 if mtype = 'ENTRY_NO'
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c9;
       fetch c9 into c9rec;
       close c9;
      else
       if instr(msearch, '.') > 0
        then
         begin nmb := to_number(strang.ent.get_entry_no(msearch)); exception when others then nmb := null; end;
       else
         begin nmb := to_number('1' || '.' || strang.ent.get_entry_no(msearch, 'D')); exception when others then nmb := null; end;
       end if;
       -- begin nmb := to_number(msearch); exception when others then nmb := NULL; end;
       open c9s( nmb );
       fetch c9s into c9rec;
       close c9s;
     end if;
     lrid := c9rec.rowid;
     if lrid is null
      then
       htp.init;
       htp.htmlopen;
       htp.header(3,LNGS.STR_TXT_293 || ' : ' || nvl(to_char(nmb), msearch), 'CENTER' );
       htp.header(3,LNGS.STR_TXT_289,'CENTER');
       htp.header(4,LNGS.STR_TXT_290,'CENTER');
       return;
     end if;
     open c2( 'Detailrs' );
     fetch c2 into c2rec;
     close c2;
   elsif action = 'PREVIOUS'
    then
     open c9;
     lrid := NULL;
     loop
      fetch c9 into c9rec;
      if c9%NOTFOUND then c9rec.rowid := lrid; exit; end if;
      exit when c9rec.rowid = replace(rid,'~','+');
      lrid := c9rec.rowid;
     end loop;
     close c9;
     if lrid is not null then c9rec.rowid := lrid; else lrid := replace(rid,'~','+'); end if;
   elsif action = 'NEXT'
    then
     open c9;
     lrid := NULL;
     loop
      fetch c9 into c9rec;
      if c9%NOTFOUND then c9rec.rowid := lrid; exit; end if;
      if c9rec.rowid = replace(rid,'~','+')
       then
        lrid := c9rec.rowid;
        fetch c9 into c9rec;
        if c9%NOTFOUND then c9rec.rowid := lrid; end if;
        lrid := c9rec.rowid;
        exit;
      end if;
      lrid := c9rec.rowid;
     end loop;
     close c9;
   end if;
   open c9a(nvl(lrid,replace(rid,'~','+')));
   fetch c9a into c9arec;
   close c9a;
   rctr := 0;
   for c9brec in c9b(c9arec.rowid) loop
    rctr := rctr + 1;
    if c9brec.rowid = lrid then exit; end if;
   end loop;
   -- Now having to replace the whole screen
   receive(surl, lrid, c2rec.screen_id, 'strangp.receive', 'DETAILRS', 'x', null );
   --receive_bottom(surl,c9arec.rowid,5,null,'DETAILRS','e',rctr,null );
   return;
 end if;

 if mtype = 'ME'
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c12;
       fetch c12 into c12rec;
       if c12%NOTFOUND
        then
         close c12;
         open c12x;
         fetch c12x into tot;
         close c12x;
         if tot = 0
          then
            open c2( 'Manual Entry' );
            fetch c2 into c2rec;
            close c2;
            manentry(surl, null, c2rec.screen_id, 'strangp.movement', mtype, 'x', null );
            return;
         end if;
        else
         close c12;
       end if;
      else
       open c12s( trim(msearch) );
       fetch c12s into c12rec;
       if c12s%NOTFOUND
        then
         close c12s;
         open c12x;
         fetch c12x into tot;
         close c12x;
         if tot = 0
          then
            open c2( 'Manual Entry' );
            fetch c2 into c2rec;
            close c2;
            manentry(surl, null, c2rec.screen_id, 'strangp.movement', mtype, 'x', msg=>null );
            return;
         end if;
        else
         close c12s;
       end if;
     end if;
     open c2( 'Manual Entry' );
     fetch c2 into c2rec;
     close c2;
   elsif action = 'NEXT' --'PREVIOUS'
    then
     open c12;
     lrid := NULL;
     loop
      fetch c12 into c12rec;
      if c12%NOTFOUND then c12rec.rowid := lrid; exit; end if;
      exit when c12rec.rowid = replace(rid,'~','+');
      lrid := c12rec.rowid;
     end loop;
     close c12;
     if lrid is not null then c12rec.rowid := lrid; end if;
   elsif action = 'PREVIOUS' -- 'NEXT'
    then
     open c12;
     lrid := NULL;
     loop
      fetch c12 into c12rec;
      if c12%NOTFOUND then c12rec.rowid := lrid; exit; end if;
      if c12rec.rowid = replace(rid,'~','+')
       then
        lrid := c12rec.rowid;
        fetch c12 into c12rec;
        if c12%NOTFOUND then c12rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c12rec.rowid;
     end loop;
     close c12;
   end if;
   if c12rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_292 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   manentry(surl,c12rec.rowid, c2rec.screen_id, 'strangp.movement', mtype, 'x', null );
   return;
 end if;

 if mtype = 'ME2'
  then  
   open c14z(replace(rid,'~','+'));
   fetch c14z into ent;
   close c14z;
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c14(ent);
       fetch c14 into c14rec;
       if c14%NOTFOUND
        then
         close c14;
         open c14x(ent);
         fetch c14x into tot;
         close c14x;
         if tot = 0
          then
            open c2( 'Manual Entry' );
            fetch c2 into c2rec;
            close c2;
            manentry_page3(surl,null, c2rec.screen_id, 'strangp.movement', mtype, 'x', null );
            return;
            return;
         end if;
        else
         close c14;
       end if;
      else
       open c14s( ent, trim(msearch) );
       fetch c14s into c14rec;
       if c14s%NOTFOUND
        then
         close c14s;
         open c14x(ent);
         fetch c14x into tot;
         close c14x;
         if tot = 0
          then
            open c2( 'Manual Entry' );
            fetch c2 into c2rec;
            close c2;
            manentry_page3(surl, null, c2rec.screen_id, 'strangp.movement', mtype, 'x', null );
            return;
         end if;
        else
         close c14s;
       end if;
     end if;
     open c2( 'Manual Entry' );
     fetch c2 into c2rec;
     close c2;
   elsif action = 'PREVIOUS'
    then
     open c14(ent);
     lrid := NULL;
     loop
      fetch c14 into c14rec;
      if c14%NOTFOUND then c14rec.rowid := lrid; exit; end if;
      exit when c14rec.rowid = replace(rid,'~','+');
      lrid := c14rec.rowid;
     end loop;
     close c14;
     if lrid is not null then c14rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     open c14(ent);
     lrid := NULL;
     loop
      fetch c14 into c14rec;
      if c14%NOTFOUND then c14rec.rowid := lrid; exit; end if;
      if c14rec.rowid = replace(rid,'~','+')
       then
        lrid := c14rec.rowid;
        fetch c14 into c14rec;
        if c14%NOTFOUND then c14rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c14rec.rowid;
     end loop;
     close c14;
   end if;
   if c14rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_292 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   manentry_page3(surl,c14rec.rowid, c2rec.screen_id, 'strangp.movement', mtype, 'x', null );
   return;
 end if;

 if mtype = 'TRAC'
  then
   trac_search( surl, null );
 end if;

 -- xxx copy this and convert to search on categories. use c16
if mtype = 'CTR'
  then
   open c2( 'Container Hire' );
   fetch c2 into c2rec;
   close c2;
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c15;
       fetch c15 into c15rec;
       close c15;
      else
       open c15s( trim(msearch) );
       fetch c15s into c15rec;
       close c15s;
     end if;
   elsif action = 'PREVIOUS'
    then
     open c15;
     lrid := NULL;
     loop
      fetch c15 into c15rec;
      if c15%NOTFOUND then c15rec.rowid := lrid; exit; end if;
      exit when c15rec.rowid = replace(rid,'~','+');
      lrid := c15rec.rowid;
     end loop;
     close c15;
     if lrid is not null then c15rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     open c15;
     lrid := NULL;
     loop
      fetch c15 into c15rec;
      if c15%NOTFOUND then c15rec.rowid := lrid; exit; end if;
      if c15rec.rowid = replace(rid,'~','+')
       then
        lrid := c15rec.rowid;
        fetch c15 into c15rec;
        if c15%NOTFOUND then c15rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c15rec.rowid;
     end loop;
     close c15;
   end if;
   if c15rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_293 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   mng_ctr(surl,c15rec.rowid, c2rec.screen_id, 'Container Hire', 'x', null );
   return;
 end if;


if mtype = 'CATEG'
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c16;
       fetch c16 into c16rec;
       close c16;
      else
       open c16s( trim(msearch) );
       fetch c16s into c16rec;
       close c16s;
     end if;
   elsif action = 'PREVIOUS'
    then
     open c16;
     lrid := NULL;
     loop
      fetch c16 into c16rec;
      if c16%NOTFOUND then c16rec.rowid := lrid; exit; end if;
      exit when c16rec.rowid = replace(rid,'~','+');
      lrid := c16rec.rowid;
     end loop;
     close c16;
     if lrid is not null then c16rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     open c16;
     lrid := NULL;
     loop
      fetch c16 into c16rec;
      if c16%NOTFOUND then c16rec.rowid := lrid; exit; end if;
      if c16rec.rowid = replace(rid,'~','+')
       then
        lrid := c16rec.rowid;
        fetch c16 into c16rec;
        if c16%NOTFOUND then c16rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c16rec.rowid;
     end loop;
     close c16;
   end if;
   if c16rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_293 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   mng_categories(surl,c16rec.rowid, 'x' , 'Categories', 'x', null );
   return;
 end if;


if mtype = 'ONLOCS'
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c17;
       for j in 1..10 loop
        fetch c17 into c17rec;
        if c17%FOUND then arr_rid(arr_rid.count+1) := c17rec.rowid; else exit; end if;
       end loop;
       close c17;
      else
       open c17s( trim(msearch) );
       for j in 1..10 loop
        fetch c17s into c17rec;
        if c17s%FOUND then arr_rid(arr_rid.count+1) := c17rec.rowid; else exit; end if;
       end loop;
       close c17s;
     end if;

   elsif action = 'PREVIOUS'
    then
     open c17;
     lrid := NULL;
     for j in 1..10 loop
      arr_rid(j) := null;
     end loop;

     loop
      fetch c17 into c17rec;
      if c17%NOTFOUND then c17rec.rowid := lrid; exit; end if;
      exit when c17rec.rowid = replace(rid,'~','+');
      for j in 2..10 loop
       arr_rid(j-1) := arr_rid(j);
      end loop;
      arr_rid(10) := c17rec.rowid;
      lrid := c17rec.rowid;
     end loop;

     close c17;
     if lrid is not null then c17rec.rowid := lrid; end if;

   elsif action = 'NEXT'
    then
     open c17;
     lrid := NULL;
     loop
      fetch c17 into c17rec;
      if c17%NOTFOUND then c17rec.rowid := lrid; exit; end if;
      if c17rec.rowid = replace(rid,'~','+')
       then
        lrid := c17rec.rowid;
        fetch c17 into c17rec;
        if c17%NOTFOUND then c17rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c17rec.rowid;
     end loop;
     arr_rid(arr_rid.count+1) := c17rec.rowid;
     for j in 1..9 loop
      fetch c17 into c17rec;
      if c17%FOUND then arr_rid(arr_rid.count+1) := c17rec.rowid; else exit; end if;
     end loop;
     close c17;
   end if;
   if c17rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_293 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   mng_onlocs(surl, arr_rid, 'x' , 'Onhire Details', 'x', null );
   return;
 end if;


if mtype = 'OFFLOCS'
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c18;
       for j in 1..10 loop
        fetch c18 into c18rec;
        if c18%FOUND then arr_rid(arr_rid.count+1) := c18rec.rowid; else exit; end if;
       end loop;
       close c18;
      else
       open c18s( trim(msearch) );
       for j in 1..10 loop
        fetch c18s into c18rec;
        if c18s%FOUND then arr_rid(arr_rid.count+1) := c18rec.rowid; else exit; end if;
       end loop;
       close c18s;
     end if;

   elsif action = 'PREVIOUS'
    then
     open c18;
     lrid := NULL;
     for j in 1..10 loop
      arr_rid(j) := null;
     end loop;

     loop
      fetch c18 into c18rec;
      if c18%NOTFOUND then c18rec.rowid := lrid; exit; end if;
      exit when c18rec.rowid = replace(rid,'~','+');
      for j in 2..10 loop
       arr_rid(j-1) := arr_rid(j);
      end loop;
      arr_rid(10) := c18rec.rowid;
      lrid := c18rec.rowid;
     end loop;

     close c18;
     if lrid is not null then c18rec.rowid := lrid; end if;

   elsif action = 'NEXT'
    then
     open c18;
     lrid := NULL;
     loop
      fetch c18 into c18rec;
      if c18%NOTFOUND then c18rec.rowid := lrid; exit; end if;
      if c18rec.rowid = replace(rid,'~','+')
       then
        lrid := c18rec.rowid;
        fetch c18 into c18rec;
        if c18%NOTFOUND then c18rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c18rec.rowid;
     end loop;
     arr_rid(arr_rid.count+1) := c18rec.rowid;
     for j in 1..9 loop
      fetch c18 into c18rec;
      if c18%FOUND then arr_rid(arr_rid.count+1) := c18rec.rowid; else exit; end if;
     end loop;
     close c18;
   end if;
   if c18rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_293 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   mng_offlocs(surl, arr_rid, 'x' , 'Offhire Details', 'x', null );
   return;
 end if;

if mtype = 'CTRACK'
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c19;
       fetch c19 into c19rec;
       close c19;
      else
       open c19s( trim(msearch) );
       fetch c19s into c19rec;
       close c19s;
     end if;
   elsif action = 'PREVIOUS'
    then
     open c19;
     lrid := NULL;
     loop
      fetch c19 into c19rec;
      if c19%NOTFOUND then c19rec.rowid := lrid; exit; end if;
      exit when c19rec.rowid = replace(rid,'~','+');
      lrid := c19rec.rowid;
     end loop;
     close c19;
     if lrid is not null then c19rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     open c19;
     lrid := NULL;
     loop
      fetch c19 into c19rec;
      if c19%NOTFOUND then c19rec.rowid := lrid; exit; end if;
      if c19rec.rowid = replace(rid,'~','+')
       then
        lrid := c19rec.rowid;
        fetch c19 into c19rec;
        if c19%NOTFOUND then c19rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c19rec.rowid;
     end loop;
     close c19;
   end if;
   ctr_track(surl, c19rec.rowid, 'x', 'Container Tracking', 'x', null );
   return;
 end if;
 
 -- Added by David Banjo to handle SMP searches
 
  if mtype = 'SMP'
  then
   if action = 'SEARCH'
    then
     if msearch is null
      then
       open c20;
       fetch c20 into c20rec;
       close c20;
       else
       v_smp := glbx.guess_number(msearch);
       if v_smp is not null
        then
        open c20n( v_smp );
        fetch c20n into c20rec;
        close c20n;
       else
        open c20s( trim(msearch) );
        fetch c20s into c20rec;
        close c20s;
       end if;
     end if;
   elsif action = 'PREVIOUS'
    then
     open c20;
     lrid := NULL;
     loop
      fetch c20 into c20rec;
      if c20%NOTFOUND then c20rec.rowid := lrid; exit; end if;
      exit when c20rec.rowid = replace(rid,'~','+');
      lrid := c20rec.rowid;
     end loop;
     close c20;
     if lrid is not null then c20rec.rowid := lrid; end if;
   elsif action = 'NEXT'
    then
     open c20;
     lrid := NULL;
     loop
      fetch c20 into c20rec;
      if c20%NOTFOUND then c20rec.rowid := lrid; exit; end if;
      if c20rec.rowid = replace(rid,'~','+')
       then
        lrid := c20rec.rowid;
        fetch c20 into c20rec;
        if c20%NOTFOUND then c20rec.rowid := lrid; end if;
        exit;
      end if;
      lrid := c20rec.rowid;
     end loop;
     close c20;
   end if;
   if c20rec.rowid is null
    then
     htp.htmlopen;
      htp.header(3,LNGS.STR_TXT_294 || ' : ' || msearch, 'CENTER' );
      htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
      htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
     htp.htmlclose;
     return;
   end if;
   mng_smp(surl,c20rec.rowid, 'x', parm=>'SMP' );
   return;
 end if;
 

exception when others then
 glbx.error_details( 'STRANGP', 'MENU',null,null,errmsg=>sqlerrm,extdet=>'MTYPE:' || mtype);
end menu;

procedure search( surl in varchar2, msearch in varchar2, curr_rowid in varchar2, samerow in boolean DEFAULT FALSE, buttons_only in boolean DEFAULT FALSE, override_top in varchar2 default null, search_only in boolean DEFAULT FALSE, button_text in varchar2 default NULL, lmnu in rowid default null )
as
 ctrg	varchar2(20);
begin
 if not samerow
  then
   htp.tableopen( cattributes=>'cellspacing=2 cellpadding=2 border=0' );
   htp.tablerowopen;
 end if;
 if not buttons_only
  then
   if not search_only then htp.p( '<TD>' ); end if;
   htp.formopen( 'strangp.menu', ctarget=>'_top' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'MTYPE', msearch );
   htp.formhidden( 'ACTION', 'SEARCH' );
   htp.formhidden( 'RID', replace(curr_rowid,'~','+') );
   htp.formhidden( 'RND', to_char(sysdate, 'SSSSS' ));
   if search_only
    then
     htp.formtext( 'MSEARCH', 25, 100, cattributes=>'id="'||msearch||'" list="'||msearch||'" autocomplete="off"'); 
    else
     htp.formtext( 'MSEARCH', 30, 100, cattributes=>'id="'||msearch||'" list="'||msearch||'" autocomplete="off"'); 
   end if;
   htp.formsubmit( null, nvl(button_text,'Search') );
   htp.formclose;
   if search_only then return; end if;
   htp.p( '</TD>' );
   ctrg := '_top';
  else
   ctrg := '_self';
 end if;

 ctrg := nvl(override_top,ctrg);
 htp.p( '<TD ALIGN="CENTER" VALIGN="TOP">' );
 if msearch = 'RECEIVALS'
  then
   htp.anchor2( 'strangp.menu?surl=' || surl || '&mtype=' || msearch || '&rnd=' || to_char(sysdate,'SSSSS') || '&action=PREVIOUS&rid=' || replace(curr_rowid,'+','~'), htf.img( glbx.IMAGE_LOCATION || 'adminc_previous.gif', cattributes=>' BORDER=0',calt=>'Previous Record' ), ctarget=>ctrg );
   htp.anchor2( 'strangp.menu?surl=' || surl || '&mtype=' || msearch || '&rnd=' || to_char(sysdate,'SSSSS') || '&action=NEXT&rid=' || replace(curr_rowid,'+','~'), htf.img( glbx.IMAGE_LOCATION || 'adminc_next.gif', cattributes=>' BORDER=0',calt=>'Next Record' ), ctarget=>ctrg );
  else
   htp.anchor2( 'strangp.menu?surl=' || surl || '&mtype=' || msearch || '&rnd=' || to_char(sysdate,'SSSSS') || '&action=PREVIOUS&rid=' || replace(curr_rowid,'+','~'), htf.img( glbx.IMAGE_LOCATION || 'adminc_previous.gif', cattributes=>' BORDER=0',calt=>'Previous Record' ), ctarget=>ctrg );
   if lmnu is null
    then
     htp.anchor2( 'strangp.menu?surl=' || surl || '&mtype=' || msearch || '&rnd=' || to_char(sysdate,'SSSSS') || '&action=NEXT&rid=' || replace(curr_rowid,'+','~'), htf.img( glbx.IMAGE_LOCATION || 'adminc_next.gif', cattributes=>' BORDER=0',calt=>'Next Record' ), ctarget=>ctrg );
    else
     htp.anchor2( 'strangp.menu?surl=' || surl || '&mtype=' || msearch || '&rnd=' || to_char(sysdate,'SSSSS') || '&action=NEXT&rid=' || replace(lmnu,'+','~'), htf.img( glbx.IMAGE_LOCATION || 'adminc_next.gif', cattributes=>' BORDER=0',calt=>'Next Record' ), ctarget=>ctrg );
   end if;
 end if;
 htp.p( '</TD>' );
 if not samerow
  then
   htp.tablerowclose;
   htp.tableclose;
 end if;
end search;

procedure duty_edit(surl in varchar2, entry in number )
as

 cursor c1(entry number) is select rowid from strang.duty where entry_no = entry;
 cursor c2( sname varchar2 ) is select screen_id from oltp_overview where screen_name = sname;

 c1rec	c1%ROWTYPE;
 c2rec	c2%ROWTYPE;

begin
 open c1(entry);
 fetch c1 into c1rec;
 close c1;
 open c2( 'Duty' );
 fetch c2 into c2rec;
 close c2;
 duty_edit(surl,c1rec.rowid,c2rec.screen_id, 'DUTY', 'x', null );
end duty_edit;

procedure duty_edit(surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null )
as

 cursor c2(rid rowid) is select * from strang.duty where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.DUTY_EDIT' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'DUTY', rid );

 glbx.main_title( surl, LNGS.STR_TXT_295,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR20',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 htp.p( '<CENTER>' );
  if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
  if access_id <> 'z'
    then
     open c2(replace(rid,'~','+'));
     fetch c2 into c2rec;
     close c2;
  end if;

 htp.tableopen;
 htp.tablerowopen;
 htp.p( '<TD align="LEFT">' );
 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_duty' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'ACCESS_ID', access_id );
 end if;

 if access_id = 'z'
  then
   htp.formhidden( 'RID', null );
  else
   htp.formhidden( 'RID', replace(rid,'~','+') );
 end if;

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_064),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( strang.ent.get_entry_no(c2rec.entry_no) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_296),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P1', 20, 100, c2rec.warrant_no ) ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold( c2rec.warrant_no ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_297),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P2', 20, 100, c2rec.cheque ) ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold( c2rec.cheque ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
  htp.tablerowclose;

  htp.tablerowopen;
     htp.tabledata( htf.bold('Guarrantee Amount'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P3', 20, 100, c2rec.guarrantee_amount ) ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold( c2rec.guarrantee_amount ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Guarrantee Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P4', 20, 100, to_char(c2rec.guarrantee_date,LNGS.STR_DATE_02) ) ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      else
       htp.tabledata( htf.bold( to_char(c2rec.guarrantee_date,LNGS.STR_DATE_02) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_298),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( to_char(nvl(c2rec.total_invoice,0),LNGS.STR_FRMT_06) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_300),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( to_char(c2rec.ratio_factor,LNGS.STR_FRMT_08) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_301),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( to_char(nvl(c2rec.correct_freight,0),LNGS.STR_FRMT_06) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_217),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( to_char(nvl(c2rec.other_costs,0),LNGS.STR_FRMT_06) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_215),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( to_char(nvl(c2rec.insurance,0),LNGS.STR_FRMT_06) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_302),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( nvl(to_char(c2rec.previous_entry_no),'&nbsp;') ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_299),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( to_char(nvl(c2rec.duty,0),LNGS.STR_FRMT_06) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_303),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( to_char(nvl(c2rec.excise,0),LNGS.STR_FRMT_06) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_216),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( to_char(nvl(c2rec.vat,0),LNGS.STR_FRMT_06) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Levy'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( to_char(nvl(c2rec.levy,0),LNGS.STR_FRMT_06) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold('Exchange Rate'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( to_char(nvl(c2rec.exrate,0),9990.9999)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
     htp.tabledata( htf.bold(LNGS.STR_TXT_304),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold( to_char(nvl(c2rec.pvariance,0),LNGS.STR_FRMT_06) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;

 if data_access(owner_id, 'SAD', rid ) = 'EDIT'
  then
   htp.anchor( 'javascript: window.open(''' || 'strangs.list_entry?surl=' || surl || ''',''' || 'SAD_ENTRY' || ''',''height=800,width=1200,scrollbars=yes,resizable=yes'');void('''');', '[Find SAD]' );
   htp.anchor( 'javascript: window.open(''' || 'strangs.edit_entry?surl=' || surl || '&pk=' || c2rec.entry_no || ''',''' || 'SAD_ENTRY' || ''',''height=800,width=1200,scrollbars=yes,resizable=yes'');void('''');', '[Edit SAD:' || strang.ent.get_entry_no(c2rec.entry_no) || ']' );
   htp.nl;
 end if;

 htp.nl;
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT'
  then
   if access_id = 'z'
    then
     htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_305 ),cattributes=>'VALIGN="TOP"');
    else
     htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_306 ),cattributes=>'VALIGN="TOP"');
   end if;
   htp.formclose;
 end if;
 search( surl, 'DUTY', rid, samerow=>TRUE );
 htp.tablerowclose;
 htp.tableclose;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'DUTY_EDIT',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end duty_edit;

procedure accept_duty( surl in varchar2, scid in integer, parm in varchar2, access_id in varchar2, rid in varchar2, action in varchar2, p1 in varchar2, p2 in varchar2 , p3 in varchar2 , p4 in varchar2 )
as

 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 newrid		rowid;
 sts		varchar2(100);
 nmb1		number;
 nmb2		number;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_DUTY' );
 if sts is not null
  then
   glbx.redisplay_login_page( sts, TRUE );
   return;
 end if;

 update strang.duty
  set
   warrant_no = p1,
   cheque = p2,
   guarrantee_amount = p3,
   guarrantee_date = p4
  where
   rowid = chartorowid( replace(rid,'~','+') );

 commit;

 duty_edit( surl, rid, scid, parm, access_id, LNGS.STR_TXT_307 );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_DUTY',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_duty;

procedure generate_entry(vship_id in integer, vste in varchar2)
as
  cursor c2( vship_id integer) is
   select /*+ ALL_ROWS */ distinct r.cust_customer_id vcust_id
   from strang.detailrs dr, strang.receivals r,strang.movements m, strang.customers c
   where
    m.ship_id = ship_id and
    nvl(dr.camov_seal,'|') = nvl(m.seal,'|') and
    m.movement_no = dr.movement_no and
    dr.deliveryno = r.deliveryno and
    r.cust_customer_id = c.customer_id and
    c.customs_agent is not null
    order by r.cust_customer_id;

 cursor c3( vship_id integer, vcust_id integer ) is
  select /*+ ALL_ROWS */ r.cust_customer_id, dr.deliveryno,dr.rowid,r.supplier_customer_id, m.bol
  from strang.detailrs dr, strang.receivals r,strang.movements m, strang.customers c
  where
   m.ship_id = vship_id and
   nvl(dr.camov_seal,'|') = nvl(m.seal,'|') and
   m.movement_no = dr.movement_no and
   dr.deliveryno = r.deliveryno and
   nvl(r.cust_customer_id,0) = vcust_id and
   nvl(r.cust_customer_id,0) = nvl(c.customer_id,0) and
   c.customs_agent is not null
  order by m.bol, dr.line_no,dr.deliveryno,dr.itemno;

 cursor c4(vcust_id number) is
  select nvl(max(entry_no),vcust_id) tot
   from strang.detailrs
   where entry_no >= vcust_id and
   entry_no < (vcust_id + 1);

 cursor c5( dlr integer ) is select min(entry_no) entry_no from strang.detailrs dr where deliveryno = dlr;
 cursor c5a( dlr integer, ent number ) is select entry_no from strang.detailrs dr where deliveryno = dlr and entry_no = ent;


 c2rec		 c2%ROWTYPE;
 c3rec		 c3%ROWTYPE;
 c4rec		 c4%ROWTYPE;
 c5rec		 c5%ROWTYPE;
 c5arec		 c5a%ROWTYPE;
 currcustomer    integer;
 currbol    	 varchar2(40);
 is_maincustomer boolean;
 is_partshipment boolean;
 is_loop	 boolean;
 created_duty	 boolean;

begin

for c2rec in c2( vShip_id ) loop

open c4( c2rec.vcust_id );
fetch c4 into c4rec;
close c4;
c4rec.tot := nvl(c4rec.tot,0);
currcustomer:= c2rec.vcust_id;
currbol := '|';
is_partshipment := FALSE;
is_loop := FALSE;
created_duty := FALSE;

for c3rec in c3( vShip_id, c2rec.vcust_id ) loop

 c5rec.entry_no := NULL;
 c5arec.entry_no := NULL;
 open c5(c3rec.deliveryno);
 fetch c5 into c5rec;
 close c5;
 open c5a(c3rec.deliveryno,c4rec.tot);
 fetch c5a into c5arec;
 close c5a;

 if currbol <> c3rec.bol
  then
   is_partshipment := FALSE;
   is_loop := FALSE;
 end if;

 if not is_loop
  then

   if c5rec.entry_no is null
    then
     is_partshipment := FALSE;
    else
     is_partshipment := TRUE;
   end if;

   if c5arec.entry_no is null and is_partshipment
    then
     is_loop := TRUE;
    else
     is_loop := FALSE;
   end if;

 end if;

 if not (is_partshipment and is_loop)
  then

   if currbol = '|' or
      currbol = c3rec.bol
    then
     if currbol = '|'
     then
       if created_duty
       then
--        glbx.dbg('Inner loop : ' || c4rec.tot ||' ' || c2rec.vcust_id );
        create_duty( vship_id, c4rec.tot, c2rec.vcust_id);
       end if;
       c4rec.tot := c4rec.tot + 0.0000001;
     end if;
     update strang.detailrs
      set
       entry_no = c4rec.tot
      where
      rowid = c3rec.rowid;
    else
     if created_duty then
--     glbx.dbg('Inner loop 2: ' || c4rec.tot ||' ' || c2rec.vcust_id );
     create_duty( vship_id, c4rec.tot,c2rec.vcust_id ); end if;
     c4rec.tot := c4rec.tot + 0.0000001;
     update strang.detailrs
      set
       entry_no = c4rec.tot
      where
      rowid = c3rec.rowid;
    end if;
    created_duty := TRUE;

  else

     if created_duty then
--     glbx.dbg('Inner loop 3: ' || c4rec.tot ||' ' || c2rec.vcust_id );
     create_duty( vship_id, c4rec.tot,c2rec.vcust_id ); end if;
     c4rec.tot := c4rec.tot + 0.0000001;
     update strang.detailrs
      set
       entry_no = c4rec.tot
      where
      rowid = c3rec.rowid;

  created_duty := TRUE;

 end if;

 currbol := c3rec.bol;

 end loop;
 -- Last Entry No has yet to be generated
 if created_duty then
--  glbx.dbg('Outer loop : ' || c4rec.tot ||' ' || c2rec.vcust_id );
  Create_duty( vship_id, c4rec.tot,c2rec.vcust_id ); end if;
end loop;
end generate_entry;

--- 20170518
procedure generate_entry_airfreight(vship_id in integer, vste in varchar2)
as
  cursor c2( vship_id integer) is
   select /*+ ALL_ROWS */ distinct r.cust_customer_id vcust_id
   from strang.detailrs dr, strang.receivals r,strang.movements m, strang.customers c
   where
    m.ship_id = ship_id and
    nvl(dr.camov_seal,'|') = nvl(m.seal,'|') and
    m.movement_no = dr.movement_no and
    dr.deliveryno = r.deliveryno and
    r.cust_customer_id = c.customer_id and
    c.customs_agent is not null
    order by r.cust_customer_id;

 cursor c3( vship_id integer, vcust_id integer ) is
  select /*+ ALL_ROWS */ r.cust_customer_id, dr.deliveryno,dr.rowid,r.supplier_customer_id, dr.hawb_hawbno
  from strang.detailrs dr, strang.receivals r,strang.movements m, strang.customers c
  where
   m.ship_id = vship_id and
   nvl(dr.camov_seal,'|') = nvl(m.seal,'|') and
   m.movement_no = dr.movement_no and
   dr.deliveryno = r.deliveryno and
   nvl(r.cust_customer_id,0) = vcust_id and
   nvl(r.cust_customer_id,0) = nvl(c.customer_id,0) and
   c.customs_agent is not null
  order by dr.hawb_hawbno, dr.line_no,dr.deliveryno,dr.itemno;

 cursor c4(vcust_id number) is
  select nvl(max(entry_no),vcust_id) tot
   from strang.detailrs
   where entry_no >= vcust_id and
   entry_no < (vcust_id + 1);

 cursor c5( dlr integer ) is select min(entry_no) entry_no from strang.detailrs dr where deliveryno = dlr;
 cursor c5a( dlr integer, ent number ) is select entry_no from strang.detailrs dr where deliveryno = dlr and entry_no = ent;


 c2rec		 c2%ROWTYPE;
 c3rec		 c3%ROWTYPE;
 c4rec		 c4%ROWTYPE;
 c5rec		 c5%ROWTYPE;
 c5arec		 c5a%ROWTYPE;
 currcustomer    integer;
 currhawb    	 integer;
 is_maincustomer boolean;
 is_partshipment boolean;
 is_loop	 boolean;
 created_duty	 boolean;

begin

for c2rec in c2( vShip_id ) loop

open c4( c2rec.vcust_id );
fetch c4 into c4rec;
close c4;
c4rec.tot := nvl(c4rec.tot,0);
currcustomer:= c2rec.vcust_id;
currhawb := 0;
is_partshipment := FALSE;
is_loop := FALSE;
created_duty := FALSE;

for c3rec in c3( vShip_id, c2rec.vcust_id ) loop

 c5rec.entry_no := NULL;
 c5arec.entry_no := NULL;
 open c5(c3rec.deliveryno);
 fetch c5 into c5rec;
 close c5;
 open c5a(c3rec.deliveryno,c4rec.tot);
 fetch c5a into c5arec;
 close c5a;

 if currhawb <> c3rec.hawb_hawbno
  then
   is_partshipment := FALSE;
   is_loop := FALSE;
 end if;

 if not is_loop
  then

   if c5rec.entry_no is null
    then
     is_partshipment := FALSE;
    else
     is_partshipment := TRUE;
   end if;

   if c5arec.entry_no is null and is_partshipment
    then
     is_loop := TRUE;
    else
     is_loop := FALSE;
   end if;

 end if;

 if not (is_partshipment and is_loop)
  then

   if currhawb = 0 or
      currhawb = c3rec.hawb_hawbno
    then
     if currhawb = 0
     then
       if created_duty
       then
--        glbx.dbg('Inner loop : ' || c4rec.tot ||' ' || c2rec.vcust_id );
        create_duty( vship_id, c4rec.tot, c2rec.vcust_id);
       end if;
       c4rec.tot := c4rec.tot + 0.0000001;
     end if;
     update strang.detailrs
      set
       entry_no = c4rec.tot
      where
      rowid = c3rec.rowid;
    else
     if created_duty then
--     glbx.dbg('Inner loop 2: ' || c4rec.tot ||' ' || c2rec.vcust_id );
     create_duty( vship_id, c4rec.tot,c2rec.vcust_id ); end if;
     c4rec.tot := c4rec.tot + 0.0000001;
     update strang.detailrs
      set
       entry_no = c4rec.tot
      where
      rowid = c3rec.rowid;
    end if;
    created_duty := TRUE;

  else

     if created_duty then
--     glbx.dbg('Inner loop 3: ' || c4rec.tot ||' ' || c2rec.vcust_id );
     create_duty( vship_id, c4rec.tot,c2rec.vcust_id ); end if;
     c4rec.tot := c4rec.tot + 0.0000001;
     update strang.detailrs
      set
       entry_no = c4rec.tot
      where
      rowid = c3rec.rowid;

  created_duty := TRUE;

 end if;

 currhawb := c3rec.hawb_hawbno;

 end loop;
 -- Last Entry No has yet to be generated
 if created_duty then
--  glbx.dbg('Outer loop : ' || c4rec.tot ||' ' || c2rec.vcust_id );
  Create_duty( vship_id, c4rec.tot,c2rec.vcust_id ); end if;
end loop;
end generate_entry_airfreight;

--- 20170518

procedure create_duty(vship_id varchar2, entryno number, vcust_id integer)
as

 cursor c3( vship_id integer, entryno in number, vcust_id integer ) is
  select dr.rowid,dr.deliveryno,entry_no,line_no, l2.description rate, round(c.freight/l3.description,2) freight,c.insurance,c.other_costs,c.vat, c.infreight, c.deductions,
         m.bol,nvl(m.container_type,'BREAK BULK') container_type,r.supplier_customer_id supplier, r.curr, sa.estarrive, c.levy_rate
  from strang.detailrs dr, strang.movements m, strang.lov l, strang.ships_airway sa, strang.receivals r, strang.lov l2, strang.customers c, strang.lov l3
  where
   m.ship_id = vship_id and
   sa.ship_id = m.ship_id and
   nvl(m.container_type,'BREAK BULK') = l.code and
   l.lov_name = 'CTRTYPE' and
   l2.lov_name = 'UNRATTAB' and
   l2.code = r.curr and
   to_date(glbx.guess_date(l2.cola),'DD-MON-YYYY') <= sa.estarrive and
   nvl(to_date(glbx.guess_date(l2.colb),'DD-MON-YYYY'),sa.estarrive) >= sa.estarrive and
   l3.lov_name = 'UNRATTAB' and
   l3.code = 'USD' and
   to_date(glbx.guess_date(l3.cola),'DD-MON-YYYY') <= sa.estarrive and
   nvl(to_date(glbx.guess_date(l3.colb),'DD-MON-YYYY'),sa.estarrive) >= sa.estarrive and
   r.deliveryno = dr.deliveryno and
   r.cust_customer_id = c.customer_id and
   dr.movement_no = m.movement_no and
   nvl(dr.camov_seal,'|') = nvl(seal,'|') and
   dr.entry_no = entryno;

cursor c5( entryno number ) is
  select /*+ ALL_ROWS */ sum(p.tamount) tot
  from strang.pos p
  where p.deliveryno in
   (select distinct dr.deliveryno
    from strang.detailrs dr
    where entry_no = entryno
   );

cursor c5a( entryno number ) is
  select /*+ ALL_ROWS */ sum(nvl(p.delivery_charge,0)) totdc
  from strang.pos p
  where p.deliveryno in
   (select distinct dr.deliveryno
    from strang.detailrs dr
    where entry_no = entryno
   );

 cursor c7a( entryno number, vat number, ratio_factor number ) is
 select /*+ ALL_ROWS */ sum(kvalue) kvalue, sum(duty) duty, sum(excise) excise, sum(vat) vat,sum(old_duty) old_duty
 from
 (
  select /*+ ALL_ROWS */
       sum(tamount) * nvl(ratio_factor,1) kvalue,
       sum(tamount) * nvl(ratio_factor,1) * (nvl(to_number(t.description),0)/100) duty,
       ((sum(tamount) * nvl(ratio_factor,1)) + (sum(tamount) * nvl(ratio_factor,1) * (nvl(to_number(t.description),0)/100))) * (nvl(to_number(t.colc),0)/100) excise,
       ((sum(tamount) * nvl(ratio_factor,1)) + (sum(tamount) * nvl(ratio_factor,1) * (nvl(to_number(t.description),0)/100)) +
        (((sum(tamount) * nvl(ratio_factor,1)) + (sum(tamount) * nvl(ratio_factor,1) * (nvl(to_number(t.description),0)/100))) * (nvl(to_number(t.colc),0)/100))
       ) * (nvl(vat,0)/100) vat,
       (t.colb * sum(tamount) * nvl(ratio_factor,1)) / 100 old_duty
from strang.lov i, strang.pos p, strang.lov t
where i.code = p.inventoryno and
      i.lov_name = 'INVENT' and
      t.lov_name = 'TARIFF' and
      p.deliveryno in
         (select distinct dr.deliveryno
          from strang.detailrs dr
          where entry_no = entryno
      ) and
      t.code = i.cola
group by i.description, t.code, p.ctry_countrycode, p.unit_unitused, t.colb, ratio_factor, t.description, t.colc, vat
  );


cursor c11b(shipid integer, entryno number, fr number ) is
  select /*+ ALL_ROWS */ sum(strang.revenue_tonne(partweight,partvolume) * nvl(fr,0)) sm
  from strang.detailrs dr, strang.movements m
  where m.ship_id=shipid and
        m.movement_no = dr.movement_no and
        nvl(dr.camov_seal,'|') = nvl(seal,'|') and
        dr.deliveryno in
         (select dr2.deliveryno from strang.detailrs dr2 where dr2.entry_no = entryno);

cursor c11c(shipid integer, entryno number, ifr number ) is
  select /*+ ALL_ROWS */ sum(strang.revenue_tonne(partweight,partvolume) * nvl(ifr,0)) ism
  from strang.detailrs dr, strang.movements m
  where m.ship_id=shipid and
        m.movement_no = dr.movement_no and
        nvl(dr.camov_seal,'|') = nvl(seal,'|') and
        dr.deliveryno in
         (select dr2.deliveryno from strang.detailrs dr2 where dr2.entry_no = entryno);



cursor c14( dlr integer, ent number ) is
   select min(entry_no)
   from strang.detailrs dr
   where dr.deliveryno = dlr and
         entry_no <> ent;

 c3rec		c3%ROWTYPE;
 c5arec		c5a%ROWTYPE;
 c7arec		c7a%ROWTYPE;
 c11rec		c11b%ROWTYPE;
 c11crec	c11c%ROWTYPE;
 ti		number;
 tdc		number;
 dt		number;
 rf		number;
 pin		number;
 v1		number;
 v2		number;
 v3		number;
 v4		number;
 v5		number;
 v6		number;
 lv		number;

begin

    open c3(vship_id,entryno, vcust_id);
    fetch c3 into c3rec;
    close c3;
    if c3rec.entry_no is null then return; end if;
--  glbx.dbg('GOT THERE : ' || C3REC.ENTRY_NO );

    -- Note: Do not set to 0. Must be Null, code relies on it to be NULL
    pin := NULL;
    open c14(c3rec.deliveryno,c3rec.entry_no);
    fetch c14 into pin;
    close c14;
    if pin is not null and pin < c3rec.entry_no then null; else pin := null; end if;

    open c5( c3rec.entry_no );
    fetch c5 into ti;
    close c5;

    open c5a( c3rec.entry_no );
    fetch c5a into tdc;
    close c5a;

    open c11b( vship_id, c3rec.entry_no, c3rec.freight );
    fetch c11b into c11rec;
    close c11b;

    open c11c( vship_id, c3rec.entry_no, c3rec.infreight );
    fetch c11c into c11crec;
    close c11c;


    v1 := ti / c3rec.rate;
    v2 := c11rec.sm;
    v3 := v1 * (c3rec.insurance/100);
    v4 := (v1 * (c3rec.other_costs/100))+(nvl(tdc,0)/c3rec.rate);
    v5 := nvl(c11crec.ism,0);
    v6 := nvl(v1 * (c3rec.deductions/100),0);
    if nvl(ti,0) = 0
     then
      rf := 0;
     else
      rf := round((v1+v2+v3+v4+v5-v6)/ti,8);
    end if;

    open c7a(c3rec.entry_no, c3rec.vat, rf);
    fetch c7a into c7arec;
    close c7a;

    if pin is null
     then
      lv := nvl(((c7arec.duty + c7arec.excise + c7arec.kvalue) * c3rec.levy_rate ) / 100 , 0);
      update strang.duty
        set
	  total_invoice = v1,
	  duty = c7arec.duty,
	  ratio_factor = rf,
	  correct_freight = round(v2,2),
	  internal_freight = round(v5,2),
	  other_costs = round(v4,2),
	  insurance = round(v3,3),
	  deductions = round(v6,2),
	  previous_entry_no= pin,
          excise = c7arec.excise,
          vat = c7arec.vat,
          pvariance = (c7arec.duty + c7arec.excise + c7arec.vat + lv) - ((c7arec.kvalue * (1.5/100)) + c7arec.old_duty),
          levy = lv,
          exrate = c3rec.rate
       where
	   entry_no = c3rec.entry_no;
      if sql%NOTFOUND
       then
         insert into strang.duty
         ( entry_no, total_invoice, duty, ratio_factor, correct_freight, internal_freight, other_costs, deductions, insurance, previous_entry_no, excise, vat, pvariance, levy, exrate )
          values
         ( c3rec.entry_no, v1, c7arec.duty, rf, round(v2,2), round(v5,2), round(v4,2), round(v6,2), round(v3,2) , pin, c7arec.excise, c7arec.vat, (c7arec.duty + c7arec.excise + c7arec.vat + lv) - ((c7arec.kvalue * (1.5/100)) + c7arec.old_duty), lv, c3rec.rate);
      end if;

    else

      -- Partshipments do not have values except form previous_entry_no
      update strang.duty
        set
	  total_invoice = null,
	  duty = null,
	  ratio_factor = null,
	  correct_freight = null,
	  internal_freight = null,
	  other_costs = null,
	  deductions = null,
	  insurance = null,
	  previous_entry_no= pin,
          excise = null,
          vat = null,
          pvariance = null,
          levy = null,
          exrate = null
       where
	   entry_no = c3rec.entry_no;
      if sql%NOTFOUND
       then
         insert into strang.duty         ( entry_no, previous_entry_no )
          values
         ( c3rec.entry_no, pin );
      end if;

    end if;

exception when others
 then
  glbx.dbg('Error in Create Duty [movement.ship_id = ' || vship_id || ', detailrs.entry_no = ' || entryno || ']: ' || sqlerrm);
end create_duty;
----
procedure create_duty_com(vship_id varchar2, entryno number, vcust_id integer)
as

 cursor c3( vship_id integer, entryno in number, vcust_id integer ) is
  select dr.rowid,dr.deliveryno,entry_no_com,line_no, l2.description rate, round(c.freight/l3.description,2) freight,c.insurance,c.other_costs,c.vat, c.infreight, c.deductions,
         m.bol,nvl(m.container_type,'BREAK BULK') container_type,r.supplier_customer_id_com supplier, r.curr, sa.estarrive, c.levy_rate
  from strang.detailrs dr, strang.movements m, strang.lov l, strang.ships_airway sa, strang.receivals r, strang.lov l2, strang.customers c, strang.lov l3
  where
   m.ship_id = vship_id and
   sa.ship_id = m.ship_id and
   nvl(m.container_type,'BREAK BULK') = l.code and
   l.lov_name = 'CTRTYPE' and
   l2.lov_name = 'UNRATTAB' and
   l2.code = r.curr and
   to_date(glbx.guess_date(l2.cola),'DD-MON-YYYY') <= sa.estarrive and
   nvl(to_date(glbx.guess_date(l2.colb),'DD-MON-YYYY'),sa.estarrive) >= sa.estarrive and
   l3.lov_name = 'UNRATTAB' and
   l3.code = 'USD' and
   to_date(glbx.guess_date(l3.cola),'DD-MON-YYYY') <= sa.estarrive and
   nvl(to_date(glbx.guess_date(l3.colb),'DD-MON-YYYY'),sa.estarrive) >= sa.estarrive and
   r.deliveryno = dr.deliveryno and
   r.cust_customer_id = c.customer_id and
   dr.movement_no = m.movement_no and
   nvl(dr.camov_seal,'|') = nvl(seal,'|') and
   dr.entry_no_com = entryno;

cursor c5( entryno number ) is
  select /*+ ALL_ROWS */ sum(p.tamount) tot
  from strang.pos p
  where p.deliveryno in
   (select distinct dr.deliveryno
    from strang.detailrs dr
    where dr.entry_no_com = entryno
   );

cursor c5a( entryno number ) is
  select /*+ ALL_ROWS */ sum(nvl(p.delivery_charge,0)) totdc
  from strang.pos p
  where p.deliveryno in
   (select distinct dr.deliveryno
    from strang.detailrs dr
    where dr.entry_no_com = entryno
   );

 cursor c7a( entryno number, vat number, ratio_factor number ) is
 select /*+ ALL_ROWS */ sum(kvalue) kvalue, sum(duty) duty, sum(excise) excise, sum(vat) vat,sum(old_duty) old_duty
 from
 (
  select /*+ ALL_ROWS */
       sum(tamount) * nvl(ratio_factor,1) kvalue,
       sum(tamount) * nvl(ratio_factor,1) * (nvl(to_number(t.description),0)/100) duty,
       ((sum(tamount) * nvl(ratio_factor,1)) + (sum(tamount) * nvl(ratio_factor,1) * (nvl(to_number(t.description),0)/100))) * (nvl(to_number(t.colc),0)/100) excise,
       ((sum(tamount) * nvl(ratio_factor,1)) + (sum(tamount) * nvl(ratio_factor,1) * (nvl(to_number(t.description),0)/100)) +
        (((sum(tamount) * nvl(ratio_factor,1)) + (sum(tamount) * nvl(ratio_factor,1) * (nvl(to_number(t.description),0)/100))) * (nvl(to_number(t.colc),0)/100))
       ) * (nvl(vat,0)/100) vat,
       (t.colb * sum(tamount) * nvl(ratio_factor,1)) / 100 old_duty
from strang.lov i, strang.pos p, strang.lov t
where i.code = p.inventoryno and
      i.lov_name = 'INVENT' and
      t.lov_name = 'TARIFF' and
      p.deliveryno in
         (select distinct dr.deliveryno
          from strang.detailrs dr
          where dr.entry_no_com = entryno
      ) and
      t.code = i.cola
group by i.description, t.code, p.ctry_countrycode, p.unit_unitused, t.colb, ratio_factor, t.description, t.colc, vat
  );


cursor c11b(shipid integer, entryno number, fr number ) is
  select /*+ ALL_ROWS */ sum(strang.revenue_tonne(partweight,partvolume) * nvl(fr,0)) sm
  from strang.detailrs dr, strang.movements m
  where m.ship_id=shipid and
        m.movement_no = dr.movement_no and
        nvl(dr.camov_seal,'|') = nvl(seal,'|') and
        dr.deliveryno in
         (select dr2.deliveryno from strang.detailrs dr2 where dr2.entry_no_com = entryno);

cursor c11c(shipid integer, entryno number, ifr number ) is
  select /*+ ALL_ROWS */ sum(strang.revenue_tonne(partweight,partvolume) * nvl(ifr,0)) ism
  from strang.detailrs dr, strang.movements m
  where m.ship_id=shipid and
        m.movement_no = dr.movement_no and
        nvl(dr.camov_seal,'|') = nvl(seal,'|') and
        dr.deliveryno in
         (select dr2.deliveryno from strang.detailrs dr2 where dr2.entry_no_com = entryno);



cursor c14( dlr integer, ent number ) is   -- partshipment query 20161021
   select min(entry_no)
   from strang.detailrs dr
   where dr.deliveryno = dlr and
         entry_no < ent;

 c3rec		c3%ROWTYPE;
 c5arec		c5a%ROWTYPE;
 c7arec		c7a%ROWTYPE;
 c11rec		c11b%ROWTYPE;
 c11crec	c11c%ROWTYPE;
 ti		number;
 tdc		number;
 dt		number;
 rf		number;
 pin		number;
 v1		number;
 v2		number;
 v3		number;
 v4		number;
 v5		number;
 v6		number;
 lv		number;

begin

    open c3(vship_id,entryno, vcust_id);
    fetch c3 into c3rec;
    close c3;
    if c3rec.entry_no_com is null then return; end if;
--  glbx.dbg('GOT THERE : ' || C3REC.ENTRY_NO_com );

    -- Note: Do not set to 0. Must be Null, code relies on it to be NULL
    pin := NULL;
    open c14(c3rec.deliveryno,c3rec.entry_no_com);
    fetch c14 into pin;
    close c14;
    if pin is not null and pin < c3rec.entry_no_com then null; else pin := null; end if;

    open c5( c3rec.entry_no_com );
    fetch c5 into ti;
    close c5;

    open c5a( c3rec.entry_no_com );
    fetch c5a into tdc;
    close c5a;

    open c11b( vship_id, c3rec.entry_no_com, c3rec.freight );
    fetch c11b into c11rec;
    close c11b;

    open c11c( vship_id, c3rec.entry_no_com, c3rec.infreight );
    fetch c11c into c11crec;
    close c11c;


    v1 := ti / c3rec.rate;
    v2 := c11rec.sm;
    v3 := v1 * (c3rec.insurance/100);
    v4 := (v1 * (c3rec.other_costs/100))+(nvl(tdc,0)/c3rec.rate);
    v5 := nvl(c11crec.ism,0);
    v6 := nvl(v1 * (c3rec.deductions/100),0);
    if nvl(ti,0) = 0
     then
      rf := 0;
     else
      rf := round((v1+v2+v3+v4+v5-v6)/ti,8);
    end if;

    open c7a(c3rec.entry_no_com, c3rec.vat, rf);
    fetch c7a into c7arec;
    close c7a;

    if pin is null
     then
      lv := nvl(((c7arec.duty + c7arec.excise + c7arec.kvalue) * c3rec.levy_rate ) / 100 , 0);
      update strang.duty
        set
	  total_invoice = v1,
	  duty = c7arec.duty,
	  ratio_factor = rf,
	  correct_freight = round(v2,2),
	  internal_freight = round(v5,2),
	  other_costs = round(v4,2),
	  insurance = round(v3,3),
	  deductions = round(v6,2),
	  previous_entry_no= pin,
          excise = c7arec.excise,
          vat = c7arec.vat,
          pvariance = (c7arec.duty + c7arec.excise + c7arec.vat + lv) - ((c7arec.kvalue * (1.5/100)) + c7arec.old_duty),
          levy = lv,
          exrate = c3rec.rate
       where
	   entry_no = c3rec.entry_no_com;
      if sql%NOTFOUND
       then
         insert into strang.duty
         ( entry_no, total_invoice, duty, ratio_factor, correct_freight, internal_freight, other_costs, deductions, insurance, previous_entry_no, excise, vat, pvariance, levy, exrate )
          values
         ( c3rec.entry_no_com, v1, c7arec.duty, rf, round(v2,2), round(v5,2), round(v4,2), round(v6,2), round(v3,2) , pin, c7arec.excise, c7arec.vat, (c7arec.duty + c7arec.excise + c7arec.vat + lv) - ((c7arec.kvalue * (1.5/100)) + c7arec.old_duty), lv, c3rec.rate);
      end if;

    else

      -- Partshipments do not have values except form previous_entry_no
      update strang.duty
        set
	  total_invoice = null,
	  duty = null,
	  ratio_factor = null,
	  correct_freight = null,
	  internal_freight = null,
	  other_costs = null,
	  deductions = null,
	  insurance = null,
	  previous_entry_no= pin,
          excise = null,
          vat = null,
          pvariance = null,
          levy = null,
          exrate = null
       where
	   entry_no = c3rec.entry_no_com;
      if sql%NOTFOUND
       then
         insert into strang.duty
         ( entry_no, previous_entry_no )
          values
         ( c3rec.entry_no_com, pin );
      end if;

    end if;

exception when others
 then
  glbx.dbg('Error in Create Duty [movement.ship_id = ' || vship_id || ', detailrs.entry_no_com = ' || entryno || ']: ' || sqlerrm);
end create_duty_com;

---
procedure create_line_no( vShip_id integer, typ in varchar2 )
as

 cursor c1( vship_id integer ) is
  select dr.rowid
  from strang.detailrs dr, strang.movements m, strang.lov l, strang.receivals r, strang.customers c
  where
   m.ship_id = vship_id and
   NVL(m.full_mt,'FULL') <> 'EMPTY' and
   nvl(m.container_type,'BREAK BULK') = l.code and
   l.lov_name = 'CTRTYPE' and
   dr.movement_no = m.movement_no and
   nvl(dr.camov_seal,'|') = nvl(seal,'|') and
   dr.deliveryno = r.deliveryno and
   r.supplier_customer_id = c.customer_id
  order by m.movement_type,nvl(l.cola,chr(32)),m.bol,m.container_type,m.movement_no,c.customer, dr.deliveryno,dr.itemno;

 cursor c1a( vship_id integer ) is
  select dr.rowid
  from strang.detailrs dr, strang.movements m, strang.lov l, strang.receivals r, strang.customers c
  where
   m.local_ship_id = vship_id and
   NVL(m.full_mt, 'FULL') <> 'EMPTY' and 
   nvl(m.container_type,'BREAK BULK') = l.code and
   l.lov_name = 'CTRTYPE' and
   dr.movement_no = m.movement_no and
   nvl(dr.camov_seal,'|') = nvl(seal,'|') and
   dr.deliveryno = r.deliveryno and
   r.supplier_customer_id = c.customer_id
  order by m.movement_type,nvl(l.cola,chr(32)),m.local_bol,m.container_type,m.movement_no,c.customer, dr.deliveryno,dr.itemno;

 cursor c1m( vship_id integer ) is
  select dr.rowid
    from strang.detailrs dr, strang.movements m, strang.receivals r, strang.customers c
   where
   m.ship_id = vship_id and
   dr.movement_no = m.movement_no and
   nvl(dr.camov_seal,'|') = nvl(m.seal,'|') and
   dr.deliveryno = r.deliveryno and
   r.supplier_customer_id = c.customer_id
  order by m.movement_no,dr.hawb_hawbno, dr.deliveryno,dr.itemno;
  
cursor c2(vship_id integer) is
  select m.rowid, m.bol, m.hb, m.container_type, m.iso_container_type
    from strang.movements m
   where 
     m.ship_id = vship_id and
     NVL(m.full_mt,'FULL') = 'EMPTY'
     order by m.bol, m.hb, m.container_type, iso_container_type, m.movement_no;
     
  cursor c2a(vship_id integer) is
  select m.rowid, m.local_bol, m.local_hb, m.container_type, m.iso_container_type
    from strang.movements m
   where 
     m.local_ship_id = vship_id and
     NVL(m.full_mt,'FULL') = 'EMPTY'
     order by m.local_bol, m.local_hb, m.container_type, iso_container_type, m.movement_no;  

 ctr		integer;
 vbol       varchar2(100);
 vhb        varchar2(100);
 viso_type  varchar2(100);
 
 
begin

 ctr := 1;

 if typ = 'SHIP'
  then
   for c1rec in c1(to_number(vship_id)) loop
    update strang.detailrs set line_no = ctr where rowid = c1rec.rowid;
    ctr := ctr + 1;
   end loop;
   for c2rec in c2(to_number(vship_id)) loop
      if c2%rowcount = 1
      then 
         update strang.movements set mt_line_no = ctr where rowid = c2rec.rowid;
      elsif (nvl(vbol,'x#x') =  nvl(c2rec.bol,'x#x') and nvl(vhb,'x#x') =  nvl(c2rec.hb,'x#x') 
            and nvl(viso_type,'x#x') =  nvl(c2rec.iso_container_type,'x#x')) then
         update strang.movements set mt_line_no = ctr where rowid = c2rec.rowid;   
      else
        ctr := ctr + 1;
        update strang.movements set mt_line_no = ctr where rowid = c2rec.rowid;     
      end if;     
      vbol := c2rec.bol;
      vhb  := c2rec.hb;
      viso_type := c2rec.iso_container_type;
   end loop;  
   
 elsif typ = 'LOCAL_SHIP'
  then
   for c1arec in c1a(to_number(vship_id)) loop
    update strang.detailrs set local_line_no = ctr where rowid = c1arec.rowid;
    ctr := ctr + 1;
   end loop;
 
  for c2arec in c2a(to_number(vship_id)) loop
     if c2a%rowcount = 1
     then 
        update strang.movements set mt_local_line_no = ctr where rowid = c2arec.rowid;
     elsif (nvl(vbol,'x#x') =  nvl(c2arec.local_bol,'x#x') and nvl(vhb,'x#x') =  nvl(c2arec.local_hb,'x#x') 
            and nvl(viso_type,'x#x') =  nvl(c2arec.iso_container_type,'x#x')) then
        update strang.movements set mt_local_line_no = ctr where rowid = c2arec.rowid;   
     else
        ctr := ctr + 1;
        update strang.movements set mt_local_line_no = ctr where rowid = c2arec.rowid;     
     end if;     
     vbol := c2arec.local_bol;
     vhb  := c2arec.local_hb;
     viso_type := c2arec.iso_container_type;
   end loop;  

 elsif typ = 'AIRWAY'
  then
   for c1mrec in c1m(vship_id) loop
    update strang.detailrs set line_no = ctr where rowid = c1mrec.rowid;
    ctr := ctr + 1;
   end loop;
 end if;

end create_line_no;

procedure unallocate_entry( vShip_id integer )
as

begin

  delete from strang.duty
   where entry_no in
    (select entry_no
     from strang.detailrs dr, strang.movements m
     where
      ship_id = vShip_id and
      m.movement_no = dr.movement_no and
      nvl(m.seal,'|') = nvl(dr.camov_seal,'|')
    );


  update strang.detailrs dr
   set
    entry_no = null
  where
   (movement_no,nvl(dr.camov_seal,'|')) in (select movement_no,nvl(m.seal,'|') from strang.movements m where ship_id = vship_id);

end unallocate_entry;

procedure generate_ships_manifest( vship_id varchar2, action in varchar2 default 'LINE_NO', typ in varchar2 default 'SHIP', entryno in number default null, vste in varchar2 )
as

begin

 -- Generate Line Numbers
 if action = 'LINE_NO'
  then
   create_line_no(vship_id,typ);
   commit;
 end if;

 if action = 'LOCAL_LINE_NO'
  then
   create_line_no(vship_id,'LOCAL_SHIP');
   commit;
 end if;


 if action in ('DUTY')
  then
   unallocate_entry(vship_id);
   -- Generate Entry Numbers
   if typ = 'AIRWAY' then
    generate_entry_airfreight(vship_id,nvl(vste,OLTP.USER_SITE));
   else
    generate_entry(vship_id,nvl(vste,OLTP.USER_SITE));
   end if;
   commit;
 end if;

 if action in ('EXCISE')
  then
   create_duty(vShip_id,entryno, trunc(entryno));
   commit;
 end if;

 if action in ('T_EXCISE')
  then
   create_duty_com(vShip_id,entryno, trunc(entryno));
   commit;
 end if;

 if action in ('UNALLOCATE')
  then
   unallocate_entry(vship_id);
   commit;
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'GENERATE_SHIPS_MANIFEST',null,null,errmsg=>sqlerrm,extdet=>'VSHIP_ID:' || vship_id);
end generate_ships_manifest;

procedure invoke_report( surl in varchar2, repname in varchar2, r1 in varchar2 default null, r2 in varchar2 default null, r3 in varchar2 default null )
as

 cursor c1(repname varchar2) is select report_id from report_definition where upper(report_name) = upper(repname);
 cursor c2(repid integer) is select parameter_name, parameter_type from report_parameters where report_id = repid order by order_by;
 cursor c3(repid integer) is select max(parameter_level) mx from report_parameters where report_id = repid;

 c1rec	c1%ROWTYPE;
 c3rec	c3%ROWTYPE;
 p0     GLBX.MYARRAY;
 p1     GLBX.MYARRAY;
 p2     GLBX.MYARRAY;

begin
 open c1( repname );
 fetch c1 into c1rec;
 if c1%NOTFOUND
  then
   close c1;
   htp.htmlopen;
   htp.header(3,LNGS.STR_TXT_308 || ' : ' || repname, 'CENTER' );
   htp.htmlclose;
   return;
 end if;
 close c1;

 for c2rec in c2( c1rec.report_id ) loop
  if c2%ROWCOUNT = 1
   then
    p0(1) := c2rec.parameter_name;
    p1(1) := r1;
    if c2rec.parameter_type in ('SQL','CONSTANT') then p2(1) := 'C'; else p2(1) := 'RFROM'; end if;
  elsif c2%ROWCOUNT = 2
   then
    p0(2) := c2rec.parameter_name;
    p1(2) := r2;
    if c2rec.parameter_type in ('SQL','CONSTANT') then p2(2) := 'C'; else p2(2) := 'RFROM'; end if;
  elsif c2%ROWCOUNT = 3
   then
    p0(3) := c2rec.parameter_name;
    p1(3) := r3;
    if c2rec.parameter_type in ('SQL','CONSTANT') then p2(3) := 'C'; else p2(3) := 'RFROM'; end if;
  end if;
 end loop;

 open c3( c1rec.report_id );
 fetch c3 into c3rec;
 close c3;
 oltp.run_report( surl, c1rec.report_id, c3rec.mx + 1, p0, p1, p2 );

exception when others then
 glbx.error_details( 'STRANGP', 'INVOKE_REPORT',null,null,errmsg=>sqlerrm,extdet=>'REPNAME:' || repname);
end invoke_report;

procedure display_report( surl in varchar2, acid in integer, typ in varchar2, repname in varchar2, r1 in varchar2 default null, r2 in varchar2 default null, r3 in varchar2 default null )
as

 cursor c1(repname varchar2) is select report_id from report_definition where upper(report_name) = upper(repname);

 c1rec	c1%ROWTYPE;
 secaccess	varchar2(100);

begin

 secaccess := data_access(acid,typ,null);
 if secaccess = 'NONE' then return; end if;

 if secaccess = 'READ'
  then
   open c1( repname );
   fetch c1 into c1rec;
   if c1%FOUND
    then
     htp.anchor2( 'oltp.view_report?surl=' || surl || '&repid=' || c1rec.report_id,repname,ctarget=>'_top');
     htp.nl;
   end if;
   close c1;
 end if;

 if secaccess = 'EDIT'
  then
   htp.anchor2( 'strangp.invoke_report?surl=' || surl || '&repname=' || replace(repname,' ','+' ) || '&r1=' || replace(r1,' ','+') || '&r2=' || replace(r2,' ','+') || '&r3=' || replace(r3,' ','+'),repname,ctarget=>'_top');
   htp.nl;
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'DISPLAY_REPORT',null,null,errmsg=>sqlerrm,extdet=>'REPNAME:' || repname);
end display_report;

procedure mng_cust( surl in varchar2, rid in varchar2 default null, id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, parm in varchar2 default null, scid in varchar2 default null, access_id in varchar2 default null )
as

 cursor c2( rid rowid ) is select * from strang.customers where rowid = rid;
 cursor c2a is select * from strang.customers where rownum < 2 order by customer;
 cursor c2b( custid integer) is select rowid from strang.customers where customer_id = custid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c2brec		c2b%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 seclevel	varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.MNG_CUST' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'CUSTOMERS', rid );
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, LNGS.STR_TXT_321,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR21',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '<CENTER>' );
 if id is null and rid is not null
  then
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
 elsif id is null
  then
   open c2a;
   fetch c2a into c2rec;
   close c2a;
   open c2b(c2rec.customer_id);
   fetch c2b into c2brec;
   close c2b;
 elsif nvl(id,'x') <> 'z'
  then
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
 end if;

 htp.formopen( 'strangp.accept_mng_cust', ctarget=>'_top' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', replace(nvl(rid,c2brec.rowid),'~','+') );
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
 if c2rec.customer_id is not null
  then
   htp.tablerowopen;
    htp.tabledata( htf.bold(LNGS.STR_TXT_324),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold(c2rec.customer_id),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
  end if;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_325),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P1', 60, 100, c2rec.customer),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.customer),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('OTML Vendor ID'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P1i', 60, 100, c2rec.sap_vendor_id),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.sap_vendor_id),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_326),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P2', 30, 30, c2rec.street),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.street),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_327),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P3', 30, 30, c2rec.suburb),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.suburb),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_328),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P4', 20, 20, c2rec.state),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.state),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
   htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_329),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P5', 10, 10, c2rec.postcode),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.postcode),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_330),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P6', 25, 25, c2rec.city),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.city),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_331),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P7', 25, 25, c2rec.country),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.country),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_332),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P8', 20, 20, c2rec.abn),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.abn),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_333),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P9', 60, 60, c2rec.email),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.email),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_334),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P10', 20, 20, c2rec.phone),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.phone),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_335),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P11', 20, 20, c2rec.fax),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.fax),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
  if c2rec.customer_type = 'CUSTOMER'
   then
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_395),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      customer_list( 'PARTY', 'P13', c2rec.shipper_id, FALSE );
     else
      customer_list( 'PARTY', 'P13', c2rec.shipper_id, FALSE, isedit=>FALSE );
    end if;
     htp.p(('&nbsp;&nbsp;('||' ID '||c2rec.shipper_id|| ') &nbsp;&nbsp;&nbsp;&nbsp;'||strang.f_get_party_address(c2rec.shipper_id)));
     htp.p( '</TD>' );
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Consigned To'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      customer_list( 'PARTY', 'P14a', c2rec.consigned_to_id, FALSE );
     else
      customer_list( 'PARTY', 'P14a', c2rec.consigned_to_id, FALSE, isedit=>FALSE );
    end if;
     htp.p(('&nbsp;&nbsp;('||' ID '||c2rec.consigned_to_id|| ') &nbsp;&nbsp;&nbsp;&nbsp;'||strang.f_get_party_address(c2rec.consigned_to_id)));
     htp.p( '</TD>' );
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Notify Party'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      customer_list( 'PARTY', 'P14', c2rec.notify_party_id, FALSE );
     else
      customer_list( 'PARTY', 'P14', c2rec.notify_party_id, FALSE, isedit=>FALSE );
    end if;
     htp.p(('&nbsp;&nbsp;('||' ID '||c2rec.notify_party_id||' ) &nbsp;&nbsp;&nbsp;&nbsp;'|| strang.f_get_party_address(c2rec.notify_party_id)));
     htp.p( '</TD>' );
  htp.tablerowclose;


  end if;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_336),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT' and id = 'z'
    then
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">');
     htp.formselectopen( 'P12' );
     htp.formselectoption( 'CUSTOMER' );
     htp.formselectoption( 'SUPPLIER', 'SELECTED' );
     htp.formselectoption( 'PARTY' );
     htp.formselectoption( 'AGENT' );
     htp.formselectoption( 'BRANCHES' );
     htp.formselectoption( 'AIRALERT' );
     htp.formselectoption( lngs.STR_STH_001 ); -- SOUTHBOUND -- xxxSouthbound
     htp.formselectclose;
     htp.p( '</TD>' );
   elsif vaccess = 'EDIT'
    then
     htp.tabledata( htf.bold(c2rec.customer_type),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.formhidden( 'P12', c2rec.customer_type );
    else
     htp.tabledata( htf.bold(c2rec.customer_type),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 -- ============================================================================================================================
  htp.nl;
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
   htp.tablerowopen;
    htp.tabledata( htf.bold(LNGS.STR_TXT_199),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'LOCATIONS', 'R6', c2rec.port_from, FALSE, TRUE, FALSE );
     else
      lov_list( 'LOCATIONS', 'R6', c2rec.port_from, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
    htp.tabledata( htf.bold('Place of Loading/Unloading'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNLOCTAB', 'R6_1', c2rec.sad_lop_cod, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNLOCTAB', 'R6_1', c2rec.sad_lop_cod, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold(LNGS.STR_TXT_177),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      customer_list( 'AGENT', 'R7', c2rec.customs_agent, FALSE );
     else
      customer_list( 'AGENT', 'R7', c2rec.customs_agent, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
    htp.tabledata( htf.bold('Country of 1st Dest/Last Provenance'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNCTYTAB', 'R6_2', c2rec.sad_cty_1dlp, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNCTYTAB', 'R6_2', c2rec.sad_cty_1dlp, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Position'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
        htp.formtext('R22',20,30, c2rec.position);
     else
        htp.bold(c2rec.position);
    end if;
    htp.p( '</TD>' );
    htp.tabledata( htf.bold('Trading Country'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNCTYTAB', 'R6_3', c2rec.sad_tra_cty, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNCTYTAB', 'R6_3', c2rec.sad_tra_cty, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_200),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R8',20,20, c2rec.licence_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.licence_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
    htp.tabledata( htf.bold('Country of Export'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNCTYTAB', 'R6_4', c2rec.sad_cty_expcod, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNCTYTAB', 'R6_4', c2rec.sad_cty_expcod, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_201),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R9',20,15, c2rec.p2acode),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.p2acode),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
    htp.tabledata( htf.bold('Country of Destination'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNCTYTAB', 'R6_5', c2rec.sad_cty_destcod, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNCTYTAB', 'R6_5', c2rec.sad_cty_destcod, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_202),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R10',20,30, c2rec.cpc),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.cpc),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
    htp.tabledata( htf.bold('Warehouse Code'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNWHSTAB', 'R6_6', c2rec.sad_whs_cod, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNWHSTAB', 'R6_6', c2rec.sad_whs_cod, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_144),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R21',70,200, c2rec.pcomment),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.pcomment),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
    htp.tabledata( htf.bold('Warehouse Time Delay'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
     then
      htp.tabledata( htf.formtext('R6_7',20,10, to_char(c2rec.sad_whs_time)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
      htp.tabledata( htf.bold(to_char(c2rec.sad_whs_time)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_203),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        if (c2rec.comparative_worksheet is not null) or (c2rec.port_from is null) -- entered in first time
         then
          htp.tabledata( htf.formcheckbox( 'R11', 'T', 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
         else
          htp.tabledata( htf.formcheckbox( 'R11', 'T' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        end if;
       else
        htp.tabledata( htf.bold(c2rec.comparative_worksheet),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
    htp.tabledata( htf.bold('Location of Goods'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNSHDTAB', 'R6_8', c2rec.sad_loc_goods, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNSHDTAB', 'R6_8', c2rec.sad_loc_goods, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
  htp.tableclose;

  htp.nl;
  htp.tableopen( cattributes=>'cellspacing=2 cellpadding=2 border=0' );
  htp.tablerowopen;
  htp.p( '<TD VALIGN="TOP" ALIGN="CENTER">' );
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
   htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_204),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R14',15,15, c2rec.account_number),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.account_number),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_205),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R12',15,15, c2rec.preceding_documents),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.preceding_documents),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Terms of Delivery'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNTODTAB', 'R13', c2rec.terms_of_delivery, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNTODTAB', 'R13', c2rec.terms_of_delivery, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold('Bank Code'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R13_1',15,30, c2rec.bank_code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.bank_code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold('Bank Name'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R13_2',15,30, c2rec.bank_name),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.bank_name),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold('Branch'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R13_3',15,30, c2rec.branch),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.branch),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold('Terms of Payment'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R13_4',15,30, c2rec.terms_of_payment),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.terms_of_payment),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold('Bank Ref No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R13_5',15,30, c2rec.bank_ref_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.bank_ref_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
  htp.tableclose;
  htp.p( '</TD>' );

  htp.p( '<TD VALIGN="TOP" ALIGN="CENTER">' );
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
   htp.tablerowopen;
      htp.tabledata( htf.bold('External '||LNGS.STR_TXT_212|| htf.nl ||'USD per RevTonne'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R2',10,20, to_char(c2rec.freight)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(to_char(c2rec.freight)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold('Inland Freight'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R2_1',10,20, to_char(c2rec.infreight)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(to_char(c2rec.infreight)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_215),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R3',10,20, to_char(c2rec.insurance)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(to_char(c2rec.insurance)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_216),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R4',10,20, to_char(c2rec.vat)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(to_char(c2rec.vat)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold(LNGS.STR_TXT_217),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R5',10,20, to_char(c2rec.other_costs)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(to_char(c2rec.other_costs)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold('Levy Rate'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R5V',10,20, trim(to_char(c2rec.levy_rate,'999999.99'))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(trim(to_char(c2rec.levy_rate,'999999.99'))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold('Deductions'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R2_2',10,20, to_char(c2rec.deductions)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(to_char(c2rec.deductions)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
  htp.tableclose;
  htp.p( '</TD>' );
  htp.p( '<TD VALIGN="TOP" ALIGN="CENTER">' );
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
   htp.tabledata( htf.bold('Attachments'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT'
    then
     lov_list( 'UNATDTAB', 'R15', c2rec.attachments_invoices, FALSE, FALSE, FALSE );
    else
     lov_list( 'UNMODTAB', 'R15', c2rec.attachments_invoices, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Attachments'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT'
    then
     lov_list( 'UNATDTAB', 'R16', c2rec.attachments_packing, FALSE, FALSE, FALSE );
    else
     lov_list( 'UNMODTAB', 'R16', c2rec.attachments_packing, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Attachments'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT'
    then
     lov_list( 'UNATDTAB', 'R17', c2rec.attachments_order, FALSE, FALSE, FALSE );
    else
     lov_list( 'UNMODTAB', 'R17', c2rec.attachments_order, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Attachments'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT'
    then
     lov_list( 'UNATDTAB', 'R18', c2rec.attachments_licence, FALSE, FALSE, FALSE );
    else
     lov_list( 'UNMODTAB', 'R18', c2rec.attachments_licence, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Attachments'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT'
    then
     lov_list( 'UNATDTAB', 'R19', c2rec.attachments_freight, FALSE, FALSE, FALSE );
    else
     lov_list( 'UNMODTAB', 'R19', c2rec.attachments_freight, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Attachments'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   if vaccess = 'EDIT'
    then
     lov_list( 'UNATDTAB', 'R20', c2rec.attachments_other, FALSE, FALSE, FALSE );
    else
     lov_list( 'UNMODTAB', 'R20', c2rec.attachments_other, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
   htp.tablerowopen;
      htp.tabledata( htf.bold('Total Fees'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R20_1',10,10, to_char(c2rec.sad_tot_fees)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(to_char(c2rec.sad_tot_fees)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold('Method of Payment'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R20_2',10,1, to_char(c2rec.method_of_payment)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(to_char(c2rec.method_of_payment)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
  htp.tableclose;

 ----****
  htp.p( '<TD VALIGN="TOP" ALIGN="CENTER">' );
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
   htp.tablerowopen;
    htp.tabledata( htf.bold('Type of Declaration'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNMODTAB', 'R15_1', c2rec.sad_typ_dec, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNMODTAB', 'R15_1', c2rec.sad_typ_dec, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold('Type of Transit Document'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R15_2',10,5, c2rec.sad_typ_transit),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(c2rec.sad_typ_transit),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Declaration General Procedure'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNCP1TAB', 'R15_3', c2rec.sad_typ_proc, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNCP1TAB', 'R15_3', c2rec.sad_typ_proc, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Customs Clearance Office'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNCUOTAB', 'R15_4', c2rec.sad_cuo_code, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNCUOTAB', 'R15_4', c2rec.sad_cuo_code, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Border Customs Office'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNCUOTAB', 'R15_5', c2rec.sad_cuo_bord, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNCUOTAB', 'R15_5', c2rec.sad_cuo_bord, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Person Resp for Financial Settlement'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    if vaccess = 'EDIT'
     then
      lov_list( 'UNCMPTAB', 'R15_6', c2rec.sad_financial, FALSE, TRUE, FALSE );
     else
      lov_list( 'UNCMPTAB', 'R15_6', c2rec.sad_financial, FALSE, TRUE, FALSE, isedit=>FALSE );
    end if;
    htp.p( '</TD>' );
   htp.tablerowclose;
   htp.tablerowopen;
      htp.tabledata( htf.bold('Terms of Delivery Place'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R15_7',10,17, to_char(c2rec.sad_tod_nam)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(to_char(c2rec.sad_tod_nam)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;

   htp.tablerowopen;
      htp.tabledata( htf.bold('EPG'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
       then
        htp.tabledata( htf.formtext('R15_8',10,10, to_char(c2rec.epg)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
        htp.tabledata( htf.bold(to_char(c2rec.epg)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      end if;
   htp.tablerowclose;
  htp.tableclose;
  htp.tablerowclose;
  htp.tableclose;
  htp.nl;

  htp.nl;

 -- ============================================================================================================================
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT' and nvl(id,'x') = 'z'
  then
   htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_322 ),cattributes=>'VALIGN="TOP"');
 elsif vaccess = 'EDIT' and nvl(id,'x') <> 'z'
  then
   htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_323 ),cattributes=>'VALIGN="TOP"');
   if seclevel = 'LEVEL 7' then htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_337 ),cattributes=>'VALIGN="TOP"'); end if;
 end if;
 htp.formclose;
 if vaccess = 'EDIT' and nvl(id,'x') <> 'z'
  then
   htp.tabledata( htf.formopen( 'strangp.mng_cust', ctarget=>'CUSTOMER_WINDOW' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'ID', 'z' ) || htf.formhidden( 'RID', null ) || htf.formsubmit( null, LNGS.STR_TXT_035 ) || htf.formclose,cattributes=>'VALIGN="TOP"');
 end if;
 htp.tablerowclose;
 htp.tableclose;
 search( surl, 'CUSTOMERS', rid );
 htp.nl;
 if call_name is null then htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl; end if;
 htp.p( '</CENTER>' );
 htp.tableclose;
exception when others then
 glbx.error_details( 'STRANGP', 'MNG_CUST',null,null,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end mng_cust;

procedure accept_mng_cust( surl in varchar2, rid in varchar2, p1 in varchar2 default null, p1i in varchar2 , p2 in varchar2 default null, p3 in varchar2 default null, p4 in varchar2 default null,
                           p5 in varchar2 default null, p6 in varchar2 default null, p7 in varchar2 default null, p8 in varchar2 default null, p9 in varchar2 default null,
                           p10 in varchar2 default null, p11 in varchar2 default null, p12 in varchar2 default null, p13 in varchar2 default null, p14 in varchar2 default null, p14a in varchar2 default null, action in varchar2,
                           r2 in varchar2, r2_1 in varchar2, r2_2 in varchar2, r3 in varchar2, r4 in varchar2, r5 in varchar2, r5v in varchar2,
                           r6 in varchar2, r6_1 in varchar2, r6_2 in varchar2, r6_3 in varchar2, r6_4 in varchar2, r6_5 in varchar2, r6_6 in varchar2, r6_7 in varchar2, r6_8 in varchar2,
                           r7 in varchar2, r8 in varchar2, r9 in varchar2,
                           r10 in varchar2, r11 in varchar2 default null, r12 in varchar2, r13 in varchar2, r13_1 in varchar2, r13_2 in varchar2, r13_3 in varchar2,
                           r13_4 in varchar2,r13_5 in varchar2,  r14 in varchar2, r15 in varchar2,
                           r15_1 in varchar2,r15_2 in varchar2,r15_3 in varchar2,r15_4 in varchar2,r15_5 in varchar2,r15_6 in varchar2,r15_7 in varchar2,r15_8 in varchar2,
                           r16 in varchar2, r17 in varchar2, r18 in varchar2, r19 in varchar2, r20 in varchar2, r20_1 in varchar2, r20_2 in varchar2, r21 in varchar2, r22 in varchar2 )

as

 cursor c1( cst varchar2 ) is select 'x' from strang.customers where upper(cst) = upper(customer);
 cursor c2( sto varchar2 ) is select max(customer_id) + 1 cnt from strang.customers;
 cursor c3( rid rowid ) is select customer from strang.customers where rowid = rid;
 cursor c11(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'DELIVERYNO' and cola = vste;

 cusrec		customer_account%ROWTYPE;
 c1rec		c1%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c11rec 	c11%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 nmb1		integer;
 nmb2		integer;
 nmb3		integer;
 sts		varchar2(100);
 newrid		rowid;
 vste		varchar2(10);
  rmb1		number;
  rmb2		number;
  rmb3		number;
  rmb4		number;
  rmb5		number;
  rmb5a		number;
  rmb2_1	number;
  rmb2_2	number;
  rmb20_1	number;
  rmb20_2	number;
  rmb6_7        number;
  rmb15_3       number;
  rmb15_8       number;
  newcustid	integer;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'ACCEPT_MNG_CUST' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  cusrec := glbx.get_aid( owner_id, 'C', ltype );
  vste := customer_state(cusrec.aid);

  if action = LNGS.STR_TXT_337
   then
    update strang.receivals
     set
      cust_customer_id = null
     where
      cust_customer_id = (select customer_id from strang.customers where rowid = chartorowid( replace(rid,'~','+') ));
    update strang.receivals
     set
      supplier_customer_id = null
     where
      supplier_customer_id = (select customer_id from strang.customers where rowid = chartorowid( replace(rid,'~','+') ));
    update strang.ships_airway
     set
      customer_id = null
     where
      customer_id = (select customer_id from strang.customers where rowid = chartorowid( replace(rid,'~','+') ));
/* 20140529
    update strang.ships_airway
     set
      customs_agent = null
     where
      customs_agent = (select customer_id from strang.customers where rowid = chartorowid( replace(rid,'~','+') ));
*/
	  delete from strang.customers where rowid = chartorowid( replace(rid,'~','+') );
    commit;
    menu( surl, to_char(sysdate,'SSSS'), 'CUSTOMERS');
    return;
  end if;

 begin nmb1 := to_number(p13); exception when others then nmb1 := NULL; end;
 begin nmb2 := to_number(p14); exception when others then nmb2 := NULL; end;
 begin nmb3 := to_number(p14a); exception when others then nmb3 := NULL; end;

 if action = LNGS.STR_TXT_322
  then
   if p1 is null
    then
     mng_cust(surl,null,'z',LNGS.STR_TXT_341);
     return;
   end if;
   open c1(p1);
   fetch c1 into c1rec;
   if c1%FOUND
    then
     close c1;
     mng_cust(surl,null,'z',LNGS.STR_TXT_338);
     return;
   end if;
   close c1;
/*
   open c2(currsite);
   fetch c2 into c2rec;
   close c2;
   -- Use deliveryno as the ID
   if c2rec.cnt is null
    then
     open c11(vste);
     fetch c11 into c11rec;
     close c11;
     c2rec.cnt := c11rec.description;
   end if;
*/
   select strang.s_customer_id.nextval into newcustid from dual;

   insert into strang.customers(customer,sap_vendor_id,street,suburb,state,postcode,city,country,abn,email,phone,fax,customer_type,customer_id,shipper_id,notify_party_id,consigned_to_id) values
    ( p1, p1i, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, newcustid,nmb1,nmb2,nmb3 ) returning rowid into newrid;
   commit;
   mng_cust(surl,newrid,'x',LNGS.STR_TXT_339);
   return;
 end if;

 open c3( chartorowid( replace(rid,'~','+') ));
 fetch c3 into c3rec;
 close c3;
 if p1 is null
  then
   mng_cust(surl,rid,'x',LNGS.STR_TXT_341);
   return;
 elsif p1 <> c3rec.customer
  then
   open c1(p1);
   fetch c1 into c1rec;
   if c1%FOUND
    then
     close c1;
     mng_cust(surl,rid,'x',LNGS.STR_TXT_338);
     return;
   end if;
   close c1;
 end if;

  begin rmb2 := to_number(r2); exception when others then return; end;
  begin rmb2_1 := to_number(r2_1); exception when others then return; end;
  begin rmb2_2 := to_number(r2_2); exception when others then return; end;
  begin rmb3 := to_number(r3); exception when others then return; end;
  begin rmb4 := to_number(r4); exception when others then return; end;
  begin rmb5 := to_number(r5); exception when others then return; end;
  begin rmb5a := to_number(r5v); exception when others then return; end;
  begin rmb20_1 := to_number(r20_1); exception when others then return; end;
  begin rmb20_2 := to_number(r20_2); exception when others then return; end;
  begin rmb6_7 := to_number(r6_7); exception when others then return; end;
  begin rmb15_3 := to_number(r15_3); exception when others then return; end;
  begin rmb15_8 := to_number(r15_8); exception when others then return; end;


 update strang.customers
  set
   customer = p1,
   sap_vendor_id = p1i,
   street = p2,
   suburb = p3,
   state = p4,
   postcode = p5,
   city = p6,
   country = p7,
   abn = p8,
   email = p9,
   phone = p10,
   fax = p11,
   shipper_id=nmb1,
   notify_party_id = nmb2,
   consigned_to_id = nmb3,
   freight = rmb2,
   insurance = rmb3,
   vat = rmb4,
   other_costs = rmb5,
   port_from = r6,
   customs_agent = r7,
   licence_no = r8,
   p2acode = r9,
   cpc = r10,
   comparative_worksheet = r11,
   preceding_documents = r12,
   terms_of_delivery = r13,
   bank_code = r13_1,
   bank_name = r13_2,
   branch = r13_3,
   terms_of_payment = r13_4,
   bank_ref_no = r13_5,
   account_number = r14,
   attachments_invoices = r15,
   attachments_packing = r16,
   attachments_order = r17,
   attachments_licence = r18,
   attachments_freight = r19,
   attachments_other = r20,
   pcomment = r21,
   position = r22,
   levy_rate = rmb5a,
   infreight = rmb2_1,
   deductions = rmb2_2,
   sad_tot_fees = rmb20_1,
   method_of_payment = rmb20_2,
   sad_lop_cod = r6_1,
   sad_cty_1dlp = r6_2,
   sad_tra_cty = r6_3,
   sad_cty_expcod = r6_4,
   sad_cty_destcod = r6_5,
   sad_whs_cod = r6_6,
   sad_whs_time = rmb6_7,
   sad_loc_goods = r6_8,
   sad_typ_dec = r15_1,
   sad_typ_transit = r15_2,
   sad_typ_proc = rmb15_3,
   sad_cuo_code = r15_4,
   sad_cuo_bord = r15_5,
   sad_financial = r15_6,
   sad_tod_nam = r15_7,
   epg = rmb15_8,
   date_modified = sysdate,
   modified_by = cusrec.username
  where rowid = chartorowid( replace(rid,'~','+') );
 commit;
 mng_cust(surl,rid,'x',LNGS.STR_TXT_340);
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_MNG_CUST',null,owner_id,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end accept_mng_cust;

procedure mng_charge( surl in varchar2, rid in varchar2 default null, id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, parm in varchar2 default null )
as

 cursor c2( rid rowid ) is select * from strang.charges where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.MNG_CHARGE' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'CHARGES', rid );
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, LNGS.STR_TXT_369,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR22',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.p( '<CENTER>' );
 if id <> 'z' and rid is not null
  then
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
 end if;

 htp.formopen( 'strangp.accept_mng_charge', ctarget=>'_top' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );

  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_232),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT' and (id = 'z' or rid is null)
    then
     htp.tabledata( htf.formtext('P1', 10, 10, c2rec.chargecode),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     if vaccess = 'EDIT' then htp.formhidden( 'P1', c2rec.chargecode ); end if;
     htp.tabledata( htf.bold(c2rec.chargecode),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_376),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P2', 30, 30, c2rec.chargedesc),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.chargedesc),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_214),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P3', 10, 30, c2rec.rate),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.rate),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_377),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P4', 12, 12, c2rec.costcode),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(c2rec.costcode),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_101),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'UNITS', 'P5', c2rec.unit_unitused, TRUE, FALSE, FALSE );
     htp.p( '</TD>' );
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'UNITS', 'P5', c2rec.unit_unitused, TRUE, TRUE, FALSE, isedit=>FALSE );
     htp.p( '</TD>' );
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Default GST Code'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'GSTCODES', 'P6', c2rec.gstc_gstcode, TRUE, TRUE, TRUE );
     htp.p( '</TD>' );
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'GSTCODES', 'P6', c2rec.gstc_gstcode, TRUE, TRUE, TRUE, isedit=>FALSE );
     htp.p( '</TD>' );
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Sales Cost Centre with GST'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'COST_CENTRE', 'P7A', c2rec.sales_costcentre_gst, TRUE, FALSE, TRUE, xtr_a=>'S',xtr_b=>'GST' );
     htp.p( '</TD>' );
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'COST_CENTRE', 'P7A', c2rec.sales_costcentre_gst, TRUE, FALSE, TRUE, isedit=>FALSE, xtr_a=>'S',xtr_b=>'GST' );
     htp.p( '</TD>' );
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Sales Cost Centre NO GST'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'COST_CENTRE', 'P7B', c2rec.sales_costcentre_no_gst, TRUE, FALSE, TRUE, xtr_a=>'S',xtr_b=>'NO_GST' );
     htp.p( '</TD>' );
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'COST_CENTRE', 'P7B', c2rec.sales_costcentre_no_gst, TRUE, FALSE, TRUE, isedit=>FALSE, xtr_a=>'S',xtr_b=>'NO_GST' );
     htp.p( '</TD>' );
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Costs Cost Centre'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'COST_CENTRE', 'P7C', c2rec.costs_costcentre, TRUE, FALSE, TRUE, xtr_a=>'C' );
     htp.p( '</TD>' );
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     lov_list( 'COST_CENTRE', 'P7C', c2rec.costs_costcentre, TRUE, FALSE, TRUE, isedit=>FALSE, xtr_a=>'C' );
     htp.p( '</TD>' );
   end if;
  htp.tablerowclose;

 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT' and (id = 'z' or rid is null)
  then
   htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_373 ),cattributes=>'VALIGN="TOP"');
 elsif vaccess = 'EDIT' and id <> 'z'
  then
   htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_374 ),cattributes=>'VALIGN="TOP"');
   htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_TXT_372 ),cattributes=>'VALIGN="TOP"');
 end if;
 htp.formclose;
 if vaccess = 'EDIT' and id <> 'z'
  then
   htp.tabledata( htf.formopen( 'strangp.mng_charge', ctarget=>'CUSTOMER_WINDOW' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'ID', 'z' ) || htf.formhidden( 'RID', null ) || htf.formsubmit( null, LNGS.STR_TXT_373 ) || htf.formclose,cattributes=>'VALIGN="TOP"');
 end if;
 htp.tablerowclose;
 htp.tableclose;
 search( surl, 'CHARGES', rid );
 htp.nl;
 --if call_name is null then htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl; end if;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '</CENTER>' );
 htp.tableclose;
exception when others then
 glbx.error_details( 'STRANGP', 'MNG_CHARGE',null,null,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end mng_charge;

procedure accept_mng_charge( surl in varchar2, rid in varchar2, p1 in varchar2 default null, p2 in varchar2 default null, p3 in varchar2 default null, p4 in varchar2 default null,
                           p5 in varchar2 default null, p6 in varchar2 default null, p7a in varchar2, p7b in varchar2, p7c in varchar2, action in varchar2 )
as

 cursor c1( chg varchar2 ) is select 'x' from strang.charges where upper(chargecode) = upper(chg);

 c1rec		c1%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 np3		number;
 newrid		rowid;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'ACCEPT_MNG_CHARGE' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  if action = LNGS.STR_TXT_372
   then
    delete from strang.invcharges
     where
      cge_chargecode = (select chargecode from strang.charges where rowid = chartorowid( replace(rid,'~','+') ));
    delete from strang.charges where rowid = chartorowid( replace(rid,'~','+') );
    menu( surl, to_char(sysdate,'SSSS'), 'CHARGES');
    return;
  end if;

 begin np3 := to_number(p3); exception when others then np3 := null; end;

 if action = LNGS.STR_TXT_373
  then
   if p1 is null
    then
     mng_charge(surl,null,'z',LNGS.STR_TXT_370);
     return;
   end if;
   open c1(p1);
   fetch c1 into c1rec;
   if c1%FOUND
    then
     close c1;
     mng_charge(surl,null,'z',LNGS.STR_TXT_371);
     return;
   end if;
   close c1;
   insert into strang.charges(chargecode,chargedesc,rate,costcode,unit_unitused,gstc_gstcode,sales_costcentre_gst,sales_costcentre_no_gst,costs_costcentre) values
    ( p1, p2, np3, p4, p5, p6, p7a, p7b, p7c ) returning rowid into newrid;
   commit;
   mng_charge(surl,newrid,'x',LNGS.STR_TXT_399);
   return;
 end if;

 update strang.charges
  set
   chargedesc = p2,
   rate = np3,
   costcode = p4,
   unit_unitused = p5,
   gstc_gstcode = p6,
   sales_costcentre_gst = p7a,
   sales_costcentre_no_gst = p7b,
   costs_costcentre = p7c
  where rowid = chartorowid( replace(rid,'~','+') );
 commit;
 mng_charge(surl,rid,'x',LNGS.STR_TXT_378);
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_MNG_CHARGE',null,owner_id,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end accept_mng_charge;

procedure allocate_hawb( mawb in varchar2, vste in varchar2 )
as

        
 cursor c1(dlr varchar2) is select max(hawb_hawbno) + 1 from strang.detailrs where substr(to_char(hawb_hawbno),1,2) = dlr;

 cursor c2(mawb varchar2) is
  select dr.rowid,dr.deliveryno,dr.itemno
  from strang.detailrs dr, strang.movements m
  where hawb_hawbno is null and
        dr.movement_no = m.movement_no and
        m.movement_no = mawb and
        m.movement_type = 'AIRWAY'
  order by deliveryno,itemno;

 cursor c3(mawb varchar2)  is
  select dr.hawb_hawbno, dr.deliveryno
  from strang.detailrs dr, strang.movements m
  where hawb_hawbno is not null and
        dr.movement_no = m.movement_no and
        m.movement_no = mawb and
        m.movement_type = 'AIRWAY';

 cursor c11(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'HAWB' and cola = vste;

 c3rec		c3%ROWTYPE;
 c11rec 	c11%ROWTYPE;
 maxnmb		integer;
 vmawbs		varchar(100);
 last_del	integer;


 function inlist( dlrv integer, mawb varchar2 )
  return boolean
 as
  cursor c1(dlrv integer, mawb varchar2)  is
   select dr.hawb_hawbno
   from strang.detailrs dr, strang.movements m
   where hawb_hawbno is not null and
         dr.movement_no = m.movement_no and
         m.movement_no = mawb and
         dr.deliveryno = dlrv and
         m.movement_type = 'AIRWAY';
         
  c1rec  c1%ROWTYPE;
  begin
   open c1(dlrv,mawb);
   fetch c1 into c1rec;
   if c1%FOUND
    then
     close c1;
     return( TRUE );
    else
      close c1;
      return( FALSE );
   end if;
 end inlist;

 function inlistval( dlrv integer, mawb varchar2 )
   return integer
  as
   cursor c1(dlrv integer, mawb varchar2)  is
    select dr.hawb_hawbno
    from strang.detailrs dr, strang.movements m
    where hawb_hawbno is not null and
          dr.movement_no = m.movement_no and
          m.movement_no = mawb and
          dr.deliveryno = dlrv and
          m.movement_type = 'AIRWAY';
   c1rec  c1%ROWTYPE;
   begin
    open c1(dlrv,mawb);
    fetch c1 into c1rec;
    if c1%FOUND
     then
      close c1;
      return( c1rec.hawb_hawbno );
     else
       close c1;
       return( NULL );
    end if;
  end inlistval;

begin

 open c3(mawb);
 fetch c3 into maxnmb,last_del;
 if c3%NOTFOUND
  then
   open c11(vste);
   fetch c11 into c11rec;
   close c11;
   open c1(substr(c11rec.description,1,2));
   fetch c1 into maxnmb;
   close c1;
   if maxnmb is null then maxnmb := c11rec.description; end if;
   --insert into strang.hawbs(hawb,mawb) values (maxnmb,mawb);
   vmawbs := mawb;
   insert into strang.hawbs(hawb,mawb) select maxnmb,vmawbs from dual where not exists (select 'x' from strang.hawbs h where h.hawb = maxnmb and h.mawb = vmawbs);
 end if;
 close c3;

 for c2rec in c2(mawb) loop
  if (last_del is null)
   then
    update strang.detailrs
      set
       hawb_hawbno = maxnmb
      where rowid = c2rec.rowid;
  elsif inlist(c2rec.deliveryno,mawb)
   then
    maxnmb := inlistval(c2rec.deliveryno,mawb);
    insert into strang.hawbs(hawb,mawb) select 1+maxnmb,mawb from dual where not exists (select 'x' from strang.hawbs h where h.hawb = 1+maxnmb and h.mawb = mawb);
    update strang.detailrs
      set
       hawb_hawbno = maxnmb + 1
      where rowid = c2rec.rowid;
   else
    open c11(vste);
    fetch c11 into c11rec;
    close c11;
    open c1(substr(c11rec.description,1,2));
    fetch c1 into maxnmb;
    close c1;
    --insert into strang.hawbs(hawb,mawb) values (maxnmb,mawb);
    vmawbs := mawb;
    insert into strang.hawbs(hawb,mawb) select maxnmb,vmawbs from dual where not exists (select 'x' from strang.hawbs h where h.hawb = maxnmb and h.mawb = vmawbs);
    update strang.detailrs
      set
       hawb_hawbno = maxnmb
      where rowid = c2rec.rowid;
   end if;
   last_del := c2rec.deliveryno;
 end loop;

end allocate_hawb;

procedure hotsync( surl in varchar2 )
as

 cursor c2 is select * from strang.hot_sync order by decode(table_name,'SHIPS_AIRWAY',0,'RECEIVALS',1,'MOVEMENTS',2,'HAWBS',3,'DETAILRS',4,'POS',5,6), table_name;

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.HOTSYNC' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'HOTYSNC', null );
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, NULL,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR24',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.p( '<CENTER>' );
 htp.formopen( 'strangp.accept_hotsync' );
 htp.formhidden( 'SURL', surl );
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
 htp.tablerowopen;
  htp.tabledata( htf.bold( LNGS.STR_TXT_385 ),cattributes=>glbx.QUERY_BACKGROUND );
  htp.tabledata( htf.bold( LNGS.STR_TXT_386 ),cattributes=>glbx.QUERY_BACKGROUND );
 htp.tablerowclose;
 for c2rec in c2 loop
  htp.tablerowopen;
   htp.tabledata( initcap(replace(c2rec.table_name,'_',' ')), cattributes=>glbx.QUERY_CELL_BACKGROUND );
   htp.tabledata( initcap(c2rec.allowed_change), cattributes=>glbx.QUERY_CELL_BACKGROUND );
  htp.tablerowclose;
 end loop;
 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold(LNGS.STR_TXT_387), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.formradio( 'P2', 'STANDARD', 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND );
   htp.tabledata( LNGS.STR_TXT_388 || htf.nl ||
                  ' &nbsp;&nbsp;&nbsp' || htf.formcheckbox('P6','T') || ' Continue if Error ' || htf.nl ||
                  ' &nbsp;&nbsp;&nbsp ' || htf.formcheckbox( 'P4', 'T' ) || ' ' || LNGS.STR_TXT_402 || htf.nl ||
                  ' &nbsp;&nbsp;&nbsp ' || htf.formcheckbox( 'P7', 'T' ) || ' ' || 'Only Extract the SQL Statements to file' || htf.nl ||
                  ' &nbsp;&nbsp;&nbsp ' || htf.formcheckbox( 'P8', 'T' ) || ' ' || 'Only Run SQL Statements from file'
                  , cattributes=>glbx.QUERY_CELL_BACKGROUND );
   htp.tabledata( htf.anchor( 'strangp.analyse_hotsync?surl=' || surl, LNGS.STR_TXT_403 ), cattributes=>glbx.QUERY_BACKGROUND );
  htp.tablerowclose;
  vaccess := data_access( owner_id, 'HOTYSNC_SUPER', null );
  if vaccess = 'EDIT'
   then
    htp.tablerowopen;
     htp.tabledata( htf.formradio( 'P2', 'CULL' ), cattributes=>glbx.QUERY_CELL_BACKGROUND );
     htp.tabledata( LNGS.STR_TXT_404, cattributes=>glbx.QUERY_CELL_BACKGROUND );
     htp.tabledata( LNGS.STR_TXT_405|| ':' || htf.formtext( 'P5',10,20, to_char(sysdate-100,'DD-MON-YYYY')), cattributes=>glbx.QUERY_BACKGROUND );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.formradio( 'P2', 'REFRESH' ), cattributes=>glbx.QUERY_CELL_BACKGROUND );
     htp.tabledata( LNGS.STR_TXT_389, cattributes=>glbx.QUERY_CELL_BACKGROUND );
     htp.tabledata( 'Complete Delete Password' || ' :' || htf.formpassword( 'P3',10, 100 ), cattributes=>glbx.QUERY_BACKGROUND );
    htp.tablerowclose;
  end if;
 htp.tableclose;
 htp.nl;
 htp.formsubmit( null, LNGS.STR_TXT_390 );
 htp.formclose;
 htp.p( '</CENTER>' );
 htp.tableclose;
exception when others then
 glbx.error_details( 'STRANGP', 'HOTSYNC',null,null,errmsg=>sqlerrm );
end hotsync;

procedure analyse_hotsync( surl in varchar2 )
as

 TYPE REPCurTyp IS REF CURSOR;  -- define weak REF CURSOR type

 cursor c2 is select * from strang.hot_sync order by site,table_name desc; -- Descending so that Ships Airway goes first
 cursor c3 is
  select r.table_name,r.column_name,min(r.replication_id) mn,max(r.replication_id) mx,count('x') cnt,min(r.date_changed) mnd,max(r.date_changed) mxd
  from strang.replication r, strang.hot_sync h
  where r.table_name = h.table_name and
        r.replication_id >= nvl(h.local_load_id,0)
  group by r.table_name,r.column_name;
 cursor c4 is select * from strang.hot_sync;

 rep_cv   	REPCurTyp;
 str		varchar2(4000);
 fstr		varchar2(4000);
 cola		varchar2(4000);
 colb		varchar2(4000);
 tot		integer;

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 result		varchar2(1000);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_HOTSYNC' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'HOTYSNC', null );
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, LNGS.STR_TXT_403,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR24',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.nl;
 htp.p( '<CENTER>' );
 htp.bold( 'Hot Sync' );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
   htp.tabledata( htf.bold( 'Site' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'Table Name' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'DB Link' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'Allowed Change' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'Local Load Id' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'Primary Load Id' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'PK Col1' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'PK Col2' ), cattributes=>glbx.QUERY_BACKGROUND );
  htp.tablerowclose;
  for c2rec in c2 loop
   htp.tablerowopen;
    htp.tabledata( c2rec.site, cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( c2rec.table_name, cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( c2rec.dblink, cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( c2rec.allowed_change, cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( c2rec.local_load_id, cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( c2rec.primary_load_id, cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( c2rec.pk_col1, cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( nvl(c2rec.pk_col2,'&nbsp;'), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tablerowclose;
  end loop;
 htp.tableclose;
 htp.nl;
 htp.nl;
 htp.bold( 'Replication Statistics' );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
   htp.tabledata( htf.bold( 'Table Name' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'Column Name' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'Min load Id' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'Max Load Id' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'Min Date Changed' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'Max Date Changed' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( '# Records' ), cattributes=>glbx.QUERY_BACKGROUND );
  htp.tablerowclose;
  for c3rec in c3 loop
   htp.tablerowopen;
    htp.tabledata( c3rec.table_name, cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( c3rec.column_name, cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( c3rec.mn, cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( c3rec.mx, cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( to_char(c3rec.mnd,'DD Mon YYYY HH24:MI:SS'), cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( to_char(c3rec.mxd,'DD Mon YYYY HH24:MI:SS'), cattributes=>glbx.QUERY_BACKGROUND );
    htp.tabledata( c3rec.cnt, cattributes=>glbx.QUERY_BACKGROUND );
   htp.tablerowclose;
  end loop;
 htp.tableclose;
 htp.line;
 htp.nl;

 htp.bold( 'Duplicate Values in the Strang Database' );
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
   htp.tabledata( htf.bold( 'Table Name' ));
   htp.tabledata( htf.bold( 'Primary Key Column A' ));
   htp.tabledata( htf.bold( 'Primary Key Column B' ));
   htp.tabledata( htf.bold( 'Value Column A' ));
   htp.tabledata( htf.bold( 'Value Column B' ));
   htp.tabledata( htf.bold( 'Number of Duplicates' ));
  htp.tablerowclose;
 for c4rec in c4 loop
  if c4rec.pk_col2 is null
   then
    str := c4rec.pk_col1;
   else
    str := c4rec.pk_col1 || ',' || c4rec.pk_col2;
  end if;
  fstr := 'select ' || str || ', count(''x'') tot from strang.' || c4rec.table_name || ' group by ' || str || ' having count(''x'') > 1';
  OPEN rep_cv FOR fstr;

  loop
   if c4rec.pk_col2 is null
    then
     FETCH rep_cv into cola,tot;
    else
     FETCH rep_cv into cola,colb,tot;
   end if;
   EXIT WHEN rep_cv%NOTFOUND;
   htp.tablerowopen;
    htp.tabledata( c4rec.table_name );
    htp.tabledata( htf.anchor('strangp.check_dupl?surl=' || surl || '&tname=' || c4rec.table_name || '&cname=' || c4rec.pk_col1 || '&pkcol1=' || replace(cola,' ','+') || '&pkcol2=' || replace(colb,' ','+'),c4rec.pk_col1 ));
    htp.tabledata( nvl(c4rec.pk_col2,'&nbsp;') );
    htp.tabledata( cola );
    htp.tabledata( nvl(colb,'&nbsp;'));
    htp.tabledata( tot );
   htp.tablerowclose;
  end loop;
  CLOSE rep_cv;

 end loop;
 htp.tableclose;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'ANALYSE_HOTSYNC',null,null,errmsg=>sqlerrm );
end analyse_hotsync;

procedure delete_dupl(surl in varchar2, tname in varchar2, rw in varchar2 )
as
 c1rec		customer_account%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 rw2		varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.DELETE_DUPL' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  rw2 := replace(rw,'~','+');
  strang.global_site.disable_trigger := TRUE;
  execute immediate 'delete from strang.' || tname || ' where rowid = :1'
   using chartorowid(rw2);
  commit;
  strang.global_site.disable_trigger := FALSE;
  analyse_hotsync(surl);
exception when others then
 glbx.error_details( 'STRANGP', 'DELETE_DUPL',null,null,errmsg=>sqlerrm );
end delete_dupl;

procedure check_dupl(surl in varchar2, tname in varchar2, cname in varchar2, pkcol1 in varchar2, pkcol2 in varchar2 )
as

 TYPE REPCurTyp IS REF CURSOR;  -- define weak REF CURSOR type
 cursor c2(tname varchar2, ownr varchar2) is select column_name from all_tab_columns where owner = ownr and table_name = tname;
 cursor c3(tname varchar2) is select pk_col1,pk_col2 from strang.hot_sync where table_name = tname;

 rep_cv   	REPCurTyp;
 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 wclause	varchar2(1000);
 rep_cv4   	REPCurTyp;
 pr1		rowid;
 pr2		rowid;
 val1		varchar2(4000);
 val2		varchar2(4000);
 vaccess	varchar2(20);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_HOTSYNC' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'HOTYSNC', null );
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, 'Looking for Duplicates on table' || ':' || tname,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR23',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 htp.p( '<CENTER>' );
 htp.tableopen( cattributes=>'cellspacing=2 cellpadding=2 border=1' );
  htp.tablerowopen;
   htp.tabledata( htf.bold( 'Column Name' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'First Row' ), cattributes=>glbx.QUERY_BACKGROUND );
   htp.tabledata( htf.bold( 'Second Row' ), cattributes=>glbx.QUERY_BACKGROUND );
  htp.tablerowclose;
  open c3(tname);
  fetch c3 into c3rec;
  close c3;
  if pkcol1 is null
   then
    wclause := c3rec.pk_col1 || ' is null';
   else
    wclause := c3rec.pk_col1 || ' = ''' || pkcol1 || '''';
  end if;
  if c3rec.pk_col2 is not null
   then
    if pkcol2 is null
     then
      wclause := wclause || ' and ' || c3rec.pk_col2 || ' is null';
     else
      wclause := wclause || ' and ' || c3rec.pk_col2 || ' = ''' || pkcol2 || '''';
    end if;
  end if;
  OPEN rep_cv FOR 'select rowid from strang.' || tname || ' where ' || wclause;
  FETCH rep_cv INTO pr1;
  FETCH rep_cv INTO pr2;
  close rep_cv;

  for c2rec in c2(tname,'STRANG') loop
  htp.tablerowopen;
   val1 := NULL;
   val2 := NULL;
   execute immediate 'select ' || c2rec.column_name || ' from strang.' || tname || ' where rowid=:1'
    into val1
     using pr1;
   execute immediate 'select ' || c2rec.column_name || ' from strang.' || tname || ' where rowid=:1'
    into val2
     using pr2;
   if nvl(val1,'|') = nvl(val2,'|')
    then
     htp.tabledata( c2rec.column_name, cattributes=>glbx.QUERY_CELL_BACKGROUND);
     htp.tabledata( nvl(val1,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND);
     htp.tabledata( nvl(val2,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND);
    else
     htp.tabledata( htf.bold(c2rec.column_name), cattributes=>glbx.QUERY_CELL_BACKGROUND);
     htp.tabledata( htf.bold(nvl(val1,'&nbsp;')), cattributes=>glbx.QUERY_CELL_BACKGROUND);
     htp.tabledata( htf.bold(nvl(val2,'&nbsp;')), cattributes=>glbx.QUERY_CELL_BACKGROUND);
   end if;
   htp.tablerowclose;
  end loop;
  htp.tableclose;
  htp.nl;
  htp.anchor( 'strangp.delete_dupl?surl=' || surl || '&tname=' || tname || '&rw=' || replace(pr1,'+','~'),'Delete First Row' );
  htp.nl;
  htp.anchor( 'strangp.delete_dupl?surl=' || surl || '&tname=' || tname || '&rw=' || replace(pr2,'+','~'),'Delete Second Row' );
  htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'CHECK_DUPL',null,null,errmsg=>sqlerrm );
end check_dupl;

procedure accept_hotsync( surl in varchar2, p2 in varchar2, p3 in varchar2 default NULL, p4 in varchar2 default 'F', p5 in varchar2 default null, p6 in varchar2 default 'F', p7 in varchar2 default 'F', p8 in varchar2 default 'F' )
as

 cursor c2 is select last_load from strang.hot_sync;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 result		varchar2(1000);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_HOTSYNC' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'HOTYSNC', null );
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, 'Hot Sync Results',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR23',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 open c2;
 fetch c2 into c2rec;
 close c2;
 if ((sysdate - nvl(c2rec.last_load,(sysdate-100))) * 60 * 60 * 24) < 30
  then
   -- Hit button twice
   htp.nl;
   htp.bold( 'Hot Sync Already Running' );
   return;
  else
   -- OK to run
   update strang.hot_sync set last_load = sysdate;
   commit;
 end if;

 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.p( '<CENTER>' );
 htp.nl;
 result := NULL;
 strangz.hot_sync_all(p2,result,p3,p4,p5,p6,p7,p8);
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
   htp.tablerowopen;
     htp.tabledata( nvl(result,'Completed'), cattributes=>glbx.QUERY_CELL_BACKGROUND );
   htp.tablerowclose;
 htp.tableclose;
 htp.nl;
 -- htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
 htp.p( '</CENTER>' );
 htp.tableclose;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_HOTSYNC',null,null,errmsg=>sqlerrm );
end accept_hotsync;

procedure assign_hawb( surl in varchar2, rid in varchar2, scid in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null )
as

 cursor c2(rid rowid) is select movement_no from strang.movements where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 vste		varchar2(10);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ASSIGN_DET' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 open c2(chartorowid(replace(rid,'~','+')));
 fetch c2 into c2rec;
 close c2;

 allocate_hawb( c2rec.movement_no, vste );

 movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_393);

exception when others then
 glbx.error_details( 'STRANGP', 'ASSIGN_HAWB',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end assign_hawb;

procedure edit_ecn_log( surl in varchar2, lg in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer default 1, msg in varchar2 default null )
as

 cursor c3( lg varchar2 ) is
  select d.rowid,d.movement_no,d.camov_seal seal,logno, connote, dispatch_date, deliveryno
  ,itemno,ecn,handling_unit,qty,pktpe_packtype,partweight,partvolume,detaildesc,hazard,warehouse, movement_no_2, camov_seal_2
  from strang.detailrs d
  where logno = lg
  order by deliveryno,itemno,logno;

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 foundrec	boolean;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.EDIT_ECN_LOG' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, LNGS.STR_TXT_266,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR16',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 htp.p( '<CENTER>' );

 htp.formopen( 'strangp.accept_edit_ecn_log' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'LG', lg );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'SCID', scid );
 htp.formhidden( 'CALL_NAME', call_name );
 htp.formhidden( 'PARM', parm );
 htp.formhidden( 'ACCESS_ID', access_id );
 htp.formhidden( 'RECCTR', recctr );

 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( 'Container'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Seal'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Log No'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Delivery No'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Item'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'ECN'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold('Connote'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');   -- Added by David Banjo
   htp.tabledata( htf.bold('Dispatch Date<br/>DD Mon YYYY'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"'); -- Added by David Banjo
 --  htp.tabledata( htf.bold( 'Handling Unit'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Qty'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Pack Type'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Weight (Kg)'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Volume (m3)'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Description'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Hazardous'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Warehouse'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Container No2'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Seal No2'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
  foundrec := FALSE;
    for c3rec in c3( lg ) loop
     foundrec := TRUE;
     htp.tablerowopen;
     htp.formhidden( 'P2', rowidtochar( c3rec.rowid ) );
      htp.tabledata( c3rec.movement_no, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( nvl(c3rec.seal,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.logno, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.deliveryno, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.itemno, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formtext( 'P3', 10, 1000, c3rec.ecn), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P11',40,50,c3rec.connote),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); -- Added by DB
      htp.tabledata( htf.formtext( 'P12',20,20, to_char(c3rec.dispatch_date, 'DD MON YYYY')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'); -- Added by DB
    --  htp.tabledata( htf.formtext( 'P3i', 10, 1000, c3rec.handling_unit), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P4', 10, 1000, c3rec.qty), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P5', 8, 1000, c3rec.pktpe_packtype), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P6', 10, 1000, c3rec.partweight), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P7', 10, 1000, c3rec.partvolume), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P8', 90, 1000, c3rec.detaildesc), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P9', 40, 1000, c3rec.hazard), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( htf.formtext( 'P10', 10, 1000, c3rec.warehouse), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
      htp.tabledata( c3rec.movement_no_2, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( c3rec.camov_seal_2, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tablerowclose;
    end loop;
  htp.tableclose;
  if not foundrec
   then
    htp.formhidden( 'P2', null );
    htp.formhidden( 'P3', null );
    htp.nl;
    htp.formsubmit( null, LNGS.STR_TXT_364 );
    htp.formclose;
    htp.nl;
    htp.anchor(  'javascript: parent.opener.location = ''' || 'strangp.receive_bottom?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(recctr) || '''; parent.close();', LNG.GLB_TXT_033);
    htp.htmlclose;
   return;
  end if;
  htp.nl;
  htp.formsubmit( 'ACTION', 'Save Changes' );
  htp.formsubmit( 'ACTION', 'Repeat First ECN for All' );
 -- htp.formsubmit( 'ACTION', 'Repeat First Handling Unit for All' );
  htp.formsubmit( 'ACTION', 'Repeat First Connote for All' ); -- Repeat Values
  htp.formsubmit( 'ACTION', 'Repeat First Dispatch Date for All' ); 
  htp.formclose;
  htp.anchor(  'javascript: parent.opener.location = ''' || 'strangp.receive_bottom?surl=' || surl || '&rid=' || replace( rid, '+', '~' ) || '&scid=' || replace(scid,' ','+') || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || replace(access_id,' ','+') || '&recctr=' || to_char(recctr) || '''; parent.close();', LNG.GLB_TXT_033);
  --htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
  htp.p( '</CENTER>' );
  htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'EDIT_ECN_LOG',null,owner_id,errmsg=>sqlerrm,extdet=>'LG:' || lg);
end edit_ecn_log;

procedure accept_edit_ecn_log( surl in varchar2, lg in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, recctr in integer default 1, action in varchar2, p2 in GLBX.MYARRAY, p3 in GLBX.MYARRAY,  p4 in GLBX.MYARRAY, p5 in GLBX.MYARRAY, p6 in GLBX.MYARRAY, p7 in GLBX.MYARRAY, p8 in GLBX.MYARRAY, p9 in GLBX.MYARRAY, p10 in GLBX.MYARRAY, p11 in GLBX.MYARRAY, p12 in GLBX.MYARRAY)
as

 cursor c3(lname varchar2, lcode varchar2) is select * from strang.lov where lov_name = lname and code = lcode;

 c3rec		c3%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 errmsg		GLBX.MYARRAY;
 errfound	boolean;
 errunit	varchar2(1);
 v_dispatch_date date;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_EDIT_ECN' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  for j in p2.first..p2.last loop
     errmsg(j):=null;
     if p2(j) is not null
      then
       if action = 'Save Changes'
        then
--       Validations
         -- Check PackType
         c3rec.code := NULL;
         errunit := 'F';
         if p5(j) is not null
         then
          open c3( 'PACKTYPES', upper(p5(j)));
          fetch c3 into c3rec;
          if c3%NOTFOUND
          then
            close c3;
            errfound := TRUE;
            errmsg(j) := errmsg(j) || ' ' || 'PackType NOT updated';
            errunit := 'T';
          else
            close c3;
            update strang.detailrs set pktpe_packtype = upper(nvl(p5(j),pktpe_packtype)) where rowid = chartorowid( p2(j) );
          end if;
        end if;

         -- Check Warehouses
         c3rec.code := NULL;
         errunit := 'F';
         if p10(j) is not null
         then
          open c3( 'WAREHOUSES', upper(p10(j)));
          fetch c3 into c3rec;
          if c3%NOTFOUND
          then
            close c3;
            errfound := TRUE;
            errmsg(j) := errmsg(j) || ' ' || 'Warehouse NOT updated';
            errunit := 'T';
          else
            close c3;
            update strang.detailrs set warehouse = upper(nvl(p10(j),warehouse)) where rowid = chartorowid( p2(j) );
          end if;
        end if;
         
        -- Dispatch Date
        c3rec.code := NULL;
         errunit := 'F';
         if p12(j) is not null then
          begin
             v_dispatch_date := to_date (p12(j),'DD Mon YYYY');
          exception when others then
             begin
               errfound := TRUE;
               errmsg(j) := errmsg(j) || ' ' || 'Invalid Dispatch Date Entered.';
               errunit := 'T';
             end;  
          end;
          update strang.detailrs set dispatch_date = v_dispatch_date where rowid = chartorowid( p2(j) );
          else 
          update strang.detailrs set dispatch_date = p12(j) where rowid = chartorowid( p2(j) );
          
          end if;
          v_dispatch_date := null;
           
         update strang.detailrs set
          ecn = p3(j),
          connote = p11(j),
    --      handling_unit = strang.f_sap_format(p3i(j),'HANDLING_UNIT'),
          qty = nvl(p4(j),qty),
          partweight = nvl(p6(j),partweight),
          partvolume = nvl(p7(j),partvolume),
          detaildesc = upper(nvl(p8(j),detaildesc)),
          hazard = upper(p9(j))
         where rowid = chartorowid( p2(j) );
       elsif action = 'Repeat First ECN for All'
        then
         if p3(j) is null
          then
           update strang.detailrs set ecn = p3(1) where rowid = chartorowid( p2(j) );
          else
           update strang.detailrs set ecn = p3(j) where rowid = chartorowid( p2(j) );
         end if;
          
--       elsif action = 'Repeat First Handling Unit for All'
--        then
--         if p3i(j) is null
--          then
--           update strang.detailrs set handling_unit = strang.f_sap_format(p3i(1),'HANDLING_UNIT') where rowid = chartorowid( p2(j) );
--          else
--           update strang.detailrs set handling_unit = strang.f_sap_format(p3i(j),'HANDLING_UNIT') where rowid = chartorowid( p2(j) );
--         end if;
       elsif action = 'Repeat First Connote for All'
        then
         if p11(j) is null
          then
           -- p11(j) := p11(1);
           update strang.detailrs set connote = p11(1) where rowid = chartorowid( p2(j) );
          else
           update strang.detailrs set connote = p11(j) where rowid = chartorowid( p2(j) );
         end if;  
       elsif action = 'Repeat First Dispatch Date for All'
        then
         if p12(j) is null
          then
             begin
                v_dispatch_date := to_date (p12(1),'DD Mon YYYY');
             exception when others then
              begin
               errfound := TRUE;
               errmsg(j) := errmsg(j) || ' ' || 'Invalid Dispatch Date Entered.';
               errunit := 'T';
              end;
            end;
           -- v12(j) := v12(1);
            update strang.detailrs set dispatch_date = v_dispatch_date  where rowid = chartorowid( p2(j) );
          else
           begin
             v_dispatch_date := to_date (p12(j),'DD Mon YYYY');
             exception when others then
              begin
               errfound := TRUE;
               errmsg(j) := errmsg(j) || ' ' || 'Invalid Dispatch Date Entered.';
               errunit := 'T';
              end;
            end;
           update strang.detailrs set dispatch_date =  v_dispatch_date where rowid = chartorowid( p2(j) );
         end if;  
         v_dispatch_date := null;     
       end if;      
     end if;
  end loop;

  commit;

  edit_ecn_log(surl, lg, rid, scid, call_name, parm, access_id, recctr, 'VALUES SAVED' );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_EDIT_ECN_LOG',null,owner_id,errmsg=>sqlerrm,extdet=>'LG:' || lg);
end accept_edit_ecn_log;

procedure trac_search( surl in varchar2, msg in varchar2 default null )
as

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 seclevel	varchar2(100);
 mf		varchar2(100);
 vste		varchar2(10);
 v_msg        varchar2(1000);
 customer_id  integer;
 supplier_id  integer;
 v_direction varchar2(1) := 'I';
 
begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.TRAC_SEARCH' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 seclevel := oltp.security_role( owner_id );
-- vaccess := data_access( owner_id, 'TRAC_SEARCH', rid );
 customer_id := get_customer_id(c1rec.aid);
 supplier_id := get_customer_id(c1rec.aid, 'SUPPLIER_ID');
 if customer_id is not null
  then
   v_msg := 'Customer: ' || c1rec.account_name;
 end if;
 if supplier_id is not null
  then
   v_msg := 'Supplier: ' || c1rec.account_name;
 end if;
 
 if nvl(vste,'SYD') = g_outbound_site then
    v_direction := 'O';
 end if;
 

 glbx.main_title( surl, LNGS.STR_TXT_443,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR16',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 htp.p( '<CENTER>' );

 if msg is not null
 then
  glbx.header_msg( msg );
 end if;

 htp.nl;
 if v_msg is not null
 then
  glbx.header_msg( v_msg );
 else
 htp.nl;
 htp.nl;
 end if;
 htp.nl;

htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_444)||'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||htf.bold(LNGS.STR_TXT_446),' ALIGN="LEFT" COLSPAN=6');
 --  htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
 --  htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT" COLSPAN=6');
--   htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
--   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('CARGO QUERIES'),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT" COLSPAN=1');
   htp.tabledata( htf.bold('INBOUND CARGO'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN=3');
   if customer_id is null and supplier_id is null then
   htp.tabledata( htf.bold('OUTBOUND CARGO'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" ALIGN="LEFT" COLSPAN=2');
   end if;
--   htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
htp.tablerowopen;
htp.p('<TD valign="TOP">');
 --htp.p( 'Inbound Ships' );
 htp.nl;
 htp.formopen( 'strangp.accept_trac_search' );
 htp.formhidden( 'SURL', surl );
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_437 || ':'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Strang Delivery No'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P4', 20, 100 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen (cattributes=>'style="display:none;"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'OTML Delivery No'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P4a', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Goods Receipt - GRN'),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P4i', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'GRN Item '),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P4ii', 10, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;',' ALIGN="LEFT"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_438),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P1', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Line '),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P1a', 10, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Material No'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'p4aa', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
htp.tablerowopen;
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   if v_direction = 'O' then
      htp.tabledata( htf.bold('DAN Number'),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   else 
      htp.tabledata( htf.bold( LNGS.STR_TXT_439),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   end if;
   htp.tabledata( htf.formtext( 'P2', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_440), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P3', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;',' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Convoy ID'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P7C', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;',' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Convoy Date'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P8C', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'DD-Mon-YYYY'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;',' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Container/Connote/Mawb'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P5', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Seal'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P6', 10, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
   htp.tablerowopen;
   htp.tablerowclose;
   htp.tablerowopen;
   
   htp.tabledata( '&nbsp;',' ALIGN="LEFT"');
   if v_direction = 'I' then
      htp.tabledata( htf.formradio( 'P9','T','CHECKED' ) || ' ' || htf.bold( 'Inbound Search') || htf.nl ||
                         htf.formradio( 'P9','N' ) || ' ' || htf.bold( 'Outbound Search'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   else
      htp.tabledata( htf.formradio( 'P9','T' ) || ' ' || htf.bold( 'Inbound Search') || htf.nl ||
                         htf.formradio( 'P9','N','CHECKED' ) || ' ' || htf.bold( 'Outbound Search'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
   
   htp.tablerowclose;                      
  
htp.tableclose;
htp.nl;
htp.p('<CENTER>');
htp.formsubmit( null, LNGS.STR_TXT_441 );
htp.nl;
htp.formclose;
if supplier_id is not null or customer_id is not null then goto CUSTOMER_BYPASS; end if;
if seclevel not in ( 'LEVEL 1' ) then
   htp.formopen( 'STRANGP.ctrs_mass_png_alln' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'PARM', 'STRANGP.CTRS_MASS_PNG_ALLN' );
 --  htp.formhidden( 'ACCESS_ID', access_id );   --  vaccess := data_access( owner_id, parm, null );
   htp.p('<TD VALIGN="TOP" COLSPAN=3>');
   htp.formsubmit( 'ACTION', 'Inbound: Ship Cargo At POM' );htp.nl;htp.nl;
   htp.formclose;
else
   htp.p('<TD VALIGN="TOP" COLSPAN=3>');
end if;

if seclevel not in ( 'LEVEL 1' ) then
   htp.formopen( 'LOAD_SHIP_PLAN.local_ship_plan_mng', ctarget=>'ASSIGN' );
   htp.formhidden( 'SURL', surl );
  -- htp.formhidden( 'PARM', 'LOAD_SHIP_PLAN.local_ship_plan_mng' );
 --  htp.formhidden( 'ACCESS_ID', access_id );   --  vaccess := data_access( owner_id, parm, null );
 --  htp.p('<TD VALIGN="TOP" COLSPAN=3>');
   htp.formsubmit( 'ACTION', 'Inbound: Load Ship Plan At POM' );htp.nl;htp.nl;
   htp.formclose;
end if;


   htp.formopen( 'STRANGP.download_cargo_csv' );
   htp.formhidden( 'SURL', surl );
   htp.formsubmit( 'ACTION', 'Inbound: POM Import International Cargo - SEA' );htp.nl;htp.nl;
   htp.formsubmit( 'ACTION', 'Inbound: POM Import International Cargo - AIR' );htp.nl;htp.nl;
   htp.formsubmit( 'ACTION', 'Inbound: POM Local Deliveries' );htp.nl;htp.nl;
   htp.formsubmit( 'ACTION', 'Inbound: POM Ctrs Awaiting Local Ship' );htp.nl;htp.nl;
   htp.formsubmit( 'ACTION', 'Inbound: Project Cargo' );htp.nl;htp.nl;
   htp.formsubmit( 'ACTION', 'Inbound: CRP Site' );htp.nl;htp.nl;
-- htp.formsubmit( 'ACTION', 'Inbound: W131 Ctrs Awaiting Local Ship' );htp.nl;htp.nl;
--  htp.formsubmit( 'ACTION', 'Inbound: W131 Ctrs Awaiting Convoy' );htp.nl;htp.nl;
   htp.formsubmit( 'ACTION', 'Inbound: Kiunga Cargo' );htp.nl;htp.nl;
   htp.formsubmit( 'ACTION', 'Inbound: Kiunga Ctrs Awaiting Convoy' );htp.nl;htp.nl;
   htp.formsubmit( 'ACTION', 'Current Receipted Purchase Orders' );   
   htp.formclose;
   htp.p('</TD>');
   htp.formclose;
htp.p('</CENTER>');
htp.p('</TD>');

-- Southbound Ships Start
htp.p('<TD valign="TOP">');
-- htp.p('Southbound Ships');
 htp.nl;

 if seclevel not in ( 'LEVEL 1' ) then
    htp.formopen( 'STRANGP.ctrs_mass_png_alls' );
    htp.formhidden( 'SURL', surl );
    htp.formhidden( 'PARM', 'STRANGP.CTRS_MASS_PNG_ALLS' );
    htp.formhidden( 'VLOC', 'TABUBIL' );
  --  htp.formhidden( 'ACCESS_ID', access_id );   --  vaccess := data_access( owner_id, parm, null );
    htp.p('<TD VALIGN="TOP" COLSPAN=1>');
    htp.formsubmit( 'ACTION', 'Outbound: Ship Cargo At Tabubil' );htp.nl;htp.nl;
    htp.formclose;
 end if;

  if seclevel not in ( 'LEVEL 1' ) then
     htp.formopen( 'STRANGP.ctrs_mass_png_alls' );
     htp.formhidden( 'SURL', surl );
     htp.formhidden( 'PARM', 'STRANGP.CTRS_MASS_PNG_ALLS' );
     htp.formhidden( 'VLOC', 'KIUNGA' );
   --  htp.formhidden( 'ACCESS_ID', access_id );   --  vaccess := data_access( owner_id, parm, null );
     htp.formsubmit( 'ACTION', 'Outbound: Ship Cargo At Kiunga' );htp.nl;htp.nl;
     htp.formclose;
  end if;

  if seclevel not in ( 'LEVEL 1' ) then
     htp.formopen( 'STRANGP.ctrs_mass_png_alls' );
     htp.formhidden( 'SURL', surl );
     htp.formhidden( 'PARM', 'STRANGP.CTRS_MASS_PNG_ALLS' );
    htp.formhidden( 'VLOC', 'MOTUKEA' );
   --  htp.formhidden( 'ACCESS_ID', access_id );   --  vaccess := data_access( owner_id, parm, null );
     htp.formsubmit( 'ACTION', 'Outbound: Ship Cargo At POM' );htp.nl;htp.nl;
     htp.formclose;
  end if;

    if seclevel not in ( 'LEVEL 1' ) then
       htp.formopen( 'STRANGP.ctrs_mass_png_alls' );
       htp.formhidden( 'SURL', surl );
       htp.formhidden( 'PARM', 'STRANGP.CTRS_MASS_PNG_ALLS' );
      htp.formhidden( 'VLOC', 'BRISBANE' );
     --  htp.formhidden( 'ACCESS_ID', access_id );   --  vaccess := data_access( owner_id, parm, null );
       htp.formsubmit( 'ACTION', 'Outbound: Ship Cargo At Brisbane' );htp.nl;htp.nl;
       htp.formclose;
    end if;


/* -- old search for southbound disabled 16 April 2020
 htp.formopen( 'strangsb.accept_trac_search' );
 htp.formhidden( 'SURL', surl );
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_437 || ':'),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Consignee Name'),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P1', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Customs Authority Number'),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P2', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Container Number' ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P3', 20, 100 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'OTML DAN Number' ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P4', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'OTML Tracking Order Number'),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P5', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Date Range From'),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P6', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Date Range To'),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P7', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tabledata( '&nbsp;', ' ALIGN="LEFT" COLSPAN=3');
  htp.tablerowclose;
htp.tableclose;
htp.nl;
htp.p('<CENTER>');
htp.formsubmit( null, LNGS.STR_TXT_441 );
htp.nl;

htp.formclose;

   htp.formopen( 'strangsb.ctrs_mass_png_all' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'PARM', 'CTRS_MASS_PNG_ALL' );
 --  htp.formhidden( 'ACCESS_ID', access_id );   --  vaccess := data_access( owner_id, parm, null );
   htp.p('<TD VALIGN="TOP" COLSPAN=3>');
   htp.formsubmit( 'ACTION', 'Current Southbound Cargo' );
   htp.p('</TD>');
   htp.formclose;

*/

htp.p('</CENTER>');
htp.p('</TD>');
-- Southbound Ships End
<<CUSTOMER_BYPASS>>

htp.tablerowclose;

htp.nl;
htp.nl;
-- htp.italic( LNGS.STR_TXT_447 );
-- htp.p( '</CENTER>' );
htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'TRAC_SEARCH',null,owner_id,errmsg=>sqlerrm);
end trac_search;


procedure accept_trac_search( surl in varchar2, p1 in varchar2, p1a in varchar2, p2 in varchar2, p3 in varchar2, p4 in varchar2, p4i in varchar2, p4ii in varchar2, p4a in varchar2, p5 in varchar2, p6 in varchar2, p4aa in varchar2, p7c in varchar2, p8c in varchar2, p9 in varchar2 )
as

 cursor c21(po_nmbr varchar2, po_line varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2 ) is
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit ||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
              else to_char(p.deliveryno) end deliveryno,
         dr.itemno,
         --dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r
  where --- dr.movement_no is not null and
        p.deliveryno = dr.deliveryno and
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
        r.io = v_io and 
        (trim(p.po) = po_nmbr and p.po_item_no = po_line) and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
		r.currdate >= sysdate-720
        order by r.currdate desc, p.po, p.po_item_no, p.supinv,dr.logno
             , case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                   else to_char(p.deliveryno) end ; --p.deliveryno;

 cursor c22(po_nmbr varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2 ) is
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
        case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
              else to_char(p.deliveryno) end deliveryno,
         --p.deliveryno,
         dr.itemno,
         -- dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r
  where -- dr.movement_no is not null and
        p.deliveryno = dr.deliveryno and
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
        r.io = v_io and 
        trim(p.po) = po_nmbr and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
	r.currdate >= sysdate-720
        order by r.currdate desc, p.po, p.po_item_no, p.supinv,dr.logno,  
             case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                   else to_char(p.deliveryno) end ;  --p.deliveryno;

 cursor c23(gr varchar2, gritem varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2 ) is
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
              else to_char(p.deliveryno) end deliveryno,
         --p.deliveryno,
         dr.itemno,
         --dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r
  where -- dr.movement_no is not null and
        p.deliveryno = dr.deliveryno and
        r.io = v_io and 
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
	 (gr=p.grn and p.grn_item = gritem) and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
	 r.currdate >= sysdate-720
        order by r.currdate desc, p.po, p.po_item_no, p.supinv,dr.logno, 
                 case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                      else to_char(p.deliveryno) end; --p.deliveryno;

 cursor c24(gr varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2) is
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
              else to_char(p.deliveryno) end deliveryno,
         --p.deliveryno,
         dr.itemno,
         --dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r
  where -- dr.movement_no is not null and
        p.deliveryno = dr.deliveryno and
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        r.io = v_io and 
        p.deliveryno = r.deliveryno and
	    gr=p.grn and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
	    r.currdate >= sysdate-720
        order by r.currdate desc, p.po, p.po_item_no, p.supinv,dr.logno, 
                case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                       else to_char(p.deliveryno) end; --p.deliveryno;

 cursor c25(supinv_val varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2 ) is
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
              else to_char(p.deliveryno) end deliveryno,
         --p.deliveryno,
         dr.itemno,
         --dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r
  where -- dr.movement_no is not null and
        p.deliveryno = dr.deliveryno and
        r.io = v_io and 
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
        supinv_val = p.supinv and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
	r.currdate >= sysdate-720
        order by r.currdate desc, p.po, p.po_item_no, p.supinv,dr.logno, 
                 case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                        else to_char(p.deliveryno) end; --p.deliveryno;


 cursor c26(invent varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2 ) is
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
              else to_char(p.deliveryno) end deliveryno,
         --p.deliveryno,
         dr.itemno,
         --dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r
  where -- dr.movement_no is not null and
        p.deliveryno = dr.deliveryno and
        r.io = v_io and 
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
        invent = p.inventoryno	and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
	r.currdate >= sysdate-1200
        order by r.currdate desc, p.po, p.po_item_no, p.supinv,dr.logno
                , case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                          else to_char(p.deliveryno) end; --p.deliveryno;

 cursor c27(otmldelno varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2) is
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                          else to_char(p.deliveryno) end deliveryno,
         --p.deliveryno,
         dr.itemno,
         --dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r
  where -- dr.movement_no is not null and
        p.deliveryno = dr.deliveryno and
        r.io = v_io and 
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
        otmldelno = p.sap_delno and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
	r.currdate >= sysdate-1200
        order by r.currdate desc, p.po, p.po_item_no, p.supinv,dr.logno, 
                 case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                          else to_char(p.deliveryno) end; --p.deliveryno;

 cursor c28(sname varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2 ) is
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                 else to_char(p.deliveryno) end deliveryno,
        -- p.deliveryno,
         dr.itemno,
         --dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r
  where -- dr.movement_no is not null and
        p.deliveryno = dr.deliveryno and
        r.io = v_io and 
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
        c1.customer like sname || '%' and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
        r.currdate >= sysdate-1200
        order by r.currdate desc, p.po, p.po_item_no, p.supinv,dr.logno,
                 case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                     else to_char(p.deliveryno) end; --p.deliveryno;

 cursor c29(dlr varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2) is
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                 else to_char(p.deliveryno) end deliveryno,
         --p.deliveryno,
         dr.itemno,
         --dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r
  where -- dr.movement_no is not null and
        p.deliveryno = dr.deliveryno and
        r.io = v_io and 
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
        dlr = dr.deliveryno	and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
	r.currdate >= sysdate-1200
        order by r.currdate desc, p.po, p.po_item_no, p.supinv,dr.logno,
                case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                     else to_char(p.deliveryno) end; --p.deliveryno;

 cursor c30(mvn varchar2, sl varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2) is
  select 
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then f_receival_link(r.rowid, p.deliveryno, surl)
                 else to_char(p.deliveryno) end deliveryno,
         --p.deliveryno,
         dr.itemno,
         --dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r
  where dr.movement_no is not null and
        p.deliveryno = dr.deliveryno and
        r.io = v_io and 
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
        ((mvn = dr.movement_no) or (mvn = dr.movement_no_2 and dr.sa = 'A')) and
        nvl(sl,'|') = nvl(dr.camov_seal,'|') and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
        r.currdate >= sysdate-1200
order by r.currdate desc, p.po, p.po_item_no, p.supinv,dr.logno
        , case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                  else to_char(p.deliveryno) end; --p.deliveryno;

 cursor c31(mvn varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2) is
 select *
 from 
  (
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                else to_char(p.deliveryno) end deliveryno,
         --p.deliveryno,
         dr.itemno,
         --dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r
  where dr.movement_no is not null and
        p.deliveryno = dr.deliveryno and
        r.io = v_io and 
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
        ((mvn = dr.movement_no) or (mvn = dr.movement_no_2 and dr.sa = 'A')) and
      --  mvn = dr.movement_no and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
	r.currdate >= sysdate-1200
    union all
    select 
         distinct
         m.io,
         null as po,
         null as po_item_no,
         '&nbsp;' as inventoryno,
         '&nbsp;' as supinv,
         null as grn,
         null as grn_item,
         null as sap_delno,
         null as sap_delno_item,
         '1 EMPTY Container' quantity,
         '&nbsp;' as logno,
         null as deliveryno,
         null as itemno,
         null as connote,
         null as dispatch_date,
         null as currdate,
         '&nbsp;' as supplier,
         'Sea' as mode_of_transport,
         ss2.shipname || '&nbsp;&nbsp;' || ss2.voy || htf.nl || 'Bill '||to_char(m.bol)|| htf.nl|| 'M/Line '||'&nbsp;'|| htf.nl||'ETD: '|| to_char(ss2.estdepart)||htf.nl||'ETA: '||to_char(ss2.estarrive) vy,
         ss1.shipname || '&nbsp;&nbsp;' || ss1.voy || htf.nl || 'Bill '||to_char(m.local_bol)|| htf.nl|| 'M/Line '||'&nbsp;'|| htf.nl||'ETD: '|| to_char(ss1.estdepart)||htf.nl||'ETA: '||to_char(ss1.estarrive) local_vy,
         nvl(to_char(ss2.estarrive),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(ss2.portdisc),'&nbsp;') eta, 
         nvl(case when ss1.status <> 'INCOMPLETE'
           then
              nvl(to_char(ss1.estarrive),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(ss1.portdisc),'&nbsp;')
             else
              nvl(to_char(ss1.estarrive)|| htf.nl ||' DRAFT ONLY - NOT CONFIRMED','&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(ss1.portdisc),'&nbsp;')
          end,'&nbsp;') as leta,
        nvl(case when cn.status = 'PLANNING'  
          then 'Convoy: '||htf.nl||cn.convoy_id||' Scheduled '||htf.nl||nvl(to_char(cn.estdepart),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(cn.portdisc),'&nbsp;')
             when cn.status = 'FINAL' 
          then 'Convoy: '||htf.nl||cn.convoy_id||' Confirmed '||htf.nl||nvl(to_char(cn.estdepart),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(cn.portdisc),'&nbsp;')
          end,'&nbsp;') as ceta,         
         nvl(strang.f_getlocdesc(m.current_location),'&nbsp;')  current_location,  
         'Container '||nvl(m.movement_no,' ') cargo, 
         m.urgency as priority,  
         nvl(to_char(m.consignee||htf.nl||m.consignee_location||htf.nl||strang.f_getlocdesc(m.consignee_location)||htf.nl||m.warehouse_destination||htf.nl||strang.f_getlocdesc(m.warehouse_destination) ),' ') consignee_destination,
         nvl(to_char(m.customs_cleared_date),'&nbsp;') customs, -- new
         htf.nl||'Container Owner: '||to_char(m.owner) as owner
     from strang.movements m, strang.ships_airway ss1, strang.ships_airway ss2, strang.convoy cn
     where m.movement_no is not null and
       mvn = m.movement_no and
        m.io = v_io and 
        m.io = 'O' and
        m.full_mt = 'EMPTY' and
        m.movement_type = 'CARGO' and
        ss1.ship_id = m.local_ship_id and
        ss2.ship_id = m.ship_id and
        cn.convoy_id (+) = m.convoy_id) tmp
     order by currdate desc, po, po_item_no, supinv, logno, deliveryno, local_vy, vy;

----------------------------------- NEW QUERY FOR CONVOY AND CONVOY DATE
 cursor c32(convoyid varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2) is
  select *
  from 
  (
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                else to_char(p.deliveryno) end deliveryno,
        -- p.deliveryno,
         dr.itemno,
         --dr.connote,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r, strang.movements m
  where dr.movement_no = m.movement_no and
        nvl(dr.camov_seal,'|') = nvl(m.seal,'|') and
        r.io = v_io and 
        p.deliveryno = dr.deliveryno and
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
        convoyid = m.convoy_id and
		    (c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		    (s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
	r.currdate >= sysdate-1200
	union all
    select 
         distinct
         m.io,
         null as po,
         null as po_item_no,
         '&nbsp;' as inventoryno,
         '&nbsp;' as supinv,
         null as grn,
         null as grn_item,
         null as sap_delno,
         null as sap_delno_item,
         '1 EMPTY Container' quantity,
         '&nbsp;' as logno,
         null as deliveryno,
         null as itemno,
         null as connote,
         null as dispatch_date,
         null as currdate,
         '&nbsp;' as supplier,
         'Sea' as mode_of_transport,
         ss2.shipname || '&nbsp;&nbsp;' || ss2.voy || htf.nl || 'Bill '||to_char(m.bol)|| htf.nl|| 'M/Line '||'&nbsp;'|| htf.nl||'ETD: '|| to_char(ss2.estdepart)||htf.nl||'ETA: '||to_char(ss2.estarrive) vy,
         ss1.shipname || '&nbsp;&nbsp;' || ss1.voy || htf.nl || 'Bill '||to_char(m.local_bol)|| htf.nl|| 'M/Line '||'&nbsp;'|| htf.nl||'ETD: '|| to_char(ss1.estdepart)||htf.nl||'ETA: '||to_char(ss1.estarrive) local_vy,
         nvl(to_char(ss2.estarrive),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(ss2.portdisc),'&nbsp;') eta, 
         nvl(case when ss1.status <> 'INCOMPLETE'
           then
              nvl(to_char(ss1.estarrive),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(ss1.portdisc),'&nbsp;')
             else
              nvl(to_char(ss1.estarrive)|| htf.nl ||' DRAFT ONLY - NOT CONFIRMED','&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(ss1.portdisc),'&nbsp;')
          end,'&nbsp;') as leta,
         nvl(case when cn.status = 'PLANNING'  
          then 'Convoy: '||htf.nl||cn.convoy_id||' Scheduled '||htf.nl||nvl(to_char(cn.estdepart),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(cn.portdisc),'&nbsp;')
             when cn.status = 'FINAL' 
          then 'Convoy: '||htf.nl||cn.convoy_id||' Confirmed '||htf.nl||nvl(to_char(cn.estdepart),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(cn.portdisc),'&nbsp;')
          end,'&nbsp;') as ceta,         
         nvl(strang.f_getlocdesc(m.current_location),'&nbsp;')  current_location,  
         'Container '||nvl(m.movement_no,' ') cargo, 
         m.urgency as priority,  
         nvl(to_char(m.consignee||htf.nl||m.consignee_location||htf.nl||strang.f_getlocdesc(m.consignee_location)||htf.nl||m.warehouse_destination||htf.nl||strang.f_getlocdesc(m.warehouse_destination) ),' ') consignee_destination,
         nvl(to_char(m.customs_cleared_date),'&nbsp;') customs, -- new
         htf.nl||'Container Owner: '||to_char(m.owner) as owner
     from strang.movements m, strang.ships_airway ss1, strang.ships_airway ss2, strang.convoy cn
     where m.movement_no is not null and
        convoyid = m.convoy_id and
        m.io = v_io and 
        m.io = 'O' and
        m.full_mt = 'EMPTY' and
        m.movement_type = 'CARGO' and
        ss1.ship_id = m.local_ship_id and
        ss2.ship_id = m.ship_id and
        cn.convoy_id = m.convoy_id) tmp	
      order by currdate desc, po, po_item_no, supinv, logno, deliveryno, local_vy, vy;
----------------------------------- NEW QUERY FOR CONVOY DATE

 cursor c33(convoydate varchar2, vste varchar2, c_id integer, s_id integer, v_io varchar2, v_delno varchar2 ) is
  select *
  from 
  (
  select /*+ ALL_ROWS */
         distinct
         r.io,
         p.po,
         p.po_item_no,
         p.inventoryno,
         p.supinv,
         p.grn,
         p.grn_item,
         p.sap_delno,
         p.sap_delno_item,
         p.sap_delno_qty||' '|| p.sap_delno_unit||htf.nl|| 'Packaged In: '||dr.qty||' '||dr.pktpe_packtype quantity,
         dr.logno,
         case when v_delno = '0' or v_delno =  substr(to_char(p.deliveryno),1,1) then  f_receival_link(r.rowid, p.deliveryno, surl)
                else to_char(p.deliveryno) end deliveryno,
         --p.deliveryno,
         dr.itemno,
         trim(nvl(dr.connote,'')||case when dr.warehouse = 'ON HOLD' then ' ON HOLD' else '' end) connote,
         dr.dispatch_date,
         r.currdate,
         c1.customer supplier,
         decode(dr.sa,'S','Sea','A','Air') mode_of_transport,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'I')) vy,
         decode(dr.sa,'S',strang.f_getshipdetails(p.deliveryno,dr.itemno,'L'),'A',strang.f_getAirdetails(p.deliveryno,dr.itemno,'L')) local_vy,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'I'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'I')) eta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'L'),'A','&nbsp;') leta,
         decode(dr.sa,'S',strang.f_getShipDates(p.deliveryno,dr.itemno,'C'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L')) ceta,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L1')) current_location,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CARGO') cargo,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'PRIORITY') priority,
         decode(dr.sa,'S',strang.f_getMvFields(p.deliveryno,dr.itemno,'CONSIGNEE_DESTINATION'),'A',strang.f_getAirDates(p.deliveryno,dr.itemno,'L2')) consignee_destination,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'CUSTOMS') customs,
         strang.f_getMvFields(p.deliveryno,dr.itemno,'OWNER') owner
  from strang.pos p, strang.detailrs dr, strang.customers c1, strang.receivals r, strang.movements m, strang.convoy c
  where dr.movement_no = m.movement_no and
        nvl(dr.camov_seal,'|') = nvl(m.seal,'|') and
        p.deliveryno = dr.deliveryno and
        r.io = v_io and 
        nvl(r.supplier_customer_id,0) = c1.customer_id and
        c1.customer_type = 'SUPPLIER' and
        p.deliveryno = r.deliveryno and
        c.convoy_id = m.convoy_id and
        glbx.guess_date(convoydate) = nvl(c.estdepart,c.estarrive) and
		(c_id is null or (c_id is not null and r.cust_customer_id = c_id)) and
		(s_id is null or (s_id is not null and r.supplier_customer_id = s_id)) and
	    r.currdate >= sysdate-1200
   	union all
    select distinct
         m.io,
         null as po,
         null as po_item_no,
         '&nbsp;' as inventoryno,
         '&nbsp;' as supinv,
         null as grn,
         null as grn_item,
         null as sap_delno,
         null as sap_delno_item,
         '1 EMPTY Container' quantity,
         '&nbsp;' as logno,
         null as deliveryno,
         null as itemno,
         null as connote,
         null as dispatch_date,
         null as currdate,
         '&nbsp;' as supplier,
         'Sea' as mode_of_transport,
         ss2.shipname || '&nbsp;&nbsp;' || ss2.voy || htf.nl || 'Bill '||to_char(m.bol)|| htf.nl|| 'M/Line '||'&nbsp;'|| htf.nl||'ETD: '|| to_char(ss2.estdepart)||htf.nl||'ETA: '||to_char(ss2.estarrive) vy,
         ss1.shipname || '&nbsp;&nbsp;' || ss1.voy || htf.nl || 'Bill '||to_char(m.local_bol)|| htf.nl|| 'M/Line '||'&nbsp;'|| htf.nl||'ETD: '|| to_char(ss1.estdepart)||htf.nl||'ETA: '||to_char(ss1.estarrive) local_vy,
         nvl(to_char(ss2.estarrive),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(ss2.portdisc),'&nbsp;') eta, 
         nvl(case when ss1.status <> 'INCOMPLETE'
           then
              nvl(to_char(ss1.estarrive),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(ss1.portdisc),'&nbsp;')
             else
              nvl(to_char(ss1.estarrive)|| htf.nl ||' DRAFT ONLY - NOT CONFIRMED','&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(ss1.portdisc),'&nbsp;')
          end,'&nbsp;') as leta,
         nvl(case when cn.status = 'PLANNING'  
          then 'Convoy: '||htf.nl||cn.convoy_id||' Scheduled '||htf.nl||nvl(to_char(cn.estdepart),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(cn.portdisc),'&nbsp;')
             when cn.status = 'FINAL' 
          then 'Convoy: '||htf.nl||cn.convoy_id||' Confirmed '||htf.nl||nvl(to_char(cn.estdepart),'&nbsp;')||htf.nl||nvl(strang.f_getlocdesc(cn.portdisc),'&nbsp;')
          end,'&nbsp;') as ceta,         
         nvl(strang.f_getlocdesc(m.current_location),'&nbsp;')  current_location,  
         'Container '||nvl(m.movement_no,' ') cargo, 
         m.urgency as priority,  
         nvl(to_char(m.consignee||htf.nl||m.consignee_location||htf.nl||strang.f_getlocdesc(m.consignee_location)||htf.nl||m.warehouse_destination||htf.nl||strang.f_getlocdesc(m.warehouse_destination) ),' ') consignee_destination,
         nvl(to_char(m.customs_cleared_date),'&nbsp;') customs, -- new
         htf.nl||'Container Owner: '||to_char(m.owner) as owner
     from strang.movements m, strang.ships_airway ss1, strang.ships_airway ss2, strang.convoy cn
     where m.movement_no is not null and
        glbx.guess_date(convoydate) = nvl(cn.estdepart,cn.estarrive) and
        m.io = v_io and 
        m.io = 'O' and
        m.full_mt = 'EMPTY' and
        m.movement_type = 'CARGO' and
        ss1.ship_id = m.local_ship_id and
        ss2.ship_id = m.ship_id and
        cn.convoy_id = m.convoy_id) tmp	
        order by currdate desc, po, po_item_no, supinv,logno,deliveryno, local_vy, vy;

  cursor c34(v_loc varchar2 ) is
   select case when b.description = 'YES' then '0' else substr(a.description,1,1) end delno
     from strang.lov a, strang.lov b
    where a.lov_name = 'CONTROLS'
    and  a.code = 'DELIVERYNO'
    and a.lov_name = b.lov_name
    and b.code = 'SEE_ALL_DELIVERIES'
    and b.cola = a.cola
    and b.cola = v_loc;

  
-------------------------------------END NEW QUERY FOR CONVOY AND CONVOY DATE

 c1rec		customer_account%ROWTYPE;
 c34rec     c34%rowtype;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 nmb		integer;
 clr		varchar2(100);
 sts		varchar2(100);
 vste		varchar2(10);
 customer_id  integer;
 supplier_id  integer;
 v_direction  varchar2(10);
 v_io         char(1);
 v_delno      char(1);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.TRAC_SEARCH' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 customer_id := get_customer_id(c1rec.aid);
 supplier_id := get_customer_id(c1rec.aid, 'SUPPLIER_ID');
 
 open c34 (vste);
 fetch c34 into c34rec;
 close c34;

 glbx.main_title( surl, LNGS.STR_TXT_443,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR16',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 if P9 = 'T' then
   v_direction := 'INBOUND';
   v_io := 'I';
 else
   v_direction := 'OUTBOUND';
   v_io := 'O';
 end if;
 
 htp.p( '<CENTER>' );
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=0' );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_444 ), ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( LNGS.STR_TXT_445 ), ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_446 ), ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
   htp.tablerowopen;
   htp.tabledata( htf.bold( v_direction ), ' ALIGN="CENTER"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
 htp.tableclose;

 -- Alternate Colours + Header Colour
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
   htp.tabledata( htf.bold( 'Direction'), ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Purchase Order & Line'||htf.nl||'Supplier'), ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Material No'|| htf.nl ||'Description'), ' ALIGN="CENTER"');
   htp.tabledata( htf.bold( 'Goods Receipt'|| htf.nl ||'Received Qty'||htf.nl||'Unit'), ' ALIGN="CENTER"');
  if v_io = 'I' then 
     htp.tabledata( htf.bold( 'Supplier'|| htf.nl ||'Invoice'), ' ALIGN="CENTER"');
  else
     htp.tabledata( htf.bold( 'DAN'|| htf.nl ||'Number'), ' ALIGN="CENTER"');
  End if;
   htp.tabledata( htf.bold( 'Strang Log'|| htf.nl ||'Delivery & Item Nos'|| htf.nl ||'Date Received'||htf.nl ||'Connote/On Hold'||htf.nl ||'Dispatch Date'|| htf.nl ||'Shipping Mode'), 'ALIGN="CENTER" style="width:160px;"');
  
   if v_io = 'O' then  
      htp.tabledata( htf.bold( 'Consolidation'), ' ALIGN="CENTER"');  -- moved
      htp.tabledata( htf.bold( 'Priority'), ' ALIGN="CENTER"'); -- just moved
      htp.tabledata( htf.bold( 'ETA'|| htf.nl ||'First Port' ), ' ALIGN="CENTER"', cnowrap=>'Y');
   end if; 

  
  if v_io = 'I' then 
     htp.tabledata( htf.bold( 'International Ship/Voyage'), ' ALIGN="CENTER"');
  else
     htp.tabledata( htf.bold( 'Local Ship/Voyage'), ' ALIGN="CENTER"');
     htp.tabledata( htf.bold( 'ETA'|| htf.nl ||'Second Port' ), ' ALIGN="CENTER"',cnowrap=>'Y');
  end if;
  
  if v_io = 'I' then 
     htp.tabledata( htf.bold( 'Local Ship/Voyage'), ' ALIGN="CENTER"');
  else
     htp.tabledata( htf.bold( 'International Ship/Voyage'), ' ALIGN="CENTER"');
     htp.tabledata( htf.bold( 'ETA'|| htf.nl ||'Third Port' ), ' ALIGN="CENTER"',cnowrap=>'Y');
  end if;

 --  htp.tabledata( htf.bold( 'ETA Port Moresby' ), ' ALIGN="CENTER"');
   if v_io = 'I' then 
      htp.tabledata( htf.bold( 'Consolidation'), ' ALIGN="CENTER"');  -- moved
      htp.tabledata( htf.bold( 'Priority'), ' ALIGN="CENTER"'); -- just moved
      htp.tabledata( htf.bold( 'ETA'|| htf.nl ||'First Port' ), ' ALIGN="CENTER"', cnowrap=>'Y');
      htp.tabledata( htf.bold( 'Customs'|| htf.nl ||'Cleared Date'), ' ALIGN="CENTER"');  -- customs
      htp.tabledata( htf.bold( 'ETA'|| htf.nl ||'Second Port' ), ' ALIGN="CENTER"',cnowrap=>'Y');
   end if;
   
--   if v_io = 'O' then        
--      htp.tabledata( htf.bold( 'Customs'|| htf.nl ||'Cleared Date'), ' ALIGN="CENTER"');  -- customs
--   end if;
   
   if v_io = 'I' then  
      htp.tabledata( htf.bold( 'ETA'|| htf.nl ||'Third Port' ), ' ALIGN="CENTER"',cnowrap=>'Y');
       --  htp.tabledata( htf.bold( 'ETA Tabubil' ), ' ALIGN="CENTER"');
   end if;
   
 --  htp.tabledata( htf.bold( 'PNG Customs'|| htf.nl ||'Cleared Date'), ' ALIGN="CENTER"');  -- customs moved
 --  htp.tabledata( htf.bold( 'ETA Kiunga' ), ' ALIGN="CENTER"'); -- second port movedd

   htp.tabledata( htf.bold( 'Current Location'), ' ALIGN="CENTER"');  -- current location
   htp.tabledata( htf.bold( 'Destination'), ' ALIGN="CENTER"');  -- consignee

  htp.tablerowclose;

 -- If the deliveryno is invalid set it to 0. Query will return no rows.
 begin nmb := to_number(p4); exception when others then nmb := 0; end;

--- 20170524
if (trim(p1) is not null and trim(p1a) is not null) then
 for c21rec in c21(trim(p1),trim(p1a),vste, customer_id, supplier_id, v_io, c34rec.delno ) loop
  if mod(c21%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c21rec.io = 'I' then
     htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
     htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
  
  htp.tabledata( nvl(c21rec.po,'&nbsp;') || htf.nl || nvl(to_char(c21rec.po_item_no),'&nbsp;') || htf.nl || nvl(to_char(c21rec.supplier),'&nbsp;') , cattributes=> clr || ' ALIGN="LEFT"');
  htp.tabledata( nvl(c21rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c21rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
  htp.tabledata( nvl(to_char(c21rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c21rec.grn),'&nbsp;')||' '||nvl(to_char(c21rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c21rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  htp.tabledata( nvl(c21rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  htp.tabledata( nvl(c21rec.logno,'&nbsp;') || htf.nl || c21rec.deliveryno||'&nbsp;'||nvl(to_char(c21rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c21rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c21rec.connote,'&nbsp;') || htf.nl ||nvl(to_char(c21rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')|| htf.nl || c21rec.mode_of_transport, cattributes=> clr || ' ALIGN="LEFT"');
   
  if v_io = 'O' then  
     htp.tabledata( c21rec.cargo || c21rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c21rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c21rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c21rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c21rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c21rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c21rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c21rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c21rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c21rec.cargo || c21rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c21rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c21rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c21rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c21rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c21rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c21rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c21rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;

  elsif (trim(p1) is not null and trim(p1a) is null) then
 for c22rec in c22(trim(p1), vste, customer_id, supplier_id, v_io, c34rec.delno ) loop
  if mod(c22%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c22rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c22rec.po,'&nbsp;') || htf.nl || nvl(to_char(c22rec.po_item_no),'&nbsp;') || htf.nl || nvl(to_char(c22rec.supplier),'&nbsp;') , cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c22rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c22rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c22rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c22rec.grn),'&nbsp;')||' '||nvl(to_char(c22rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c22rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c22rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c22rec.logno,'&nbsp;') || htf.nl || c22rec.deliveryno||'&nbsp;'||nvl(to_char(c22rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c22rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c22rec.connote,'&nbsp;') || htf.nl ||nvl(to_char(c22rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')|| htf.nl || c22rec.mode_of_transport, cattributes=> clr || ' ALIGN="LEFT"');
  
   if v_io = 'O' then  
     htp.tabledata( c22rec.cargo || c22rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c22rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c22rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c22rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c22rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c22rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c22rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c22rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c22rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c22rec.cargo || c22rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c22rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c22rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c22rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c22rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c22rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c22rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c22rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;

 elsif (trim(p4i) is not null and trim(p4ii) is not null) then
 for c23rec in c23(trim(p4i),trim(p4ii), vste, customer_id, supplier_id, v_io, c34rec.delno ) loop
  if mod(c23%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c23rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c23rec.po,'&nbsp;') || htf.nl || nvl(to_char(c23rec.po_item_no),'&nbsp;') || htf.nl || nvl(to_char(c23rec.supplier),'&nbsp;') , cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c23rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c23rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c23rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c23rec.grn),'&nbsp;')||' '||nvl(to_char(c23rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c23rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c23rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c23rec.logno,'&nbsp;') || htf.nl || c23rec.deliveryno||'&nbsp;'||nvl(to_char(c23rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c23rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c23rec.connote,'&nbsp;') || htf.nl ||nvl(to_char(c23rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')||htf.nl|| c23rec.mode_of_transport, cattributes=> clr || ' ALIGN="LEFT"');
   
   if v_io = 'O' then  
     htp.tabledata( c23rec.cargo || c23rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c23rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c23rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c23rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c23rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c23rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c23rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c23rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c23rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c23rec.cargo || c23rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c23rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c23rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c23rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c23rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c23rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c23rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c23rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;

 elsif (trim(p4i) is not null and trim(p4ii) is null) then
 for c24rec in c24(trim(p4i), vste, customer_id, supplier_id, v_io, c34rec.delno ) loop
  if mod(c24%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c24rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c24rec.po,'&nbsp;') || htf.nl || nvl(to_char(c24rec.po_item_no),'&nbsp;') || htf.nl || nvl(to_char(c24rec.supplier),'&nbsp;') , cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c24rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c24rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c24rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c24rec.grn),'&nbsp;')||' '||nvl(to_char(c24rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c24rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c24rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c24rec.logno,'&nbsp;') || htf.nl || c24rec.deliveryno||'&nbsp;'||nvl(to_char(c24rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c24rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c24rec.connote,'&nbsp;') || htf.nl ||nvl(to_char(c24rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')||htf.nl ||c24rec.mode_of_transport, cattributes=> clr || ' ALIGN="LEFT"');
   
   if v_io = 'O' then  
     htp.tabledata( c24rec.cargo || c24rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c24rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c24rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c24rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c24rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c24rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c24rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c24rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c24rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c24rec.cargo || c24rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c24rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c24rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c24rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c24rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c24rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c24rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c24rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;

 elsif trim(p2) is not null then
 for c25rec in c25(trim(p2), vste, customer_id, supplier_id, v_io, c34rec.delno ) loop
  if mod(c25%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c25rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c25rec.po,'&nbsp;') || htf.nl || nvl(to_char(c25rec.po_item_no),'&nbsp;') || htf.nl || nvl(to_char(c25rec.supplier),'&nbsp;') , cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c25rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c25rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c25rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c25rec.grn),'&nbsp;')||' '||nvl(to_char(c25rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c25rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c25rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c25rec.logno,'&nbsp;') || htf.nl || c25rec.deliveryno||'&nbsp;'||nvl(to_char(c25rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c25rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c25rec.connote,'&nbsp;') || htf.nl ||nvl(to_char(c25rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')|| htf.nl || c25rec.mode_of_transport, cattributes=> clr || ' ALIGN="LEFT"');
   
   if v_io = 'O' then  
     htp.tabledata( c25rec.cargo || c25rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c25rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c25rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c25rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c25rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c25rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c25rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c25rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c25rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c25rec.cargo || c25rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c25rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c25rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c25rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c25rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c25rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c25rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c25rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;

   elsif trim(p4aa) is not null then
 for c26rec in c26(trim(p4aa), vste, customer_id, supplier_id, v_io, c34rec.delno ) loop
  if mod(c26%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c26rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c26rec.po,'&nbsp;') || htf.nl || nvl(to_char(c26rec.po_item_no),'&nbsp;') || htf.nl || nvl(to_char(c26rec.supplier),'&nbsp;') , cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c26rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c26rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c26rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c26rec.grn),'&nbsp;')||' '||nvl(to_char(c26rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c26rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c26rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c26rec.logno,'&nbsp;') || htf.nl || c26rec.deliveryno||'&nbsp;'||nvl(to_char(c26rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c26rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c26rec.connote,'&nbsp;') || htf.nl ||nvl(to_char(c26rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||c26rec.mode_of_transport, cattributes=> clr || ' ALIGN="LEFT"');
   
   if v_io = 'O' then  
     htp.tabledata( c26rec.cargo || c26rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c26rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c26rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c26rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c26rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c26rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c26rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c26rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c26rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c26rec.cargo || c26rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c26rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c26rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c26rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c26rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c26rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c26rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c26rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;
   elsif trim(p4a) is not null then
 for c27rec in c27(trim(p4a), vste, customer_id, supplier_id, v_io, c34rec.delno ) loop
  if mod(c27%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c27rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c27rec.po,'&nbsp;') || htf.nl || nvl(to_char(c27rec.po_item_no),'&nbsp;') || htf.nl || nvl(to_char(c27rec.supplier),'&nbsp;') , cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c27rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c27rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c27rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c27rec.grn),'&nbsp;')||' '||nvl(to_char(c27rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c27rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c27rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c27rec.logno,'&nbsp;') || htf.nl || c27rec.deliveryno||'&nbsp;'||nvl(to_char(c27rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c27rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c27rec.connote,'&nbsp;') || htf.nl ||nvl(to_char(c27rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')|| htf.nl || c27rec.mode_of_transport, cattributes=> clr || ' ALIGN="LEFT"');   htp.tabledata( c27rec.vy, cattributes=> clr || ' ALIGN="LEFT"');

   if v_io = 'O' then  
     htp.tabledata( c27rec.cargo || c27rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c27rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c27rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c27rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c27rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c27rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c27rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c27rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c27rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c27rec.cargo || c27rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c27rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c27rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c27rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c27rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c27rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c27rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c27rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;
   elsif trim(p3) is not null then
 for c28rec in c28(trim(p3), vste, customer_id, supplier_id, v_io, c34rec.delno ) loop
  if mod(c28%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c28rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c28rec.po,'&nbsp;') || htf.nl || nvl(to_char(c28rec.po_item_no),'&nbsp;') || htf.nl || nvl(to_char(c28rec.supplier),'&nbsp;') , cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c28rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c28rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c28rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c28rec.grn),'&nbsp;')||' '||nvl(to_char(c28rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c28rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c28rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c28rec.logno,'&nbsp;') || htf.nl || c28rec.deliveryno||'&nbsp;'||nvl(to_char(c28rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c28rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c28rec.connote,'&nbsp;') || htf.nl ||nvl(to_char(c28rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')|| htf.nl || c28rec.mode_of_transport, cattributes=> clr || ' ALIGN="LEFT"');

   if v_io = 'O' then  
     htp.tabledata( c28rec.cargo || c28rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c28rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c28rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c28rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c28rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c28rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c28rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c28rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c28rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c28rec.cargo || c28rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c28rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c28rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c28rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c28rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c28rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c28rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c28rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;

 elsif trim(p4) is not null then
 for c29rec in c29(trim(p4), vste, customer_id, supplier_id, v_io, c34rec.delno ) loop
  if mod(c29%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c29rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c29rec.po,'&nbsp;') || htf.nl || nvl(to_char(c29rec.po_item_no),'&nbsp;') || htf.nl || nvl(to_char(c29rec.supplier),'&nbsp;') , cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c29rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c29rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c29rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c29rec.grn),'&nbsp;')||' '||nvl(to_char(c29rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c29rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c29rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c29rec.logno,'&nbsp;') || htf.nl || c29rec.deliveryno||'&nbsp;'||nvl(to_char(c29rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c29rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c29rec.connote,'&nbsp;') || htf.nl ||nvl(to_char(c29rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')|| htf.nl || c29rec.mode_of_transport, cattributes=> clr || ' ALIGN="LEFT"');

   if v_io = 'O' then  
     htp.tabledata( c29rec.cargo || c29rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c29rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c29rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c29rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c29rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c29rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c29rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c29rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c29rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c29rec.cargo || c29rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c29rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c29rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c29rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c29rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c29rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c29rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c29rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;
   elsif (trim(p5) is not null and trim(p6) is not null) then
 for c30rec in c30(trim(p5),trim(p6), vste, customer_id, supplier_id, v_io, c34rec.delno ) loop
  if mod(c30%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c30rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c30rec.po,'&nbsp;') || htf.nl || nvl(to_char(c30rec.po_item_no),'&nbsp;') || htf.nl || nvl(to_char(c30rec.supplier),'&nbsp;') , cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c30rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c30rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c30rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c30rec.grn),'&nbsp;')||' '||nvl(to_char(c30rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c30rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c30rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c30rec.logno,'&nbsp;') || htf.nl || c30rec.deliveryno||'&nbsp;'||nvl(to_char(c30rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c30rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c30rec.connote,'&nbsp;')|| htf.nl ||nvl(to_char(c30rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')|| htf.nl || c30rec.mode_of_transport, cattributes=> clr || ' ALIGN="LEFT"');
 
   if v_io = 'O' then  
     htp.tabledata( c30rec.cargo || c30rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c30rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c30rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c30rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c30rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c30rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c30rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c30rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c30rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c30rec.cargo || c30rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c30rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c30rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c30rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c30rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c30rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c30rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c30rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;
   elsif (trim(p5) is not null and trim(p6) is null) then
 for c31rec in c31(trim(p5), vste, customer_id, supplier_id, v_io, c34rec.delno  ) loop
  if mod(c31%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c31rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c31rec.po,'&nbsp;') || htf.nl || nvl(to_char(c31rec.po_item_no),'&nbsp;') || htf.nl || nvl(to_char(c31rec.supplier),'&nbsp;') , cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c31rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c31rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c31rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c31rec.grn),'&nbsp;')||' '||nvl(to_char(c31rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c31rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c31rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c31rec.logno,'&nbsp;') || htf.nl || c31rec.deliveryno||'&nbsp;'||nvl(to_char(c31rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c31rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c31rec.connote,'&nbsp;') || htf.nl ||nvl(to_char(c31rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;' )|| htf.nl ||c31rec.mode_of_transport, cattributes=> clr || ' ALIGN="LEFT"');
   
   if v_io = 'O' then  
     htp.tabledata( c31rec.cargo || c31rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c31rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c31rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c31rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c31rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c31rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c31rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c31rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c31rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c31rec.cargo || c31rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c31rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c31rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c31rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c31rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c31rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c31rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c31rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;
elsif trim(p7c) is not null then
 for c32rec in c32(trim(p7c), vste, customer_id, supplier_id, v_io, c34rec.delno  ) loop
  if mod(c32%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c32rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c32rec.po,'&nbsp;') || htf.nl || nvl(to_char(c32rec.po_item_no),'&nbsp;')  || htf.nl || nvl(to_char(c32rec.supplier),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c32rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c32rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c32rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c32rec.grn),'&nbsp;')||' '||nvl(to_char(c32rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c32rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c32rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c32rec.logno,'&nbsp;') || htf.nl || c32rec.deliveryno||'&nbsp;'||nvl(to_char(c32rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c32rec.currdate,LNGS.STR_DATE_02),'&nbsp;')|| htf.nl ||nvl(c32rec.connote,'&nbsp;')||htf.nl||nvl(to_char(c32rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||c32rec.mode_of_transport , cattributes=> clr || ' ALIGN="LEFT"');

   if v_io = 'O' then  
     htp.tabledata( c32rec.cargo || c32rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c32rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c32rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c32rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c32rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c32rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c32rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c32rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c32rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c32rec.cargo || c32rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c32rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c32rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c32rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c32rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c32rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c32rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c32rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;

   elsif trim(p8c) is not null then
 for c33rec in c33(trim(p8c), vste, customer_id, supplier_id, v_io, c34rec.delno ) loop
  if mod(c33%ROWCOUNT,2) = 1
   then
    clr := glbx.QUERY_CELL_BACKGROUND;
   else
    clr := 'bgcolor="#FFFFFF"';
  end if;
  htp.tablerowopen;
  if c33rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  else
   htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
  end if;
   htp.tabledata( nvl(c33rec.po,'&nbsp;') || htf.nl || nvl(to_char(c33rec.po_item_no),'&nbsp;')  || htf.nl || nvl(to_char(c33rec.supplier),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c33rec.inventoryno,'&nbsp;')|| htf.nl || f_getMaterial(c33rec.inventoryno,true), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c33rec.sap_delno),'&nbsp;')|| htf.nl || nvl(to_char(c33rec.grn),'&nbsp;')||' '||nvl(to_char(c33rec.grn_item),'&nbsp;') || htf.nl || nvl(to_char(c33rec.quantity),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c33rec.supinv,'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(c33rec.logno,'&nbsp;') || htf.nl || c33rec.deliveryno||'&nbsp;'||nvl(to_char(c33rec.itemno),'&nbsp;')|| htf.nl || nvl(to_char(c33rec.currdate,LNGS.STR_DATE_02),'&nbsp;')||htf.nl||nvl(c33rec.connote,'&nbsp;')|| htf.nl ||nvl(to_char(c33rec.dispatch_date,LNGS.STR_DATE_02),'&nbsp;')|| htf.nl || c33rec.mode_of_transport , cattributes=> clr || ' ALIGN="LEFT"');

  if v_io = 'O' then  
     htp.tabledata( c33rec.cargo || c33rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( c33rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
     htp.tabledata( nvl(to_char(c33rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if; 
        
  if v_io = 'I' then  
     htp.tabledata( c33rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
  else    
     htp.tabledata( c33rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c33rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
  end if;
   
   if v_io = 'I' then  
      htp.tabledata( c33rec.local_vy, cattributes=> clr || ' ALIGN="LEFT"');
   else    
      htp.tabledata( c33rec.vy, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c33rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( c33rec.cargo || c33rec.owner, cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( c33rec.priority, cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c33rec.eta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"'); 
      htp.tabledata( nvl(to_char(c33rec.customs),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
      htp.tabledata( nvl(to_char(c33rec.leta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   if v_io = 'I' then  
      htp.tabledata( nvl(to_char(c33rec.ceta),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   end if;
   
   htp.tabledata( nvl(to_char(c33rec.current_location),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tabledata( nvl(to_char(c33rec.consignee_destination),'&nbsp;'), cattributes=> clr || ' ALIGN="LEFT"');
   htp.tablerowclose;
 end loop;

--   else result
end if;
--- 20170524

htp.tableclose;
htp.nl;
htp.nl;

 htp.formopen( 'strangp.accept_trac_search' );
 htp.formhidden( 'SURL', surl );
htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=1' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_437 || ':'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" ROWSPAN="19"');
   htp.tabledata( htf.bold( 'Strang Delivery No'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P4', 20, 100 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen (cattributes=>'style="display:none;"');
   htp.tabledata( htf.bold( 'OTML Delivery No'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P4a', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold( 'Goods Receipt - GRN'),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P4i', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'GRN Item '),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P4ii', 10, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_438),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P1', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Line '),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P1a', 10, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold( 'Material No'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'p4aa', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
htp.tablerowopen;
   if v_io = 'I' then
      htp.tabledata( htf.bold( LNGS.STR_TXT_439),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   else
      htp.tabledata( htf.bold( 'DAN Number' ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   end if;
   htp.tabledata( htf.formtext( 'P2', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_TXT_440), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P3', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold( 'Convoy ID'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P7C', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold( 'Convoy Date (DD-Mon-YYYY)'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P8C', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold( 'Container/Connote/Mawb'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P5', 20, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tabledata( htf.bold( 'Seal'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P6', 10, 100 ),cattributes=>glbx.QUERY_CELL_BACKGROUND ||  ' ALIGN="LEFT"');
   htp.tablerowclose;
  
   htp.tablerowopen;
 --  htp.tabledata( '&nbsp;',' ALIGN="LEFT"');
   if v_io = 'I' then
      htp.tabledata( htf.formradio( 'P9','T','CHECKED' ) || ' ' || htf.bold( 'Inbound Search') || htf.nl ||
                         htf.formradio( 'P9','N' ) || ' ' || htf.bold( 'Outbound Search'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   else 
      htp.tabledata( htf.formradio( 'P9','T' ) || ' ' || htf.bold( 'Inbound Search') || htf.nl ||
                         htf.formradio( 'P9','N', 'CHECKED' ) || ' ' || htf.bold( 'Outbound Search'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;                 
   htp.tablerowclose;   
  
  
htp.tableclose;
htp.nl;
htp.p('<CENTER>');
htp.formsubmit( null, LNGS.STR_TXT_441 );
htp.nl;
htp.formclose;
htp.nl;
htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_TRAC_SEARCH',null,owner_id,errmsg=>sqlerrm);
end accept_trac_search;
--
procedure generate_ost356( surl in varchar2, vContainerno in varchar2, vSeal in varchar2 )
as

 cursor c1( vContainerno varchar2, vSeal varchar2 ) is
   select distinct m.movement_no, dr.logno, dr.deliveryno, dr.itemno, dr.handling_unit, dr.partweight, dr.partvolume, dr.qty, dr.pktpe_packtype,
    dr.hazard, dr.ecn, m.seal, s.voy, s.shipname, c.customer, c1.customer supplier,
    l.description pload, p.po, p.supinv, p.amount, p.gst, p.tamount, p.delivery_charge, p.ctry_countrycode, p.recno, p.inventoryno, r.curr,
    l1.description pdischarge, s.estdepart, s.estarrive
    from strang.detailrs dr, strang.ships_airway s, strang.receivals r, strang.movements m, strang.lov l,
    strang.lov l1, strang.customers c, strang.customers c1, strang.pos p
    where
     m.movement_no = vContainerno and
     m.seal = vSeal and
     m.ship_id = s.ship_id and
     m.movement_no = dr.movement_no and
     nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
     r.deliveryno = dr.deliveryno and
     r.deliveryno = p.deliveryno and
     r.cust_customer_id = c.customer_id and
     r.supplier_customer_id = c1.customer_id and
     l.lov_name = 'LOCATIONS' and
     l.code = s.portload and
     l1.lov_name = 'LOCATIONS' and
    l1.code = s.portdisc
	order by dr.deliveryno, dr.itemno,p.recno;

 cursor c2( vContainerno varchar2, vSeal varchar2 ) is
   select count('x') tot
   from
   (  select distinct m.movement_no, dr.logno, dr.deliveryno, dr.itemno, dr.handling_unit, dr.partweight, dr.partvolume, dr.qty, dr.pktpe_packtype,
     dr.hazard, dr.ecn, m.seal, s.voy, s.shipname, c.customer, c1.customer supplier,
    l.description pload, p.po, p.supinv, p.amount, p.gst, p.tamount, p.delivery_charge, p.ctry_countrycode, p.recno, p.inventoryno, r.curr,
    l1.description pdischarge, s.estdepart, s.estarrive
    from strang.detailrs dr, strang.ships_airway s, strang.receivals r, strang.movements m, strang.lov l,
    strang.lov l1, strang.customers c, strang.customers c1, strang.pos p
    where
     m.movement_no = vContainerno and
     m.seal = vSeal and
     m.ship_id = s.ship_id and
     m.movement_no = dr.movement_no and
     nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
     r.deliveryno = dr.deliveryno and
     r.deliveryno = p.deliveryno and
     r.cust_customer_id = c.customer_id and
     r.supplier_customer_id = c1.customer_id and
     l.lov_name = 'LOCATIONS' and
     l.code = s.portload and
     l1.lov_name = 'LOCATIONS' and
    l1.code = s.portdisc  );


  c1rec		customer_account%ROWTYPE;
  f 		utl_file.file_type;
  tot		integer;
  gcode		GLBX.MYARRAY;
  gparam	GLBX.MYARRAY;
  vste		varchar2(10);
  eml		varchar2(100);
  ltype		varchar2(100);
  stype		integer;
  owner_id	integer;
  sts		varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.GENERATE_OST356' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 eml := control_code( 'OST356_EMAIL_ADDRESS', vste );
 eml := nvl( eml, glbx.extract_master_parameter('MAIL_FROM') );

 open c2(vContainerno,vSeal);
 fetch c2 into tot;
 close c2;
 f := utl_file.fopen( glbx.extract_master_parameter('MAIL_TEMPLATE_DIR'), 'OST356_' || vContainerno || '_' || vSeal || '.csv', 'w', 32767);

 -- Output Header
 utl_file.put_line(f, buffer=>'H,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot || ',' );



 for c1rec in c1(vContainerno, vSeal) loop
  utl_file.put_line(f, buffer=>','|| c1rec.deliveryno ||','|| c1rec.itemno||','|| c1rec.recno  ||','|| c1rec.handling_unit ||','|| c1rec.po ||','|| c1rec.supinv ||','|| c1rec.inventoryno ||','|| c1rec.amount ||','|| c1rec.gst ||','|| c1rec.tamount
   ||','|| c1rec.delivery_charge
   ||','|| c1rec.curr ||','|| c1rec.ctry_countrycode ||','|| c1rec.customer ||','|| c1rec.supplier ||','|| c1rec.qty ||','|| c1rec.pktpe_packtype
   ||','|| c1rec.partweight ||','|| c1rec.partvolume ||','|| c1rec.hazard ||','|| c1rec.ecn||','|| c1rec.movement_no || ',' ||
   c1rec.seal ||','|| c1rec.shipname ||','|| c1rec.voy ||','||
   c1rec.pload || ',' || c1rec.pdischarge || ',' ||
   to_char(c1rec.estdepart,'YYYYMMDD') || ',' || to_char(c1rec.estarrive,'YYYYMMDD'));
 end loop;


 -- Output Header
 utl_file.put_line(f, buffer=>'F,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot || ',' );
 utl_file.fclose( f );

 gcode(1) := 'XXXX'; -- Dummy Parameter
 gparam(1) := 'XXXX';
 glbx.send( gcode, gparam, 'OST356_' || vContainerno || '_' || vSeal || '.csv', p_to=>eml, p_subj=>'OST356_' || vContainerno || '_' || vSeal, p_from=>glbx.extract_master_parameter('MAIL_FROM'),is_attachment=>TRUE);

exception when others then
 glbx.error_details( 'STRANGP', 'GENERATE_OST356',null,null,errmsg=>sqlerrm);
end generate_ost356;



procedure generate_ost256( surl in varchar2, vShip_id in integer )
as

 cursor c1( vShip_id integer ) is
   select distinct dr.movement_no, dr.deliveryno, dr.camov_seal, s.voy, s.shipname,
   decode(l.description,'BRISBANE','BRIS','GLADSTONE','GLAD','TOWNSVILLE','TVL','PORT ALMA','ALMA','NEWCASTLE','NEWC','MELBOURNE','MELB') pload,
   decode(l1.description,'KIUNGA','KNG','PORT MORESBY','POM') pdischarge, s.estdepart, s.estarrive
   from strang.detailrs dr, strang.ships_airway s, strang.receivals r, strang.movements m, strang.lov l, strang.lov l1
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.deliveryno = dr.deliveryno and
    r.cust_customer_id = 1 and
    l.lov_name = 'LOCATIONS' and
    l.code = s.portload and
    l1.lov_name = 'LOCATIONS' and
    l1.code = s.portdisc ;

 cursor c2( vShip_id integer ) is
   select count('x') tot
   from
   (  select distinct dr.movement_no, dr.deliveryno, dr.camov_seal, s.voy, s.shipname,
   decode(l.description,'BRISBANE','BRIS','GLADSTONE','GLAD','TOWNSVILLE','TVL','PORT ALMA','ALMA','NEWCASTLE','NEWC','MELBOURNE','MELB') pload,
   decode(l1.description,'KIUNGA','KNG','PORT MORESBY','POM') pdischarge, s.estdepart, s.estarrive
   from strang.detailrs dr, strang.ships_airway s, strang.receivals r, strang.movements m, strang.lov l, strang.lov l1
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.deliveryno = dr.deliveryno and
    r.cust_customer_id = 1 and
    l.lov_name = 'LOCATIONS' and
    l.code = s.portload and
    l1.lov_name = 'LOCATIONS' and
    l1.code = s.portdisc );

  cursor c3(vShipid integer) is select * from strang.ships_airway where ship_id = vShipid;

  c1rec		customer_account%ROWTYPE;
  c3rec		c3%ROWTYPE;
  f 		utl_file.file_type;
  tot		integer;
  gcode		GLBX.MYARRAY;
  gparam	GLBX.MYARRAY;
  vste		varchar2(10);
  eml		varchar2(100);
  ltype		varchar2(100);
  stype		integer;
  owner_id	integer;
  sts		varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.GENERATE_CCDETS' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 eml := control_code( 'OST256_EMAIL_ADDRESS', vste );
 eml := nvl( eml, glbx.extract_master_parameter('MAIL_FROM') );

 open c2(vShip_id);
 fetch c2 into tot;
 close c2;
 open c3(vShip_id);
 fetch c3 into c3rec;
 close c3;
 f := utl_file.fopen( glbx.extract_master_parameter('MAIL_TEMPLATE_DIR'), 'OST256_' || c3rec.shipname || '_' || c3rec.voy || '.csv', 'w', 32767);

 -- Output Header
 utl_file.put_line(f, buffer=>'H,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot || ','',,'',,'',,'',,'',,'',,'',,'',,'',' );



 for c1rec in c1(vShip_id) loop
  utl_file.put_line(f, buffer=>','|| c1rec.deliveryno ||','|| c1rec.movement_no || ',' || 'OTML TABUBIL' ||','|| c1rec.camov_seal ||','|| c1rec.shipname ||' '|| c1rec.voy ||','||
                               c1rec.shipname ||' '|| c1rec.voy ||','|| 'es,s,Y,' || c1rec.pload || ',' || c1rec.pdischarge || ',' ||
                               to_char(c1rec.estdepart,'YYYYMMDD') || ',' || to_char(c1rec.estarrive,'YYYYMMDD') || ',' ||
                               c1rec.shipname ||' '|| c1rec.voy||','|| c1rec.movement_no || ',' || c1rec.pload );
 end loop;


 -- Output Header
 utl_file.put_line(f, buffer=>'F,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot || ','',,'',,'',,'',,'',,'',,'',,'',,'',' );
 utl_file.fclose( f );

 gcode(1) := 'XXXX'; -- Dummy Parameter
 gparam(1) := 'XXXX';
 glbx.send( gcode, gparam, 'OST256_' || c3rec.shipname || '_' || c3rec.voy || '.csv', p_to=>eml, p_subj=>'OST256_' || c3rec.shipname || '_' || c3rec.voy, p_from=>glbx.extract_master_parameter('MAIL_FROM'),is_attachment=>TRUE);

exception when others then
 glbx.error_details( 'STRANGP', 'GENERATE_OST256',null,null,errmsg=>sqlerrm);
end generate_ost256;

--
procedure generate_ost156( surl in varchar2, vShip_id in integer )
as

 cursor c1( vShip_id integer ) is
   select distinct dr.movement_no, dr.logno, dr.deliveryno, dr.itemno, p.po, dr.camov_seal, s.voy, s.shipname, s.estdepart, s.estarrive, l.description pload, dr.hazard, dr.partweight, dr.partvolume, c.customer cus1, c1.customer cus2
   from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.customers c, strang.customers c1, strang.receivals r, strang.movements m, strang.lov l
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.deliveryno = dr.deliveryno and
    r.deliveryno = p.deliveryno and
    r.cust_customer_id = c.customer_id and
    l.lov_name = 'LOCATIONS' and
    l.code = s.portload and
    r.supplier_customer_id = c1.customer_id;

 cursor c2( vShip_id integer ) is
   select count('x') tot
   from
   ( select distinct dr.movement_no, dr.logno, dr.deliveryno, dr.itemno, p.po, dr.camov_seal, s.voy, s.shipname, s.estdepart, s.estarrive, l.description pload, dr.hazard, dr.partweight, dr.partvolume, c.customer cus1, c1.customer cus2
   from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.customers c, strang.customers c1, strang.receivals r, strang.movements m, strang.lov l
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.deliveryno = dr.deliveryno and
    r.deliveryno = p.deliveryno and
    r.cust_customer_id = c.customer_id and
    l.lov_name = 'LOCATIONS' and
    l.code = s.portload and
    r.supplier_customer_id = c1.customer_id );

  cursor c3(vShipid integer) is select * from strang.ships_airway where ship_id = vShipid;

  c1rec		customer_account%ROWTYPE;
  c3rec		c3%ROWTYPE;
  f 		utl_file.file_type;
  tot		integer;
  gcode		GLBX.MYARRAY;
  gparam	GLBX.MYARRAY;
  vste		varchar2(10);
  eml		varchar2(100);
  ltype		varchar2(100);
  stype		integer;
  owner_id	integer;
  sts		varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.GENERATE_CCDETS' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 eml := control_code( 'OST156_EMAIL_ADDRESS', vste );
 eml := nvl( eml, glbx.extract_master_parameter('MAIL_FROM') );

 open c2(vShip_id);
 fetch c2 into tot;
 close c2;
 open c3(vShip_id);
 fetch c3 into c3rec;
 close c3;
 f := utl_file.fopen( glbx.extract_master_parameter('MAIL_TEMPLATE_DIR'), 'OST156_' || c3rec.shipname || '_' || c3rec.voy || '.csv', 'w', 32767);

 -- Output Header
 utl_file.put_line(f, buffer=>'H,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot || ','',,'',,'',,'',,'',,'',,' );
 for c1rec in c1(vShip_id) loop
  utl_file.put_line(f, buffer=>c1rec.movement_no || ',' || c1rec.logno || ',' || c1rec.deliveryno || ',' || c1rec.itemno || ',' || c1rec.po || ',' || c1rec.camov_seal || ',' || c1rec.voy || ',' || c1rec.shipname ||
                    ',' || to_char(c1rec.estdepart,'DD.MM.YYYY') || ',' || to_char(c1rec.estarrive,'DD.MM.YYYY') || ',' || c1rec.pload || ',' || replace(c1rec.hazard, ',', ' ') || ',' || c1rec.partweight || ',' || c1rec.partvolume || ',' || c1rec.cus1 || ',' || c1rec.cus2 );
 end loop;
 -- Output Header
 utl_file.put_line(f, buffer=>'F,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot || ','',,'',,'',,'',,'',,'',,' );
 utl_file.fclose( f );

 gcode(1) := 'XXXX'; -- Dummy Parameter
 gparam(1) := 'XXXX';
 glbx.send( gcode, gparam, 'OST156_' || c3rec.shipname || '_' || c3rec.voy || '.csv', p_to=>eml, p_subj=>'OST156_' || c3rec.shipname || '_' || c3rec.voy, p_from=>glbx.extract_master_parameter('MAIL_FROM'),is_attachment=>TRUE);

exception when others then
 glbx.error_details( 'STRANGP', 'GENERATE_OST156',null,null,errmsg=>sqlerrm);
end generate_ost156;

procedure generate_OST157( surl in varchar2, vShip_id in integer )
as

 cursor c1a( vShip_id integer ) is
   select distinct dr.movement_no, dr.logno, dr.deliveryno, dr.itemno, p.po, dr.camov_seal, s.voy, s.shipname, s.estdepart, s.estarrive, l.description pload, dr.hazard, dr.partweight, dr.partvolume, c.customer cus1, c1.customer cus2
   from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.customers c, strang.customers c1, strang.receivals r, strang.movements m, strang.lov l
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.deliveryno = dr.deliveryno and
    r.deliveryno = p.deliveryno and
    r.cust_customer_id = c.customer_id and
    l.lov_name = 'LOCATIONS' and
    l.code = s.portload and
    r.supplier_customer_id = c1.customer_id AND
    R.CUST_CUSTOMER_ID=1 AND
    (DR.CAMOV_SEAL is not null); -- RETRIEVES ONLY OK-TEDI CONTAINERIZED CARGO

 cursor c1b( vShip_id integer ) is
   select distinct dr.movement_no, dr.logno, dr.deliveryno, dr.itemno, p.po, dr.camov_seal, s.voy, s.shipname, s.estdepart, s.estarrive, l.description pload, dr.hazard, dr.partweight, dr.partvolume, c.customer cus1, c1.customer cus2
   from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.customers c, strang.customers c1, strang.receivals r, strang.movements m, strang.lov l
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.deliveryno = dr.deliveryno and
    r.deliveryno = p.deliveryno and
    r.cust_customer_id = c.customer_id and
    l.lov_name = 'LOCATIONS' and
    l.code = s.portload and
    r.supplier_customer_id = c1.customer_id AND
    R.CUST_CUSTOMER_ID=1 AND
    (DR.CAMOV_SEAL is null); -- RETRIEVES ONLY OK-TEDI BREAK-BULK CARGO


   cursor c1c( vShip_id integer ) is
     select distinct dr.movement_no
     from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.customers c, strang.customers c1, strang.receivals r, strang.movements m, strang.lov l
     where
      s.ship_id = vShip_id and
      m.ship_id = s.ship_id and
      m.movement_no = dr.movement_no and
      nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
      r.deliveryno = dr.deliveryno and
      r.deliveryno = p.deliveryno and
      r.cust_customer_id = c.customer_id and
      l.lov_name = 'LOCATIONS' and
      l.code = s.portload and
      r.supplier_customer_id = c1.customer_id AND
      R.CUST_CUSTOMER_ID>=2 AND
      (DR.CAMOV_SEAL is not null); -- RETRIEVES ONLY CONTRACTOR CONTAINER NUMBERS


 cursor c2a( vShip_id integer ) is
   select count('x') tota
   from
   ( select distinct dr.movement_no, dr.logno, dr.deliveryno, dr.itemno, p.po, dr.camov_seal, s.voy, s.shipname, s.estdepart, s.estarrive, l.description pload, dr.hazard, dr.partweight, dr.partvolume, c.customer cus1, c1.customer cus2
   from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.customers c, strang.customers c1, strang.receivals r, strang.movements m, strang.lov l
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.deliveryno = dr.deliveryno and
    r.deliveryno = p.deliveryno and
    r.cust_customer_id = c.customer_id and
    l.lov_name = 'LOCATIONS' and
    l.code = s.portload and
    r.supplier_customer_id = c1.customer_id  AND
    R.CUST_CUSTOMER_ID=1 AND
    (DR.CAMOV_SEAL is not null) ); -- RETRIEVES ONLY OK-TEDI CONTAINERIZED CARGO


 cursor c2b( vShip_id integer ) is
   select count('x') totb
   from
   ( select distinct dr.movement_no, dr.logno, dr.deliveryno, dr.itemno, p.po, dr.camov_seal, s.voy, s.shipname, s.estdepart, s.estarrive, l.description pload, dr.hazard, dr.partweight, dr.partvolume, c.customer cus1, c1.customer cus2
   from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.customers c, strang.customers c1, strang.receivals r, strang.movements m, strang.lov l
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.deliveryno = dr.deliveryno and
    r.deliveryno = p.deliveryno and
    r.cust_customer_id = c.customer_id and
    l.lov_name = 'LOCATIONS' and
    l.code = s.portload and
    r.supplier_customer_id = c1.customer_id  AND
    R.CUST_CUSTOMER_ID=1 AND
    (DR.CAMOV_SEAL is null) ); -- RETRIEVES ONLY OK-TEDI BREAK-BULK CARGO

 cursor c2c( vShip_id integer ) is
   select count('x') totc
   from
   ( select distinct dr.movement_no
   from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.customers c, strang.customers c1, strang.receivals r, strang.movements m, strang.lov l
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.deliveryno = dr.deliveryno and
    r.deliveryno = p.deliveryno and
    r.cust_customer_id = c.customer_id and
    l.lov_name = 'LOCATIONS' and
    l.code = s.portload and
    r.supplier_customer_id = c1.customer_id  AND
    (DR.CAMOV_SEAL is not null) ); -- RETRIEVES ONLY CONTRACTOR CONTAINER NUMBERS



  cursor c3(vShipid integer) is select * from strang.ships_airway where ship_id = vShipid;

  c1arec		customer_account%ROWTYPE;
  c1brec		customer_account%ROWTYPE;
  c1crec		customer_account%ROWTYPE;
  c3rec		c3%ROWTYPE;
  f 		utl_file.file_type;
  tot		integer;
  tota		integer;
  totb		integer;
  totc		integer;
  gcode		GLBX.MYARRAY;
  gparam	GLBX.MYARRAY;
  vste		varchar2(10);
  lastctr	varchar2(100);
  eml		varchar2(100);
  ltype		varchar2(100);
  stype		integer;
  owner_id	integer;
  sts		varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.GENERATE_CCDETS' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1arec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1arec.aid);
 eml := control_code( 'OST156_EMAIL_ADDRESS', vste );
 eml := nvl( eml, glbx.extract_master_parameter('MAIL_FROM') );

 -- open c2(vShip_id);
 -- fetch c2 into tot;
 -- close c2;

 open c2a(vShip_id);
 fetch c2a into tota;
 close c2a;
 open c2b(vShip_id);
 fetch c2b into totb;
 close c2b;
 open c2c(vShip_id);
 fetch c2c into totc;
 close c2c;
 tot := tota + totb +totc;
 lastctr := 'BREAKBULK';


 open c3(vShip_id);
 fetch c3 into c3rec;
 close c3;
 f := utl_file.fopen( glbx.extract_master_parameter('MAIL_TEMPLATE_DIR'), 'OST157_' || c3rec.shipname || '_' || c3rec.voy || '.csv', 'w', 32767);

 -- Output Header
 utl_file.put_line(f, buffer=>'H,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot || ','',,'',,'',,'',,'',,'',,' );
 for c1arec in c1a(vShip_id) loop
  utl_file.put_line(f, buffer=>c1arec.movement_no || ',' || c1arec.logno || ',' || c1arec.deliveryno || ',' || c1arec.itemno || ',' || c1arec.po || ',' || c1arec.camov_seal || ',' || c1arec.voy || ',' || c1arec.shipname ||
                    ',' || to_char(c1arec.estdepart,'DD.MM.YYYY') || ',' || to_char(c1arec.estarrive,'DD.MM.YYYY') || ',' || c1arec.pload || ',' || replace(c1arec.hazard, ',', ' ') || ',' || c1arec.partweight || ',' || c1arec.partvolume || ',' || c1arec.cus1 || ',' || c1arec.cus2 );
  lastctr := c1arec.movement_no ;
 end loop;
 for c1brec in c1b(vShip_id) loop
  utl_file.put_line(f, buffer=>lastctr || ',' || c1brec.logno || ',' || c1brec.deliveryno || ',' || c1brec.itemno || ',' || c1brec.po || ',' || c1brec.camov_seal || ',' || c1brec.voy || ',' || c1brec.shipname ||
                    ',' || to_char(c1brec.estdepart,'DD.MM.YYYY') || ',' || to_char(c1brec.estarrive,'DD.MM.YYYY') || ',' || c1brec.pload || ',' || replace(c1brec.hazard, ',', ' ') || ',' || c1brec.partweight || ',' || c1brec.partvolume || ',' || c1brec.cus1 || ',' || c1brec.cus2 );
 end loop;
 for c1crec in c1c(vShip_id) loop
  utl_file.put_line(f, buffer=>c1crec.movement_no || ','',,'',,'',,'',,'',,'',,'',,' );
 end loop;
 -- Output Header
 utl_file.put_line(f, buffer=>'F,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot || ','',,'',,'',,'',,'',,'',,' );
 utl_file.fclose( f );

 gcode(1) := 'XXXX'; -- Dummy Parameter
 gparam(1) := 'XXXX';
 glbx.send( gcode, gparam, 'OST157_' || c3rec.shipname || '_' || c3rec.voy || '.csv', p_to=>eml, p_subj=>'OST157_' || c3rec.shipname || '_' || c3rec.voy, p_from=>glbx.extract_master_parameter('MAIL_FROM'),is_attachment=>TRUE);

exception when others then
 glbx.error_details( 'STRANGP', 'GENERATE_OST157',null,null,errmsg=>sqlerrm);
end generate_OST157;

procedure generate_ost185( surl in varchar2, vtoday in date, is_batch in varchar2 default 'FALSE' )
as

 cursor c1( vste varchar2 ) is
  select /*+ ALL_ROWS */
         distinct
         p.rowid,
         p.deliveryno as "Delivery No", 
         p.recno as "PO Rno", 
         p.po as "Purchase Order",
         p.po_item_no as "PO Item No",
         p.inventoryno as "Material No",
         p.supinv as "Invoice",
         p.sap_delno_qty as "Quantity",
         p.sap_delno_unit as "Unit",
         p.grn as "GRN",
         p.off_site_receipt as "Receipted Date",
         c.customer as "Vendor",
         dr.logno as "Log No",
         dr.itemno as "Delivery Item",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'WAREHOUSE_DESTINATION') as "Warehouse Destination",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'CURRENT_LOCATION') as "Current Location",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'URGENCY') as "Priority",
         nvl(p.shipping_text,(decode(dr.sa,'S','Pack for Sea Freight','A','Pack for Air Freight'))) as "Mode",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'MOVEMENT_NO') as "Container",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'SEAL') as "Seal",
         nvl(to_char(dr.hawb_hawbno),' ') as "HAWB",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'INTL SHIP ID') as "Intl Ship ID",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'INTL SHIPNAME') as "Intl Ship/MAWB",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'INTL VOYAGE') as "Intl Voyage",
         to_char(dr.line_no) as "Intl Line No",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'INTL ESTARRIVE') as "Intl ETA",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'BOL') as "Intl Bol",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'CUSTOMS_CLEARED_DATE') as "Customs Cleared Date",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'LOCAL SHIP ID') as "Local Ship ID",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'LOCAL SHIPNAME') as "Local Ship",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'LOCAL VOYAGE') as "Local Voyage",
         to_char(dr.local_line_no) as "Local Line No",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'LOCAL BOL') as "Local Bol",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'LOCAL ESTARRIVE') as "Local ETA",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'SCHEDULED CONVOY') as "Scheduled Convoy",
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'SCHEDULED CONVOY DATE') as "Scheduled Convoy Date"  
    from strang.pos p, strang.detailrs dr, strang.receivals r, strang.customers c 
    where p.deliveryno = dr.deliveryno and
    p.deliveryno = r.deliveryno and 
    r.cust_customer_id = 1 and 
    dr.io = 'I' and 
    p.grn_status in (1,8,9) and 
    nvl(r.supplier_customer_id,0) = c.customer_id and 
    r.currdate >  sysdate - 180 and 
    c.customer_type = 'SUPPLIER' and 
    not exists 
    ( select  p1.deliveryno 
        from strang.pos p1, strang.detailrs dr, strang.receivals r, strang.movements m, strang.lov l1, strang.lov l2 
       where p1.deliveryno = r.deliveryno and 
            p1.deliveryno = dr.deliveryno and 
            p1.deliveryno = p.deliveryno and
            r.cust_customer_id = 1 and
            dr.io = 'I' and
            dr.movement_no = m.movement_no and
            nvl(dr.camov_seal,'|') = nvl(m.seal,'|') and 
            m.warehouse_destination = l1.code and
            l1.lov_name = 'LOCATIONS' and
            m.current_location = l2.code and
            l2.lov_name = 'LOCATIONS' and
            l1.colc = l2.colc )      
      order by p.deliveryno, p.po, p.po_item_no, p.supinv, dr.logno   
 ;

 cursor c2( vste varchar2 ) is
   select count('x') tot
   from
   (  select /*+ ALL_ROWS */
         distinct
         p.rowid,
         p.deliveryno,
         p.recno, 
         p.po po,
         p.po_item_no po_item_no,
         p.inventoryno,
         p.supinv supinv,
         p.sap_delno_qty,
         p.sap_delno_unit,
         p.grn,
         p.off_site_receipt,
         c.customer,
         dr.logno,
         dr.itemno,
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'WAREHOUSE_DESTINATION'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'CURRENT_LOCATION'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'URGENCY'),
         nvl(p.shipping_text,(decode(dr.sa,'S','Pack for Sea Freight','A','Pack for Air Freight'))),      
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'MOVEMENT_NO'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'SEAL'),
         nvl(to_char(dr.hawb_hawbno),' '),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'INTL SHIP ID'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'INTL SHIPNAME'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'INTL VOYAGE'),
         to_char(dr.line_no),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'INTL ESTARRIVE'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'BOL'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'CUSTOMS_CLEARED_DATE'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'LOCAL SHIP ID'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'LOCAL SHIPNAME'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'LOCAL VOYAGE'),
         to_char(dr.local_line_no),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'LOCAL BOL'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'LOCAL ESTARRIVE'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'SCHEDULED CONVOY'),
         strang.f_get_info_for_po(p.deliveryno,dr.itemno,'SCHEDULED CONVOY DATE')
    from strang.pos p, strang.detailrs dr, strang.receivals r, strang.customers c 
    where p.deliveryno = dr.deliveryno and
    p.deliveryno = r.deliveryno and 
    r.cust_customer_id = 1 and 
    dr.io = 'I' and 
    p.grn_status in (1,8,9) and 
    nvl(r.supplier_customer_id,0) = c.customer_id and 
    r.currdate >  sysdate - 180 and 
    c.customer_type = 'SUPPLIER' and 
    not exists 
    ( select  p1.deliveryno 
        from strang.pos p1, strang.detailrs dr, strang.receivals r, strang.movements m, strang.lov l1, strang.lov l2 
       where p1.deliveryno = r.deliveryno and 
            p1.deliveryno = dr.deliveryno and 
            p1.deliveryno = p.deliveryno and
            r.cust_customer_id = 1 and
            dr.io = 'I' and
            dr.movement_no = m.movement_no and
            nvl(dr.camov_seal,'|') = nvl(m.seal,'|') and 
            m.warehouse_destination = l1.code and
            l1.lov_name = 'LOCATIONS' and
            m.current_location = l2.code and
            l2.lov_name = 'LOCATIONS' and
            l1.colc = l2.colc )       
);

  cursor c3(vtoday date) is select to_char(sysdate) v1date from dual;

  c1rec       customer_account%ROWTYPE;
  c3rec       c3%ROWTYPE;
  f           utl_file.file_type;
  f2           utl_file.file_type;
  tot         integer;
  gcode       GLBX.MYARRAY;
  gparam      GLBX.MYARRAY;
  vste        varchar2(10);
  eml         varchar2(100);
  ltype       varchar2(100);
  stype       integer;
  owner_id    integer;
  sts         varchar2(100);
  ctr         integer;
  ctr1         integer;
 -- f_dir       CONSTANT varchar2(1000) := glbx.extract_master_parameter('MAIL_OUTPUT_DIR');
 f_dir      CONSTANT varchar2(1000) := glbx.extract_master_parameter('MAIL_TEMPLATE_DIR');
 -- f_file      CONSTANT varchar2(1000) := 'OST185_' || to_char(sysdate, 'dd_mon_yyyy_hh24mi') || '.csv';
 f_file      CONSTANT varchar2(1000) := 'RECEIPTED_POS_' || to_char(sysdate, 'dd_mon_yyyy_hh24mi') || '.csv';
 f_file2      CONSTANT varchar2(1000) := 'RECEIPTED_POS_EXTRACT' || to_char(sysdate, 'dd_mon_yyyy_hh24mi') || '.csv';  -- email extract

begin
 if nvl(is_batch, 'FALSE') = 'TRUE'
  then
   sts := null;
   vste := 'SYD';
 else
   glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.GENERATE_OST185' );
   c1rec := glbx.get_aid( owner_id, 'C', ltype );
   vste := customer_state(c1rec.aid);
 end if;

 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 eml := control_code( 'OST185_EMAIL_ADDRESS', vste );
 eml := nvl( eml, glbx.extract_master_parameter('MAIL_FROM') );

 open c2(vste);
 fetch c2 into tot;
 close c2;
 open c3(vtoday);
 fetch c3 into c3rec;
 close c3;
 -- f := utl_file.fopen( glbx.extract_master_parameter('MAIL_TEMPLATE_DIR'), 'OST185_' || to_char(sysdate, 'dd_mon_yyyy_hh24mi') || '.csv', 'w', 32767);
 f := utl_file.fopen( f_dir, f_file, 'w', 32767);

 -- Output Header
 --utl_file.put_line(f, buffer=>'H,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot );
  utl_file.put_line(f, buffer=>'Delivery No,PO Rno,Purchase Order,PO Item No,Material No,Invoice,Quantity,Unit,GRN,Receipted Date,'||
                                'Vendor,Log No,Delivery Item,Warehouse Destination,Current Location,Priority,Mode,Container,Seal,HAWB,'||
                                'Intl Ship ID,Intl Ship/MAWB,Intl Voyage,Intl Line No,Intl ETA,Intl Bol,Customs Cleared Date,Local Ship ID,'||
                                'Local Ship,Local Voyage,Local Line No,Local Bol,Local ETA,Scheduled Convoy,Scheduled Convoy Date');
 ctr := 0;
 for c1rec in c1(vste) loop
  utl_file.put_line(f, buffer=>c1rec."Delivery No"||','||c1rec."PO Rno"||','||c1rec."Purchase Order" ||','|| c1rec."PO Item No" || ',' || c1rec."Material No" || ','
                        || c1rec."Invoice" || ',' || c1rec."Quantity" || ',' || c1rec."Unit" || ','||c1rec."GRN"||','||c1rec."Receipted Date"||',"'||c1rec."Vendor"|| '",'
                        ||  c1rec."Log No" || ',' || c1rec."Delivery Item" || ',' || c1rec."Warehouse Destination" ||','|| c1rec."Current Location"||','|| c1rec."Priority" || ',' || c1rec."Mode" || ','
                        || c1rec."Container" || ',' || c1rec."Seal" || ',' || c1rec."HAWB" ||','||c1rec."Intl Ship ID"||',' || c1rec."Intl Ship/MAWB" || ',' || c1rec."Intl Voyage" || ',' || c1rec."Intl Line No" || ',' || c1rec."Intl ETA"||','
                        || c1rec."Intl Bol" || ',' || c1rec."Customs Cleared Date" || ','||c1rec."Local Ship ID"|| ',' || c1rec."Local Ship" || ','||c1rec."Local Voyage" ||',' || c1rec."Local Line No" || ',' || c1rec."Local Bol" || ',' || c1rec."Local ETA"||','
                        || c1rec."Scheduled Convoy" || ',' || c1rec."Scheduled Convoy Date" 
                        );
                        
                        
                        
-- ****** TURNED OFF 20180530 *********  update strang.pos set off_site_receipt = sysdate where rowid = c1rec.rowid;
--  update strang.pos set po_waybill_type = c1rec.po_waybill_type where rowid = c1rec.rowid;
--  update strang.pos set qty = c1rec.partweight where unit_unitused in ('BAGS','BAG') and rowid = c1rec.rowid;
--  update strang.pos set unit_unitused = 'KG' where unit_unitused in ('BAGS','BAG') and rowid = c1rec.rowid;

  ctr := ctr + 1;
 end loop;
 -- Output Header
 utl_file.put_line(f, buffer=>'F,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot  );
 utl_file.fclose( f );
 
 
 ------ CREATE EXTRACT ---------------------------------------------------------
  f2 := utl_file.fopen( f_dir, f_file2, 'w', 32767);  -- 
  utl_file.put_line(f2, buffer=>'H,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot );
  utl_file.put_line(f2, buffer=>'Delivery No,PO Rno,Purchase Order,PO Item No,Material No,Invoice,Quantity,Unit,GRN,Receipted Date,'||
                                'Vendor,Log No,Delivery Item,Warehouse Destination,Current Location,Priority,Mode,Container,Seal,HAWB,'||
                                'Intl Ship ID,Intl Ship/MAWB,Intl Voyage,Intl Line No,Intl ETA,Intl Bol,Customs Cleared Date,Local Ship ID,'||
                                'Local Ship,Local Voyage,Local Line No,Local Bol,Local ETA,Scheduled Convoy,Scheduled Convoy Date');

  ctr1 := 0;
  for c1rec in c1(vste) loop
  utl_file.put_line(f2, buffer=>c1rec."Delivery No"||','||c1rec."PO Rno" ||','|| c1rec."Purchase Order" || ',' || c1rec."PO Item No" || ',' || c1rec."Material No" || ','
                        || c1rec."Invoice" || ',' || c1rec."Quantity" || ',' || c1rec."Unit" || ','||c1rec."GRN"||','||c1rec."Receipted Date"||',"'||c1rec."Vendor"|| '",'
                        ||  c1rec."Log No" || ',' || c1rec."Delivery Item" || ',' || c1rec."Warehouse Destination" || ',' || c1rec."Current Location" || ',' || c1rec."Priority" || ',' || c1rec."Mode" || ','
                        || c1rec."Container" || ',' || c1rec."Seal" || ',' || c1rec."HAWB"||','||c1rec."Intl Ship ID"||',' ||c1rec."Intl Ship/MAWB" || ',' || c1rec."Intl Voyage" || ',' || c1rec."Intl Line No" || ',' || c1rec."Intl ETA"||','
                        || c1rec."Intl Bol" || ',' || c1rec."Customs Cleared Date" || ','||c1rec."Local Ship ID"||',' || c1rec."Local Ship" || ','||c1rec."Local Voyage" ||',' || c1rec."Local Line No" || ',' || c1rec."Local Bol" || ',' || c1rec."Local ETA"||','
                        || c1rec."Scheduled Convoy" || ',' || c1rec."Scheduled Convoy Date" 
                        );
-- ****** TURNED OFF 20180530 *********  update strang.pos set off_site_receipt = sysdate where rowid = c1rec.rowid;
--  update strang.pos set po_waybill_type = c1rec.po_waybill_type where rowid = c1rec.rowid;
--  update strang.pos set qty = c1rec.partweight where unit_unitused in ('BAGS','BAG') and rowid = c1rec.rowid;
--  update strang.pos set unit_unitused = 'KG' where unit_unitused in ('BAGS','BAG') and rowid = c1rec.rowid;

    ctr1 := ctr1 + 1;
    if ctr1 > 11 then
       exit;
    end if;
   
   end loop;
   utl_file.put_line(f2, buffer=>'F,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot  );
   utl_file.fclose( f2 );


-------------------------------------------------------------------------------
 gcode(1) := 'XXXX'; -- Dummy Parameter
 gparam(1) := 'XXXX';

 if ctr > 0
  then
   -- glbx.send( gcode, gparam, 'OST185_' || to_char(sysdate, 'dd_mon_yyyy_hh24mi') || '.csv', p_to=>eml, p_subj=>'OST185_' || c3rec.v1date || '_' || to_char(sysdate, 'hh24mi'), p_from=>glbx.extract_master_parameter('MAIL_FROM'),is_attachment=>TRUE);
  -- glbx.send( gcode, gparam, f_file, p_to=>eml, p_subj=>'OST185_' || c3rec.v1date || '_' || to_char(sysdate, 'hh24mi'), p_from=>glbx.extract_master_parameter('MAIL_FROM'),is_attachment=>TRUE 
   glbx.send( gcode, gparam, f_file2, p_to=>eml, p_subj=>'Prod RECEIPTED_PO_EXTRACT_' || c3rec.v1date || '_' || to_char(sysdate, 'hh24mi'), p_from=>glbx.extract_master_parameter('MAIL_FROM'),is_attachment=>TRUE);
   ftp_ost_185(f_dir || '\' || f_file, 'SFTP');
 else
   begin
    -- utl_file.fremove(glbx.extract_master_parameter('MAIL_TEMPLATE_DIR'), 'OST185_' || to_char(sysdate, 'dd_mon_yyyy_hh24mi') || '.csv');
    utl_file.fremove(f_dir, f_file);
   exception when others then null;
   end;
 end if;

 if nvl(is_batch, 'FALSE') = 'TRUE'
  then
   return;
 else
   strangp.ost_185_screen(surl,'MESSAGE', ctr || ' records processed');
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'GENERATE_OST185',null,null,errmsg=>sqlerrm);
end generate_ost185;

procedure manentry(surl in varchar2, rid in varchar2 default null, scid in varchar2 default null, call_name in varchar2 default null, parm in varchar2 default null, access_id in varchar2 default null, msg in varchar2 default null, id in varchar2 default null )
as

 cursor c2( rid rowid ) is select * from strang.convoy where rowid = rid;
 cursor c4 ( entryno number) is select 'x' from strang.convoy_details 
                                           where convoy_id = entryno 
                                             and not ( movement_no1 is null and movement_no2 is null and movement_no3 is null
                                                   and movement_no4 is null and movement_no5 is null and movement_no6 is null);
-- cursor c3 is select strang.s_convoy_id.nextval into newconvoy from dual;
 cursor c5( entryno number) is select rowid from strang.convoy_details where convoy_id = entryno and rno = (select min(rno) from strang.convoy_details where convoy_id = entryno);

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c4rec		c4%ROWTYPE;
-- c3rec		c3%ROWTYPE;
 c5rec		c5%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nrid		varchar2(100);
 vaccess	varchar2(20);
 newconvoy	number;
 vste		varchar2(10);
 v_flag     char(1);
 v_bgColor  varchar2(50);
 v_default_direction_colour varchar2(20) := g_inbound_color; 
 v_non_default_direction_colour varchar2(20):= g_outbound_color;
 v_direction varchar2(1) := 'I';
 v_portload varchar2(10) := 'KIU';
 v_portdisc varchar2(10) := 'TAB';

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.MANENTRY' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 
 pfx := glbx.get_thm( c1rec.theme_name );
 nrid := replace(rid,'~','+');
 vaccess := data_access( owner_id, 'MANENTRY', rid );
 open c2( nrid );
 fetch c2 into c2rec;
 close c2;
 
 open c4( c2rec.convoy_id);
 fetch c4 into c4rec;
 if c4%found then v_flag := 'Y'; else v_flag := 'N'; end if;
 close c4;
 
 if nvl(vste,'SYD') = g_outbound_site then
    v_default_direction_colour := g_outbound_color;
    v_non_default_direction_colour := g_inbound_color; 
    v_direction := 'O';
    v_portload := 'TAB';
    v_portdisc := 'KIU';
 end if;
 
 if nrid is null then
  select strang.s_convoy_id.nextval into newconvoy from dual;
 end if;
 
 glbx.main_title( surl, 'Convoy Header',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR17',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if msg is not null then glbx.header_msg( msg ); end if;
 
 if parm in ('ME','ME2') and access_id = 'x' then 
    htp.p('<script type="text/javascript" src="/images/js/convoy_direction_switch.js"></script>');
end if;
 
 htp.p( '<CENTER>' );

 --htp.anchor( 'javascript: window.open(''' || 'strangs.list_entry?surl=' || surl || ''',''' || 'SAD_ENTRY' || ''',''height=800,width=1200,scrollbars=yes,resizable=yes'');void('''');', '[Test List All SAD]' );

 htp.formopen( 'strangp.accept_manentry' );
  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'SCID', scid );
  htp.formhidden( 'PARM', parm );
  htp.formhidden( 'CALL_NAME', call_name );
  htp.formhidden( 'ACCESS_ID', access_id );
  htp.formhidden( 'RID', nrid );
  htp.formhidden( 'OLD_ENTRY', c2rec.convoy_id );

 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
 --htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
   htp.tabledata( htf.bold('Direction of Travel'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.formhidden( 'P1', 'IO' );
   if ((vaccess = 'EDIT' and v_flag = 'N') or access_id = 'z')
    then 
       if c2rec.io = 'I' then v_bgColor := 'bgcolor=":#00468C"'; 
       elsif c2rec.io is null then v_bgColor := 'bgcolor='||v_default_direction_colour;
       else v_bgColor := 'bgcolor=":#4EB5E2"';        
       end if;
       
       htp.p( '<TD '|| v_bgColor ||'  Id="P2z" ALIGN="LEFT" COLSPAN="3">' );
       lov_list( 'INOUT', 'P2'||'a', nvl(c2rec.io, v_direction), TRUE, TRUE, FALSE );
       htp.p( '</TD>' );
   
    else
      htp.formhidden( 'P2', c2rec.io );
      if c2rec.io = 'I' then
        htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="3"');
      else
        htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="3"');   
      end if;
    -- lov_list( 'INOUT', 'P2'||'a', c2rec.io, TRUE, TRUE, FALSE, isedit=>FALSE );
   end if;
  

  htp.tablerowopen;
   htp.tabledata( htf.bold('Convoy ID'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' and c2rec.convoy_id is null
    then
     htp.tabledata( htf.formhidden( 'ENTRYNO', newconvoy ) || htf.bold( newconvoy ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    elsif vaccess = 'EDIT' and c2rec.convoy_id is not null
     then
     htp.tabledata( htf.formhidden( 'ENTRYNO', c2rec.convoy_id ) || htf.bold( c2rec.convoy_id ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    else
     htp.tabledata( htf.bold( c2rec.convoy_id ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.tabledata( htf.bold('Convoy Name'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'CONVOYNAME' ) || htf.formtext( 'P2', 30, 30, c2rec.convoyname), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.convoyname ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
  htp.tablerowclose;
  -- ROW 2
  htp.tablerowopen;
   htp.tabledata( htf.bold('Convoy Type'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'CONVOY_TYPE' );
   if vaccess = 'EDIT'
    then
     lov_list( 'CONVOY TYPES', 'P2', c2rec.convoy_type, FALSE, TRUE, FALSE );
    else
     lov_list( 'CONVOY TYPES', 'P2', c2rec.convoy_type, FALSE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
/*
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'CONVOY_TYPE' ) || htf.formtext( 'P2', 30, 30, c2rec.convoy_type) , cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.convoy_type ) , cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
*/
   htp.tabledata( htf.bold('On Masterplan'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );

   if vaccess = 'EDIT' then
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'MASTERPLAN' );
   if vaccess = 'EDIT'
    then
     lov_list( 'YES_NO', 'P2', c2rec.masterplan, TRUE, TRUE, FALSE );
    else
     lov_list( 'YES_NO', 'P2', c2rec.masterplan, TRUE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
       end if;
/*
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'MASTERPLAN' ) || htf.formtext( 'P2', 30, 30, c2rec.masterplan), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.masterplan ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
*/
  htp.tablerowclose;
  -- ROW 3
  htp.tablerowopen;
   htp.tabledata( htf.bold('Convoy Date'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'ESTDEPART' ) || htf.formtext( 'P2', 30, 30, to_char(c2rec.estdepart)) || ' ' || htf.italic(LNGS.STR_DATE_02), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.estdepart ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;

   htp.tabledata( htf.bold('Status'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'STATUS' );
   if vaccess = 'EDIT'
    then
     lov_list( 'CONVOY_STATUS', 'P2', c2rec.status, TRUE, TRUE, FALSE );
    else
     lov_list( 'CONVOY_STATUS', 'P2', c2rec.status, TRUE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
       end if;

/*
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'STATUS' ) || htf.formtext( 'P2', 30, 30, c2rec.status), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.status ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
*/
  htp.tablerowclose;
  -- ROW 3.2
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT" COLSPAN="4"' );
  htp.tablerowclose;
  -- ROW 4
  htp.tablerowopen;
   htp.tabledata( htf.bold('Loading Location'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'PORTLOAD' );
   if vaccess = 'EDIT'
    then
     lov_list( 'LOCATIONS', 'P2'||'b', nvl(c2rec.portload,v_portload), FALSE, TRUE, FALSE );
    else
     lov_list( 'LOCATIONS', 'P2'||'b', nvl(c2rec.portload,v_portload), FALSE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );

/*
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'PORTLOAD' ) || htf.formtext( 'P2', 30, 30, c2rec.portload), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.portload ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
*/  
   htp.tabledata( htf.bold('Week Day'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold(to_char(c2rec.estdepart,'fmDay')), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
  
-- ROW 5
  htp.tablerowopen;
   htp.tabledata( htf.bold('Unloading Location'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'PORTDISC' );
   if vaccess = 'EDIT'
    then
     lov_list( 'LOCATIONS', 'P2'||'c', NVL(c2rec.portdisc,v_portdisc), FALSE, TRUE, FALSE );
    else
     lov_list( 'LOCATIONS', 'P2'||'c', NVL(c2rec.portdisc,v_portdisc), FALSE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
/*
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'PORTDISC' ) || htf.formtext( 'P2', 30, 30, c2rec.portdisc), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.portdisc ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
*/
   htp.tabledata( htf.bold('No of Sections'), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
   if vaccess = 'EDIT' then
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'NO_OF_SECTIONS' );
   if vaccess = 'EDIT'
    then
     lov_list( 'SECTIONS', 'P2', c2rec.no_of_sections, TRUE, TRUE, FALSE );
    else
     lov_list( 'SECTIONS', 'P2', c2rec.no_of_sections, TRUE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
       end if;

/*   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'NO_OF_SECTIONS' ) || htf.formtext( 'P2', 30, 30, c2rec.no_of_sections), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.no_of_sections ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
*/
  htp.tablerowclose;
-- ROW 6
  htp.tablerowopen;
   htp.tabledata( htf.bold('ATD'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'ATD_CONVOY_1' ) || htf.formtext( 'P2', 30, 30, c2rec.atd_convoy_1) || ' ' || htf.italic('HH24:MI'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.atd_convoy_1 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.tabledata( htf.bold('ATD (Section 2)'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'ATD_CONVOY_2' ) || htf.formtext( 'P2', 30, 30, c2rec.atd_convoy_2) || ' ' || htf.italic('HH24:MI'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.atd_convoy_2 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
  htp.tablerowclose;
-- ROW 7
  htp.tablerowopen;
   htp.tabledata( htf.bold('Arrived'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'ARRIVAL_CONVOY_1' ) || htf.formtext( 'P2', 30, 30, c2rec.arrival_convoy_1) || ' ' || htf.italic('HH24:MI'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.arrival_convoy_1 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.tabledata( htf.bold('Arrived (Section 2)'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'ARRIVAL_CONVOY_2' ) || htf.formtext( 'P2', 30, 30, c2rec.arrival_convoy_2) || ' ' || htf.italic('HH24:MI'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.arrival_convoy_2 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
  htp.tablerowclose;
-- ROW 8
  htp.tablerowopen;
   htp.tabledata( htf.bold('Start Unload'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'START_UNLOAD' ) || htf.formtext( 'P2', 30, 30, c2rec.start_unload) || ' ' || htf.italic('HH24:MI'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.start_unload ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.tabledata( htf.bold('&nbsp;'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
-- ROW 9
  htp.tablerowopen;
   htp.tabledata( htf.bold('Finish Load'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'FINISH_LOAD' ) || htf.formtext( 'P2', 30, 30, c2rec.finish_load) || ' ' || htf.italic('HH24:MI'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.finish_load ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.tabledata( htf.bold('&nbsp;'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
-- ROW 10
  htp.tablerowopen;
   htp.tabledata( htf.bold('Loading Leader'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'LOADING' ) || htf.formtext( 'P2', 30, 30, c2rec.loading), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.loading ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.tabledata( htf.bold('Loading Compiled By'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'LOADING_COMPILED_BY' ) || htf.formtext( 'P2', 30, 30, c2rec.loading_compiled_by), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.loading_compiled_by ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
  htp.tablerowclose;
  -- ROW 11
  htp.tablerowopen;
   htp.tabledata( htf.bold('Passengers'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'PASSENGERS' ) || htf.formtext( 'P2', 30, 30, c2rec.passengers), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT" colspan="3"' );
   else htp.tabledata( htf.bold( c2rec.passengers ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT" colspan="3"' );
   end if;
  htp.tablerowclose;
  -- ROW 12
  htp.tablerowopen;
   htp.tabledata( htf.bold('Remarks'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then
     htp.tabledata( htf.formhidden( 'P1', 'REMARKS' ) || htf.formtextareaopen( 'P2', 3, 100 ) || c2rec.remarks || htf.formtextareaclose,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=9');
  -- htp.tabledata( htf.formhidden( 'P1', 'REMARKS' ) || htf.formtext( 'P2', 300, 300, c2rec.remarks), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT" colspan="3"' );
   else htp.tabledata( htf.bold( c2rec.remarks ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT" colspan="3"' );
   end if;
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;
  
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
 --htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
--ROW 2.1
  htp.tablerowopen;
   htp.tabledata( htf.bold('Driver'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Escort Vehicle ID'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Call Sign'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
--ROW 2.2
  htp.tablerowopen;
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'ESCORT1_DRIVER' );
   if vaccess = 'EDIT'
    then
     lov_list( 'OPERATORS', 'P2', c2rec.escort1_DRIVER, FALSE, FALSE, FALSE );
    else
     lov_list( 'OPERATORS', 'P2', c2rec.escort1_DRIVER, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );


   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'ESCORT1_ID' ) || htf.formtext( 'P2', 30, 30 , c2rec.escort1_id), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.escort1_id ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;

   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'ESCORT1_CALLSIGN' ) || htf.formtext( 'P2', 30, 30, c2rec.escort1_callsign), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.escort1_callsign ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
  htp.tablerowclose;
--ROW 2.3
  htp.tablerowopen;
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'ESCORT2_DRIVER' );
   if vaccess = 'EDIT'
    then
     lov_list( 'OPERATORS', 'P2', c2rec.escort2_DRIVER, FALSE, FALSE, FALSE );
    else
     lov_list( 'OPERATORS', 'P2', c2rec.escort2_DRIVER, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'ESCORT2_ID' ) || htf.formtext( 'P2', 30, 30 , c2rec.escort2_id), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.escort2_id ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'ESCORT2_CALLSIGN' ) || htf.formtext( 'P2', 30, 30, c2rec.escort2_callsign), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.escort2_callsign ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
  htp.tablerowclose;
--ROW 2.4
  htp.tablerowopen;
   htp.tabledata( htf.bold('Support Truck Type'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Support Truck ID'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Support Truck Operators'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
--ROW 2.5
  htp.tablerowopen;
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'SUPPORT_TRUCK_TYPE' ) || htf.formtext( 'P2', 30,30, c2rec.support_truck_type), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.support_truck_type ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'SUPPORT_TRUCK_ID' ) || htf.formtext( 'P2', 30,30, c2rec.support_truck_id), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.support_truck_id ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'SUPPORT_TRUCK_OPERATOR1' );
   if vaccess = 'EDIT'
    then
     lov_list( 'OPERATORS', 'P2', c2rec.support_truck_operator1, FALSE, FALSE, FALSE );
    else
     lov_list( 'OPERATORS', 'P2', c2rec.support_truck_operator1, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
/*
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'SUPPORT_TRUCK_OPERATOR1' ) || htf.formtext( 'P2', 30,30, c2rec.support_truck_operator1), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.support_truck_operator1 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
*/
  htp.tablerowclose;
--ROW 2.6
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'SUPPORT_TRUCK_OPERATOR2' );
   if vaccess = 'EDIT'
    then
     lov_list( 'OPERATORS', 'P2', c2rec.support_truck_operator2, FALSE, FALSE, FALSE );
    else
     lov_list( 'OPERATORS', 'P2', c2rec.support_truck_operator2, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );

/*
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'SUPPORT_TRUCK_OPERATOR2' ) || htf.formtext( 'P2', 30,30, c2rec.support_truck_operator2), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.support_truck_operator2 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
*/
  htp.tablerowclose;
--ROW 2.7
  htp.tablerowopen;
   htp.tabledata( htf.bold('&nbsp;'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Equipment'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Equipment Operators'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
--ROW 2.8
  htp.tablerowopen;
   htp.tabledata( htf.bold('&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'EQUIPMENT_1' ) || htf.formtext( 'P2', 30,30, c2rec.equipment_1), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.equipment_1 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'EQUIPMENT_OPERATOR_1' );
   if vaccess = 'EDIT'
    then
     lov_list( 'OPERATORS', 'P2', c2rec.equipment_operator_1, FALSE, FALSE, FALSE );
    else
     lov_list( 'OPERATORS', 'P2', c2rec.equipment_operator_1, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );

/*
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'EQUIPMENT_OPERATOR_1' ) || htf.formtext( 'P2', 30,30, c2rec.equipment_operator_1), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.equipment_operator_1 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
*/
  htp.tablerowclose;
--ROW 2.9
  htp.tablerowopen;
   htp.tabledata( htf.bold('&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'EQUIPMENT_2' ) || htf.formtext( 'P2', 30,30, c2rec.equipment_2), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.equipment_2 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'EQUIPMENT_OPERATOR_2' );
   if vaccess = 'EDIT'
    then
     lov_list( 'OPERATORS', 'P2', c2rec.equipment_operator_2, FALSE, FALSE, FALSE );
    else
     lov_list( 'OPERATORS', 'P2', c2rec.equipment_operator_2, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );

/*
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'EQUIPMENT_OPERATOR_2' ) || htf.formtext( 'P2', 30,30, c2rec.equipment_operator_2), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.equipment_operator_2 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
*/
  htp.tablerowclose;
--ROW 2.10
  htp.tablerowopen;
   htp.tabledata( htf.bold('&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'EQUIPMENT_3' ) || htf.formtext( 'P2', 30,30, c2rec.equipment_3), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.equipment_3 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'EQUIPMENT_OPERATOR_3' );
   if vaccess = 'EDIT'
    then
     lov_list( 'OPERATORS', 'P2', c2rec.equipment_operator_3, FALSE, FALSE, FALSE );
    else
     lov_list( 'OPERATORS', 'P2', c2rec.equipment_operator_3, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
   /*
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'EQUIPMENT_OPERATOR_3' ) || htf.formtext( 'P2', 30,30, c2rec.equipment_operator_3), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c2rec.equipment_operator_3 ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   */
  htp.tablerowclose;
  htp.tableclose;
 htp.nl;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
  if vaccess = 'EDIT'
   then

    if rid is not null
     then
      htp.p( '<TD VALIGN="TOP">' );
       htp.formsubmit( 'ACTION', 'Update' );
      htp.p( '</TD>' );
      htp.p( '<TD VALIGN="TOP">' );
       htp.formsubmit( 'ACTION', 'Fuelling' );
      htp.p( '</TD>' );
      htp.p( '<TD VALIGN="TOP">' );
       htp.formsubmit( 'ACTION', 'Trucks & Tankers' );
      htp.p( '</TD>' );
      htp.p( '<TD VALIGN="TOP">' );
      htp.formsubmit( 'ACTION', 'New Convoy' );
      htp.p( '</TD>' );
--      htp.p( '<TD VALIGN="TOP">' );
--       htp.formsubmit( 'ACTION', 'Recalculate' );

      htp.p( '<TD VALIGN="TOP">' );
      htp.formsubmit( 'ACTION', 'Insert New Convoy as a Copy' );
      htp.p( '</TD>' );
      htp.p( '<TD VALIGN="TOP">' );
      htp.formsubmit( 'ACTION', 'Delete' );
      htp.p( '</TD>' );
      htp.formclose;
      htp.tabledata( htf.formopen( 'CONVOY_PLAN_LOAD.convoy_plan_mng', ctarget=>'ASSIGN' ) || htf.formhidden( 'SURL', surl )|| htf.formsubmit( null, 'Load Convoy Plan' ) || htf.formclose,cattributes=>'VALIGN="TOP"');
     else
      htp.p( '<TD VALIGN="TOP">' );
       htp.formsubmit( 'ACTION', 'Insert' );
       htp.formclose;
      htp.p( '</TD>' );
    end if;

  else

    if rid is not null
     then
      htp.p( '<TD VALIGN="TOP">' );
       htp.anchor( 'strangp.manentry_page2?surl=' || surl || '&rid=' || replace(nrid,'+','~') || '&scid=' || scid || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id, 'Fuelling' );
      htp.p( '</TD>' );
      open c5(c2rec.convoy_id);
      fetch c5 into c5rec;
      close c5;
      htp.p( '<TD VALIGN="TOP">' );
       htp.anchor( 'strangp.manentry_page3?surl=' || surl || '&rid=' || replace(rowidtochar(c5rec.rowid),'+','~') || '&scid=' || scid || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id, 'Trucks & Tankers' );
      htp.p( '</TD>' );
    end if;

 end if;

 htp.p( '<TD VALIGN="TOP">' );
   search( surl, 'ME', nrid, samerow=>TRUE );
 htp.p( '</TD>' );
 
  htp.tablerowclose;
 htp.tableclose;
 htp.formclose;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'MANENTRY',null,owner_id,errmsg=>sqlerrm);
end manentry;


procedure accept_manentry(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, old_entry in varchar2, entryno in varchar2, access_id in varchar2 default null, action in varchar2, p1 in GLBX.MYARRAY, p2 in GLBX.MYARRAY )
as

 cursor c2( rid rowid ) is select * from strang.convoy where rowid = rid;

 cursor c3( ent varchar2 ) is select count('x') exst from strang.convoy where convoy_id = ent;

 cursor c4( entryno number) is select rowidtochar(rowid) from strang.convoy where convoy_id = entryno;

 cursor c4a( entryno number) is select convoy_id,portdisc,status, io from strang.convoy where convoy_id = entryno and status='FINAL';

 cursor c4b( vconvoy_id number) is
       select cd.movement_no1 vmv
       from strang.convoy_details cd
       where cd.convoy_id = vconvoy_id
       union
       select cd.movement_no2 vmv
       from strang.convoy_details cd
       where cd.convoy_id = vconvoy_id
       union
       select cd.movement_no3 vmv
       from strang.convoy_details cd
       where cd.convoy_id = vconvoy_id
       union
       select cd.movement_no4 vmv
       from strang.convoy_details cd
       where cd.convoy_id = vconvoy_id
       union
       select cd.movement_no5 vmv
       from strang.convoy_details cd
       where cd.convoy_id = vconvoy_id
       union
       select cd.movement_no6 vmv
       from strang.convoy_details cd
       where cd.convoy_id = vconvoy_id;

 cursor c4c( vconvoy_id number, vmovement_no varchar2, vio varchar2 ) is
    select count(m.movement_no) ttl
     from strang.movements m
     where
        (( nvl(vio,'I') = 'I' and nvl(m.io,'I') = nvl(vio,'I') and 
      m.current_location in (select code from strang.lov where lov_name='LOCATIONS' and colc = 'KIUNGA' and substr(code,1,1)='K'))
      or ( nvl(vio,'I') = 'O' and nvl(m.io,'I') = nvl(vio,'I') and 
      m.current_location in (select code from strang.lov where lov_name='LOCATIONS' and colc = 'TABUBIL' and substr(code,1,1)='T')))
      and complete not in ('H')
      and m.convoy_id is null
      and m.movement_no = vmovement_no
      and m.movement_no in
      (
      select cd.movement_no1 vmv
      from strang.convoy_details cd
      where cd.convoy_id = vconvoy_id
      and cd.movement_no1 = vmovement_no
      union
      select cd.movement_no2 vmv
      from strang.convoy_details cd
      where cd.convoy_id = vconvoy_id
      and cd.movement_no2 = vmovement_no
      union
      select cd.movement_no3 vmv
      from strang.convoy_details cd
      where cd.convoy_id = vconvoy_id
      and cd.movement_no3 = vmovement_no
      union
      select cd.movement_no4 vmv
      from strang.convoy_details cd
      where cd.convoy_id = vconvoy_id
      and cd.movement_no4 = vmovement_no
      union
      select cd.movement_no5 vmv
      from strang.convoy_details cd
      where cd.convoy_id = vconvoy_id
      and cd.movement_no5 = vmovement_no
      union
      select cd.movement_no6 vmv
      from strang.convoy_details cd
      where cd.convoy_id = vconvoy_id
      and cd.movement_no6 = vmovement_no
      );
 cursor c5( entryno number) is select rowid from strang.convoy_details where convoy_id = entryno and rno = (select min(rno) from strang.convoy_details where convoy_id = entryno);
 cursor c8( entryno number) is select rowid,truck_id from strang.convoy_details where convoy_id = entryno;
 cursor c9( lv varchar2, cd varchar2 ) is select * from strang.lov where lov_name = lv and code = cd;
 cursor c10 (entryno number) is select * from strang.convoy_details where convoy_id = entryno;
 cursor c11 (entryno number) is select count('x') exst from (select movement_no from strang.movements where convoy_id = entryno
                                                              union
                                                             select movement_no1 from strang.convoy_details where convoy_id = entryno and movement_no1 is not null
                                                              union 
                                                             select movement_no2 from strang.convoy_details where convoy_id = entryno and movement_no2 is not null
                                                              union 
                                                             select movement_no3 from strang.convoy_details where convoy_id = entryno and movement_no3 is not null
                                                              union 
                                                             select movement_no4 from strang.convoy_details where convoy_id = entryno and movement_no4 is not null
                                                              union 
                                                             select movement_no5 from strang.convoy_details where convoy_id = entryno and movement_no5 is not null
                                                              union 
                                                             select movement_no6 from strang.convoy_details where convoy_id = entryno and movement_no6 is not null);
 --cursor c10

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4arec		c4a%ROWTYPE;
 c4brec		c4b%ROWTYPE;
 c4crec		c4c%ROWTYPE;
 c5rec		c5%ROWTYPE;
 c9rec		c9%ROWTYPE;
 c10arec    c10%ROWTYPE;
 c11rec    c11%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nrid		varchar2(100);
 vaccess	varchar2(20);
 msg		varchar2(100);
 nmb		integer;
 newconvoy	number;
 oldconvoy  number;
 newrid     varchar(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_MANENTRY' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 nrid := replace(rid,'~','+');
 vaccess := data_access( owner_id, 'MANENTRY', rid );

 if vaccess = 'EDIT'
  then

 -- Validate Number
 begin
  nmb := to_number(entryno);
 exception
  when others then
   manentry( surl, nrid, scid, call_name, parm, access_id, 'Invalid Number:' || entryno );
   return;
 end;
 if entryno is null 
  then
   manentry( surl, nrid, scid, call_name, parm, access_id, 'Entry Number cannot be empty:' || entryno );
   return;
 end if;
 if action = 'Insert' -- and old_entry is not null -- Added by David Banjo 10/5/2021
  then
   open c3( entryno );
   fetch c3 into c3rec;
   close c3;
   if c3rec.exst > 0
    then
     manentry( surl, nrid, scid, call_name, parm, access_id, 'Already exists: ' || entryno  );
     return;
   end if;
   insert into strang.convoy(convoy_id) values (entryno);
   insert into strang.convoy_fuel(convoy_id) values (entryno);
   insert into strang.convoy_details(convoy_id,rno) values (entryno,1);
   msg := 'Convoy Inserted';
 elsif action = 'Delete'
  then
  
   open c11( entryno );
   fetch c11 into c11rec;
   close c11;
   if c11rec.exst > 0
     then
     manentry( surl, nrid, scid, call_name, parm, access_id, 'Delete cancelled. Container(s) still attached to Convoy ' || entryno  );
     return;
   end if;
   
   confirm_manentry_delete( surl, nrid, scid, call_name, parm, access_id, 'Delete Convoy ' || entryno );
   return;
 elsif action = 'Insert New Convoy as a Copy' then
 
    
    select strang.s_convoy_id.nextval into newconvoy from dual;
    open c2( nrid );
    fetch c2 into c2rec;
    close c2;
    
    oldconvoy := c2rec.convoy_id;
    c2rec.convoy_id := newconvoy ;
    c2rec.estdepart := c2rec.estdepart + 1;
    c2rec.interface4_date := null;
    c2rec.date_modified := sysdate;
    
    
    INSERT INTO strang.convoy
      VALUES c2rec returning rowid into newrid;
      commit;
    insert into strang.convoy_fuel(convoy_id) values (newconvoy);
    
    for c10rec in c10 (oldconvoy) loop
    
      c10arec.convoy_id := newconvoy;
      c10arec.rno := c10rec.rno;
      c10arec.truck_id := c10rec.truck_id;
      c10arec.trailer_id := c10rec.trailer_id;
      c10arec.order_id := c10rec.order_id;
      c10arec.truck_tanker := c10rec.truck_tanker;
      c10arec.convoy_section := c10rec.convoy_section;
      c10arec.weighbridge := c10rec.weighbridge;
      c10arec.fuel_pump := c10rec.fuel_pump;
      c10arec.fuel_type := c10rec.fuel_type;
      c10arec.fuel_litres := c10rec.fuel_litres;
      c10arec.operator := c10rec.operator;

      insert into strang.convoy_details values c10arec; 
      c10arec := null;
    end loop;
    
   
--   for j in p1.first..p1.last loop
--    begin
--     execute immediate
--      'update strang.convoy set ' || p1(j) || ' = :1 where convoy_id = :2'
--        using p2(j), newconvoy;
--    exception
--     when others then msg := msg || '[Error Modifying ' || initcap(p1(j)) || ' to value: ' || p2(j) || ']';
--    end;
--   end loop;
   
   commit;
   manentry( surl, newrid, scid, call_name, parm, access_id, 'Copy of Convoy ' ||oldconvoy|| ' created with a Convoy Date of '||TO_CHAR( c2rec.estdepart, 'fmDay, DD Month YYYY.' ));
   return;
 else
   if nvl(old_entry,'!') <> nvl(entryno,'\')
    then
     open c3( entryno );
     fetch c3 into c3rec;
     close c3;
     if c3rec.exst > 0
      then
        manentry( surl, nrid, scid, call_name, parm, access_id, 'Already exists: ' || entryno  );
       return;
     end if;
     update strang.convoy set convoy_id = entryno where convoy_id = old_entry;
   end if;
   open c2( nrid );
   fetch c2 into c2rec;
   close c2;
 end if;

 --if action not in ( 'Delete', 'Insert New Convoy as a Copy') -- removed by DB on 5/2/24
 if action in ('Update')
  then
   for j in p1.first..p1.last loop
    begin
     execute immediate
    --  'update strang.convoy set ' || p1(j) || ' = :1 where convoy_id = :2'
      'update strang.convoy set ' || p1(j) || ' = :1, date_modified = sysdate where convoy_id = :2'
        using p2(j), entryno;
    exception
     when others then msg := msg || '[Error Modifying ' || initcap(p1(j)) || ' to value: ' || p2(j) || ']';
    end;
   end loop;
   open c4a(entryno);
   fetch c4a into c4arec;
   if C4A%FOUND then
    -- David Banjo interface4_date reset added
    update strang.movements m set m.current_location=c4arec.portdisc, m.date_modified = sysdate, m.interface4_date = NULL where m.convoy_id=c4arec.convoy_id and NVL(m.io,'I') = NVL(c4arec.io,'I') ; commit;
    msg := nvl(msg,'Locations Updated For Containers');
   end if;
   close c4a;
   
   
   open c2( nrid );
   fetch c2 into c2rec;
   close c2;
   
   if nvl(c2rec.io,'I') = 'I' then 
       for c4brec in c4b( entryno ) loop
        open c4c(entryno,c4brec.vmv, c2rec.io);
        fetch c4c into c4crec;
        if C4C%FOUND then
         if c4crec.ttl = 1 then
          update strang.movements
          -- David Banjo reset interface4_date to NULL
          set current_location=nvl((select portdisc from strang.convoy where convoy_id = entryno and status='FINAL'), current_location),  
--          (select portdisc from strang.convoy where convoy_id = entryno),
              convoy_id = entryno, 
              date_modified = sysdate,
              interface4_date = NULL
          where movement_no = c4brec.vmv
          and current_location in (select code from strang.lov where lov_name='LOCATIONS' and colc = 'KIUNGA' and substr(code,1,1)='K')
          and convoy_id is null
          and complete not in ('H')
          and io = c2rec.io
          ; commit;
         end if;
        end if;
        close c4c;
       end loop;
   else    
      for c4brec in c4b( entryno ) loop
        open c4c(entryno,c4brec.vmv, c2rec.io);
        fetch c4c into c4crec;
        if C4C%FOUND then
         if c4crec.ttl = 1 then
          update strang.movements
          -- David Banjo reset interface4_date to NULL
          set current_location=nvl((select portdisc from strang.convoy where convoy_id = entryno and status='FINAL'), current_location),  
--          (select portdisc from strang.convoy where convoy_id = entryno),
              convoy_id = entryno, 
              date_modified = sysdate,
              interface4_date = NULL
          where movement_no = c4brec.vmv
          and current_location in (select code from strang.lov where lov_name='LOCATIONS' and colc = 'TABUBIL' and substr(code,1,1)='T')
          and convoy_id is null
          and io = c2rec.io
          and complete not in ('H')
          ; commit;
         end if;
        end if;
        close c4c;
       end loop;
   
   end if;
   
   
   
   --
 end if;
 commit;
 end if; -- End of Edit Data
 
 msg := nvl(msg,'Record Updated');
  open c4(entryno);
 fetch c4 into nrid;
 close c4;

 if action in ('Insert','Update','Recalculate')
  then
   manentry( surl, nrid, scid, call_name, parm, access_id, msg );
 elsif action = 'New Convoy'
  then
   manentry( surl, null, scid, call_name, parm, access_id, msg );
 elsif action = 'Fuelling'
  then
   manentry_page2( surl, nrid, scid, call_name, parm, access_id, msg );
 elsif action = 'Trucks & Tankers'
  then
   open c5(entryno);
   fetch c5 into c5rec;
   close c5;
   manentry_page3( surl, rowidtochar(c5rec.rowid), scid, call_name, parm, access_id, msg );
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_MANENTRY',null,owner_id,errmsg=>sqlerrm);
end accept_manentry;

procedure manentry_page2(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null )
as

 cursor c2( rid rowid ) is select * from strang.convoy where rowid = rid;
 cursor c3( entryno number ) is select * from strang.convoy_fuel where convoy_id = entryno;
 cursor c5( entryno number) is select rowid from strang.convoy_details where convoy_id = entryno and rno = (select min(rno) from strang.convoy_details where convoy_id = entryno);

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c5rec		c5%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nrid		varchar2(100);
 vaccess	varchar2(20);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.MANENTRY_PAGE2' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 nrid := replace(rid,'~','+');
 vaccess := data_access( owner_id, 'MANENTRY', rid );
 open c2( nrid );
 fetch c2 into c2rec;
 close c2;
 open c3( c2rec.convoy_id );
 fetch c3 into c3rec;
 close c3;

 glbx.main_title( surl, 'Fuelling Description',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR17',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if msg is not null then glbx.header_msg( msg ); end if;
 htp.p( '<CENTER>' );

 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_manentry_page2' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'CALL_NAME', call_name );
   htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'RID', nrid );
   htp.formhidden( 'OLD_ENTRY', c2rec.convoy_id );
 end if;

 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
 htp.tablerowopen;
 htp.p( '<TD VALIGN="TOP" ALIGN="LEFT">' );
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
  if c2rec.io = 'I' then
   htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
  else
   htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
  end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Fuel Loading Details'), cattributes=>glbx.QUERY_BACKGROUND || 'align="CENTER" colspan=2' );
  htp.tablerowclose;
  if vaccess = 'EDIT'
   then
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Convoy ID' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.bold( c2rec.convoy_id), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Hose Connected' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.formhidden( 'P1', 'HOSE_CONNECTED' ) || htf.formtext( 'P2', 20, 20, c3rec.hose_connected) || ' ' || htf.italic('HH24:MI'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Commenced Fuel Load' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.formhidden( 'P1', 'COMMENCED_FUEL_LOAD' ) || htf.formtext( 'P2', 20, 20, c3rec.commenced_fuel_load) || ' ' || htf.italic('HH24:MI'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Completed Fuel Load' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.formhidden( 'P1', 'COMPLETED_FUEL_LOAD' ) || htf.formtext( 'P2', 20, 20, c3rec.completed_fuel_load) || ' ' || htf.italic('HH24:MI'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Hose Disconnected' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.formhidden( 'P1', 'HOSE_DISCONNECTED' ) || htf.formtext( 'P2', 20, 20, c3rec.hose_disconnected) || ' ' || htf.italic('HH24:MI'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Fuel Operator 1' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.formhidden( 'P1', 'FUEL_OPERATOR_1' ) || htf.formtext( 'P2', 67, 67, c3rec.fuel_operator_1), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Fuel Operator 2' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.formhidden( 'P1', 'FUEL_OPERATOR_2' ) || htf.formtext( 'P2', 67, 67, c3rec.fuel_operator_2), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Fuel Operator 3' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.formhidden( 'P1', 'FUEL_OPERATOR_3' ) || htf.formtext( 'P2', 67, 67, c3rec.fuel_operator_3), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Fuel Operator 4' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.formhidden( 'P1', 'FUEL_OPERATOR_4' ) || htf.formtext( 'P2', 67, 67, c3rec.fuel_operator_4), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Fuel Operator 5' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.formhidden( 'P1', 'FUEL_OPERATOR_5' ) || htf.formtext( 'P2', 67, 67, c3rec.fuel_operator_5), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Fuel Operator 6' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.formhidden( 'P1', 'FUEL_OPERATOR_6' ) || htf.formtext( 'P2', 67, 67, c3rec.fuel_operator_6), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
   else
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Convoy ID' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( htf.bold( c2rec.convoy_id), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Hose Connected' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( nvl(c3rec.hose_connected,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Commenced Fuel Load' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( nvl(c3rec.commenced_fuel_load,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Completed Fuel Load' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( nvl(c3rec.completed_fuel_load,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Hose Disconnected' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( nvl(c3rec.hose_disconnected,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Fuel Operator 1' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( nvl(c3rec.fuel_operator_1,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
     htp.tabledata( htf.bold( 'Fuel Operator 2' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( nvl(c3rec.fuel_operator_2,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Fuel Operator 3' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( nvl(c3rec.fuel_operator_3,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Fuel Operator 4' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( nvl(c3rec.fuel_operator_4,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Fuel Operator 5' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( nvl(c3rec.fuel_operator_5,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( 'Fuel Operator 6' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
     htp.tabledata( nvl(c3rec.fuel_operator_6,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    htp.tablerowclose;
  end if;

 htp.tableclose;

 htp.p( '</TD>' );
 htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
  htp.tablerowopen;
   if vaccess = 'EDIT'
    then
     htp.p( '<TD VALIGN="TOP">' );
      htp.formsubmit( 'ACTION', 'Update' );
     htp.p( '</TD>' );
     htp.p( '<TD VALIGN="TOP">' );
      htp.formsubmit( 'ACTION', 'Convoy Header' );
     htp.p( '</TD>' );
     htp.p( '<TD VALIGN="TOP">' );
      htp.formsubmit( 'ACTION', 'Trucks & Tankers' );
      htp.formclose;
     htp.p( '</TD>' );
   else
     htp.p( '<TD VALIGN="TOP">' );
      htp.anchor( 'strangp.manentry?surl=' || surl || '&rid=' || replace(nrid,'+','~') || '&scid=' || scid || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id, 'Convoy Header' );
     htp.p( '</TD>' );
     open c5(c2rec.convoy_id);
     fetch c5 into c5rec;
     close c5;
     htp.p( '<TD VALIGN="TOP">' );
      htp.anchor( 'strangp.manentry_page3?surl=' || surl || '&rid=' || replace(rowidtochar(c5rec.rowid),'+','~') || '&scid=' || scid || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id, 'Trucks & Tankers' );
     htp.p( '</TD>' );
  end if;
  htp.tablerowclose;
 htp.tableclose;
 htp.formclose;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'MANENTRY_PAGE2',null,owner_id,errmsg=>sqlerrm);
end manentry_page2;

procedure accept_manentry_page2(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, old_entry in varchar2, access_id in varchar2 default null, action in varchar2, p1 in GLBX.MYARRAY, p2 in GLBX.MYARRAY )
as

 cursor c2( rid rowid ) is select * from strang.convoy where rowid = rid;
 cursor c3( ent varchar2 ) is select count('x') exst from strang.convoy where convoy_id = ent;
 cursor c4( entryno number) is select rowidtochar(rowid) from strang.convoy where convoy_id = entryno;
 cursor c5( entryno number) is select rowid from strang.convoy_details where convoy_id = entryno and rno = (select min(rno) from strang.convoy_details where convoy_id = entryno);

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c5rec		c5%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nrid		varchar2(100);
 vaccess	varchar2(20);
 msg		varchar2(100);
 nmb		integer;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_MANENTRY_PAGE2' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 nrid := replace(rid,'~','+');
 vaccess := data_access( owner_id, 'MANENTRY', rid );

 if vaccess = 'EDIT'
  then

 -- Validate Number
 if old_entry is null
  then
   manentry( surl, nrid, scid, call_name, parm, access_id, 'Convoy ID cannot be empty:' || old_entry );
   return;
 end if;
 if action <> 'Delete'
  then
   for j in p1.first..p1.last loop
    begin
     execute immediate
      'update strang.convoy_fuel set ' || p1(j) || ' = :1 where convoy_id = :2'
        using p2(j), old_entry;
    exception
     when others then msg := msg || '[Error Modifying ' || initcap(p1(j)) || ' to value: ' || p2(j) || ']';
    end;
   end loop;
 end if;
 commit;
 end if; -- End of Edit Data
 msg := nvl(msg,'Record Updated');
 open c4(old_entry);
 fetch c4 into nrid;
 close c4;

 if action = 'Update'
  then
   manentry_page2( surl, nrid, scid, call_name, parm, access_id, msg );
 elsif action = 'New Convoy'
  then
   manentry( surl, null, scid, call_name, parm, access_id, msg );
 elsif action = 'Convoy Header'
  then
   manentry( surl, nrid, scid, call_name, parm, access_id, msg );
 elsif action = 'Trucks & Tankers'
  then
   open c5(old_entry);
   fetch c5 into c5rec;
   close c5;
   manentry_page3( surl, rowidtochar(c5rec.rowid), scid, call_name, parm, access_id, msg );
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_MANENTRY_PAGE2',null,owner_id,errmsg=>sqlerrm);
end accept_manentry_page2;

 procedure convoy_ctr_list( parm in varchar2, v_portload in varchar2, v_movement in varchar2 default null, v_io in varchar2 default 'I', ismand in boolean DEFAULT FALSE, isedit in boolean DEFAULT TRUE )
 as

  cursor c1( v_portload varchar2 ) is select m.movement_no||'~'||nvl(m.seal,'BBULK') movement_no, m.seal, m.iso_container_type, m.container_type, (nvl(m.vgm,(nvl(m.sumweight,0)+nvl(m.tare,0)))/1000) weight,
  m.urgency,s.shipname||' - '|| s.voy vvoy
  from strang.movements m, strang.ships_airway s
  where
   --m.current_location = v_portload or
   m.current_location in (select code from strang.lov where lov_name='LOCATIONS' and colc = 'KIUNGA' and substr(code,1,1)='K')
   and complete not in ('H')
   and m.local_ship_id = s.ship_id
   and nvl(s.estdepart,sysdate) >= (sysdate - 90) 
   and m.convoy_id is null
   and nvl(m.io,'I') = nvl(v_io,'I')
   order by movement_no;
   
  cursor c2( v_portload varchar2 ) is select m.movement_no||'~'||nvl(m.seal,'BBULK') movement_no, m.seal, m.iso_container_type, m.container_type, (nvl(m.vgm,(nvl(m.sumweight,0)+nvl(m.tare,0)))/1000) weight,
  m.urgency,s.shipname||' - '|| s.voy vvoy
  from strang.movements m, strang.ships_airway s
  where
   --m.current_location = v_portload or
   m.current_location in (select code from strang.lov where lov_name='LOCATIONS' and colc = 'TABUBIL' and substr(code,1,1)='T')
   and complete not in ('H')
   and m.local_ship_id = s.ship_id
   and nvl(s.estdepart,sysdate) >= (sysdate - 60) 
   and m.convoy_id is null
   and m.io = 'O'
   order by movement_no;
   

  c1rec	c1%ROWTYPE;
  c2rec	c2%ROWTYPE;

 begin

  if isedit
   then
    htp.formselectopen( parm );
    if not ismand then htp.formselectoption( NULL ); end if;
    if v_io = 'I' then 
       for c1rec in c1( v_portload ) loop
          if (v_movement is not null) and (v_movement = c1rec.movement_no)
          then
             htp.formselectoption( c1rec.movement_no||' '|| c1rec. iso_container_type||' '||c1rec.vvoy , 'SELECTED', cattributes=>'VALUE="' || c1rec.movement_no || '"' );
          else
             htp.formselectoption( c1rec.movement_no||' '|| c1rec. iso_container_type||' '||c1rec.vvoy ,cattributes=>'VALUE="' || c1rec.movement_no || '"' );
          end if;
       end loop;
    elsif v_io = 'O' then  
       for c2rec in c2( v_portload ) loop
          if (v_movement is not null) and (v_movement = c2rec.movement_no)
          then
             htp.formselectoption( c2rec.movement_no||' '|| c2rec. iso_container_type||' '||c2rec.vvoy , 'SELECTED', cattributes=>'VALUE="' || c2rec.movement_no || '"' );
          else
             htp.formselectoption( c2rec.movement_no||' '|| c2rec. iso_container_type||' '||c2rec.vvoy ,cattributes=>'VALUE="' || c2rec.movement_no || '"' );
          end if;
       end loop;   
    end if;
       htp.formselectclose;
 end if;

 exception
 when others then htp.p( sqlerrm );
 end convoy_ctr_list;

procedure manentry_page3(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null )
as

 cursor c2( entno number) is select rowid,io from strang.convoy where convoy_id = entno;
 cursor c3( rid rowid) is select * from strang.convoy_details where rowid = rid;
 cursor c4( entryno number ) is select count('x') tot from strang.convoy_details where convoy_id = entryno;
 cursor c5( entno number) is select portload,io from strang.convoy where convoy_id = entno;
 cursor c6( rid rowid) is select code,colb from strang.lov l, strang.convoy_details c where lov_name='TRAILERS' and l.code = c.trailer_id and c.rowid = rid;
 
 cursor c7 is select m.movement_no||'~'||nvl(m.seal,'BBULK') movement_no, m.seal, m.iso_container_type, m.movement_type, (nvl(m.vgm,(nvl(m.sumweight,0)+nvl(m.tare,0)))/1000) weight,
  m.urgency,s.shipname||' - '|| s.voy vvoy
  from strang.movements m, strang.ships_airway s
  where
   m.current_location in (select code from strang.lov where lov_name='LOCATIONS' and colc = 'KIUNGA' and substr(code,1,1)='K')
   and complete not in ('H')
   and m.local_ship_id = s.ship_id
   and nvl(s.estdepart,sysdate) >= (sysdate - 90) 
   and m.convoy_id is null
   and nvl(m.io,'I') = 'I'
   order by movement_no;
   
  cursor c8 is select m.movement_no||'~'||nvl(m.seal,'BBULK') movement_no, m.seal, m.iso_container_type, m.movement_type,(nvl(m.vgm,(nvl(m.sumweight,0)+nvl(m.tare,0)))/1000) weight,
  m.urgency,s.shipname||' - '|| s.voy vvoy
  from strang.movements m, strang.ships_airway s
  where
   m.current_location in (select code from strang.lov where lov_name='LOCATIONS' and colc = 'TABUBIL' and substr(code,1,1)='T')
   and complete not in ('H')
   and m.local_ship_id = s.ship_id
   and nvl(s.estdepart,sysdate) >= (sysdate - 60) 
   and m.convoy_id is null
   and m.io = 'O'
   order by movement_no;
 

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c5rec		c5%ROWTYPE;
 c6rec		c6%ROWTYPE;
 
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nrid		varchar2(100);
 vaccess	varchar2(20);
 vportload	varchar2(100);
 tlc		varchar2(100);
 vio		varchar2(1);
begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.MANENTRY_PAGE3' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 nrid := replace(rid,'~','+');
 vaccess := data_access( owner_id, 'MANENTRY', rid );
 open c3( nrid );
 fetch c3 into c3rec;
 close c3;
 open c4(c3rec.convoy_id);
 fetch c4 into c4rec;
 close c4;
 open c2(c3rec.convoy_id);
 fetch c2 into c2rec;
 close c2;
 open c5(c3rec.convoy_id);
 fetch c5 into c5rec;
 vportload := c5rec.portload;
 vio := nvl(c5rec.io,'I');
 close c5;
 open c6( nrid );
 fetch c6 into c6rec;
 if c6%FOUND then
   tlc:= to_char(c6rec.colb)||' Tonnes';
 else
   tlc:= ' ';
 end if;
 close c6;

   htp.p( '<datalist id="P2x">' );

    if   c2rec.io = 'I' then
       for c7rec in c7 loop
          htp.formselectoption( c7rec.movement_no||' '|| c7rec. iso_container_type||' '||c7rec.vvoy, cattributes=>'VALUE="' || c7rec.movement_no|| '"' );
       end loop;
    else
       for c8rec in c8 loop
          htp.formselectoption( c8rec.movement_no||' '|| c8rec. iso_container_type||' '||c8rec.vvoy, cattributes=>'VALUE="' || c8rec.movement_no || '"' );
       end loop;
    end if;
  --  end if;
    htp.p( '</datalist>' );
 

 glbx.main_title( surl, 'Manual Entry - Trucks & Tankers',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR17',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if msg is not null then glbx.header_msg( msg ); end if;
 htp.p( '<CENTER>' );

 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_manentry_page3' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
   htp.formhidden( 'CALL_NAME', call_name );
   htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'RID', nrid );
   htp.formhidden( 'OLD_ENTRY', c3rec.convoy_id );
 end if;

   htp.nl;
   htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
   htp.tablerowopen;
   htp.p( '<TD VALIGN="TOP" ALIGN="LEFT">' );

   htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
   htp.tablerowopen;
   if c2rec.io = 'I' then
      htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="4"');
   else
      htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="4"');
   end if;
   htp.tablerowclose;
   htp.tablerowopen;
   htp.tabledata( htf.bold( 'Convoy ID' ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( c3rec.convoy_id), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT" COLSPAN="3"' );
   htp.tablerowclose;
   htp.tablerowopen;
   htp.tabledata( htf.bold('Truck/Tanker'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'TRUCK_TANKER' );
   if vaccess = 'EDIT'
    then
     lov_list( 'TRUCK_OR_TANKER', 'P2', c3rec.truck_tanker, TRUE, FALSE, FALSE );
    else
     lov_list( 'TRUCK_OR_TANKER', 'P2', c3rec.truck_tanker, TRUE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
   htp.tabledata( htf.bold('Record #'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'RNO' ) || htf.formhidden( 'P2', c3rec.rno ) || htf.bold( c3rec.rno ) || ' / ' || htf.bold( c4rec.tot ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c3rec.rno ) || ' / ' || htf.bold( c4rec.tot ), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Truck'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'TRUCK_ID' );
   if vaccess = 'EDIT'
    then
     lov_list( 'TRUCKS', 'P2', c3rec.truck_id, FALSE, FALSE, FALSE );
    else
     lov_list( 'TRUCKS', 'P2', c3rec.truck_id, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Trailer'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'TRAILER_ID' );
   if vaccess = 'EDIT'
    then
     lov_list( 'TRAILERS', 'P2', c3rec.trailer_id, FALSE, FALSE, FALSE );
    else
     lov_list( 'TRAILERS', 'P2', c3rec.trailer_id, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
   htp.tabledata( htf.bold('Trailer Load Capacity'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( tlc , cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Operator'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'OPERATOR' );
   if vaccess = 'EDIT'
    then
     lov_list( 'OPERATORS', 'P2', c3rec.operator, FALSE, FALSE, FALSE );
    else
     lov_list( 'OPERATORS', 'P2', c3rec.operator, FALSE, FALSE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
   htp.tabledata( htf.bold('Convoy Section'), cattributes=>glbx.QUERY_BACKGROUND || 'align="LEFT"' );
   if vaccess = 'EDIT' then
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'CONVOY_SECTION' );
   if vaccess = 'EDIT'
    then
     lov_list( 'SECTIONS', 'P2', c3rec.convoy_section, TRUE, TRUE, FALSE );
    else
     lov_list( 'SECTIONS', 'P2', c3rec.convoy_section, TRUE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
       end if;
  htp.tablerowclose;
/*
   htp.tablerowopen;
   htp.tabledata( htf.bold('Order in Convoy'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'ORDER_ID' );
   if vaccess = 'EDIT'
    then
     lov_list( 'ORDER_BY', 'P2', c3rec.order_id, TRUE, TRUE, FALSE );
    else
     lov_list( 'ORDER_BY', 'P2', c3rec.order_id, TRUE, TRUE, FALSE, isedit=>FALSE );
   end if;
   htp.p( '</TD>' );
       end if;
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
*/
  htp.tablerowopen;
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT" COLSPAN="4"' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Fuel Pump'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'FUEL_PUMP' ) || htf.formtext( 'P2', 30, 30, c3rec.fuel_pump), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c3rec.fuel_pump ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Fuel Type'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'FUEL_TYPE' ) || htf.formtext( 'P2', 30, 30, c3rec.fuel_type), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( c3rec.fuel_type ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Fuel Litres'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'FUEL_LITRES' ) || htf.formtext( 'P2', 30, 30, to_char(c3rec.fuel_litres,'999999999')), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( to_char(c3rec.fuel_litres,'999999999') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Weighbridge Out (Tonne)'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   if vaccess = 'EDIT' then htp.tabledata( htf.formhidden( 'P1', 'WEIGHBRIDGE' ) || htf.formtext( 'P2', 30, 30, to_char(c3rec.weighbridge,'999999.999')), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else htp.tabledata( htf.bold( to_char(c3rec.weighbridge,'999999.999') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   end if;
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
 htp.tableclose;
 htp.nl;

  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
   htp.tablerowopen;
   if c2rec.io = 'I' then
    htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="17"');
   else
    htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="17"');
   end if;
   htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Loading of Truck'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT" COLSPAN="17"' );
  htp.tablerowclose;
  htp.tablerowopen;
   htp.tabledata( htf.bold('Lookup or<BR>Remove'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Container/BBulk'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Seal'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Full<BR>Empty'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Container<BR>Type'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Weight<BR>Tonne<BR>Incl. Tare'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Volume<BR>M3'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Cargo Type'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Hazardous'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Overdims'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Set Point'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Container<BR>Owner'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Consignee'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Consignee<BR>Location'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Vessel'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Warehouse<BR>Destination'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
   htp.tabledata( htf.bold('Urgency'), cattributes=>glbx.QUERY_BACKGROUND || 'align="RIGHT"' );
  htp.tablerowclose;
-- CONTAINER 1
  htp.tablerowopen;
  if vaccess = 'EDIT' then
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    htp.formhidden( 'P1', 'LOOKUP1' );
    lov_list( 'ADD_REMOVE', 'P2', c3rec.lookup1, FALSE, TRUE, FALSE );
    htp.p( '</TD>' );
    if c3rec.lookup1 = 'A' and c3rec.movement_no1 is null and c3rec.seal1 is null
    then
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     htp.formhidden( 'P1', 'MOVEMENT_NO1' );
     convoy_ctr_list('P2',vportload,c3rec.movement_no1,vio);
     htp.p('</TD>') ;
      htp.tabledata( htf.bold( to_char(c3rec.seal1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    else
     if c3rec.movement_no1 is null and c3rec.seal1 is null then
      htp.tabledata( htf.formhidden( 'P1', 'MOVEMENT_NO1' ) || htf.formtext( 'P2', 30, 70, trim(to_char(c3rec.movement_no1)), cattributes=>'list="P2x" autocomplete="off"'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
      
      htp.tabledata( htf.formhidden( 'P1', 'SEAL1' ) || htf.formtext( 'P2', 10, 20, trim(to_char(c3rec.seal1))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     else
      htp.tabledata( htf.bold( to_char(c3rec.movement_no1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        if c3rec.full_mt1 = 'EMPTY' then -- Added by David Banjo on 25/11/2020
          htp.tabledata( htf.bold( '' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        else 
          htp.tabledata( htf.bold( to_char(c3rec.seal1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        end if;
    --  htp.tabledata( htf.bold( to_char(c3rec.seal1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     end if;
    end if;
    
   ------ start here David Banjo 11/8/2021
    
   htp.formhidden( 'P1', 'FULL_MT1' );
   if c3rec.full_mt1 is not null OR upper(c3rec.movement_no1) = 'BREAKBULK' then
      htp.formhidden( 'P2', to_char(c3rec.full_mt1));
      htp.tabledata( htf.bold( to_char(c3rec.full_mt1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else 
      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
      lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt1, FALSE, TRUE, FALSE ); -- made Readonly by David Banjo
      htp.p( '</TD>' );
   end if;
    
    
--   --htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
--   htp.formhidden( 'P1', 'FULL_MT1' );
--   htp.formhidden( 'P2', to_char(c3rec.full_mt1));
--   htp.tabledata( htf.bold( to_char(c3rec.full_mt1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
--  --lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt1, FALSE, TRUE, FALSE ); -- made Readonly by David Banjo
--  -- htp.p( '</TD>' );
  
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'ISO_CONTAINER_TYPE1' );
   if c3rec.container_type1 like 'BBULK%' then
      htp.p( htf.bold( 'BBULK' ));
      htp.formhidden( 'P2', 'BBULK' );
   else 
      if vaccess = 'EDIT'
      then
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type1, FALSE, TRUE, FALSE );
      else
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type1, FALSE, TRUE, FALSE, isedit=>FALSE );
      end if;
   end if;
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'WEIGHT1' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.weight1,'999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'VOLUME1' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.volume1,'9,999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_TYPE1' ) || htf.formtext( 'P2', 70, 100, trim(to_char(c3rec.container_type1))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'HAZARD1' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.hazard1))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'OVERDIMENSIONAL1' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.overdimensional1))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'SET_POINT1' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.set_point1))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_OWNER1' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.container_owner1))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );   
   htp.tabledata( htf.formhidden( 'P1', 'CONSIGNEE1' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.consignee1))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'CONSIGNEE_LOCATION1' );
   lov_list( 'LOCATIONS', 'P2', c3rec.consignee_location1, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'VESSEL1' ) || htf.formtext( 'P2', 30, 50, trim(to_char(c3rec.vessel1))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'WAREHOUSE_DESTINATION1' );
   lov_list_warehouse( 'LOCATIONS', 'P2', c3rec.warehouse_destination1, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'URGENCY1' );
   lov_list( 'URGENCY', 'P2', c3rec.urgency1, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
  else
   htp.tabledata( htf.bold( '&nbsp;' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.movement_no1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.seal1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.full_mt1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.iso_container_type1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.weight1,'999,999,999') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.volume1,'9,999,999.99') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_type1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.hazard1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.overdimensional1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.set_point1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_owner1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee_location1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.vessel1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.warehouse_destination1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.urgency1) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
  end if;
  htp.tablerowclose;
-- CONTAINER 2
  htp.tablerowopen;
  if vaccess = 'EDIT' then
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'LOOKUP2' );
   lov_list( 'ADD_REMOVE', 'P2', c3rec.lookup2, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
    if c3rec.lookup2 = 'A' and c3rec.movement_no2 is null and c3rec.seal2 is null
   then
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    htp.formhidden( 'P1', 'MOVEMENT_NO2' );
    convoy_ctr_list('P2',vportload,c3rec.movement_no2,vio);
    htp.p('</TD>') ;
      htp.tabledata( htf.bold( to_char(c3rec.seal2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    else
     if c3rec.movement_no2 is null and c3rec.seal2 is null then
      htp.tabledata( htf.formhidden( 'P1', 'MOVEMENT_NO2' ) || htf.formtext( 'P2', 30, 70, trim(to_char(c3rec.movement_no2)), cattributes=>'list="P2x" autocomplete="off"'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
      htp.tabledata( htf.formhidden( 'P1', 'SEAL2' ) || htf.formtext( 'P2', 10, 20, trim(to_char(c3rec.seal2))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     else
      htp.tabledata( htf.bold( to_char(c3rec.movement_no2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        if c3rec.full_mt2 = 'EMPTY' then -- Added by David Banjo on 25/11/2020
          htp.tabledata( htf.bold( '' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        else 
          htp.tabledata( htf.bold( to_char(c3rec.seal2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        end if;
   --   htp.tabledata( htf.bold( to_char(c3rec.seal2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     end if;
    end if;
    
        
   htp.formhidden( 'P1', 'FULL_MT2' );
   if c3rec.full_mt2 is not null OR upper(c3rec.movement_no2) = 'BREAKBULK' then
      htp.formhidden( 'P2', to_char(c3rec.full_mt2));
      htp.tabledata( htf.bold( to_char(c3rec.full_mt2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else
      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
      lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt2, FALSE, TRUE, FALSE ); -- made Readonly by David Banjo
      htp.p( '</TD>' );
   end if;
   
--   --htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
--   htp.formhidden( 'P1', 'FULL_MT2' );
--   htp.formhidden( 'P2', to_char(c3rec.full_mt2));
--   htp.tabledata( htf.bold( to_char(c3rec.full_mt2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
--   --lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt2, FALSE, TRUE, FALSE ); -- made Readonly by David Banjo
--   --htp.p( '</TD>' );
   
   
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'ISO_CONTAINER_TYPE2' );
   if c3rec.container_type2 like 'BBULK%' then
       htp.p( htf.bold( 'BBULK' ));
       htp.formhidden( 'P2', 'BBULK' );
   else 
      if vaccess = 'EDIT'
      then
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type2, FALSE, TRUE, FALSE );
      else
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type2, FALSE, TRUE, FALSE, isedit=>FALSE );
      end if;
   end if;
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'WEIGHT2' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.weight2,'999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'VOLUME2' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.volume2,'9,999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_TYPE2' ) || htf.formtext( 'P2', 70, 100, trim(to_char(c3rec.container_type2))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'HAZARD2' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.hazard2))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'OVERDIMENSIONAL2' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.overdimensional2))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'SET_POINT2' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.set_point2))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_OWNER2' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.container_owner2))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );     
   htp.tabledata( htf.formhidden( 'P1', 'CONSIGNEE2' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.consignee2))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'CONSIGNEE_LOCATION2' );
   lov_list( 'LOCATIONS', 'P2', c3rec.consignee_location2, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'VESSEL2' ) || htf.formtext( 'P2', 30, 50, trim(to_char(c3rec.vessel2))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'WAREHOUSE_DESTINATION2' );
   lov_list_warehouse( 'LOCATIONS', 'P2', c3rec.warehouse_destination2, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'URGENCY2' );
   lov_list( 'URGENCY', 'P2', c3rec.urgency2, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
  else
   htp.tabledata( htf.bold( '&nbsp;' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.movement_no2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.seal2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.full_mt2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.iso_container_type2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.weight2,'999,999,999') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.volume2,'9,999,999.99') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_type2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.hazard2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.overdimensional2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.set_point2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_owner2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee_location2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.vessel2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.warehouse_destination2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.urgency2) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
  end if;
  htp.tablerowclose;
-- CONTAINER 3
 if (c3rec.movement_no3 is not null) or (c3rec.movement_no2 is not null) then
  htp.tablerowopen;
  if vaccess = 'EDIT' then
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'LOOKUP3' );
   lov_list( 'ADD_REMOVE', 'P2', c3rec.lookup3, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
    if c3rec.lookup3 = 'A' and c3rec.movement_no3 is null and c3rec.seal3 is null
   then
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    htp.formhidden( 'P1', 'MOVEMENT_NO3' );
    convoy_ctr_list('P2',vportload,c3rec.movement_no3,vio);
    htp.p('</TD>') ;
      htp.tabledata( htf.bold( to_char(c3rec.seal3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    else
     if c3rec.movement_no3 is null and c3rec.seal3 is null then
      htp.tabledata( htf.formhidden( 'P1', 'MOVEMENT_NO3' ) || htf.formtext( 'P2', 30, 70, trim(to_char(c3rec.movement_no3)), cattributes=>'list="P2x" autocomplete="off"'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
      htp.tabledata( htf.formhidden( 'P1', 'SEAL3' ) || htf.formtext( 'P2', 10, 20, trim(to_char(c3rec.seal3))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     else
      htp.tabledata( htf.bold( to_char(c3rec.movement_no3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        if c3rec.full_mt3 = 'EMPTY' then -- Added by David Banjo on 25/11/2020
           htp.tabledata( htf.bold( '' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        else 
           htp.tabledata( htf.bold( to_char(c3rec.seal3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        end if;
     --  htp.tabledata( htf.bold( to_char(c3rec.seal3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     end if;
    end if;
    
   htp.formhidden( 'P1', 'FULL_MT3' );
   if c3rec.full_mt3 is not null OR upper(c3rec.movement_no3) = 'BREAKBULK' then
      htp.formhidden( 'P2', to_char(c3rec.full_mt3));
      htp.tabledata( htf.bold( to_char(c3rec.full_mt3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else
      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
      lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt3, FALSE, TRUE, FALSE ); -- made Readonly by David Banjo
      htp.p( '</TD>' );
   end if;
      
--   --htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
--   htp.formhidden( 'P1', 'FULL_MT3' );
--   htp.formhidden( 'P2', to_char(c3rec.full_mt3));
--   htp.tabledata( htf.bold( to_char(c3rec.full_mt3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
--   --lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt3, FALSE, TRUE, FALSE ); -- made Readonly by David Banjo
--   --htp.p( '</TD>' );
   
   
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'ISO_CONTAINER_TYPE3' );
   if c3rec.container_type3 like 'BBULK%' then
       htp.p( htf.bold( 'BBULK' ));
       htp.formhidden( 'P2', 'BBULK' );
   else 
      if vaccess = 'EDIT'
      then
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type3, FALSE, TRUE, FALSE );
      else
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type3, FALSE, TRUE, FALSE, isedit=>FALSE );
      end if;
   end if;
   
   
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'WEIGHT3' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.weight3,'999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'VOLUME3' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.volume3,'9,999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_TYPE3' ) || htf.formtext( 'P2', 70, 100, trim(to_char(c3rec.container_type3))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'HAZARD3' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.hazard3))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'OVERDIMENSIONAL3' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.overdimensional3))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'SET_POINT3' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.set_point3))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_OWNER3' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.container_owner3))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );    
   htp.tabledata( htf.formhidden( 'P1', 'CONSIGNEE3' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.consignee3))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'CONSIGNEE_LOCATION3' );
   lov_list( 'LOCATIONS', 'P2', c3rec.consignee_location3, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'VESSEL3' ) || htf.formtext( 'P2', 30, 50, trim(to_char(c3rec.vessel3))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'WAREHOUSE_DESTINATION3' );
   lov_list_warehouse( 'LOCATIONS', 'P2', c3rec.warehouse_destination3, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'URGENCY3' );
   lov_list( 'URGENCY', 'P2', c3rec.urgency3, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
  else
   htp.tabledata( htf.bold( '&nbsp;' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.movement_no3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.seal3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.full_mt3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.iso_container_type3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.weight3,'999,999,999') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.volume3,'9,999,999.99') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_type3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.hazard3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.overdimensional3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.set_point3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_owner3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee_location3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.vessel3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.warehouse_destination3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.urgency3) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
  end if;
  htp.tablerowclose;
  end if;
-- CONTAINER 4
 if (c3rec.movement_no4 is not null) or (c3rec.movement_no3 is not null) then
  htp.tablerowopen;
  if vaccess = 'EDIT' then
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'LOOKUP4' );
   lov_list( 'ADD_REMOVE', 'P2', c3rec.lookup4, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
    if c3rec.lookup4 = 'A' and c3rec.movement_no4 is null and c3rec.seal4 is null
   then
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    htp.formhidden( 'P1', 'MOVEMENT_NO4' );
    convoy_ctr_list('P2',vportload,c3rec.movement_no4,vio);
    htp.p('</TD>') ;
      htp.tabledata( htf.bold( to_char(c3rec.seal4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    else
     if c3rec.movement_no4 is null and c3rec.seal4 is null then
      htp.tabledata( htf.formhidden( 'P1', 'MOVEMENT_NO4' ) || htf.formtext( 'P2', 30, 70, trim(to_char(c3rec.movement_no4)), cattributes=>'list="P2x" autocomplete="off"'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
      htp.tabledata( htf.formhidden( 'P1', 'SEAL4' ) || htf.formtext( 'P2', 10, 20, trim(to_char(c3rec.seal4))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     else
      htp.tabledata( htf.bold( to_char(c3rec.movement_no4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        if c3rec.full_mt4 = 'EMPTY' then -- Added by David Banjo on 25/11/2020
           htp.tabledata( htf.bold( '' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        else 
           htp.tabledata( htf.bold( to_char(c3rec.seal4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        end if;
     -- htp.tabledata( htf.bold( to_char(c3rec.seal4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     end if;
    end if;
    
   htp.formhidden( 'P1', 'FULL_MT4' );
   if c3rec.full_mt4 is not null OR upper(c3rec.movement_no4) = 'BREAKBULK'  then
      htp.formhidden( 'P2', to_char(c3rec.full_mt4));
      htp.tabledata( htf.bold( to_char(c3rec.full_mt4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else
      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
      lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt4, FALSE, TRUE, FALSE ); -- made Readonly by David Banjo
      htp.p( '</TD>' );
   end if;
    
--   --htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
--   htp.formhidden( 'P1', 'FULL_MT4' );
--   htp.formhidden( 'P2', to_char(c3rec.full_mt4));
--   htp.tabledata( htf.bold( to_char(c3rec.full_mt4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
--   --lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt4, FALSE, TRUE, FALSE ); -- made Readonly by David Banjo
--   --htp.p( '</TD>' );
   
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'ISO_CONTAINER_TYPE4' );
   
   if c3rec.container_type4 like 'BBULK%' then
       htp.p( htf.bold( 'BBULK' ));
       htp.formhidden( 'P2', 'BBULK' );
   else    
      if vaccess = 'EDIT'
      then
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type4, FALSE, TRUE, FALSE );
      else
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type4, FALSE, TRUE, FALSE, isedit=>FALSE );
      end if;
  end if;
   
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'WEIGHT4' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.weight4,'999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'VOLUME4' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.volume4,'9,999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_TYPE4' ) || htf.formtext( 'P2', 70, 100, trim(to_char(c3rec.container_type4))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'HAZARD4' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.hazard4))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'OVERDIMENSIONAL4' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.overdimensional4))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'SET_POINT4' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.set_point4))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_OWNER4' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.container_owner4))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );    
   htp.tabledata( htf.formhidden( 'P1', 'CONSIGNEE4' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.consignee4))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'CONSIGNEE_LOCATION4' );
   lov_list( 'LOCATIONS', 'P2', c3rec.consignee_location4, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'VESSEL4' ) || htf.formtext( 'P2', 30, 50, trim(to_char(c3rec.vessel4))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'WAREHOUSE_DESTINATION4' );
   lov_list_warehouse( 'LOCATIONS', 'P2', c3rec.warehouse_destination4, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'URGENCY4' );
   lov_list( 'URGENCY', 'P2', c3rec.urgency4, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
  else
   htp.tabledata( htf.bold( '&nbsp;' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.movement_no4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.seal4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.full_mt4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.iso_container_type4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.weight4,'999,999,999') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.volume4,'9,999,999.99') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_type4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.hazard4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.overdimensional4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.set_point4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_owner4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee_location4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.vessel4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.warehouse_destination4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.urgency4) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
  end if;
  htp.tablerowclose;
  end if;
-- CONTAINER 5
 if (c3rec.movement_no5 is not null) or (c3rec.movement_no4 is not null) then
  htp.tablerowopen;
  if vaccess = 'EDIT' then
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'LOOKUP5' );
   lov_list( 'ADD_REMOVE', 'P2', c3rec.lookup5, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
    if c3rec.lookup5 = 'A' and c3rec.movement_no5 is null and c3rec.seal5 is null
   then
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    htp.formhidden( 'P1', 'MOVEMENT_NO5' );
    convoy_ctr_list('P2',vportload,c3rec.movement_no5,vio);
    htp.p('</TD>') ;
      htp.tabledata( htf.bold( to_char(c3rec.seal5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    else
     if c3rec.movement_no5 is null and c3rec.seal5 is null then
      htp.tabledata( htf.formhidden( 'P1', 'MOVEMENT_NO5' ) || htf.formtext( 'P2', 30, 70, trim(to_char(c3rec.movement_no5)), cattributes=>'list="P2x" autocomplete="off"'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
      htp.tabledata( htf.formhidden( 'P1', 'SEAL5' ) || htf.formtext( 'P2', 10, 20, trim(to_char(c3rec.seal5))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     else
      htp.tabledata( htf.bold( to_char(c3rec.movement_no5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        if c3rec.full_mt5 = 'EMPTY' then -- Added by David Banjo on 25/11/2020
           htp.tabledata( htf.bold( '' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        else 
           htp.tabledata( htf.bold( to_char(c3rec.seal5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        end if;
     -- htp.tabledata( htf.bold( to_char(c3rec.seal5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     end if;
    end if;
    
   htp.formhidden( 'P1', 'FULL_MT5' );
   if c3rec.full_mt5 is not null OR upper(c3rec.movement_no5) = 'BREAKBULK'  then
      htp.formhidden( 'P2', to_char(c3rec.full_mt5));
      htp.tabledata( htf.bold( to_char(c3rec.full_mt5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else 
      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
      lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt5, FALSE, TRUE, FALSE ); -- made Readonly by David Banjo
      htp.p( '</TD>' );
   end if;
    
    
--   --htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
--   htp.formhidden( 'P1', 'FULL_MT5' );
--   htp.formhidden( 'P2', to_char(c3rec.full_mt5));
--   htp.tabledata( htf.bold( to_char(c3rec.full_mt5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
--   --lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt5, FALSE, TRUE, FALSE ); -- made Readonly by David Banjo
--  -- htp.p( '</TD>' );
  
  
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'ISO_CONTAINER_TYPE5' );
   
   if c3rec.container_type5 like 'BBULK%' then
       htp.p( htf.bold( 'BBULK' ));
       htp.formhidden( 'P2', 'BBULK' );
   else    
      if vaccess = 'EDIT'
      then
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type5, FALSE, TRUE, FALSE );
      else
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type5, FALSE, TRUE, FALSE, isedit=>FALSE );
      end if;
   end if;
   
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'WEIGHT5' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.weight5,'999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'VOLUME5' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.volume5,'9,999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_TYPE5' ) || htf.formtext( 'P2', 70, 100, trim(to_char(c3rec.container_type5))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'HAZARD5' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.hazard5))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'OVERDIMENSIONAL5' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.overdimensional5))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'SET_POINT5' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.set_point5))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_OWNER5' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.container_owner5))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );    
   htp.tabledata( htf.formhidden( 'P1', 'CONSIGNEE5' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.consignee5))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'CONSIGNEE_LOCATION5' );
   lov_list( 'LOCATIONS', 'P2', c3rec.consignee_location5, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'VESSEL5' ) || htf.formtext( 'P2', 30, 50, trim(to_char(c3rec.vessel5))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'WAREHOUSE_DESTINATION5' );
   lov_list_warehouse( 'LOCATIONS', 'P2', c3rec.warehouse_destination5, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'URGENCY5' );
   lov_list( 'URGENCY', 'P2', c3rec.urgency5, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
  else
   htp.tabledata( htf.bold( '&nbsp;' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.movement_no5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.seal5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.full_mt5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.iso_container_type5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.weight5,'999,999,999') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.volume5,'9,999,999.99') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_type5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.hazard5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.overdimensional5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.set_point5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_owner5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee_location5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.vessel5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.warehouse_destination5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.urgency5) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
  end if;
  htp.tablerowclose;
  end if;
-- CONTAINER 6
 if (c3rec.movement_no6 is not null) or (c3rec.movement_no5 is not null) then
  htp.tablerowopen;
  if vaccess = 'EDIT' then
    htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
    htp.formhidden( 'P1', 'LOOKUP6' );
    lov_list( 'ADD_REMOVE', 'P2', c3rec.lookup6, FALSE, TRUE, FALSE );
    htp.p( '</TD>' );
    if c3rec.lookup6 = 'A' and c3rec.movement_no6 is null and c3rec.seal6 is null
    then
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     htp.formhidden( 'P1', 'MOVEMENT_NO6' );
     convoy_ctr_list('P2',vportload,c3rec.movement_no6,vio);
     htp.p('</TD>') ;
      htp.tabledata( htf.bold( to_char(c3rec.seal6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
    else
     if c3rec.movement_no6 is null and c3rec.seal6 is null then
      htp.tabledata( htf.formhidden( 'P1', 'MOVEMENT_NO6' ) || htf.formtext( 'P2', 30, 70, trim(to_char(c3rec.movement_no6)), cattributes=>'list="P2x" autocomplete="off"'), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
      htp.tabledata( htf.formhidden( 'P1', 'SEAL6' ) || htf.formtext( 'P2', 10, 20, trim(to_char(c3rec.seal6))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     else
      htp.tabledata( htf.bold( to_char(c3rec.movement_no6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        if c3rec.full_mt6 = 'EMPTY' then -- Added by David Banjo on 25/11/2020
           htp.tabledata( htf.bold( '' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        else 
           htp.tabledata( htf.bold( to_char(c3rec.seal6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
        end if;
     --  htp.tabledata( htf.bold( to_char(c3rec.seal6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
     end if;
    end if;
    
   htp.formhidden( 'P1', 'FULL_MT6' );
   if c3rec.full_mt6 is not null OR upper(c3rec.movement_no6) = 'BREAKBULK' then
      htp.formhidden( 'P2', to_char(c3rec.full_mt6));
      htp.tabledata( htf.bold( to_char(c3rec.full_mt6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   else 
      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
      lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt6, FALSE, TRUE, FALSE );  -- made readonly by david banjo 25/11/2020
      htp.p( '</TD>' );
   end if;
    
--   --htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
--   htp.formhidden( 'P1', 'FULL_MT6' );
--   htp.formhidden( 'P2', to_char(c3rec.full_mt6));
--   htp.tabledata( htf.bold( to_char(c3rec.full_mt6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
--   --lov_list( 'FULL_EMPTY', 'P2', c3rec.full_mt6, FALSE, TRUE, FALSE );  -- made readonly by david banjo 25/11/2020
--  -- htp.p( '</TD>' );
  
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'ISO_CONTAINER_TYPE6' );
   
   if c3rec.container_type6 like 'BBULK%' then
      htp.p( htf.bold( 'BBULK' ));
      htp.formhidden( 'P2', 'BBULK' );
   else    
      if vaccess = 'EDIT'
      then
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type6, FALSE, TRUE, FALSE );
      else
       lov_list( 'UNCTNTAB', 'P2', c3rec.iso_container_type6, FALSE, TRUE, FALSE, isedit=>FALSE );
      end if;
   end if;
   
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'WEIGHT6' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.weight6,'999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'VOLUME6' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.volume6,'9,999,999.999'))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_TYPE6' ) || htf.formtext( 'P2', 70, 100, trim(to_char(c3rec.container_type6))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'HAZARD6' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.hazard6))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'OVERDIMENSIONAL6' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.overdimensional6))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'SET_POINT6' ) || htf.formtext( 'P2', 10, 10, trim(to_char(c3rec.set_point6))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.formhidden( 'P1', 'CONTAINER_OWNER6' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.container_owner6))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );    
   htp.tabledata( htf.formhidden( 'P1', 'CONSIGNEE6' ) || htf.formtext( 'P2', 10, 50, trim(to_char(c3rec.consignee6))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'CONSIGNEE_LOCATION6' );
   lov_list( 'LOCATIONS', 'P2', c3rec.consignee_location6, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.tabledata( htf.formhidden( 'P1', 'VESSEL6' ) || htf.formtext( 'P2', 30, 50, trim(to_char(c3rec.vessel6))), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'WAREHOUSE_DESTINATION6' );
   lov_list_warehouse( 'LOCATIONS', 'P2', c3rec.warehouse_destination6, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.formhidden( 'P1', 'URGENCY6' );
   lov_list( 'URGENCY', 'P2', c3rec.urgency6, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
  else
   htp.tabledata( htf.bold( '&nbsp;' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.movement_no6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.seal6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.full_mt6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.iso_container_type6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.weight6,'999,999,999') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.volume6,'9,999,999.99') ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_type6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.hazard6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.overdimensional6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.set_point6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.container_owner6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.consignee_location6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.vessel6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.warehouse_destination6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
   htp.tabledata( htf.bold( to_char(c3rec.urgency6) ), cattributes=>glbx.QUERY_CELL_BACKGROUND || 'align="LEFT"' );
  end if;
  htp.tablerowclose;
  end if;

 htp.p( '</TD>' );
 htp.tablerowclose;
 htp.tableclose;

 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   if vaccess = 'EDIT'
    then
     htp.p( '<TD VALIGN="TOP">' );
      htp.formsubmit( 'ACTION', 'Update' );
     htp.p( '</TD>' );
     htp.p( '<TD VALIGN="TOP">' );
      htp.formsubmit( 'ACTION', 'Convoy Header' );
     htp.p( '</TD>' );
     htp.p( '<TD VALIGN="TOP">' );
      htp.formsubmit( 'ACTION', 'Fuelling' );
     htp.p( '</TD>' );
     htp.p( '<TD VALIGN="TOP">' );
      htp.formsubmit( 'ACTION', 'Delete Truck Record' );
     htp.p( '</TD>' );
     htp.p( '<TD VALIGN="TOP">' );
      htp.formsubmit( 'ACTION', 'Insert Truck Record' );
      htp.formclose;
     htp.p( '</TD>' );
   else
     htp.p( '<TD VALIGN="TOP">' );
      htp.anchor( 'strangp.manentry?surl=' || surl || '&rid=' || replace(rowidtochar(c2rec.rowid),'+','~') || '&scid=' || scid || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id, 'Convoy Header' );
     htp.p( '</TD>' );
     htp.p( '<TD VALIGN="TOP">' );
      htp.anchor( 'strangp.manentry_page2?surl=' || surl || '&rid=' || replace(rowidtochar(c2rec.rowid),'+','~') || '&scid=' || scid || '&call_name=' || replace(call_name,' ','+') || '&parm=' || replace(parm,' ','+') || '&access_id=' || access_id, 'Fuelling' );
     htp.p( '</TD>' );
  end if;

  htp.tablerowclose;
 htp.tableclose;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=0' );
  htp.tablerowopen;
   htp.p( '<TD VALIGN="TOP">' );
    search( surl, 'ME2', nrid, samerow=>TRUE );
   htp.p( '</TD>' );
  htp.tablerowclose;
 htp.tableclose;
 htp.formclose;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'MANENTRY_PAGE3',null,owner_id,errmsg=>sqlerrm);
end manentry_page3;

procedure accept_manentry_page3(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, old_entry in varchar2, access_id in varchar2 default null, action in varchar2, p1 in GLBX.MYARRAY, p2 in GLBX.MYARRAY )
as

 cursor c2( rid rowid ) is select * from strang.convoy_details where rowid = rid;
 cursor c4( entryno number) is select rowidtochar(rowid) from strang.convoy where convoy_id = entryno;
 cursor c5( entryno number) is select rowid from strang.convoy_details where convoy_id = entryno and rno = (select min(rno) from strang.convoy_details where convoy_id = entryno);
 cursor c6( entryno number) is select max(rno) + 1 from strang.convoy_details where convoy_id = entryno;
 cursor c7( entryno number, recno integer) is select rowid from strang.convoy_details where convoy_id = entryno and rno = recno;
 cursor c8( entryno number) is select count('x') tot from strang.convoy_details where convoy_id = entryno;
 cursor c9( lv varchar2, cd varchar2 ) is select * from strang.lov where lov_name = lv and code = cd;
 cursor c10a( rid rowid ) is select movement_no1 movement,lookup1 lookup, 'movement_no1' fld
         from strang.convoy_details where movement_no1 is not null and lookup1 = 'A' and rowid = rid
        union select movement_no2 movement,lookup2 lookup, 'movement_no2' fld
         from strang.convoy_details where movement_no2 is not null and lookup2 = 'A' and rowid = rid
        union select movement_no3 movement,lookup3 lookup, 'movement_no3' fld
         from strang.convoy_details where movement_no3 is not null and lookup3 = 'A' and rowid = rid
        union select movement_no4 movement,lookup4 lookup, 'movement_no4' fld
         from strang.convoy_details where movement_no4 is not null and lookup4 = 'A' and rowid = rid
        union select movement_no5 movement,lookup5 lookup, 'movement_no5' fld
         from strang.convoy_details where movement_no5 is not null and lookup5 = 'A' and rowid = rid
        union select movement_no6 movement,lookup6 lookup, 'movement_no6' fld
         from strang.convoy_details where movement_no6 is not null and lookup6 = 'A' and rowid = rid;

 cursor c10b( rid rowid ) is select movement_no1 movement, seal1 seal, lookup1 remove, 'movement_no1' fld
         from strang.convoy_details where (movement_no1 is not null or seal1 is not null) and lookup1 = 'R' and rowid = rid
        union select movement_no2 movement, seal2 seal, lookup2 remove, 'movement_no2' fld
         from strang.convoy_details where (movement_no2 is not null or seal2 is not null) and lookup2 = 'R' and rowid = rid
        union select movement_no3 movement, seal3 seal, lookup3 remove, 'movement_no3' fld
         from strang.convoy_details where (movement_no3 is not null or seal3 is not null) and lookup3 = 'R' and rowid = rid
        union select movement_no4 movement, seal4 seal, lookup4 remove, 'movement_no4' fld
         from strang.convoy_details where (movement_no4 is not null or seal4 is not null) and lookup4 = 'R' and rowid = rid
        union select movement_no5 movement, seal5 seal, lookup5 remove, 'movement_no5' fld
         from strang.convoy_details where (movement_no5 is not null or seal5 is not null) and lookup5 = 'R' and rowid = rid
        union select movement_no6 movement, seal6 seal, lookup6 remove, 'movement_no6' fld
         from strang.convoy_details where (movement_no6 is not null or seal6 is not null) and lookup6 = 'R' and rowid = rid;

 cursor c10c( rid rowid ) is select movement_no1 movement, seal1 seal
         from strang.convoy_details where movement_no1 is not null and rowid = rid
        union select movement_no2 movement, seal2 seal
         from strang.convoy_details where movement_no2 is not null and rowid = rid
        union select movement_no3 movement, seal3 seal
         from strang.convoy_details where movement_no3 is not null and rowid = rid
        union select movement_no4 movement, seal4 seal
         from strang.convoy_details where movement_no4 is not null and rowid = rid
        union select movement_no5 movement, seal5 seal
         from strang.convoy_details where movement_no5 is not null and rowid = rid
        union select movement_no6 movement, seal6 seal
         from strang.convoy_details where movement_no6 is not null and rowid = rid;

 cursor c10d( rid rowid ) is select movement_no1 movement, seal1 seal, 'movement_no1' fld
         from strang.convoy_details where movement_no1 is not null and rowid = rid
        union select movement_no2 movement, seal2 seal, 'movement_no2' fld
         from strang.convoy_details where movement_no2 is not null and rowid = rid
        union select movement_no3 movement, seal3 seal , 'movement_no3' fld
         from strang.convoy_details where movement_no3 is not null and rowid = rid
        union select movement_no4 movement, seal4 seal , 'movement_no4' fld
         from strang.convoy_details where movement_no4 is not null and rowid = rid
        union select movement_no5 movement, seal5 seal , 'movement_no5' fld
         from strang.convoy_details where movement_no5 is not null and rowid = rid
        union select movement_no6 movement, seal6 seal, 'movement_no6' fld
         from strang.convoy_details where movement_no6 is not null and rowid = rid;

 cursor c10( vMv varchar2 ) is select m.movement_no,m.seal,m.container_type,m.iso_container_type,s.shipname||' - '||s.voy vvoy,m.overdimensional,m.set_point,
 m.consignee,m.consignee_location, m.warehouse_destination, m.owner, m.urgency, m.current_location, (nvl(vgm,nvl(sumweight,0)+nvl(tare,0))/1000) weight,
 --decode(m.sumweight,0,'EMPTY','FULL') FULL_MT
 decode(m.full_mt,'EMPTY','EMPTY','FULL') FULL_MT
 from strang.movements m, strang.ships_airway s
 where m.local_ship_id = s.ship_id
 and m.movement_no = substr(vMv,1,instr(vMv,'~')-1)
 and nvl(m.seal,'BBULK') = nvl(substr(vMv,instr(vMv,'~')+1),'BBULK');
 
 cursor c11 ( vMv varchar2) is select * from strang.movements m
                                where m.movement_no = substr(vMv,1,instr(vMv,'~')-1)
                                  and nvl(m.seal,'BBULK') = nvl(substr(vMv,instr(vMv,'~')+1),'BBULK');
                                                             

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c5rec		c5%ROWTYPE;
 c7rec		c7%ROWTYPE;
 c8rec		c8%ROWTYPE;
 c9rec		c9%ROWTYPE;
 c10rec		c10%ROWTYPE;
 c10arec	c10a%ROWTYPE;
 c10brec	c10b%ROWTYPE;
 c10crec	c10c%ROWTYPE;
 c10drec	c10d%ROWTYPE;
 c11rec     c11%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nrid		varchar2(100);
 vaccess	varchar2(20);
 msg		varchar2(100);
 nmb		integer;
 mx		integer;
begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_MANENTRY_PAGE3' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 nrid := replace(rid,'~','+');
 vaccess := data_access( owner_id, 'MANENTRY', rid );
 open c2(rid);
 fetch c2 into c2rec;
 close c2;
 
 if vaccess = 'EDIT'
  then

 -- Validate Number
 if old_entry is null
  then
   manentry( surl, nrid, scid, call_name, parm, access_id, 'Convoy ID Cannot Be Empty' || ':' || old_entry );
   return;
 end if;
 if action = 'Delete Truck Record'
  then
    --- DAVID BANJO START HERE!!!
   open c10c(rid);
   fetch c10c into c10crec;
   if c10c%found then
      manentry_page3( surl, rowidtochar(rid), scid, call_name, parm, access_id, 'Truck Not Deleted: Containers Exist!' );
      close c10c;
      return;
   end if;
   close c10c;

--   for c10Crec in c10c(rid) loop
--    update strang.movements m set convoy_id = null, date_modified = sysdate where m.movement_no= c10crec.movement and nvl(m.seal,'|')=nvl(c10crec.seal,'|');
--   end loop;

   delete from strang.convoy_details where rowid = chartorowid(rid);
   open c5(c2rec.convoy_id);
   fetch c5 into c5rec;
   close c5;
   open c8(c2rec.convoy_id);
   fetch c8 into c8rec;
   close c8;
   if c8rec.tot = 0
    then
     insert into strang.convoy_details(convoy_id,rno) values (c2rec.convoy_id,1);
     commit;
     open c7(c2rec.convoy_id,1);
     fetch c7 into c5rec;
     close c7;
   end if;
   manentry_page3( surl, rowidtochar(c5rec.rowid), scid, call_name, parm, access_id, 'Truck Deleted' );
   return;
 end if;
 if action <> 'Delete Truck Record'
  then
   open c10d(rid);   -- get existing record prior to update
    fetch c10d into c10drec;
   for j in p1.first..p1.last loop
    begin
     execute immediate
      'update strang.convoy_details set ' || p1(j) || ' = :1 where rowid = :2'
        using p2(j), chartorowid(rid);
    exception
     when others then msg := msg || '[Error Modifying ' || initcap(p1(j)) || ' to value: ' || p2(j) || ']';
    end;
   end loop;
 -------------------------- fix up the selected datalist items
 
   for j in p1.first..p1.last loop
    if p1(j) in ('MOVEMENT_NO1') then 
      open c11(p2(j));
      fetch c11 into c11rec;
      if c11%found then   
         UPDATE strang.convoy_details set lookup1 = 'A' where rowid = chartorowid(rid);    
         commit;
      end if;
      close c11;
    elsif p1(j) in ('MOVEMENT_NO2') then
       open c11(p2(j));
       fetch c11 into c11rec;
       if c11%found then    
          UPDATE strang.convoy_details set lookup2 = 'A' where rowid = chartorowid(rid);    
          commit;
       end if;
       close c11;
     elsif p1(j) in ('MOVEMENT_NO3') then
       open c11(p2(j));
       fetch c11 into c11rec;
       if c11%found then    
          UPDATE strang.convoy_details set lookup3 = 'A' where rowid = chartorowid(rid);    
          commit;
       end if;
       close c11;
     elsif p1(j) in ('MOVEMENT_NO4') then
       open c11(p2(j));
       fetch c11 into c11rec;
       if c11%found then    
          UPDATE strang.convoy_details set lookup4 = 'A' where rowid = chartorowid(rid);    
          commit;
       end if;
       close c11;
     elsif p1(j) in ('MOVEMENT_NO5') then
       open c11(p2(j));
       fetch c11 into c11rec;
       if c11%found then    
          UPDATE strang.convoy_details set lookup5 = 'A' where rowid = chartorowid(rid);    
          commit;
       end if;
       close c11;
     elsif p1(j) in ('MOVEMENT_NO6') then
       open c11(p2(j));
       fetch c11 into c11rec;
       if c11%found then    
          UPDATE strang.convoy_details set lookup6 = 'A' where rowid = chartorowid(rid);    
          commit;
       end if;
       close c11;
     end if;     
   end loop;
 ----------------------------------------------------------------------------  

-- REMOVE
   for c10Brec in c10B(RID) loop
     if c10brec.fld = 'movement_no1' then
       update strang.convoy_details
       set movement_no1 = null
       ,seal1 = null
       ,container_type1 = null
       ,iso_container_type1 = null
       ,weight1 = null
       ,vessel1 = null
       ,overdimensional1 = null
       ,set_point1 = null
       ,container_owner1 = null
       ,consignee1 = null
       ,consignee_location1 = null
       ,warehouse_destination1 = null
       ,hazard1 = null
       ,urgency1 = null
       ,full_mt1 = null
       ,lookup1 = null
       where rowid = chartorowid(rid);
      update strang.movements m
      set m.convoy_id = null, m.date_modified = sysdate 
      where (m.movement_no=c10brec.movement and nvl(m.seal,'|')=nvl(c10brec.seal,'|'))
          or (m.movement_no=c10brec.movement and  nvl(c2rec.convoy_id,999999999) = m.convoy_id ) ;
     end if;

-- CONTAINER 2
     if c10brec.fld = 'movement_no2' then
       update strang.convoy_details
       set movement_no2 = null
       ,seal2 = null
       ,container_type2 = null
       ,iso_container_type2 = null
       ,weight2 = null
       ,vessel2 = null
       ,overdimensional2 = null
       ,set_point2 = null
       ,container_owner2 = null
       ,consignee2 = null
       ,consignee_location2 = null
       ,warehouse_destination2 = null
       ,hazard2 = null
       ,urgency2 = null
       ,full_mt2 = null
       ,lookup2 = null
       where rowid = chartorowid(rid);
      update strang.movements m
      set m.convoy_id = null, m.date_modified = sysdate where m.movement_no=c10brec.movement and nvl(m.seal,'|')=nvl(c10brec.seal,'|')
       or (m.movement_no=c10brec.movement and  nvl(c2rec.convoy_id,999999999) = m.convoy_id ) ;
     end if;
-- CONTAINER 3
     if c10brec.fld = 'movement_no3' then
       update strang.convoy_details
       set movement_no3 = null
       ,seal3 = null
       ,container_type3 = null
       ,iso_container_type3 = null
       ,weight3 = null
       ,vessel3 = null
       ,overdimensional3 = null
       ,set_point3 = null
       ,container_owner3 = null
       ,consignee3 = null
       ,consignee_location3 = null
       ,warehouse_destination3 = null
       ,hazard3 = null
       ,urgency3 = null
       ,full_mt3 = null
       ,lookup3 = null
       where rowid = chartorowid(rid);
      update strang.movements m
      set m.convoy_id = null, m.date_modified = sysdate where m.movement_no=c10brec.movement and nvl(m.seal,'|')=nvl(c10brec.seal,'|')
       or (m.movement_no=c10brec.movement and  nvl(c2rec.convoy_id,999999999) = m.convoy_id );
     end if;
-- CONTAINER 4
     if c10brec.fld = 'movement_no4' then
       update strang.convoy_details
       set movement_no4 = null
       ,seal4 = null
       ,container_type4 = null
       ,iso_container_type4 = null
       ,weight4 = null
       ,vessel4 = null
       ,overdimensional4 = null
       ,set_point4 = null
       ,container_owner4 = null
       ,consignee4 = null
       ,consignee_location4 = null
       ,warehouse_destination4 = null
       ,hazard4 = null
       ,urgency4 = null
       ,full_mt4 = null
       ,lookup4 = null
       where rowid = chartorowid(rid);
      update strang.movements m
      set m.convoy_id = null, m.date_modified = sysdate where m.movement_no=c10brec.movement and nvl(m.seal,'|')=nvl(c10brec.seal,'|')
       or (m.movement_no=c10brec.movement and  nvl(c2rec.convoy_id,999999999) = m.convoy_id );
     end if;
-- CONTAINER 5
     if c10brec.fld = 'movement_no5' then
       update strang.convoy_details
       set movement_no5 = null
       ,seal5 = null
       ,container_type5 = null
       ,iso_container_type5 = null
       ,weight5 = null
       ,vessel5 = null
       ,overdimensional5 = null
       ,set_point5 = null
       ,container_owner5 = null
       ,consignee5 = null
       ,consignee_location5 = null
       ,warehouse_destination5 = null
       ,hazard5 = null
       ,urgency5 = null
       ,full_mt5 = null
       ,lookup5 = null
       where rowid = chartorowid(rid);
      update strang.movements m
      set m.convoy_id = null, m.date_modified = sysdate where m.movement_no=c10brec.movement and nvl(m.seal,'|')=nvl(c10brec.seal,'|')
       or (m.movement_no=c10brec.movement and  nvl(c2rec.convoy_id,999999999) = m.convoy_id );
     end if;
-- CONTAINER 6
     if c10brec.fld = 'movement_no6' then
       update strang.convoy_details
       set movement_no6 = null
       ,seal6 = null
       ,container_type6 = null
       ,iso_container_type6 = null
       ,weight6 = null
       ,vessel6 = null
       ,overdimensional6 = null
       ,set_point6 = null
       ,container_owner6 = null
       ,consignee6 = null
       ,consignee_location6 = null
       ,warehouse_destination6 = null
       ,hazard6 = null
       ,urgency6 = null
       ,full_mt6 = null
       ,lookup6 = null
       where rowid = chartorowid(rid);
      update strang.movements m
      set m.convoy_id = null, m.date_modified = sysdate where m.movement_no=c10brec.movement and nvl(m.seal,'|')=nvl(c10brec.seal,'|')
       or (m.movement_no=c10brec.movement and  nvl(c2rec.convoy_id,999999999) = m.convoy_id );
     end if;
   end loop;
   
   
-- LOOKUP
   for c10arec in c10a(RID) loop
 --  open c10a( rid );
 --  fetch c10a into c10arec;
 --  if C10A%FOUND then
   for c10rec in c10(c10arec.movement) loop
     if c10arec.fld = 'movement_no1' then
       update strang.convoy_details
       set movement_no1 = c10rec.movement_no
       ,seal1 = c10rec.seal
       ,container_type1 = nvl(c10rec.container_type,'BBULK')||' '||strang.f_getLovColumn('CTRTYPE','COLC',c10rec.container_type)
       ,iso_container_type1 = c10rec.iso_container_type
       ,weight1 = c10rec.weight
       ,vessel1 = c10rec.vvoy
       ,overdimensional1 = c10rec.overdimensional
       ,set_point1 = c10rec.set_point
       ,container_owner1 = c10rec.owner
       ,consignee1 = c10rec.consignee
       ,consignee_location1 = c10rec.consignee_location
       ,warehouse_destination1 = c10rec.warehouse_destination
       ,hazard1 = substr(strang.f_display_convoy_ctr(c10rec.movement_no,c10rec.seal,'HAZARD'),1,50)
       ,urgency1 = c10rec.urgency
       ,full_mt1 = c10rec.full_mt
       ,lookup1 = null
       where rowid = chartorowid(rid);
       update strang.movements m
       set m.convoy_id = (select cn.convoy_id from strang.convoy_details cn where cn.rowid = chartorowid(rid)), m.date_modified = sysdate
       where m.movement_no=c10rec.movement_no and nvl(m.seal,'|')=nvl(c10rec.seal,'|');
     end if;
-- CONTAINER 2
     if c10arec.fld = 'movement_no2' then
       update strang.convoy_details
       set movement_no2 = c10rec.movement_no
       ,seal2 = c10rec.seal
       ,container_type2 = nvl(c10rec.container_type,'BBULK')||' '||strang.f_getLovColumn('CTRTYPE','COLC',c10rec.container_type)
       ,iso_container_type2 = c10rec.iso_container_type
       ,weight2 = c10rec.weight
       ,vessel2 = c10rec.vvoy
       ,overdimensional2 = c10rec.overdimensional
       ,set_point2 = c10rec.set_point
       ,container_owner2 = c10rec.owner
       ,consignee2 = c10rec.consignee
       ,consignee_location2 = c10rec.consignee_location
       ,warehouse_destination2 = c10rec.warehouse_destination
       ,hazard2 = substr(strang.f_display_convoy_ctr(c10rec.movement_no,c10rec.seal,'HAZARD'),1,50)
       ,urgency2 = c10rec.urgency
       ,full_mt2 = c10rec.full_mt
       ,lookup2 = null
       where rowid = chartorowid(rid);
       update strang.movements m
       set m.convoy_id = (select cn.convoy_id from strang.convoy_details cn where cn.rowid = chartorowid(rid)), m.date_modified = sysdate
       where m.movement_no=c10rec.movement_no and nvl(m.seal,'|')=nvl(c10rec.seal,'|');
     end if;
-- CONTAINER 3
     if c10arec.fld = 'movement_no3' then
       update strang.convoy_details
       set movement_no3 = c10rec.movement_no
       ,seal3 = c10rec.seal
       ,container_type3 = nvl(c10rec.container_type,'BBULK')||' '||strang.f_getLovColumn('CTRTYPE','COLC',c10rec.container_type)
       ,iso_container_type3 = c10rec.iso_container_type
       ,weight3 = c10rec.weight
       ,vessel3 = c10rec.vvoy
       ,overdimensional3 = c10rec.overdimensional
       ,set_point3 = c10rec.set_point
       ,container_owner3 = c10rec.owner
       ,consignee3 = c10rec.consignee
       ,consignee_location3 = c10rec.consignee_location
       ,warehouse_destination3 = c10rec.warehouse_destination
       ,hazard3 = substr(strang.f_display_convoy_ctr(c10rec.movement_no,c10rec.seal,'HAZARD'),1,50)
       ,urgency3 = c10rec.urgency
       ,full_mt3 = c10rec.full_mt
       ,lookup3 = null
       where rowid = chartorowid(rid);
       update strang.movements m
       set m.convoy_id = (select cn.convoy_id from strang.convoy_details cn where cn.rowid = chartorowid(rid)), m.date_modified = sysdate
       where m.movement_no=c10rec.movement_no and nvl(m.seal,'|')=nvl(c10rec.seal,'|');
     end if;
-- CONTAINER 4
     if c10arec.fld = 'movement_no4' then
       update strang.convoy_details
       set movement_no4 = c10rec.movement_no
       ,seal4 = c10rec.seal
       ,container_type4 = nvl(c10rec.container_type,'BBULK')||' '||strang.f_getLovColumn('CTRTYPE','COLC',c10rec.container_type)
       ,iso_container_type4 = c10rec.iso_container_type
       ,weight4 = c10rec.weight
       ,vessel4 = c10rec.vvoy
       ,overdimensional4 = c10rec.overdimensional
       ,set_point4 = c10rec.set_point
       ,container_owner4 = c10rec.owner
       ,consignee4 = c10rec.consignee
       ,consignee_location4 = c10rec.consignee_location
       ,warehouse_destination4 = c10rec.warehouse_destination
       ,hazard4 = substr(strang.f_display_convoy_ctr(c10rec.movement_no,c10rec.seal,'HAZARD'),1,50)
       ,urgency4 = c10rec.urgency
       ,full_mt4 = c10rec.full_mt
       ,lookup4 = null
       where rowid = chartorowid(rid);
       update strang.movements m
       set m.convoy_id = (select cn.convoy_id from strang.convoy_details cn where cn.rowid = chartorowid(rid)), m.date_modified = sysdate
       where m.movement_no=c10rec.movement_no and nvl(m.seal,'|')=nvl(c10rec.seal,'|');
     end if;
-- CONTAINER 5
     if c10arec.fld = 'movement_no5' then
       update strang.convoy_details
       set movement_no5 = c10rec.movement_no
       ,seal5 = c10rec.seal
       ,container_type5 = nvl(c10rec.container_type,'BBULK')||' '||strang.f_getLovColumn('CTRTYPE','COLC',c10rec.container_type)
       ,iso_container_type5 = c10rec.iso_container_type
       ,weight5 = c10rec.weight
       ,vessel5 = c10rec.vvoy
       ,overdimensional5 = c10rec.overdimensional
       ,set_point5 = c10rec.set_point
       ,container_owner5 = c10rec.owner
       ,consignee5 = c10rec.consignee
       ,consignee_location5 = c10rec.consignee_location
       ,warehouse_destination5 = c10rec.warehouse_destination
       ,hazard5 = substr(strang.f_display_convoy_ctr(c10rec.movement_no,c10rec.seal,'HAZARD'),1,50)
       ,urgency5 = c10rec.urgency
       ,full_mt5 = c10rec.full_mt
       ,lookup5 = null
       where rowid = chartorowid(rid);
       update strang.movements m
       set m.convoy_id = (select cn.convoy_id from strang.convoy_details cn where cn.rowid = chartorowid(rid)), m.date_modified = sysdate
       where m.movement_no=c10rec.movement_no and nvl(m.seal,'|')=nvl(c10rec.seal,'|');
     end if;
-- CONTAINER 6
     if c10arec.fld = 'movement_no6' then
       update strang.convoy_details
       set movement_no6 = c10rec.movement_no
       ,seal6 = c10rec.seal
       ,container_type6 = nvl(c10rec.container_type,'BBULK')||' '||strang.f_getLovColumn('CTRTYPE','COLC',c10rec.container_type)
       ,iso_container_type6 = c10rec.iso_container_type
       ,weight6 = c10rec.weight
       ,vessel6 = c10rec.vvoy
       ,overdimensional6 = c10rec.overdimensional
       ,set_point6 = c10rec.set_point
       ,container_owner6 = c10rec.owner
       ,consignee6 = c10rec.consignee
       ,consignee_location6 = c10rec.consignee_location
       ,warehouse_destination6 = c10rec.warehouse_destination
       ,hazard6 = substr(strang.f_display_convoy_ctr(c10rec.movement_no,c10rec.seal,'HAZARD'),1,50)
       ,urgency6 = c10rec.urgency
       ,full_mt6 = c10rec.full_mt
       ,lookup6 = null
       where rowid = chartorowid(rid);
       update strang.movements m
       set m.convoy_id = (select cn.convoy_id from strang.convoy_details cn where cn.rowid = chartorowid(rid)), m.date_modified = sysdate
       where m.movement_no=c10rec.movement_no and nvl(m.seal,'|')=nvl(c10rec.seal,'|');
     end if;
     commit;

   end loop;
  end loop;
  -- end if;
  -- close c10a;


 end if;

  -- Refresh the values

 open c2(rid);
 fetch c2 into c2rec;
 close c2;
 commit;


 end if; -- End of Edit Data

 msg := nvl(msg,'Record Updated');

 if action = 'Update'
  then
   manentry_page3( surl, nrid, scid, call_name, parm, access_id, msg );
 elsif action = 'Insert Truck Record'
  then
   open c6(c2rec.convoy_id);
   fetch c6 into mx;
   close c6;
   insert into strang.convoy_details(convoy_id,rno) values (c2rec.convoy_id,mx);
   open c7(c2rec.convoy_id,mx);
   fetch c7 into c7rec;
   close c7;
   commit;
   manentry_page3( surl, rowidtochar(c7rec.rowid), scid, call_name, parm, access_id, msg );
 elsif action = 'Convoy Header'
  then
   open c4(old_entry);
   fetch c4 into nrid;
   close c4;
   manentry( surl, nrid, scid, call_name, parm, access_id, msg );
 elsif action = 'Fuelling'
  then
   open c4(old_entry);
   fetch c4 into nrid;
   close c4;
   manentry_page2( surl, nrid, scid, call_name, parm, access_id, msg );
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_MANENTRY_PAGE3',null,owner_id,errmsg=>sqlerrm);
end accept_manentry_page3;

procedure confirm_manentry_delete(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, access_id in varchar2 default null, msg in varchar2 default null )
as

 cursor c2( rid rowid ) is select * from strang.convoy where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nrid		varchar2(100);
 vaccess	varchar2(20);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.CONFIRM_MANENTRY_DELETE' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 nrid := replace(rid,'~','+');
 vaccess := data_access( owner_id, 'MANENTRY', rid );
 open c2( nrid );
 fetch c2 into c2rec;
 close c2;

 glbx.main_title( surl, 'Convoy Header',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR17',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 if msg is not null then glbx.header_msg( msg ); end if;
 htp.p( '<CENTER>' );

 htp.formopen( 'strangp.accept_manentry_delete' );
  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'SCID', scid );
  htp.formhidden( 'PARM', parm );
  htp.formhidden( 'CALL_NAME', call_name );
  htp.formhidden( 'ACCESS_ID', access_id );
  htp.formhidden( 'RID', nrid );
  htp.formhidden( 'OLD_ENTRY', c2rec.convoy_id );
  htp.nl;
  htp.nl;
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_450 );
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_453 );
 htp.formclose;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'CONFIRM_MANENTRY_DELETE',null,owner_id,errmsg=>sqlerrm);
end confirm_manentry_delete;

procedure accept_manentry_delete(surl in varchar2, rid in varchar2, scid in varchar2, call_name in varchar2, parm in varchar2, old_entry in varchar2, access_id in varchar2 default null, action in varchar2 )
as

  cursor c2 is select rowid, a.* from strang.convoy a order by convoy_id desc ;

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nrid		varchar2(100);
 c2rec      c2%ROWTYPE;
 vaccess	varchar2(20);
 


begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_MANENTRY' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 nrid := replace(rid,'~','+');
 vaccess := data_access( owner_id, 'MANENTRY', rid );

 if vaccess = 'EDIT'
  then

 if action = LNGS.STR_TXT_450
  then
   manentry( surl, nrid, scid, call_name, parm, access_id, 'Deletion Stopped' );
 else
   delete from strang.convoy where convoy_id = old_entry;
   delete from strang.convoy_fuel where convoy_id = old_entry;
   delete from strang.convoy_details where convoy_id = old_entry;
   
   update strang.movements
     set  convoy_id = null
   where convoy_id = old_entry;
   
   commit;
   
   open c2;
   fetch c2 into c2rec;
   close c2;
   
   manentry( surl, c2rec.rowid , scid, call_name, parm, access_id, 'Convoy ' || old_entry || ' Deleted' );  -- changed null to lastrid David Banjo
 end if;

 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_MANENTRY_DELETE',null,owner_id,errmsg=>sqlerrm);
end accept_manentry_delete;

procedure generate_ccdets( surl in varchar2, vShip_id in integer )
as

 cursor c4( vShip_id integer ) is
   select dr.line_no, m.bol, m.container_type,m.movement_no, m.seal, m.tare, dr.deliveryno, dr.itemno, dr.detaildesc, dr.pktpe_packtype,
   dr.qty,dr.partvolume, dr.partweight,dr.ecn, dr.hazard,dr.logno,  c.customer cus4, c4.customer cus2, r.currdate, s.voy, s.shipname
   from strang.detailrs dr, strang.ships_airway s, strang.customers c, strang.customers c4, strang.receivals r, strang.movements m
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    m.movement_type = 'CARGO' and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.deliveryno = dr.deliveryno and
    r.cust_customer_id = c.customer_id and
    r.supplier_customer_id = c4.customer_id
   order by dr.line_no ;

  cursor c5( vShip_id integer ) is
    select dr.line_no, m.bol, m.container_type,m.movement_no, m.seal, m.tare, dr.deliveryno, dr.itemno, dr.detaildesc, dr.pktpe_packtype,
    dr.qty,dr.partvolume, dr.partweight,dr.ecn, dr.hazard,dr.logno,  c.customer cus4, c4.customer cus2, r.currdate, s.voy, s.shipname
    from strang.detailrs dr, strang.ships_airway s, strang.customers c, strang.customers c4, strang.receivals r, strang.movements m
    where
     s.ship_id = vShip_id and
     m.ship_id = s.ship_id and
     m.movement_no = dr.movement_no and
     m.movement_type = 'CONMOV' and
     nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
     r.deliveryno = dr.deliveryno and
     r.cust_customer_id = c.customer_id and
     r.supplier_customer_id = c4.customer_id
    order by dr.line_no ;


  cursor c3(vShipid integer) is select * from strang.ships_airway where ship_id = vShipid;

  c1rec		customer_account%ROWTYPE;
  c3rec		c3%ROWTYPE;
  f 		utl_file.file_type;
  tot		integer;
  gcode		GLBX.MYARRAY;
  gparam	GLBX.MYARRAY;
  vste		varchar2(10);
  eml		varchar2(100);
  ltype		varchar2(100);
  stype		integer;
  owner_id	integer;
  sts		varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.GENERATE_CCDETS' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 eml := control_code( 'RAWDATA_EMAIL_ADDRESS', vste );
 eml := nvl( eml, glbx.extract_master_parameter('MAIL_FROM') );

 open c3(vShip_id);
 fetch c3 into c3rec;
 close c3;
 f := utl_file.fopen( glbx.extract_master_parameter('MAIL_TEMPLATE_DIR'), 'ccdets_' || c3rec.shipname || '_' || c3rec.voy || '.txt', 'w', 32767);

 for c4rec in c4(vShip_id) loop
  utl_file.put_line(f, buffer=>c4rec.line_no || ',"' ||  c4rec.bol || '","' || c4rec.container_type || '","' || c4rec.movement_no || '","' ||  c4rec.seal || '",' ||  c4rec.tare || ',"","","",' ||  c4rec.deliveryno || ',' ||  c4rec.itemno || ',"' ||  substr(c4rec.detaildesc,1,30) || '","'|| substr(c4rec.detaildesc,31,30) || '","'||  c4rec.pktpe_packtype
    || '",' || c4rec.qty || ',' || c4rec.partweight || ',' ||  c4rec.partvolume || ',"' || c4rec.ecn || '","' ||  c4rec.hazard || '","' || c4rec.logno || '","' ||   c4rec.cus2 || '","' ||  c4rec.cus4 || '","' ||  to_char(c4rec.currdate,'DD.MM.YYYY') || '","' ||  c4rec.voy || '","' ||  c4rec.shipname || '"' );

 end loop;

 for c5rec in c5(vShip_id) loop
  utl_file.put_line(f, buffer=>c5rec.line_no || ',"' ||  c5rec.bol || '","","","",'',"","","' || c5rec.movement_no || '",' ||  c5rec.deliveryno || ',' ||  c5rec.itemno || ',"' ||  substr(c5rec.detaildesc,1,30) || '","'|| substr(c5rec.detaildesc,31,30) || '","'||  c5rec.pktpe_packtype
    || '",' || c5rec.qty || ',' || c5rec.partweight || ',' ||  c5rec.partvolume || ',"' || c5rec.ecn || '","' ||  c5rec.hazard || '","' || c5rec.logno || '","' ||   c5rec.cus2 || '","' ||  c5rec.cus4 || '","' ||  to_char(c5rec.currdate,'DD.MM.YYYY') || '","' ||  c5rec.voy || '","' ||  c5rec.shipname || '"' );

 end loop;

 utl_file.fclose( f );

 gcode(1) := 'XXXX'; -- Dummy Parameter
 gparam(1) := 'XXXX';
 glbx.send( gcode, gparam, 'ccdets_' || c3rec.shipname || '_' || c3rec.voy || '.txt', p_to=>eml, p_subj=>'ccdets_' || c3rec.shipname || '_' || c3rec.voy, p_from=>glbx.extract_master_parameter('MAIL_FROM'));

exception when others then
 glbx.error_details( 'STRANGP', 'GENERATE_CCDETS',null,null,errmsg=>sqlerrm);
end generate_ccdets;

-- 20170607
procedure generate_ccpo( surl in varchar2, vShip_id in integer )
as

 cursor c4( vShip_id integer ) is
   select distinct p.deliveryno, p.recno, p.po, p.po_item_no, p.sap_delno_qty qty, p.sap_delno, p.supinv,r.curr,p.tamount, p.delivery_charge, p.inventoryno, nvl(i.description,'NOT ALLOCATED') descn,m.movement_no, m.seal
   from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.receivals r, strang.movements m, strang.lov i
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.cust_customer_id = 1 and
    r.deliveryno = dr.deliveryno and
    r.deliveryno = p.deliveryno and
    nvl(p.inventoryno,'NOT ALLOCATED') = i.code and
    i.lov_name = 'INVENT'
  union
   select distinct p.deliveryno, p.recno, p.po, p.po_item_no, p.sap_delno_qty qty, p.sap_delno, p.supinv,r.curr,p.tamount, p.delivery_charge, p.inventoryno, nvl(i.description,'NOT ALLOCATED') descn,m.movement_no, m.seal
   from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.receivals r, strang.movements m, strang.lov i
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.cust_customer_id = 1 and
    r.deliveryno = dr.deliveryno and
    r.deliveryno = p.deliveryno and
    p.inventoryno is not null and
    p.inventoryno not in (select code from strang.lov where lov_name = 'INVENT')
  order by po,po_item_no;

 cursor c5( vShip_id integer ) is
   select count('x') tot
      from
   (
   select distinct p.deliveryno, p.recno, p.po, p.po_item_no, p.sap_delno_qty qty, p.sap_delno, p.supinv,r.curr,p.tamount, p.delivery_charge, p.inventoryno, nvl(i.description,'NOT ALLOCATED') descn,m.movement_no, m.seal
   from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.receivals r, strang.movements m, strang.lov i
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.cust_customer_id = 1 and
    r.deliveryno = dr.deliveryno and
    r.deliveryno = p.deliveryno and
    nvl(p.inventoryno,'NOT ALLOCATED') = i.code and
    i.lov_name = 'INVENT'
  union
   select distinct p.deliveryno, p.recno, p.po, p.po_item_no, p.sap_delno_qty qty, p.sap_delno, p.supinv,r.curr,p.tamount, p.delivery_charge, p.inventoryno, nvl(i.description,'NOT ALLOCATED') descn,m.movement_no, m.seal
   from strang.detailrs dr, strang.pos p, strang.ships_airway s, strang.receivals r, strang.movements m, strang.lov i
   where
    s.ship_id = vShip_id and
    m.ship_id = s.ship_id and
    m.movement_no = dr.movement_no and
    nvl(m.seal,'|') = nvl(dr.camov_seal,'|') and
    r.cust_customer_id = 1 and
    r.deliveryno = dr.deliveryno and
    r.deliveryno = p.deliveryno and
    p.inventoryno is not null and
    p.inventoryno not in (select code from strang.lov where lov_name = 'INVENT')
  );


  cursor c3(vShipid integer) is select * from strang.ships_airway where ship_id = vShipid;

  c1rec		customer_account%ROWTYPE;
  c3rec		c3%ROWTYPE;
  c5rec		c5%ROWTYPE;
  f 		utl_file.file_type;
  tot		integer;
  gcode		GLBX.MYARRAY;
  gparam	GLBX.MYARRAY;
  vste		varchar2(10);
  eml		varchar2(100);
  ltype		varchar2(100);
  stype		integer;
  owner_id	integer;
  sts		varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.GENERATE_CCPO' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 eml := control_code( 'RAWDATA_EMAIL_ADDRESS', vste );
 eml := nvl( eml, glbx.extract_master_parameter('MAIL_FROM') );

 open c5(vShip_id);
 fetch c5 into tot;
 close c5;
 open c3(vShip_id);
 fetch c3 into c3rec;
 close c3;
 f := utl_file.fopen( glbx.extract_master_parameter('MAIL_TEMPLATE_DIR'), 'POS_' || c3rec.shipname || '_' || c3rec.voy || '.csv', 'w', 32767);
 -- Output Header
 utl_file.put_line(f, buffer=>'H,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot );

 for c4rec in c4(vShip_id) loop
  utl_file.put_line(f, buffer=>'"'||c4rec.po|| '",' || c4rec.po_item_no|| ',' ||  c4rec.qty|| ',"' || c4rec.curr|| '",' || c4rec.tamount|| ',' || c4rec.delivery_charge|| ',' ||  c4rec.sap_delno ||  ',"' ||  c4rec.supinv|| '","' || c4rec.inventoryno|| '","' || c4rec.descn|| '","' || c4rec.movement_no ||'","' || c4rec.seal ||'"' ) ;

 end loop;
 -- Output Footer
 utl_file.put_line(f, buffer=>'F,' || to_char(sysdate,'DD.MM.YYYY') || ',' || tot );
 utl_file.fclose( f );

 gcode(1) := 'XXXX'; -- Dummy Parameter
 gparam(1) := 'XXXX';
 glbx.send( gcode, gparam, 'POS_' || c3rec.shipname || '_' || c3rec.voy || '.csv', p_to=>eml, p_subj=>'POS_' || c3rec.shipname || '_' || c3rec.voy, p_from=>glbx.extract_master_parameter('MAIL_FROM'),is_attachment=>TRUE);

exception when others then
 glbx.error_details( 'STRANGP', 'GENERATE_CCPO',null,null,errmsg=>sqlerrm);
end generate_ccpo;

-- 20170607

-- **************************************************************************************

procedure ctr_menu( surl in varchar2 )
as
 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 seclevel	varchar2(100);
 url		varchar2(1000);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.CTR_MENU' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  c1rec := glbx.get_aid( owner_id, 'C', ltype );
  pfx := glbx.get_thm( c1rec.theme_name );
  seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Container Menu',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR40',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.p( '<CENTER>' );

 glbx.header_msg( 'Container Menu' );

 htp.anchor( 'strangp.menu?surl=' || surl || '&rnd=' || to_char(sysdate,'SSSSS') || '&MTYPE=CTR', 'Container Hire' );
 htp.nl;
 htp.nl;
 htp.anchor( 'strangp.menu?surl=' || surl || '&rnd=' || to_char(sysdate,'SSSSS') || '&MTYPE=CTRACK', 'Container Tracking' );
 htp.nl;
 htp.nl;
 htp.p( '</CENTER>' );
 htp.htmlclose;
end ctr_menu;

procedure ctr_track( surl in varchar2, rid in varchar2 default null, id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, parm in varchar2 default null )
as

 cursor c2( vrid rowid ) is select * from strang.tracking_header where rowid = rid;
 cursor c3( sid integer ) is select * from strang.tracking_details where id = sid order by rno desc;
 cursor c4( sid integer, rnmb integer ) is select * from strang.tracking_details where id = sid and rno = rnmb;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 nxtrec		c4%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 seclevel	varchar2(100);
 url		varchar2(1000);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.CTR_TRACK' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'CONTAINERS', rid );
  c1rec := glbx.get_aid( owner_id, 'C', ltype );
  pfx := glbx.get_thm( c1rec.theme_name );
  seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Container Tracking',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR45',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.p( '<CENTER>' );
 if id <> 'z' and rid is not null
  then
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
 end if;

 htp.formopen( 'strangp.accept_ctr_track' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', replace(rid,'~','+') );
 htp.formhidden( 'P1', null );
 htp.formhidden( 'P2', null );
 htp.formhidden( 'P3', null );
 htp.formhidden( 'P4', null );

 if rid is null and id <> 'z'
  then
   htp.bold( 'No Container Tracking Record Found' );
   htp.nl;

  else

  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
   htp.tablerowopen;
    htp.tabledata( htf.bold('Container No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT' and id = 'z'
     then
      htp.tabledata( htf.formhidden( 'P1', 'CONTAINERNO' ) || htf.formtext('P2', 40, 100, c2rec.containerno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
      htp.tabledata( htf.bold(c2rec.containerno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    end if;
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Container Type'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
     then
      htp.tabledata( htf.formhidden( 'P1', 'CAT_CODE' ) || htf.formtext('P2', 40, 100, c2rec.cat_code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
      htp.tabledata( htf.bold(c2rec.cat_code),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    end if;
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Container Owner'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if vaccess = 'EDIT'
     then
      htp.tabledata( htf.formhidden( 'P1', 'CAT_COMPANY' ) || htf.formtext('P2', 40, 100, c2rec.cat_company),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
      htp.tabledata( htf.bold(c2rec.cat_company),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    end if;
   htp.tablerowclose;

  htp.tableclose;
  htp.nl;
  htp.line;
  htp.nl;
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Rno'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Movement<BR>Type'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Ship' || htf.nl || 'Voyage'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Etd' || htf.nl || 'From Loc'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Eta' || htf.nl || 'To Loc'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Current<BR>Location'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Date at<BR>Location'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Remark'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Activity<BR>Status'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;

  for c3rec in c3( c2rec.id ) loop
    htp.tablerowopen;
     htp.tabledata( htf.anchor( 'strangp.ctrdel?surl=' || surl || '&sno=' || c2rec.id || '&rn=' || c3rec.rno,'Delete'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( c3rec.rno, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.formhidden( 'P3', '[' || to_char(c3rec.rno) || ']' || 'MTYPE' ) || htf.formtext( 'P4', 40, 100, c3rec.movement_type ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.formhidden( 'P3', '[' || to_char(c3rec.rno) || ']' || 'SHIP' ) || htf.formtext( 'P4', 40, 100, c3rec.ship ) || htf.nl ||
                    htf.formhidden( 'P3', '[' || to_char(c3rec.rno) || ']' || 'VOYAGE' ) || htf.formtext( 'P4', 40, 100, c3rec.voyage ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.formhidden( 'P3', '[' || to_char(c3rec.rno) || ']' || 'ETD' ) || htf.formtext( 'P4', 12, 100, to_char(c3rec.etd_date,'DD-MON-YYYY') ) || htf.nl ||
                    htf.formhidden( 'P3', '[' || to_char(c3rec.rno) || ']' || 'FROMLOC' ) || htf.formtext( 'P4', 12, 100, c3rec.departure_location ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.formhidden( 'P3', '[' || to_char(c3rec.rno) || ']' || 'ETA' ) || htf.formtext( 'P4', 12, 100, to_char(c3rec.eta_date,'DD-MON-YYYY') ) || htf.nl ||
                    htf.formhidden( 'P3', '[' || to_char(c3rec.rno) || ']' || 'TOLOC' ) || htf.formtext( 'P4', 12, 100, c3rec.arrival_location ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.formhidden( 'P3', '[' || to_char(c3rec.rno) || ']' || 'CURRLOC' ) || htf.formtext( 'P4', 10, 100, c3rec.current_location ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.formhidden( 'P3', '[' || to_char(c3rec.rno) || ']' || 'DATELOC' ) || htf.formtext( 'P4', 10, 100, to_char(c3rec.date_at_current_loc,'DD-MON-YYYY') ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.formhidden( 'P3', '[' || to_char(c3rec.rno) || ']' || 'RNO' ) || htf.formhidden( 'P4', c3rec.rno ) ||
                    htf.formhidden( 'P3', '[' || to_char(c3rec.rno) || ']' || 'REMARK' ) || htf.formtext( 'P4', 100, 100, c3rec.remark ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.p( '<TD ' || glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"' || '>' );
      nxtrec := null;
      open c4(c3rec.id, c3rec.rno + 1);
      fetch c4 into nxtrec;
      close c4;
      if nxtrec.rno is null
       then
        htp.bold( to_number(trunc(trunc(sysdate) - c3rec.date_at_current_loc)) );
       else
         htp.bold( to_number(trunc( nvl(nxtrec.etd_date,nxtrec.date_at_current_loc) - c3rec.date_at_current_loc )));
      end if;
     htp.p( '</TD>' );
    htp.tablerowclose;
  end loop;

  if vaccess = 'EDIT'
   then
    for j in 1..3 loop
     htp.tablerowopen;
      htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'P3', '[N' || to_char(j) || ']' || 'MTYPE' ) || htf.formtext( 'P4', 40, 100 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'P3', '[N' || to_char(j) || ']' || 'SHIP' ) || htf.formtext( 'P4', 40, 100 ) || htf.nl ||
                     htf.formhidden( 'P3', '[N' || to_char(j) || ']' || 'VOYAGE' ) || htf.formtext( 'P4', 40, 100 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'P3', '[N' || to_char(j) || ']' || 'ETD' ) || htf.formtext( 'P4', 12, 100 ) || htf.nl ||
                     htf.formhidden( 'P3', '[N' || to_char(j) || ']' || 'FROMLOC' ) || htf.formtext( 'P4', 12, 100 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'P3', '[N' || to_char(j) || ']' || 'ETA' ) || htf.formtext( 'P4', 12, 100 ) || htf.nl ||
                     htf.formhidden( 'P3', '[N' || to_char(j) || ']' || 'TOLOC' ) || htf.formtext( 'P4', 12, 100 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'P3', '[N' || to_char(j) || ']' || 'CURRLOC' ) || htf.formtext( 'P4', 10, 100 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'P3', '[N' || to_char(j) || ']' || 'DATELOC' ) || htf.formtext( 'P4', 10, 100 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.formhidden( 'P3', '[N' || to_char(j) || ']' || 'REMARK' ) || htf.formtext( 'P4', 100, 100 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tablerowclose;
    end loop;
  end if;
 end if;

 htp.nl;
 htp.nl;
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT' and (id = 'z')
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Insert' ),cattributes=>'VALIGN="TOP"');
 elsif vaccess = 'EDIT' and id <> 'z' and rid is not null
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Update' ),cattributes=>'VALIGN="TOP"');
   htp.tabledata( htf.formsubmit( 'ACTION', 'Delete' ),cattributes=>'VALIGN="TOP"');
 elsif vaccess = 'READ' and id <> 'z' AND seclevel in ( 'LEVEL 6','LEVEL 7' )
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Delete' ),cattributes=>'VALIGN="TOP"');
 end if;

 htp.formclose;
 if vaccess = 'EDIT'
  then
   htp.tabledata( htf.formopen( 'strangp.ctr_track' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'ID', 'z' ) || htf.formhidden( 'RID', null ) || htf.formsubmit( null, 'Create New Record' ) || htf.formclose,cattributes=>'VALIGN="TOP"');
 end if;
 htp.tablerowclose;
 htp.tableclose;
 htp.formclose;

 htp.nl;
 htp.nl;
 search( surl, 'CTRACK', rid );
 htp.nl;

 if msg is not null
  then
   glbx.header_msg( msg );
 end if;

 htp.p( '</CENTER>' );
 htp.tableclose;
exception when others then
 glbx.error_details( 'STRANGP', 'CTR_TRACK',null,null,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end ctr_track;

procedure ctrdel( surl in varchar2, sno in varchar2, rn in varchar2 )
as

 cursor c1(sno integer) is select rowid from strang.tracking_header where id = sno;
 cursor c2(sno integer) is select rowid from strang.tracking_details where id = sno order by rno;

 c1rec		c1%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 nmb		integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 seclevel	varchar2(100);
begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'CTRDEL' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
 delete from strang.tracking_details where id = sno and rno = rn;
 nmb := 0;
 for c2rec in c2(sno) loop
  nmb := nmb + 1;
  update strang.tracking_details set rno = nmb where rowid = c2rec.rowid;
 end loop;
 commit;
 open c1(sno);
 fetch c1 into c1rec;
 close c1;
 ctr_track(surl,c1rec.rowid,'x','Container Tracking Record Deleted' );
end ctrdel;

procedure accept_ctr_track( surl in varchar2, rid in varchar2, p1 in glbx.myarray, p2 in glbx.myarray, p3 in glbx.myarray, p4 in glbx.myarray, action in varchar2 )
as

 cursor c1(rid rowid) is select id from strang.tracking_header where rowid = rid;

 cusrec		customer_account%ROWTYPE;
 cnrec		strang.tracking_header%ROWTYPE;
 cdrec		strang.tracking_details%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 nmb1		integer;
 nmb2		integer;
 sts		varchar2(100);
 newrid		rowid;
 vste		varchar2(10);
 sno		integer;
 ctr		integer;

 function getval( cd in varchar2, v1 in glbx.myarray, v2 in glbx.myarray )
  return varchar2
 as
 begin
  for j in v1.first..v1.last loop
   if v1(j) = cd then return( v2(j) ); end if;
  end loop;
  return( null );
 end getval;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'ACCEPT_CTR_TRACK' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  cusrec := glbx.get_aid( owner_id, 'C', ltype );
  vste := customer_state(cusrec.aid);

  if action = 'Delete'
   then
    delete from strang.tracking_details where id in (select id from strang.tracking_header where rowid = chartorowid(replace(rid,'~','+')));
    delete from strang.tracking_header where rowid = chartorowid(replace(rid,'~','+'));
    search( surl, 'CTRACK', null );
    return;
  end if;

  if action = 'Insert'
   then
    cnrec.containerno := getval( 'CONTAINERNO', p1, p2 );
    cnrec.cat_code := getval( 'CAT_CODE', p1, p2 );
    cnrec.cat_company := getval( 'CAT_COMPANY', p1, p2 );
    if cnrec.containerno is null or
       cnrec.cat_code is null or
       cnrec.cat_company is null
     then
      ctr_track(surl,rid,'z','You must specify a value for Container, Type and Owner' );
      return;
    end if;
    select strang.s_tracking_header.nextval into sno from dual;
    insert into strang.tracking_header(id,containerno,cat_code,cat_company) values
     (sno,cnrec.containerno,cnrec.cat_code,cnrec.cat_company)
    returning rowid into newrid;
  end if;

  if action = 'Update'
   then
    open c1( chartorowid(replace(rid,'~','+')) );
    fetch c1 into sno;
    close c1;
    --cnrec.containerno := getval( 'CONTAINERNO', p1, p2 );
    cnrec.cat_code := getval( 'CAT_CODE', p1, p2 );
    cnrec.cat_company := getval( 'CAT_COMPANY', p1, p2 );
    update strang.tracking_header
     set
      cat_code = cnrec.cat_code,
      cat_company = cnrec.cat_company
     where
      id = sno;
  end if;

  -- Add tracking body
  ctr := 0;
  if action = 'Update'
   then
    loop
     cdrec := null;
     ctr := ctr + 1;
     cdrec.rno := getval( '[' || ctr || ']' || 'RNO', p3, p4 );
     if cdrec.rno is null then exit; end if;
     cdrec.remark := getval( '[' || ctr || ']' || 'REMARK', p3, p4 );
     cdrec.movement_type := getval( '[' || ctr || ']' || 'MTYPE', p3, p4 );
     cdrec.departure_location := getval( '[' || ctr || ']' || 'FROMLOC', p3, p4 );
     cdrec.etd_date := to_date(getval( '[' || ctr || ']' || 'ETD', p3, p4 ),'DD-MON-YYYY');
     cdrec.arrival_location := getval( '[' || ctr || ']' || 'TOLOC', p3, p4 );
     cdrec.eta_date := to_date(getval( '[' || ctr || ']' || 'ETA', p3, p4 ),'DD-MON-YYYY');
     cdrec.ship := getval( '[' || ctr || ']' || 'SHIP', p3, p4 );
     cdrec.voyage := getval( '[' || ctr || ']' || 'VOYAGE', p3, p4 );
     cdrec.current_location := getval( '[' || ctr || ']' || 'CURRLOC', p3, p4 );
     cdrec.date_at_current_loc := to_date(getval( '[' || ctr || ']' || 'DATELOC', p3, p4 ),'DD-MON-YYYY');
     update strang.tracking_details
      set
       remark = cdrec.remark,
       movement_type = cdrec.movement_type,
       departure_location = cdrec.departure_location,
       etd_date = cdrec.etd_date,
       arrival_location = cdrec.arrival_location,
       eta_date = cdrec.eta_date,
       ship = cdrec.ship,
       voyage = cdrec.voyage,
       current_location = cdrec.current_location,
       date_at_current_loc = cdrec.date_at_current_loc
     where
      id = sno and
      rno = ctr;
    end loop;
  end if;

  ctr := 0;
  if action in ('Insert','Update')
   then
    for j in 1..3 loop
     cdrec := null;
     select nvl(max(rno),0) + 1 nmb into cdrec.rno from strang.tracking_details where id = sno;
     cdrec.remark := getval( '[N' || j || ']' || 'REMARK', p3, p4 );
     cdrec.movement_type := getval( '[N' || j || ']' || 'MTYPE', p3, p4 );
     cdrec.departure_location := getval( '[N' || j || ']' || 'FROMLOC', p3, p4 );
     begin cdrec.etd_date := to_date(getval( '[N' || j || ']' || 'ETD', p3, p4 ),'DD-MON-YYYY'); exception when others then cdrec.etd_date := null; end;
     cdrec.arrival_location := getval( '[N' || j || ']' || 'TOLOC', p3, p4 );
     begin cdrec.eta_date := to_date(getval( '[N' || j || ']' || 'ETA', p3, p4 ),'DD-MON-YYYY'); exception when others then cdrec.eta_date := null; end;
     cdrec.ship := getval( '[N' || j || ']' || 'SHIP', p3, p4 );
     cdrec.voyage := getval( '[N' || j || ']' || 'VOYAGE', p3, p4 );
     cdrec.current_location := getval( '[N' || j || ']' || 'CURRLOC', p3, p4 );

     begin cdrec.date_at_current_loc := to_date(getval( '[N' || j || ']' || 'DATELOC', p3, p4 ),'DD-MON-YYYY'); exception when others then cdrec.date_at_current_loc := null; end;

     cdrec.current_location := nvl(cdrec.current_location,cdrec.arrival_location);
     cdrec.date_at_current_loc := nvl(cdrec.date_at_current_loc,cdrec.eta_date);

     if cdrec.movement_type is null or
        cdrec.date_at_current_loc is null
      then
       null;
      else
       insert into strang.tracking_details(id,rno,remark,movement_type,departure_location,etd_date,arrival_location,eta_date,ship,voyage,current_location,date_at_current_loc)
        values(sno,cdrec.rno,cdrec.remark,cdrec.movement_type,cdrec.departure_location,cdrec.etd_date,cdrec.arrival_location,cdrec.eta_date,cdrec.ship,cdrec.voyage,cdrec.current_location,cdrec.date_at_current_loc);
     end if;
    end loop;
  end if;

  commit;

  if action = 'Update'
   then
    ctr_track( surl, rid, 'x', 'Record Modified' );
  elsif action = 'Insert'
   then
    ctr_track( surl, newrid, 'x', 'Record Inserted' );
  end if;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_CTR_TRACK',null,owner_id,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end accept_ctr_track;

procedure mng_ctr( surl in varchar2, rid in varchar2 default null, id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, parm in varchar2 default null )
as

 cursor c2( rid rowid ) is select * from strang.containers where rowid = rid;
 cursor c3 is select * from strang.onlocs order by loc_location;
 cursor c4( ccomp varchar2, cct varchar2,ccode varchar2) is select * from strang.onlocs
 where
 cat_company = ccomp and
 cat_contract = cct and
 cat_code = ccode
 order by cat_contract, cat_company;
 cursor c5 is select * from strang.offlocs order by loc_location;
 cursor c6( ccomp varchar2, cct varchar2,ccode varchar2) is select * from strang.offlocs
 where
 cat_company = ccomp and
 cat_contract = cct and
 cat_code = ccode
 order by cat_contract, cat_company;
 cursor c7 is select * from strang.categories order by contract;
 cursor c7a(ck varchar2, cd varchar2, cm varchar2) is select rno from strang.categories where contract = ck and codedesc = cd and company = cm;
 cursor c8 is select * from strang.lov where lov_name = 'UNCTNTAB' order by code;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c7arec		c7a%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 seclevel	varchar2(100);
 url		varchar2(1000);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.MNG_CTR' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'CONTAINERS', rid );
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'CONTAINER HIRE MAINTENANCE',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR22',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.p( '<CENTER>' );
 if id <> 'z' and rid is not null
  then
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
 end if;
 --GLBX.DBG( 'X1:' || VACCESS );
 --GLBX.DBG( C2REC.OFFDATE);
 --GLBX.DBG( C2REC.FLOC_LOCATION);
 if vaccess = 'EDIT'  and (c2rec.offdate is not null) and (c2rec.floc_location is not null) then
    vaccess := 'READ';
 end if;

 htp.formopen( 'strangp.accept_mng_ctr', ctarget=>'_top' );
 htp.formhidden( 'SURL', surl );
   htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'ID', id );

if vaccess = 'READ' then
   htp.formhidden( 'P1', null );
   htp.formhidden( 'P2', null );
   htp.formhidden( 'P3', null );
   htp.formhidden( 'P4', null );
   htp.formhidden( 'P5', null );
   htp.formhidden( 'P6', null );
   htp.formhidden( 'P7', null );
   htp.formhidden( 'P8', null );
   htp.formhidden( 'P9', null );
   htp.formhidden( 'P10', null );
   htp.formhidden( 'P11', null );
   htp.formhidden( 'P12', null );
end if;


 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold('Container No'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT' and id = 'z'
    then
     htp.tabledata( htf.formtext('P1', 15, 15, c2rec.containerno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.formhidden( 'P1', c2rec.containerno ) || htf.bold(c2rec.containerno),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
   htp.tabledata( htf.bold('Company Name'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold(nvl(c2rec.cat_company,'&nbsp')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');
  htp.tablerowclose;
     if vaccess = 'EDIT' and id = 'z'
      then
       htp.tablerowopen;
       htp.tabledata( htf.bold('Details'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
        htp.p( '<TD '|| glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"  COLSPAN="5">' );
          htp.formselectopen( 'P2' );
              for c7rec in c7  loop
                if c7rec.contract=c2rec.cat_contract then
                  htp.formselectoption( ' --- '|| c7rec.contract || ' --- '|| c7rec.codedesc || ' --- '|| c7rec.company, 'SELECTED', cattributes=>'VALUE="'||c7rec.rno ||'"');
                else
                  htp.formselectoption( ' --- '|| c7rec.contract || ' --- '|| c7rec.codedesc || ' --- '|| c7rec.company, cattributes=>'VALUE="'||c7rec.rno ||'"');
               end if;
              end loop;
          htp.formselectclose;
        htp.p( '</TD>');
       htp.tablerowclose;
     elsif vaccess = 'EDIT'
      then
       open c7a(c2rec.cat_contract, c2rec.cat_code, c2rec.cat_company);
       fetch c7a into c7arec;
       close c7a;
       htp.formhidden('P2', c7arec.rno );
      else
       htp.tablerowopen;
        htp.tabledata( htf.bold('Details'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
        htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="5"');
       htp.tablerowclose;
     end if;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Contract'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold(nvl(c2rec.cat_contract,'&nbsp')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');


   htp.tabledata( htf.bold('ISO Container Type'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');

     if vaccess = 'EDIT'
      then
        htp.p( '<TD '|| glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3">' );
          htp.formselectopen( 'P3' );
              for c8rec in c8 loop
                if c8rec.code=c2rec.ctpe_ctrtype
                 then
                  htp.formselectoption( c8rec.code, 'SELECTED', cattributes=>'VALUE="'|| c8rec.code || '"');
                else
                  htp.formselectoption( c8rec.code, cattributes=>'VALUE="' ||c8rec.code || '"');
               end if;
              end loop;

          htp.formselectclose;
        htp.p( '</TD>');
      else
       htp.tabledata( htf.bold(nvl(c2rec.ctpe_ctrtype,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3"');
     end if;
  htp.tablerowclose;


  htp.tablerowopen;
   htp.tabledata( htf.bold('Category Code'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold(nvl(c2rec.cat_code,'&nbsp')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Description'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P4', 30, 30, c2rec.ctrdesc),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');
    else
     htp.tabledata( htf.bold(nvl(c2rec.ctrdesc,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" colspan="2"');
   htp.tabledata( htf.bold('Backcharge'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');

   if vaccess = 'EDIT'
    then
      htp.p( '<TD '|| glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"  >' );
        htp.formselectopen( 'P5' );
        if c2rec.backcharge='NO' then
           htp.formselectoption('NO', 'SELECTED');
        else
           htp.formselectoption('NO');
        end if;
        if c2rec.backcharge='YES' then
           htp.formselectoption('YES', 'SELECTED');
        else
           htp.formselectoption('YES');
        end if;
        htp.formselectclose;
        htp.p( '</TD>');
    else
     htp.tabledata( htf.bold(nvl(c2rec.backcharge,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;

 htp.tabledata( htf.bold('Times Hired'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold(nvl(to_char(c2rec.timeshired),'&nbsp')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tabledata(htf.line(cattributes=>'width=50% size=4'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' colspan="6" ALIGN="CENTER" style="text-align: center;"');
  htp.tablerowclose;

  if vaccess = 'EDIT' and id = 'z'
   then
    htp.formhidden( 'P6', NULL );
    htp.formhidden( 'P7', NULL );
    htp.formhidden( 'P8', NULL );
    htp.formhidden( 'P9', NULL );
    htp.formhidden( 'P10', NULL );
    htp.formhidden( 'P11', NULL );
    htp.formhidden( 'P12', NULL );
   else

  htp.tablerowopen;
  htp.tabledata(htf.bold('Onhire Information'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' colspan="3" ALIGN="CENTER" style="text-align: center;"');
  htp.tabledata(htf.bold('Offhire Information'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' colspan="3" ALIGN="CENTER" style="text-align: center;"');
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Date Hired'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P6', 15, 15, to_char(c2rec.datehired, 'dd-MON-yyyy')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(nvl(to_char(c2rec.datehired, 'dd-MON-yyyy'),'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
   htp.tabledata( htf.bold('Off Hire Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT' and (id <> 'z')
    then
     htp.tabledata( htf.formtext('P7', 15, 15, to_char(c2rec.offdate, 'dd-MON-yyyy')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');
    else
     htp.tabledata( htf.bold(nvl(to_char(c2rec.offdate,'dd-MON-yyyy'),'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');
   end if;
  htp.tablerowclose;

if vaccess = 'EDIT' then
htp.tablerowopen;
   htp.tabledata( htf.bold('On Hire Details'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
      htp.p( '<TD '|| glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
        htp.formselectopen( 'P8' );
          if id = 'z' then
            for c3rec in c3 loop
              htp.formselectoption( c3rec.loc_location || ' '|| c3rec.cat_company || ' '|| c3rec.cat_contract || ' '|| c3rec.cat_code , cattributes=>'VALUE="'|| C3rec.loc_location || '"');
            end loop;
          else
          --glbx.dbg( 'X2:c2rec.cat_company '|| c2rec.cat_company );
         --glbx.dbg( 'X2:c2rec.cat_contract '|| c2rec.cat_contract );
         --glbx.dbg( 'X2:c2rec.cat_code '|| c2rec.cat_code );
         --glbx.dbg( 'X2:c2rec.cat_cdate '|| c2rec.cat_cdate );
           htp.formselectoption( NULL );
            for c4rec in c4( c2rec.cat_company,c2rec.cat_contract,c2rec.cat_code) loop
              if c4rec.loc_location=c2rec.nloc_location then
                htp.formselectoption( c4rec.loc_location, 'SELECTED', cattributes=>'VALUE="'|| c4rec.loc_location || '"');
              else
                htp.formselectoption( c4rec.loc_location , cattributes=>'VALUE="'|| c4rec.loc_location || '"');
             end if;
            end loop;
          end if;

        htp.formselectclose;
      htp.p( '</TD>');
    else
     htp.tabledata( htf.bold(nvl(c2rec.nloc_location,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;

   htp.tabledata( htf.bold('Off Hire Details'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT' and (id <> 'z')
    then
      htp.p( '<TD '|| glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"  COLSPAN="3" >' );
        htp.formselectopen( 'P9' );
        htp.formselectoption( null );
          if id = 'z' then
            for c5rec in c5 loop
              htp.formselectoption( c5rec.loc_location || ' '||  c5rec.cat_company || ' '|| c5rec.cat_contract || ' '|| c5rec.cat_code , cattributes=>'VALUE="'|| c5rec.loc_location || '"');
            end loop;
          else
            for c6rec in c6( c2rec.cat_company,c2rec.cat_contract,c2rec.cat_code)

            loop
              if c6rec.loc_location=c2rec.floc_location then
                htp.formselectoption( c6rec.loc_location, 'SELECTED', cattributes=>'VALUE="'|| c6rec.loc_location || '"');
              else
                htp.formselectoption( c6rec.loc_location, cattributes=>'VALUE="'|| c6rec.loc_location || '"');
             end if;
            end loop;
          end if;

        htp.formselectclose;
      htp.p( '</TD>');
    else
     htp.tabledata( htf.bold(nvl(c2rec.floc_location,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');

   end if;
   htp.tablerowclose;
 end if;

if vaccess = 'EDIT'
 then
  null;
 else
htp.tablerowopen;
    htp.tabledata( htf.bold('On Hire Location'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold(nvl(c2rec.nloc_location,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold('Off Hire Location'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold(nvl(c2rec.floc_location,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');
  htp.tablerowclose;
end if;
  --htp.tablerowopen;
  --  htp.tabledata( htf.bold('On Hire Validation Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  --  htp.tabledata( htf.bold(nvl(to_char(c2rec.nloc_cdate,'DD-MON-YYYY'),'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  --  htp.tabledata( htf.bold('Off Hire Validation Date'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  --  htp.tabledata( htf.bold(nvl(to_char(c2rec.floc_cdate,'DD-MON-YYYY'),'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');
  --htp.tablerowclose;

  htp.tablerowopen;
  htp.tabledata( htf.bold('Release'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"  VALIGN="TOP" ');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P10', 15, 15, c2rec.crelease),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" VALIGN="TOP" ');
    else
     htp.tabledata( htf.bold(nvl(c2rec.crelease,'&nbsp')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" VALIGN="TOP" ');
   end if;
  htp.tabledata( htf.bold('Turn In'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P11', 15, 15, c2rec.turnin),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');
    else
     htp.tabledata( htf.bold(nvl(c2rec.turnin,'&nbsp')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');
   end if;
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" COLSPAN="2" ');
  htp.tabledata( htf.bold('EIR'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P12', 15, 15, c2rec.eir),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');
    else
     htp.tabledata( htf.bold(nvl(c2rec.eir,'&nbsp')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3" ');
   end if;
  htp.tablerowclose;

 end if;


 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT' and (id = 'z' or rid is null)
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Insert' ),cattributes=>'VALIGN="TOP"');
 elsif vaccess = 'EDIT' and id <> 'z'
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Update' ),cattributes=>'VALIGN="TOP"');
   htp.tabledata( htf.formsubmit( 'ACTION', 'Delete' ),cattributes=>'VALIGN="TOP"');
 elsif vaccess = 'READ' and id <> 'z' AND seclevel in ( 'LEVEL 6','LEVEL 7' )
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Delete' ),cattributes=>'VALIGN="TOP"');
 end if;

 htp.formclose;
 if id <> 'z' -- vaccess = 'EDIT' and
  then
   htp.tabledata( htf.formopen( 'strangp.mng_ctr' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'ID', 'z' ) || htf.formhidden( 'RID', null ) || htf.formsubmit( null, 'Create New Record' ) || htf.formclose,cattributes=>'VALIGN="TOP"');
 end if;
 htp.tablerowclose;
 htp.tableclose;
 htp.formclose;
 htp.nl;
 if seclevel in ( 'LEVEL 1','LEVEL 8' )
  then
   null;
  else
   htp.anchor2( 'strangp.menu?surl=' || surl || '&mtype=CATEG&action=SEARCH&rid=&rnd=&msearch=', 'Categories', ctarget=>'POPUP');
   htp.p ('&nbsp;');
   htp.anchor2( 'strangp.menu?surl=' || surl || '&mtype=ONLOCS&action=SEARCH&rid=&rnd=&msearch=', 'Onhire Details', ctarget=>'POPUP');
   htp.p ('&nbsp;');
   htp.anchor2( 'strangp.menu?surl=' || surl || '&mtype=OFFLOCS&action=SEARCH&rid=&rnd=&msearch=', 'Offhire Details', ctarget=>'POPUP');
   htp.p ('&nbsp;');
   url := 'oltp.display_screen?surl=' || surl || '&sname=Container+Type&access_in=QUERY&rid=&rnd=';
   htp.anchor( 'javascript: window.open(''' || url || ''',''' || 'POPUP1' ||
               ''',''height=' || '400' ||
               ',width=' || '600' || ',scrollbars=yes,resizable=yes'');void('''');',
               'Container Types' );
   htp.p ('&nbsp;');

    url := 'oltp.display_screen?surl=' || surl || '&sname=Locations&access_in=QUERY&rid=&rnd=';
    htp.anchor( 'javascript: window.open(''' || url || ''',''' || 'POPUP2' ||
                ''',''height=' || '400' ||
               ',width=' || '600' || ',scrollbars=yes,resizable=yes'');void('''');',
                'Locations' );

   htp.p ('&nbsp;');

    url := 'oltp.display_screen?surl=' || surl || '&sname=Countries&access_in=QUERY&rid=&rnd=';
    htp.anchor( 'javascript: window.open(''' || url || ''',''' || 'POPUP3' ||
                ''',''height=' || '400' ||
                ',width=' || '600' || ',scrollbars=yes,resizable=yes'');void('''');',
                'Currencies' );

 end if;
 htp.nl;
 htp.nl;
 search( surl, 'CTR', rid );
 htp.nl;
 --if call_name is null then htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl; end if;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '</CENTER>' );
 htp.tableclose;
exception when others then
 glbx.error_details( 'STRANGP', 'MNG_CTR',null,null,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end mng_ctr;

-- **********************************************************

procedure accept_mng_ctr( SURL IN VARCHAR2, RID IN VARCHAR2, ID in VARCHAR2, P1 IN VARCHAR2, P2 IN VARCHAR2, P3 IN VARCHAR2, P4 IN VARCHAR2, P5 IN VARCHAR2,
P6 IN VARCHAR2, P7 IN VARCHAR2 default null, P8 IN VARCHAR2, P9 IN VARCHAR2 default null, P10 IN VARCHAR2, P11 IN VARCHAR2, P12 IN VARCHAR2, ACTION IN VARCHAR2 )
as
cursor c1 ( cno varchar2 ) is select max(timeshired) mx from strang.containers where containerno = cno;
cursor c2 ( cno varchar2 , th number ) is select * from strang.containers where containerno = cno and timeshired = th;
cursor c3 ( rn number ) is select * from strang.categories where rno = rn ;
cursor c5 ( ct varchar2, ccode varchar2, ccomp varchar2, loc varchar2 ) is select * from strang.onlocs
  where
  cat_company = ccomp and
  cat_contract = ct and
  cat_code = ccode and
  loc_location = loc;
cursor c6 ( ct varchar2, ccode varchar2, ccomp varchar2, loc varchar2 ) is select * from strang.offlocs
  where
  cat_company = ccomp and
  cat_contract = ct and
  cat_code = ccode and
  loc_location = loc;
cursor c7 (rid rowid) is select * from strang.containers where rowid=rid;
cursor c8 (ctr varchar2) is select * from strang.containers where containerno = ctr and offdate is null;

c1rec c1%ROWTYPE;
c2rec c2%ROWTYPE;
c3rec c3%ROWTYPE;
c5rec c5%ROWTYPE;
c6rec c6%ROWTYPE;
c7rec c7%ROWTYPE;
c8rec c8%ROWTYPE;

dt1 date;
dt2 date;
oloc varchar2(4);
ovdt date;
floc varchar2(4);
fvdt date;
errmsg varchar2(1000);
newrid rowid;
fnd	boolean;
fndo	boolean;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 seclevel	varchar2(100);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_MNG_CTR' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'CONTAINERS', rid );
 seclevel := oltp.security_role( owner_id );



IF VACCESS = 'READ' THEN
  mng_ctr( surl, rid, 'x', 'CANNOT MODIFY' );

END IF;
if action = 'Delete' then
  confirm_ctr_delete( surl,rid );
  return;
end if;
/*
glbx.dbg('P1:' ||P1);
glbx.dbg('P2:' ||P2);
glbx.dbg('P3:' ||P3);
glbx.dbg('P4:' ||P4);
glbx.dbg('P5:' ||P5);
glbx.dbg('P6:' ||P6);
glbx.dbg('P7:' ||P7);
glbx.dbg('P8:' ||P8);
glbx.dbg('P9:' ||P9);
glbx.dbg('P10:' ||P10);
glbx.dbg('P11:' ||P11);
glbx.dbg('P12:' ||P12);
*/
if P1 is null then
  mng_ctr( surl, rid, ID, 'Must Enter A Container No' );
  return;
end if;
oloc := p8; --substr(P8,2,instr(P8,']')-2);
--ovdt:=substr(p8,instr(P8,']')+1);
floc := p9; --substr(P9,2,instr(P9,']')-2);
--fvdt:=substr(p9,instr(P9,']')+1);
begin
 if P6 is null and action <> 'Insert' then
  mng_ctr( surl, rid, ID, 'On hire Date cannot be blank' );
  return;
 end if;

 dt1:=to_date(P6,'DD-MON-YYYY');
 exception when others then
  mng_ctr( surl, rid, ID, 'Invalid On hire date ' || P6 );
  return;
end;
begin
 dt2:=to_date(P7,'DD-MON-YYYY');
 exception when others then
 errmsg := 'Invalid Off hire date ' || P7 ;
 dt2:= null;
end;

if action='Insert' then
  open c1( upper(P1) );
    fetch c1 into c1rec;
    c1rec.mx := nvl(c1rec.mx,0);
    if c1rec.mx = 0 then
      close c1;
      c1rec.mx:= 1;
    else
      close c1;
      open c2( P1 , c1rec.mx );
        fetch c2 into c2rec;
      close c2;
      if c2rec.offdate is null then
        mng_ctr( surl, rid, 'z', 'Container ' || P1 ||' Already On Hire' );
        return;
      end if;
      c1rec.mx:= c1rec.mx + 1;
    end if;
    open c3 ( P2 );
    fetch c3 into c3rec;
    close c3;

    open c5 ( c3rec.contract, c3rec.codedesc, c3rec.company, oloc);
    fetch c5 into c5rec;
    close c5;

    open c6 ( c3rec.contract, c3rec.codedesc, c3rec.company, floc);
    fetch c6 into c6rec;
    close c6;
--glbx.dbg( 'c1:' || c5rec.cat_contract || '-' || c3rec.contract );
--glbx.dbg( 'c1:' || c5rec.cat_code || '-' || c3rec.codedesc );
--glbx.dbg( 'c1:' || c5rec.cat_company || '-' || c3rec.company );
--glbx.dbg( 'c1:' || c5rec.cat_cdate || '-' || c3rec.cdate );

    if c5rec.cat_contract is null
      then
       oloc := 'XXXX';
       --ovdt := sysdate;
       if floc is not null then
         floc := 'XXXX';
       end if;
    end if;

    insert into strang.containers ( containerno,timeshired,datehired,backcharge,cat_code,
                                    ctrdesc,cat_company,cat_contract,ctpe_ctrtype,
                                    nloc_location,crelease,turnin,eir,
                                    offdate,floc_location ) values
                ( upper(P1),c1rec.mx,dt1,P5,c3rec.codedesc,
                  P4,c3rec.company,c3rec.contract,P3,
                  oloc,P10,P11,P12,
                  dt2,floc ) returning rowid into newrid;
     commit;
     mng_ctr( surl, newrid, 'x', nvl(errmsg,'Insert Successful'));
     return;
end if;

fnd := false;
fndo := false;
if action='Update' then
  open c7(rid);
  fetch c7 into c7rec;
  close c7;
  if (c7rec.datehired is null or
      c7rec.datehired <> dt1)
     or
     (c7rec.nloc_location is null or
      c7rec.nloc_location <> oloc)
   then
    fnd := TRUE;
  end if;

  c7rec.datehired := dt1;
  c7rec.offdate := dt2;
  c7rec.ctpe_ctrtype := P3;
  c7rec.ctrdesc := P4;
  c7rec.backcharge := P5;
  c7rec.crelease := P10;
  c7rec.turnin := P11;
  c7rec.eir := P12;
  if ((c7rec.offdate is null and dt2 is not null) or
      c7rec.offdate <> dt2)
     or
     ((c7rec.floc_location is null and floc is not null) or
      c7rec.floc_location <> floc)
   then
    fndo := TRUE;
  end if;
  c7rec.floc_location := floc;
  if c7rec.containerno <> upper(P1) then
    open c8( upper(P1) );
    fetch c8 into c8rec;
    if c8%FOUND then
      mng_ctr( surl, rid, 'x', 'Container ' || P1 ||' Already On Hire' );
      return;
    end if;
    c1rec.mx:= 0;
    open c1( P1 );
     fetch c1 into c1rec;
    close c1;
    c7rec.timeshired := nvl(c1rec.mx,0) + 1;
    c7rec.containerno := upper(P1);
  end if;
  open c3(P2);
  fetch c3 into c3rec;
  close c3;

  if (c7rec.nloc_location='XXXX') or (c7rec.nloc_location <> oloc) or (c7rec.nloc_location is null) then
-- glbx.dbg( 'P2:'||c7rec.cat_contract);
-- glbx.dbg( 'P2:'||c3rec.codedesc);
-- glbx.dbg( 'P2:'||c3rec.company);
-- glbx.dbg( 'P2:'||oloc);
-- glbx.dbg( 'P2:'||ovdt);
-- glbx.dbg( 'PX:'||p2);
-- glbx.dbg( 'PN:'||c7rec.nloc_location);
    open c5 ( c7rec.cat_contract, c3rec.codedesc, c3rec.company, oloc);
    fetch c5 into c5rec;
    close c5;
    c7rec.nloc_location := c5rec.loc_location;
    --c7rec.nloc_cdate := c5rec.cdate;
  end if;
  if (c7rec.floc_location='XXXX') or  (c7rec.floc_location <> floc) or (c7rec.floc_location is null) then
    open c6 ( P2, c3rec.codedesc, c3rec.company , floc);
    fetch c6 into c6rec;
    close c6;
    c7rec.floc_location := c6rec.loc_location;
    --c7rec.floc_cdate := c6rec.cdate;
  end if;

  if not (c7rec.cat_contract = c3rec.contract and
     c7rec.cat_code=c3rec.codedesc and
     c7rec.cat_company=c3rec.company)
    then
     c7rec.nloc_location := 'XXXX';
     --c7rec.nloc_cdate := sysdate;
     if c7rec.floc_location is not null then
       c7rec.floc_location := 'XXXX';
     end if;
     --if c7rec.floc_location is not null then
     --  c7rec.floc_cdate := sysdate;
     --end if;
     c7rec.cat_contract := c3rec.contract;
     c7rec.cat_company := c3rec.company;
     c7rec.cat_code := c3rec.codedesc;
  end if;

--  glbx.dbg(c7rec.datehired);
  update strang.containers set
   containerno = c7rec.containerno,
   timeshired = c7rec.timeshired,
   datehired = nvl(c7rec.datehired,datehired),
   backcharge = c7rec.backcharge,
   cat_code = c7rec.cat_code,
   ctrdesc = c7rec.ctrdesc,
   cat_company = c7rec.cat_company,
   cat_contract = c7rec.cat_contract,
   ctpe_ctrtype = c7rec.ctpe_ctrtype,
   nloc_location = c7rec.nloc_location,
   crelease = c7rec.crelease,
   turnin = c7rec.turnin,
   eir = c7rec.eir,
   offdate = c7rec.offdate,
   floc_location = c7rec.floc_location
  where rowid = rid;

  if fnd then
   generate_containers_onhire( c7rec );
  end if;

  if fndo then
   generate_containers_offhire( c7rec );
  end if;

end if;
commit;
mng_ctr( surl, nvl(newrid,rid), id, nvl(errmsg,'Update Successful'));

exception when others then
glbx.error_details( 'STRANGP', 'ACCEPT_MNG_CTR',null,null,errmsg=>sqlerrm,extdet=>'RID:' || rid);

end accept_mng_ctr;

-- **************************************************************************************

procedure confirm_ctr_delete(surl in varchar2, rid in varchar2)
as

 cursor c2( rid rowid ) is select * from strang.containers where rowid = rid;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nrid		varchar2(100);
 vaccess	varchar2(20);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.CONFIRM_CTR_DELETE' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 nrid := replace(rid,'~','+');
 vaccess := data_access( owner_id, 'CONTAINERS', rid );
 open c2( nrid );
 fetch c2 into c2rec;
 close c2;

 glbx.main_title( surl, 'Confirm Container Deletion',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR17',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.p( '<CENTER>' );
 htp.bold( c2rec.containerno );
 htp.formopen( 'strangp.accept_ctr_delete' );
  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'RID', nrid );
  htp.nl;
  htp.nl;

  htp.formsubmit( 'ACTION', LNGS.STR_TXT_450 );
  htp.formsubmit( 'ACTION', LNGS.STR_TXT_453 );
 htp.formclose;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'CONFIRM_MCTR_DELETE',null,owner_id,errmsg=>sqlerrm);
end confirm_ctr_delete;

procedure accept_ctr_delete(surl in varchar2, rid in varchar2, action in varchar2 )
as

 c1rec		customer_account%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 nrid		varchar2(100);
 vaccess	varchar2(20);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_CTR' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 nrid := replace(rid,'~','+');
 vaccess := data_access( owner_id, 'CONTAINERS', rid );

 if vaccess = 'EDIT'
  then

 if action = LNGS.STR_TXT_450
  then
  mng_ctr( surl, rid, 'x', 'Deletion Cancelled' );
  return;
 else
   delete from strang.containers where rowid = nrid;
   commit;
   strangp.menu(surl=>surl,rnd=>null,MTYPE=>'CTR');
 end if;

 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_CTR_DELETE',null,owner_id,errmsg=>sqlerrm);
end accept_ctr_delete;

--******************************************************************************************
procedure mng_categories( surl in varchar2, rid in varchar2 default null, id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, parm in varchar2 default null )
as

 cursor c3( rid rowid ) is select * from strang.categories where rowid = rid;
 cursor c4( cont varchar2, comp varchar2, ccde varchar2 ) is select count('x') cnt from strang.onlocs
 where cat_contract = cont and
       cat_company  = comp and
       cat_code     = ccde;
 cursor c5( cont varchar2, comp varchar2, ccde varchar2 ) is select count('x') cnt from strang.offlocs
 where cat_contract = cont and
       cat_company  = comp and
       cat_code     = ccde;

 cursor c8 is select distinct cola from strang.lov where lov_name = 'COUNTRIES';

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c5rec		c5%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.MNG_categories' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'CONTAINERS', rid );
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, 'CONTAINER HIRE MAINTENANCE',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR22',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.p( '<CENTER>' );
 if id <> 'z' and rid is not null
  then
   open c3(replace(rid,'~','+'));
   fetch c3 into c3rec;
   close c3;
 end if;

 htp.formopen( 'strangp.accept_mng_categories', ctarget=>'_top' );
 htp.formhidden( 'SURL', surl );
   htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'ID', id );
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );


  htp.tablerowopen;
   htp.tabledata( htf.bold('Contract'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT' and id = 'z'
    then
     htp.tabledata( htf.formtext('P1', 10, 10, c3rec.contract),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" ');
    else
     htp.tabledata( htf.bold(nvl(c3rec.contract,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" ');
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Code Description'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');

 if vaccess = 'EDIT' and id = 'z'
    then
     htp.tabledata( htf.formtext('P2', 12, 12, c3rec.codedesc),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"  ');
    else
     htp.tabledata( htf.bold(nvl(c3rec.codedesc,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"  ');
   end if;
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold('Company Name'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT' and id = 'z'
    then
     htp.tabledata( htf.formtext('P3', 20, 20, c3rec.company),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"  ');
     else
       htp.tabledata( htf.bold(nvl(c3rec.company,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" ');
     end if;

  htp.tablerowclose;

  /*
  htp.tablerowopen;
   htp.tabledata( htf.bold('Date Created'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT' and id = 'z'
    then
     htp.tabledata( htf.formtext('P4', 15, 15, to_char(c3rec.cdate,'DD-MON-YYYY')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
     htp.tabledata( htf.bold(nvl(to_char(c3rec.cdate,'DD-MON-YYYY'),'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;
  htp.tablerowclose;
 */

  htp.tablerowopen;
   htp.tabledata( htf.bold('Category Description'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext('P5', 15, 12, c3rec.catdesc),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"  ');
    else
     htp.tabledata( htf.bold(nvl(c3rec.catdesc,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"  ');
   end if;
  htp.tablerowclose;


  htp.tablerowopen;
   htp.tabledata( htf.bold('Leasing/Day'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P6', 12, 20, trim(to_char(round(c3rec.leasecost,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.leasecost,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
  htp.tablerowclose;


  htp.tablerowopen;
   htp.tabledata( htf.bold('Company Leasing/Day'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P7', 12, 20, trim(to_char(round(c3rec.compcost,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.compcost,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
  htp.tablerowclose;


   htp.tabledata( htf.bold('Currency'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
        htp.p( '<TD '|| glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" >' );
          htp.formselectopen( 'P8' );
              for c8rec in c8

              loop
                if c8rec.cola=nvl(c3rec.curr_code,'USD') then
                  htp.formselectoption( c8rec.cola, 'SELECTED', cattributes=>'VALUE="'||c8rec.cola ||'"');
                else
                  htp.formselectoption( c8rec.cola, cattributes=>'VALUE="'||c8rec.cola ||'"');
               end if;
              end loop;

          htp.formselectclose;
        htp.p( '</TD>');
      else
       htp.tabledata( htf.bold(nvl(c3rec.curr_code,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" ');
     end if;


 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT' and (id = 'z' or rid is null)
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Insert' ),cattributes=>'VALIGN="TOP"');
 elsif vaccess = 'EDIT' and id <> 'z'
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Update' ),cattributes=>'VALIGN="TOP"');
   open c4(c3rec.contract,c3rec.company,c3rec.codedesc);
   fetch c4 into c4rec;
   close c4;
   open c5(c3rec.contract,c3rec.company,c3rec.codedesc);
   fetch c5 into c5rec;
   close c5;
   if (c4rec.cnt + c5rec.cnt = 0) then
      htp.tabledata( htf.formsubmit( 'ACTION', 'Delete' ),cattributes=>'VALIGN="TOP"');
   end if;
 end if;
 htp.formclose;


 if vaccess = 'EDIT' and id <> 'z'
  then
   htp.tabledata( htf.formopen( 'strangp.mng_categories' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'ID', 'z' ) || htf.formhidden( 'RID', null ) || htf.formsubmit( null, 'Create New Record' ) || htf.formclose,cattributes=>'VALIGN="TOP"');
 end if;
 htp.tablerowclose;
 htp.tableclose;
 htp.formclose;
 htp.nl;
 search( surl, 'CATEG', rid );
 htp.nl;
 htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '</CENTER>' );
 htp.tableclose;
exception when others then
 glbx.error_details( 'STRANGP', 'MNG_CATEGORIES',null,null,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end mng_categories;

-- **********************************************************

-- **********************************************************

procedure accept_mng_categories( SURL IN VARCHAR2, RID IN VARCHAR2, ID in VARCHAR2, P1 IN VARCHAR2 default null, P2 IN VARCHAR2 default null, P3 IN VARCHAR2 default null, P4 IN VARCHAR2 default null, P5 IN VARCHAR2,
P6 IN VARCHAR2, P7 IN VARCHAR2, P8 IN VARCHAR2, ACTION IN VARCHAR2 )
as

cursor c2 is select max(rno) mx from strang.categories;
cursor c3 ( cont varchar2, cod varchar2, cname varchar2) is select * from strang.categories
where contract=UPPER(cont) and
 codedesc= UPPER(cod) and
 company = UPPER(cname);

cursor c7 (rid rowid) is select * from strang.categories where rowid=rid;
cursor c8 (ctr varchar2) is select * from strang.containers where containerno = ctr and offdate is null;

c2rec c2%ROWTYPE;
c3rec c3%ROWTYPE;
c7rec c7%ROWTYPE;
c8rec c8%ROWTYPE;

dt1 date;
errmsg varchar2(1000);
newrid rowid;
nmb1 number;
nmb2 number;

begin

if ((P1 is null) or (P2 is null) or (P3 is null) or (P5 is null) or (P6 is null) or (P7 is null) or (P8 is null)) and id='z'  then
  mng_categories( surl, rid, null, 'No Fields Can Be Left Blank' );
  return;
end if;
if ((P5 is null) or (P6 is null) or (P7 is null) or (P8 is null)) and id='x'  then
  mng_categories( surl, rid, null, 'No Fields Can Be Left Blank' );
  return;
end if;

begin nmb1 := to_number( p6 ); exception when others then begin nmb1 := to_number( p6,LNGS.MONEY_FORMAT ); exception when others then nmb1 := 0; end; end;
begin nmb2 := to_number( p7 ); exception when others then begin nmb2 := to_number( p7,LNGS.MONEY_FORMAT ); exception when others then nmb2 := 0; end; end;

if action='Insert' then
    open c3 ( P1,P2,P3 );
    fetch c3 into c3rec;
    close c3;
    open c2;
    fetch c2 into c2rec;
    close c2;
    c2rec.mx := nvl(c2rec.mx,0) + 1;
    insert into strang.categories ( contract,codedesc,company,catdesc,leasecost,compcost,curr_code,rno )
    values ( upper(P1),upper(P2),P3,upper(P5),nmb1,nmb2,P8,c2rec.mx ) returning rowid into newrid;
    mng_categories( surl, newrid, 'x' , 'Insert Successful');
    commit;
    return;
end if;

if action='Update' then
    update strang.categories set
    catdesc = UPPER(P5),
    leasecost = nmb1,
    compcost  = nmb2,
    curr_code = P8
  where rowid = rid;
commit;
mng_categories( surl, rid, 'x', 'Update Successful');
end if;

if action='Delete' then
  delete from strang.categories
  where rowid = rid;
  commit;
  mng_categories( surl, rid, 'x', 'Delete Successful');
  menu (surl=>surl,mtype=>'CATEG',action=>'SEARCH',rid=>null,rnd=>null,msearch=>null);
end if;



exception when others then
glbx.error_details( 'STRANGP', 'ACCEPT_MNG_categories',null,null,errmsg=>sqlerrm,extdet=>'RID:' || rid);

end accept_mng_categories;



--****************************************************************************************
--&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
--******************************************************************************************
procedure mng_onlocs( surl in varchar2, id in varchar2 )
as
 arr_rid src_rid;
begin
 for j in 1..10 loop
  arr_rid(j) := null;
 end loop;
 mng_onlocs(surl, arr_rid, id );
end mng_onlocs;

procedure mng_onlocs( surl in varchar2, arr_rid in src_rid, id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, parm in varchar2 default null )
as

 cursor c3( rid rowid ) is select * from strang.onlocs where rowid = rid;

 cursor c4( cont varchar2, comp varchar2, ccde varchar2 ) is select count('x') cnt from strang.containers
 where cat_contract = cont and
       cat_company  = comp and
       cat_code     = ccde;
 cursor c7 is select * from strang.categories order by contract,company,codedesc;
 cursor c8 is select code from strang.lov where lov_name = 'COUNTRIES' order by code;
 cursor c9(c1 varchar2, c2 varchar2, c3 varchar2, c4 varchar2 ) is select 'x' exst from strang.containers where cat_contract = c1 and cat_code = c2 and cat_company = c3 and nloc_location = c4;

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c9rec		c9%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 frid		rowid;
 rid		rowid;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.mng_onlocs' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'CONTAINERS', rid );
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, 'CONTAINER HIRE MAINTENANCE',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR22',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.p( '<CENTER>' );

 htp.formopen( 'strangp.accept_mng_onlocs', ctarget=>'_top' );
 htp.formhidden( 'SURL', surl );
   --htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'ID', id );
   htp.formhidden( 'P2', null ); -- was cdate
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );

 htp.tablerowopen;
  htp.tabledata( htf.bold('Category<BR>Selection'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Contract'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Code'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Company<BR>Name'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Location'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Charge'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Handling'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('D/I'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Company<BR>Charge'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Company<BR>Handling'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Company<BR>D/I'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
 htp.tablerowclose;

 for j in arr_rid.first..arr_rid.last loop

 if j = arr_rid.first then frid := arr_rid(j); end if;
 rid := arr_rid(j);
 if id <> 'z' and rid is not null
  then
   open c3(replace(rid,'~','+'));
   fetch c3 into c3rec;
   close c3;
 elsif id <> 'z' and vaccess = 'EDIT' and rid is null then rid := null; exit;
 end if;

 htp.tablerowopen;
  if vaccess = 'EDIT' and id = 'z'
      then
        htp.p( '<TD '|| glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="4"  >' );
        htp.formhidden( 'ARR_RID', null );
          htp.formselectopen( 'P1' );
              for c7rec in c7
              loop
                if c7rec.contract=c3rec.cat_contract then
                  htp.formselectoption( ' --- '|| c7rec.contract || ' --- '|| c7rec.codedesc || ' --- '|| c7rec.company, 'SELECTED', cattributes=>'VALUE="'||c7rec.rno ||'"');
                else
                  htp.formselectoption( ' --- '|| c7rec.contract || ' --- '|| c7rec.codedesc || ' --- '|| c7rec.company, cattributes=>'VALUE="'||c7rec.rno ||'"');
               end if;
              end loop;

          htp.formselectclose;
        htp.p( '</TD>');
      else
       open c9(c3rec.cat_contract, c3rec.cat_code, c3rec.cat_company, c3rec.loc_location );
       fetch c9 into c9rec;
       if c9%notfound
        then
         htp.tabledata( htf.formhidden( 'ARR_RID', rid ) ||
                        htf.formhidden( 'P1', null ) ||
                        htf.formhidden( 'P3', null ) ||
                        htf.anchor( 'strangp.onlocs_del?surl=' || surl || '&rid=' || replace(rowidtochar(rid),'+','~'), 'Delete' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" ');
        else
         htp.tabledata( htf.formhidden( 'ARR_RID', rid ) || htf.formhidden( 'P1', null ) || htf.formhidden( 'P3', null ) || '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
       close c9;
       htp.tabledata( htf.bold(nvl(c3rec.cat_contract,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( htf.bold(nvl(c3rec.cat_code,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( htf.bold(nvl(c3rec.cat_company,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;

   if vaccess = 'EDIT' and id = 'z'
      then
        htp.p( '<TD '|| glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" >' );
          htp.formselectopen( 'P3' );
              for c8rec in c8 loop
                if c8rec.code=c3rec.loc_location then
                  htp.formselectoption( c8rec.code, 'SELECTED', cattributes=>'VALUE="'||c8rec.code ||'"');
                else
                  htp.formselectoption( c8rec.code, cattributes=>'VALUE="'||c8rec.code ||'"');
               end if;
              end loop;

          htp.formselectclose;
        htp.p( '</TD>');
      else
       htp.tabledata( htf.bold(nvl(c3rec.loc_location,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" ');
     end if;

    if  vaccess = 'EDIT'
     then
       htp.tabledata( htf.formtext( 'P4', 12, 20, trim(to_char(round(c3rec.oncharge,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.oncharge,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P5', 12, 20, trim(to_char(round(c3rec.onhandle,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.onhandle,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P6', 12, 20, trim(to_char(round(c3rec.intchange,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.intchange,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P7', 12, 20, trim(to_char(round(c3rec.concharge,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.concharge,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P8', 12, 20, trim(to_char(round(c3rec.conhandle,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.conhandle,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P9', 12, 20, trim(to_char(round(c3rec.cintchange,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.cintchange,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;

  htp.tablerowclose;
 end loop;

 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT' and (id = 'z' or frid is null)
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Insert' ),cattributes=>'VALIGN="TOP"');
 elsif vaccess = 'EDIT' and id <> 'z'
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Update' ),cattributes=>'VALIGN="TOP"');
 end if;
 htp.formclose;


 if vaccess = 'EDIT' and id <> 'z'
  then
   htp.tabledata( htf.formopen( 'strangp.mng_onlocs' ) || htf.formhidden( 'SURL', surl ) ||
                  htf.formhidden( 'ID', 'z' ) ||
                  htf.formsubmit( null, 'Create New Record' ) || htf.formclose,cattributes=>'VALIGN="TOP"');
 end if;
 htp.tabledata( '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' );
 htp.tabledata( 'NB. Search Order: Contract Company Code. % can be used as wildcard.' );
 htp.tablerowclose;
 htp.tableclose;
 htp.formclose;
 htp.nl;
 search( surl, 'ONLOCS', frid, lmnu=>rid );
 htp.nl;
 htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '</CENTER>' );
 htp.tableclose;
exception when others then
 glbx.error_details( 'STRANGP', 'MNG_onlocs',null,null,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end mng_onlocs;

-- **********************************************************

-- **********************************************************
--****************************************************************************************

procedure onlocs_del( surl in varchar2, rid in varchar2 )
as
 vrid	rowid;
begin
 vrid := chartorowid(replace(rid,'~','+'));
 delete from strang.onlocs where rowid = vrid;
 commit;
 menu (surl=>surl,mtype=>'ONLOCS',action=>'SEARCH',rid=>null,rnd=>null,msearch=>null);
end onlocs_del;

procedure accept_mng_onlocs( surl in varchar2, arr_rid in glbx.myarray, id in varchar2, p1 in glbx.myarray, p2 in glbx.myarray, p3 in glbx.myarray, p4 in glbx.myarray, p5 in glbx.myarray, p6 in glbx.myarray, p7 in glbx.myarray, p8 in glbx.myarray, p9 in glbx.myarray, action in varchar2 )
as

cursor c2 is select max(rno) mx from strang.onlocs;

cursor c3 ( vrno integer ) is select * from strang.categories where rno = vrno ;
cursor c7 (rid rowid) is select * from strang.onlocs where rowid=rid;
cursor c8 (ctr varchar2) is select * from strang.containers where containerno = ctr and offdate is null;

c2rec 	c2%ROWTYPE;
c3rec 	c3%ROWTYPE;
c7rec 	c7%ROWTYPE;
c8rec 	c8%ROWTYPE;

dt1 	date;
errmsg 	varchar2(1000);
newrid 	rowid;
nmb1 	number(6,2);
nmb2 	number(6,2);
nmb3 	number(6,2);
nmb4 	number(6,2);
nmb5 	number(6,2);
nmb6 	number(6,2);
rid  	rowid;
narr_rid src_rid;
ctr	integer;

begin
ctr := 0;
for j in 1..10 loop
  narr_rid(j) := null;
end loop;
for j in arr_rid.first..arr_rid.last loop

 if ( ((P1(j) is null) or (P3(j) is null) or (P4(j) is null) or (P5(j) is null) or (P6(j) is null) or (P7(j) is null) or (P8(j) is null) or (P9(j) is null)) and id = 'z' ) or
    ( ((P4(j) is null) or (P5(j) is null) or (P6(j) is null) or (P7(j) is null) or (P8(j) is null) or (P9(j) is null)) and id = 'x' )
  then
   null;
  else

  begin nmb1 := to_number( p4(j) ); exception when others then begin nmb1 := to_number( p4(j),LNGS.MONEY_FORMAT ); exception when others then nmb1 := 0; end; end;
  begin nmb2 := to_number( p5(j) ); exception when others then begin nmb2 := to_number( p5(j),LNGS.MONEY_FORMAT ); exception when others then nmb2 := 0; end; end;
  begin nmb3 := to_number( p6(j) ); exception when others then begin nmb3 := to_number( p6(j),LNGS.MONEY_FORMAT ); exception when others then nmb3 := 0; end; end;
  begin nmb4 := to_number( p7(j) ); exception when others then begin nmb4 := to_number( p7(j),LNGS.MONEY_FORMAT ); exception when others then nmb4 := 0; end; end;
  begin nmb5 := to_number( p8(j) ); exception when others then begin nmb5 := to_number( p8(j),LNGS.MONEY_FORMAT ); exception when others then nmb5 := 0; end; end;
  begin nmb6 := to_number( p9(j) ); exception when others then begin nmb6 := to_number( p9(j),LNGS.MONEY_FORMAT ); exception when others then nmb6 := 0; end; end;

  if action = 'Insert' then
      open c3 ( P1(j) );
      fetch c3 into c3rec;
      close c3;
      open c2;
      fetch c2 into c2rec;
      close c2;
      c2rec.mx := nvl(c2rec.mx,0) + 1;

      begin
       insert into strang.onlocs (loc_location,cat_company,cat_contract,cat_code,oncharge,onhandle,intchange,concharge,conhandle,cintchange,rno )
       values ( P3(j), c3rec.company,c3rec.contract,c3rec.codedesc,nmb1,nmb2,nmb3,nmb4,nmb5,nmb6,c2rec.mx ) returning rowid into newrid;
      exception
       when others then
        mng_onlocs( surl, narr_rid, 'z', 'Insert Failed:' || sqlerrm);
        return;
      end;

      ctr := ctr + 1;
      narr_rid(ctr) := newrid;
      commit;
  end if;

 if action='Update' then
     rid := chartorowid(arr_rid(j));
     update strang.onlocs set
     oncharge = nmb1,
     onhandle = nmb2,
     intchange = nmb3,
     concharge = nmb4,
     conhandle = nmb5,
     cintchange =nmb6
     where rowid = rid;
     commit;
 end if;

end if;

end loop;

if action = 'Insert' and ctr > 0
 then
   mng_onlocs( surl, narr_rid, 'x', 'Insert Successful');

elsif action = 'Insert' and ctr = 0
 then
   mng_onlocs( surl, narr_rid, 'z', 'Nothing to Insert');

elsif action = 'Update'
 then
   for j in arr_rid.first..arr_rid.last loop
    narr_rid(j) := chartorowid(arr_rid(j));
   end loop;
   mng_onlocs( surl, narr_rid, 'x', 'Update Successful');
end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_MNG_onlocs',null,null,errmsg=>sqlerrm);
end accept_mng_onlocs;



--((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
--****************************************************************************************
--&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
--******************************************************************************************
procedure mng_offlocs( surl in varchar2, id in varchar2 )
as
 arr_rid src_rid;
begin
 for j in 1..10 loop
  arr_rid(j) := null;
 end loop;
 mng_offlocs(surl, arr_rid, id );
end mng_offlocs;

procedure mng_offlocs( surl in varchar2, arr_rid in src_rid, id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, parm in varchar2 default null )
as

 cursor c3( rid rowid ) is select * from strang.offlocs where rowid = rid;

 cursor c4( cont varchar2, comp varchar2, ccde varchar2 ) is select count('x') cnt from strang.containers
 where cat_contract = cont and
       cat_company  = comp and
       cat_code     = ccde;
 cursor c7 is select * from strang.categories order by contract,company,codedesc;
 cursor c8 is select code from strang.lov where lov_name = 'COUNTRIES' order by code;
 cursor c9(c1 varchar2, c2 varchar2, c3 varchar2, c4 varchar2 ) is select 'x' exst from strang.containers where cat_contract = c1 and cat_code = c2 and cat_company = c3 and floc_location = c4;

 c1rec		customer_account%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c9rec		c9%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 frid		rowid;
 rid		rowid;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.MNG_OFFLOCS' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;
  vaccess := data_access( owner_id, 'CONTAINERS', rid );
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );

 glbx.main_title( surl, 'CONTAINER HIRE MAINTENANCE',glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR22',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;
 htp.p( '<CENTER>' );

 htp.formopen( 'strangp.accept_mng_offlocs', ctarget=>'_top' );
 htp.formhidden( 'SURL', surl );
   --htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'ID', id );
   htp.formhidden( 'P2', null ); -- was cdate
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );

 htp.tablerowopen;
  htp.tabledata( htf.bold('Category<BR>Selection'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Contract'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Code'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Company<BR>Name'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Location'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Charge'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Handling'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('D/I'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Company<BR>Charge'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Company<BR>Handling'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Company<BR>D/I'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
 htp.tablerowclose;

 for j in arr_rid.first..arr_rid.last loop

 if j = arr_rid.first then frid := arr_rid(j); end if;
 rid := arr_rid(j);
 if id <> 'z' and rid is not null
  then
   open c3(replace(rid,'~','+'));
   fetch c3 into c3rec;
   close c3;
 elsif id <> 'z' and vaccess = 'EDIT' and rid is null then rid := null; exit;
 end if;

 htp.tablerowopen;
  if vaccess = 'EDIT' and id = 'z'
      then
        htp.p( '<TD '|| glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="4"  >' );
        htp.formhidden( 'ARR_RID', null );
          htp.formselectopen( 'P1' );
              for c7rec in c7
              loop
                if c7rec.contract=c3rec.cat_contract then
                  htp.formselectoption( ' --- '|| c7rec.contract || ' --- '|| c7rec.codedesc || ' --- '|| c7rec.company, 'SELECTED', cattributes=>'VALUE="'||c7rec.rno ||'"');
                else
                  htp.formselectoption( ' --- '|| c7rec.contract || ' --- '|| c7rec.codedesc || ' --- '|| c7rec.company, cattributes=>'VALUE="'||c7rec.rno ||'"');
               end if;
              end loop;

          htp.formselectclose;
        htp.p( '</TD>');
      else
       open c9(c3rec.cat_contract, c3rec.cat_code, c3rec.cat_company, c3rec.loc_location );
       fetch c9 into c9rec;
       if c9%notfound
        then
         htp.tabledata( htf.formhidden( 'ARR_RID', rid ) ||
                        htf.formhidden( 'P1', null ) ||
                        htf.formhidden( 'P3', null ) ||
                        htf.anchor( 'strangp.offlocs_del?surl=' || surl || '&rid=' || replace(rowidtochar(rid),'+','~'), 'Delete' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" ');
        else
         htp.tabledata( htf.formhidden( 'ARR_RID', rid ) || htf.formhidden( 'P1', null ) || htf.formhidden( 'P3', null ) || '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
       close c9;
       htp.tabledata( htf.bold(nvl(c3rec.cat_contract,'&nbsp')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( htf.bold(nvl(c3rec.cat_code,'&nbsp')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( htf.bold(nvl(c3rec.cat_company,'&nbsp')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   end if;

   if vaccess = 'EDIT' and id = 'z'
      then
        htp.p( '<TD '|| glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" >' );
          htp.formselectopen( 'P3' );
              for c8rec in c8 loop
                if c8rec.code=c3rec.loc_location then
                  htp.formselectoption( c8rec.code, 'SELECTED', cattributes=>'VALUE="'||c8rec.code ||'"');
                else
                  htp.formselectoption( c8rec.code, cattributes=>'VALUE="'||c8rec.code ||'"');
               end if;
              end loop;

          htp.formselectclose;
        htp.p( '</TD>');
      else
       htp.tabledata( htf.bold(nvl(c3rec.loc_location,'&nbsp;')),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" ');
     end if;

    if  vaccess = 'EDIT'
     then
       htp.tabledata( htf.formtext( 'P4', 12, 20, trim(to_char(round(c3rec.offcharge,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.offcharge,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P5', 12, 20, trim(to_char(round(c3rec.offhandle,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.offhandle,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P6', 12, 20, trim(to_char(round(c3rec.intchange,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.intchange,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P7', 12, 20, trim(to_char(round(c3rec.coffcharge,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.coffcharge,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P8', 12, 20, trim(to_char(round(c3rec.coffhandle,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.coffhandle,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;
     if  vaccess = 'EDIT'
      then
       htp.tabledata( htf.formtext( 'P9', 12, 20, trim(to_char(round(c3rec.cintchange,2),LNGS.MONEY_FORMAT))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( to_char(round(c3rec.cintchange,2),LNGS.MONEY_FORMAT),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;

  htp.tablerowclose;
 end loop;

 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT' and (id = 'z' or frid is null)
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Insert' ),cattributes=>'VALIGN="TOP"');
 elsif vaccess = 'EDIT' and id <> 'z'
  then
   htp.tabledata( htf.formsubmit( 'ACTION', 'Update' ),cattributes=>'VALIGN="TOP"');
 end if;
 htp.formclose;


 if vaccess = 'EDIT' and id <> 'z'
  then
   htp.tabledata( htf.formopen( 'strangp.mng_offlocs' ) || htf.formhidden( 'SURL', surl ) ||
                  htf.formhidden( 'ID', 'z' ) ||
                  htf.formsubmit( null, 'Create New Record' ) || htf.formclose,cattributes=>'VALIGN="TOP"');
 end if;
 htp.tabledata( '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' );
 htp.tabledata( 'NB. Search Order: Contract Company Code. % can be used as wildcard.' );
 htp.tablerowclose;
 htp.tableclose;
 htp.formclose;
 htp.nl;
 search( surl, 'OFFLOCS', frid, lmnu=>rid );
 htp.nl;
 htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '</CENTER>' );
 htp.tableclose;
exception when others then
 glbx.error_details( 'STRANGP', 'MNG_OFFLOCS',null,null,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end mng_offlocs;

procedure offlocs_del( surl in varchar2, rid in varchar2 )
as
 vrid	rowid;
begin
 vrid := chartorowid(replace(rid,'~','+'));
 delete from strang.offlocs where rowid = vrid;
 commit;
 menu (surl=>surl,mtype=>'OFFLOCS',action=>'SEARCH',rid=>null,rnd=>null,msearch=>null);
end offlocs_del;

procedure accept_mng_offlocs( surl in varchar2, arr_rid in glbx.myarray, id in varchar2, p1 in glbx.myarray, p2 in glbx.myarray, p3 in glbx.myarray, p4 in glbx.myarray, p5 in glbx.myarray, p6 in glbx.myarray, p7 in glbx.myarray, p8 in glbx.myarray, p9 in glbx.myarray, action in varchar2 )
as

cursor c2 is select max(rno) mx from strang.offlocs;

cursor c3 ( vrno integer ) is select * from strang.categories where rno = vrno ;
cursor c7 (rid rowid) is select * from strang.offlocs where rowid=rid;
cursor c8 (ctr varchar2) is select * from strang.containers where containerno = ctr and offdate is null;

c2rec 	c2%ROWTYPE;
c3rec 	c3%ROWTYPE;
c7rec 	c7%ROWTYPE;
c8rec 	c8%ROWTYPE;

dt1 	date;
errmsg 	varchar2(1000);
newrid 	rowid;
nmb1 	number(6,2);
nmb2 	number(6,2);
nmb3 	number(6,2);
nmb4 	number(6,2);
nmb5 	number(6,2);
nmb6 	number(6,2);
rid  	rowid;
narr_rid src_rid;
ctr	integer;

begin
ctr := 0;
for j in 1..10 loop
  narr_rid(j) := null;
end loop;
for j in arr_rid.first..arr_rid.last loop

 if ( ((P1(j) is null) or (P3(j) is null) or (P4(j) is null) or (P5(j) is null) or (P6(j) is null) or (P7(j) is null) or (P8(j) is null) or (P9(j) is null)) and id = 'z' ) or
    ( ((P4(j) is null) or (P5(j) is null) or (P6(j) is null) or (P7(j) is null) or (P8(j) is null) or (P9(j) is null)) and id = 'x' )
  then
   null;
  else

  begin nmb1 := to_number( p4(j) ); exception when others then begin nmb1 := to_number( p4(j),LNGS.MONEY_FORMAT ); exception when others then nmb1 := 0; end; end;
  begin nmb2 := to_number( p5(j) ); exception when others then begin nmb2 := to_number( p5(j),LNGS.MONEY_FORMAT ); exception when others then nmb2 := 0; end; end;
  begin nmb3 := to_number( p6(j) ); exception when others then begin nmb3 := to_number( p6(j),LNGS.MONEY_FORMAT ); exception when others then nmb3 := 0; end; end;
  begin nmb4 := to_number( p7(j) ); exception when others then begin nmb4 := to_number( p7(j),LNGS.MONEY_FORMAT ); exception when others then nmb4 := 0; end; end;
  begin nmb5 := to_number( p8(j) ); exception when others then begin nmb5 := to_number( p8(j),LNGS.MONEY_FORMAT ); exception when others then nmb5 := 0; end; end;
  begin nmb6 := to_number( p9(j) ); exception when others then begin nmb6 := to_number( p9(j),LNGS.MONEY_FORMAT ); exception when others then nmb6 := 0; end; end;

  if action = 'Insert' then
      open c3 ( P1(j) );
      fetch c3 into c3rec;
      close c3;
      open c2;
      fetch c2 into c2rec;
      close c2;
      c2rec.mx := nvl(c2rec.mx,0) + 1;
      begin
        insert into strang.offlocs (loc_location,cat_company,cat_contract,cat_code,offcharge,offhandle,intchange,coffcharge,coffhandle,cintchange,rno )
        values ( P3(j), c3rec.company,c3rec.contract,c3rec.codedesc,nmb1,nmb2,nmb3,nmb4,nmb5,nmb6,c2rec.mx ) returning rowid into newrid;
      exception
       when others then
        mng_offlocs( surl, narr_rid, 'z', 'Insert Failed:' || sqlerrm);
        return;
      end;

      ctr := ctr + 1;
      narr_rid(ctr) := newrid;
      commit;
  end if;

 if action='Update' then
     rid := chartorowid(arr_rid(j));
     update strang.offlocs set
     offcharge = nmb1,
     offhandle = nmb2,
     intchange = nmb3,
     coffcharge = nmb4,
     coffhandle = nmb5,
     cintchange =nmb6
     where rowid = rid;
     commit;
 end if;

end if;

end loop;

if action = 'Insert' and ctr > 0
 then
   mng_offlocs( surl, narr_rid, 'x', 'Insert Successful');

elsif action = 'Insert' and ctr = 0
 then
   mng_offlocs( surl, narr_rid, 'z', 'Nothing to Insert');

elsif action = 'Update'
 then
   for j in arr_rid.first..arr_rid.last loop
    narr_rid(j) := chartorowid(arr_rid(j));
   end loop;
   mng_offlocs( surl, narr_rid, 'x', 'Update Successful');
end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_MNG_OFFLOCS',null,null,errmsg=>sqlerrm);
end accept_mng_offlocs;

procedure generate_containers_onhire( crec in strang.containers%ROWTYPE )
as

 cursor c3(mv varchar2) is select * from strang.tracking_header where containerno = mv;

 cursor c5(sno integer) is select nvl(max(rno),0) + 1 mx from strang.tracking_details where id = sno;

 c3rec   c3%ROWTYPE;
 sno	 integer;
 calcrno integer;

begin

  open c3( crec.containerno );
  fetch c3 into c3rec;
  if c3%FOUND
   then
    -- check if ship and voyage already inserted
      open c5(c3rec.id);
      fetch c5 into calcrno;
      close c5;
      insert into strang.tracking_details(id,rno,remark,movement_type,departure_location,etd_date,arrival_location,eta_date,ship,voyage,current_location,date_at_current_loc)
       values(c3rec.id,calcrno,null,'ONHIRE OF CONTAINER',null,null,null,null,null,null,crec.nloc_location,crec.datehired);

   else

    -- insert new
    select strang.s_tracking_header.nextval into sno from dual;
    insert into strang.tracking_header(id,containerno,cat_code,cat_company) values
     (sno,crec.containerno,crec.cat_code,crec.cat_company);
    insert into strang.tracking_details(id,rno,remark,movement_type,departure_location,etd_date,arrival_location,eta_date,ship,voyage,current_location,date_at_current_loc)
     values(sno,1,null,'ONHIRE',null,null,null,null,null,null,crec.nloc_location,crec.datehired);

  end if;
  close c3;
 commit;
end generate_containers_onhire;

procedure generate_containers_offhire( crec in strang.containers%ROWTYPE )
as

 cursor c3(mv varchar2) is select * from strang.tracking_header where containerno = mv;

 cursor c5(sno integer) is select nvl(max(rno),0) + 1 mx from strang.tracking_details where id = sno;

 c3rec   c3%ROWTYPE;
 sno	 integer;
 calcrno integer;

begin

  open c3( crec.containerno );
  fetch c3 into c3rec;
  if c3%FOUND
   then
    -- check if ship and voyage already inserted
      open c5(c3rec.id);
      fetch c5 into calcrno;
      close c5;
    insert into strang.tracking_details(id,rno,remark,movement_type,departure_location,etd_date,arrival_location,eta_date,ship,voyage,current_location,date_at_current_loc)
     values(c3rec.id,calcrno,null,'OFFHIRE OF CONTAINER',null,null,null,null,null,null,crec.floc_location,crec.offdate);

   else

    -- insert new
    select strang.s_tracking_header.nextval into sno from dual;
    insert into strang.tracking_header(id,containerno,cat_code,cat_company) values
     (sno,crec.containerno,crec.cat_code,crec.cat_company);
    insert into strang.tracking_details(id,rno,remark,movement_type,departure_location,etd_date,arrival_location,eta_date,ship,voyage,current_location,date_at_current_loc)
     values(sno,1,null,'OFFHIRE',null,null,null,null,null,null,crec.floc_location,crec.offdate);

  end if;
  close c3;
 commit;
end generate_containers_offhire;

 procedure lov_ship_intl( cd in varchar2, lname in varchar2, val in varchar2 default null, vio in varchar2 default 'I', isedit in boolean DEFAULT TRUE )
 as

  cursor c1( lname varchar2 ) is select ship_id,shipname || '-' || voy nm from strang.ships_airway where ship_airway = lname  and li = 'I' and io = vio order by nvl(estdepart,sysdate) desc;
  cursor c2( shd integer ) is select ship_id,shipname || '-' || voy  nm from strang.ships_airway where ship_id = shd and io = vio;
  cursor c3 is select ship_id from strang.ships_airway where estdepart = (select max(estdepart) from strang.ships_airway where io = vio);

  c2rec	c2%ROWTYPE;
  c3rec c3%ROWTYPE;

 begin
  if val is null
   then
    open c3;
    fetch c3 into c3rec;
    close c3;
  end if;

  if isedit
   then
    htp.formselectopen( cd );
    for c1rec in c1( lname ) loop
     if c1rec.ship_id = nvl(val,c3rec.ship_id)
        then
         htp.formselectoption( c1rec.nm, 'SELECTED', cattributes=>'VALUE="' || c1rec.ship_id || '"' );
        else
         htp.formselectoption( c1rec.nm, cattributes=>'VALUE="' || c1rec.ship_id || '"' );
     end if;
   end loop;
   htp.formselectclose;
   else
   open c2(nvl(val,c3rec.ship_id));
   fetch c2 into c2rec;
   close c2;
   htp.bold( c2rec.nm );
  end if;
 exception
  when others then htp.p( sqlerrm );
 end lov_ship_intl;


 procedure lov_ship_local( cd in varchar2, lname in varchar2, val in varchar2 default null,vio in varchar2 default 'I', isedit in boolean DEFAULT TRUE, p_filter in varchar2 default null )
 as

  cursor c1( lname varchar2 ) is select ship_id,shipname || '-' || voy nm 
                                   from strang.ships_airway ss
                                  where ship_airway = lname and li='L' 
                                    and io=vio 
                                    and (nvl(ss.status,'####') <> nvl(p_filter, '!!##'))
                                  order by nvl(estdepart,sysdate) desc;
                                  
  cursor c2( shd integer ) is select ship_id,shipname || '-' || voy  nm 
                                from strang.ships_airway ss
                               where ship_id = shd 
                                 and (nvl(ss.status,'####') <> nvl(p_filter, '!!##'))
                                 and io=vio;
                                 
  cursor c3 is select ship_id from strang.ships_airway where estdepart = (select max(estdepart) from strang.ships_airway where io=vio);

  c2rec	c2%ROWTYPE;
  c3rec c3%ROWTYPE;

 begin
  if val is null
   then
--    val :=2;  -- LOCAL SHIPPING ONLY
    open c3;
    fetch c3 into c3rec;
    close c3;
  end if;

  if isedit
   then
    htp.formselectopen( cd );
    for c1rec in c1( lname ) loop
     if c1rec.ship_id = nvl(val,c3rec.ship_id)
        then
         htp.formselectoption( c1rec.nm, 'SELECTED', cattributes=>'VALUE="' || c1rec.ship_id || '"' );
        else
         htp.formselectoption( c1rec.nm, cattributes=>'VALUE="' || c1rec.ship_id || '"' );
     end if;
   end loop;
   htp.formselectclose;
   else
   open c2(nvl(val,c3rec.ship_id));
   fetch c2 into c2rec;
   close c2;
   htp.bold( c2rec.nm );
  end if;
 exception
  when others then htp.p( sqlerrm );
 end lov_ship_local;

procedure ctrs_mass_png_alln(surl in varchar2, parm in varchar2, action in varchar2, access_id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, shipid number default null )
is

cursor c1 is
 select distinct cs.rowid, cs.*, ss.shipname, ss.voy, ss.status s_status, l.description isodesc
 from  strang.movements cs, strang.ships_airway ss, strang.lov l
 where nvl(cs.complete,'A') not in ('H')
       and cs.ship_id = ss.ship_id
       and nvl(ss.estdepart,sysdate) > sysdate - 300
       and rownum <= 900
       and movement_type in ('CARGO')
    --  and (shipid is null or (shipid is not null and shipid=cs.ship_id) or(shipid is not null and shipid=cs.local_ship_id) )
       and l.lov_name = 'UNCTNTAB'
       and cs.iso_container_type = l.code
       and cs.io = 'I'
       and cs.current_location in (select code from strang.lov l2 where l2.lov_name='LOCATIONS' and l2.colc='MOTUKEA')
 order by cs.ship_id, cs.bol, cs.movement_no
;




cursor c1a is
 select distinct cs.rowid, cs.*, ss.shipname, ss.voy, ss.status s_status, l.description isodesc
 from  strang.movements cs, strang.ships_airway ss, strang.lov l
 where (cs.local_ship_id = ss.ship_id or cs.ship_id = ss.ship_id)
       and rownum <= 900
       and movement_type in ('CARGO')
       and shipid=ss.ship_id
       and l.lov_name = 'UNCTNTAB'
       and cs.iso_container_type = l.code
       and cs.io = 'I'
   order by cs.local_ship_id, cs.local_bol, cs.movement_no
;

cursor c2(vshipid number) is
 select distinct ss.li
 from  strang.ships_airway ss
 where ss.ship_id = vshipid
 and ss.io = 'I'
 ;


 ltype       varchar2(100);
 owner_id    integer;
 stype       integer;
 sts         varchar2(100);
 c2rec	     c2%ROWTYPE;
 v_rid_cs    owa.vc_arr;
 v1          owa.vc_arr;
 v2          owa.vc_arr;
 v3          owa.vc_arr;
 v4          owa.vc_arr;
 v5          owa.vc_arr;
 v6          owa.vc_arr;
 v7          owa.vc_arr;
 v8          owa.vc_arr;
 v9          owa.vc_arr;
 v10         owa.vc_arr;
 v11         owa.vc_arr;
 v12         owa.vc_arr;
 v13         owa.vc_arr;
 v14         owa.vc_arr;
 v15         owa.vc_arr;
 v16         owa.vc_arr;
 v17         owa.vc_arr;
 v18         owa.vc_arr;
 v19         owa.vc_arr;
 v20         owa.vc_arr;
 v21         owa.vc_arr;
 v22         owa.vc_arr;
 v23         owa.vc_arr;
 v24         owa.vc_arr;
 v25         owa.vc_arr;
 v26         owa.vc_arr;
 errmsg      owa.vc_arr;
 vli	     varchar2(1);
begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ctrs_mass_png_alln' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;

 open c2(shipid);
 fetch c2 into c2rec;
    vli := nvl(c2rec.li,'|');
 close c2;

if nvl(vli,'|') = 'L' then
  for c1arec in c1a loop
   v_rid_cs(c1a%ROWCOUNT) := replace(c1arec.rowid, '+', '~');
   v1(c1a%ROWCOUNT) := c1arec.movement_no;
   v2(c1a%ROWCOUNT) := c1arec.seal;
   v3(c1a%ROWCOUNT) := c1arec.isodesc;
   v4(c1a%ROWCOUNT) := c1arec.tare;
   v5(c1a%ROWCOUNT) := c1arec.vgm;
   v6(c1a%ROWCOUNT) := c1arec.urgency;
   v7(c1a%ROWCOUNT) := c1arec.current_location;
   v8(c1a%ROWCOUNT) := c1arec.customs_cleared_date;
   v9(c1a%ROWCOUNT) := c1arec.customs_auth_no;
   v10(c1a%ROWCOUNT) := c1arec.consignee;
   v11(c1a%ROWCOUNT) := c1arec.consignee_location;
   v12(c1a%ROWCOUNT) := c1arec.warehouse_destination;
   v13(c1a%ROWCOUNT) := c1arec.ship_id;
   v14(c1a%ROWCOUNT) := c1arec.bol||' '||c1arec.hb;
   v15(c1a%ROWCOUNT) := to_char(c1arec.INT_SHIP_DISCHARGE_DATE,LNGS.STR_DATE_02);
   v16(c1a%ROWCOUNT) := to_char(c1arec.intl_wharf_transfer_date,LNGS.STR_DATE_02);
   v17(c1a%ROWCOUNT) := to_char(c1arec.berth4_transfer_date,LNGS.STR_DATE_02);
   v18(c1a%ROWCOUNT) := c1arec.local_ship_id;
   v19(c1a%ROWCOUNT) := c1arec.local_bol||' '||c1arec.local_hb;
   v20(c1a%ROWCOUNT) := c1arec.cmt;
   v21(c1a%ROWCOUNT) := c1arec.remark;
   v22(c1a%ROWCOUNT) := c1arec.remark_date;
   v23(c1a%ROWCOUNT) := c1arec.remark_detail;
   v24(c1a%ROWCOUNT) := c1arec.overdimensional;
   v25(c1a%ROWCOUNT) := c1arec.set_point;
   v26(c1a%ROWCOUNT) := c1arec.full_mt;
   errmsg(c1a%ROWCOUNT) := null;
 end loop;
 else
  for c1rec in c1 loop
   v_rid_cs(c1%ROWCOUNT) := replace(c1rec.rowid, '+', '~');
   v1(c1%ROWCOUNT) := c1rec.movement_no;
   v2(c1%ROWCOUNT) := c1rec.seal;
   v3(c1%ROWCOUNT) := c1rec.isodesc;
   v4(c1%ROWCOUNT) := c1rec.tare;
   v5(c1%ROWCOUNT) := c1rec.vgm;
   v6(c1%ROWCOUNT) := c1rec.urgency;
   v7(c1%ROWCOUNT) := c1rec.current_location;
   v8(c1%ROWCOUNT) := c1rec.customs_cleared_date;
   v9(c1%ROWCOUNT) := c1rec.customs_auth_no;
   v10(c1%ROWCOUNT) := c1rec.consignee;
   v11(c1%ROWCOUNT) := c1rec.consignee_location;
   v12(c1%ROWCOUNT) := c1rec.warehouse_destination;
   v13(c1%ROWCOUNT) := c1rec.ship_id;
   v14(c1%ROWCOUNT) := c1rec.bol||' '||c1rec.hb;
   v15(c1%ROWCOUNT) := to_char(c1rec.INT_SHIP_DISCHARGE_DATE,LNGS.STR_DATE_02);
   v16(c1%ROWCOUNT) := to_char(c1rec.intl_wharf_transfer_date,LNGS.STR_DATE_02);
   v17(c1%ROWCOUNT) := to_char(c1rec.berth4_transfer_date,LNGS.STR_DATE_02);
   v18(c1%ROWCOUNT) := c1rec.local_ship_id;
   v19(c1%ROWCOUNT) := c1rec.local_bol||' '||c1rec.local_hb;
   v20(c1%ROWCOUNT) := c1rec.cmt;
   v21(c1%ROWCOUNT) := c1rec.remark;
   v22(c1%ROWCOUNT) := c1rec.remark_date;
   v23(c1%ROWCOUNT) := c1rec.remark_detail;
   v24(c1%ROWCOUNT) := c1rec.overdimensional;
   v25(c1%ROWCOUNT) := c1rec.set_point;
   v26(c1%ROWCOUNT) := c1rec.full_mt;
   errmsg(c1%ROWCOUNT) := null;
  end loop;
 end if;
 if v1.count > 0
  then
--   ctrs_mass_png_alln_update(surl, parm, action, v_rid_cs, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15,
--   v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, errmsg, access_id, msg, call_name);
     ctrs_mass_png_alln_update(surl, parm, action, v_rid_cs, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v15,
     v18, v19, v20, v24, v25, v26, errmsg, access_id, msg, call_name);
 else
   strangp.menu(surl, NULL, 'TRAC');
   return;
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ctrs_mass_png_alln',null,null,errmsg=>sqlerrm );
end ctrs_mass_png_alln;

procedure ctrs_mass_png_alln_update(surl in varchar2
                               , parm in varchar2
                               , action in varchar2
                               , v_rid_cs in owa.vc_arr
                               , v1 in owa.vc_arr
                               , v2 in owa.vc_arr
                               , v3 in out owa.vc_arr
                               , v4 in out owa.vc_arr
                               , v5 in out owa.vc_arr
                               , v6 in out owa.vc_arr
                               , v7 in out owa.vc_arr
                              -- , v8 in out owa.vc_arr  -- remove this 
                               , v9 in out owa.vc_arr
                               , v10 in out owa.vc_arr
                               , v11 in out owa.vc_arr
                               , v12 in out owa.vc_arr
                               , v13 in out owa.vc_arr
                               , v14 in out owa.vc_arr
                               , v15 in out owa.vc_arr
                           --    , v16 in out owa.vc_arr  -- remove this
                           --    , v17 in out owa.vc_arr  -- remove this
                               , v18 in out owa.vc_arr  
                               , v19 in out owa.vc_arr
                               , v20 in out owa.vc_arr
                           --    , v21 in out owa.vc_arr  -- remove this
                           --    , v22 in out owa.vc_arr  -- remove this 
                          --     , v23 in out owa.vc_arr  -- remove this
                               , v24 in out owa.vc_arr
                               , v25 in out owa.vc_arr
                               , v26 in out owa.vc_arr
                               , errmsg in out owa.vc_arr
                               , access_id in varchar2 default null
                               , msg in varchar2 default null
                               , call_name in varchar2 default null )
is

/*
 cursor c2( rid_cs ROWID ) is
  select bs.rowid
  from   strang.bols_southbound bs, strang.containers_southbound cs
  where  cs.rowid = rid_cs
         and upper(cs.ship) = upper(bs.ship)
         and upper(cs.voyage) = upper(bs.voyage)
         and upper(cs.bol) = upper(bs.bol)
 ;
*/
 cursor c3( rid_cs ROWID ) is
  select ss.rowid
  from   strang.ships_airway ss, strang.movements cs
  where  cs.rowid = rid_cs
         and cs.ship_id = ss.ship_id
 ;


 ltype       varchar2(100);
 owner_id    integer;
 stype       integer;
 cusrec      customer_account%ROWTYPE;
 v_action    varchar2(100);
 vste        varchar2(10);
 pfx         THEME%ROWTYPE;
 vaccess     varchar2(20);
 seclevel    varchar2(100);
 sts         varchar2(100);
 v_rid_ss    rowid;
 v_rid_bs    rowid;
 v_rid_bs_1  rowid;
 stp         varchar2(1000);
 err_txt     varchar2(1000);
 scid	     varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ctrs_mass_png_alln' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;

 cusrec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(cusrec.aid);
 pfx := glbx.get_thm( cusrec.theme_name );
 vaccess := strangp.data_access( owner_id, 'MOVEMENT', replace(v_rid_cs(1), '~', '+'));
 seclevel := oltp.security_role( owner_id );
 select screen_id into scid from oltp_overview where screen_name='Cargo';

 glbx.main_title( surl, 'Inbound Containers',glbx.backimg(surl,cusrec.aid,pfx.text_back,cusrec.background_img,ltype),helpid=>'STR16',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 htp.p( '<CENTER>' );

 if msg is not null
 then
  glbx.header_msg( msg );
 end if;

  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=0' ); -- Table 1
  htp.formopen('STRANGP.accept_ctrs_mass_png_alln_up');

  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'PARM', parm );
  htp.formhidden( 'ACCESS_ID', access_id );
  htp.formhidden( 'CALL_NAME', call_name );

  htp.tablerowopen;
   htp.tabledata( htf.bold('Inbound Containers'), ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
-- ***

 -- Submit Buttons

  htp.tablerowopen;
  htp.p('<TD VALIGN="TOP" COLSPAN="2">');
   htp.formsubmit( 'ACTION', lngs.STR_TXT_358 ); -- Modify Values
   htp.p('&nbsp;');
   htp.formsubmit( 'ACTION', lngs.STR_STH_011 ); -- Cancel
   htp.p('&nbsp;');
  htp.p('</TD>');

  htp.tablerowclose;


-- ***
  htp.tablerowopen;
  htp.p( '<TD align="LEFT" colspan="2">' );

  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border="1" ' || glbx.TABLE_BACKGROUND ); -- Table 2

/*
   htp.tablerowopen;
    htp.tabledata( htf.bold('Ship'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.anchor('STRANGP.ship?surl=' || surl || '&rid_ss=' || replace(rid_ss, '+', '~') || '&parm=SHIPS&access_id=x', c1rec.ship), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="12"');
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Voyage'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( c1rec.voyage, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="12"');
   htp.tablerowclose;
*/
    htp.tablerowopen;
    htp.tabledata( htf.bold('Number of Containers'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" colspan="2"');
    htp.tabledata( v1.count, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="31"');
    htp.tablerowclose;

    htp.tablerowopen;
    htp.tabledata(htf.bold('Direction'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Seal'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Full/Empty'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('ISO Container Type'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Tare'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('VGM'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Urgency'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Current Location'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Local Ship'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Local Bol'), cattributes=>glbx.QUERY_BACKGROUND);
 --   htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);                  -- repeat -- Removed by DB as requested by Gopal, Jason and Simon
 --   htp.tabledata(htf.bold('Customs Cleared Date'), cattributes=>glbx.QUERY_BACKGROUND);       -- Removed by DB as requested by Gopal, Jason and Simon
    htp.tabledata(htf.bold('Customs Auth#'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Consignee'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Consignee Location'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Warehouse Destination'), cattributes=>glbx.QUERY_BACKGROUND);
  --  htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);                  -- repeat -- Removed by DB as requested by Gopal, Jason and Simon
    htp.tabledata(htf.bold('Intl Ship'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Intl Bol'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Intl Discharge Date'), cattributes=>glbx.QUERY_BACKGROUND);
  --  htp.tabledata(htf.bold('Intl Transfer Date'), cattributes=>glbx.QUERY_BACKGROUND);         -- Removed by DB as requested by Gopal, Jason and Simon
  --  htp.tabledata(htf.bold('Berth4 Transfer Date'), cattributes=>glbx.QUERY_BACKGROUND);       -- Removed by DB as requested by Gopal, Jason and Simon
  --  htp.tabledata(htf.bold('Storage Days'), cattributes=>glbx.QUERY_BACKGROUND);               -- Removed by DB as requested by Gopal, Jason and Simon
  --  htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);                  -- repeat -- Removed by DB as requested by Gopal, Jason and Simon
    htp.tabledata(htf.bold('Cargo Comment'), cattributes=>glbx.QUERY_BACKGROUND);
  --  htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);                 -- repeat -- Removed by DB as requested by Gopal, Jason and Simon
  --  htp.tabledata(htf.bold('Shipping Status'), cattributes=>glbx.QUERY_BACKGROUND);           -- Removed by DB as requested by Gopal, Jason and Simon
  --  htp.tabledata(htf.bold('Status Date'), cattributes=>glbx.QUERY_BACKGROUND);               -- Removed by DB as requested by Gopal, Jason and Simon       
  --  htp.tabledata(htf.bold('Additional Remark'), cattributes=>glbx.QUERY_BACKGROUND);         -- Removed by DB as requested by Gopal, Jason and Simon    
    htp.tabledata(htf.bold('Overdimensional'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Reefer Setpoint'), cattributes=>glbx.QUERY_BACKGROUND);
  --  htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);                  -- repeat -- Removed by DB as requested by Gopal, Jason and Simon
    htp.tabledata(htf.bold('Message'), cattributes=>glbx.QUERY_BACKGROUND);                    -- Removed by DB as requested by Gopal, Jason and Simon 
    htp.tablerowclose;

   for j in v1.first..v1.last loop
    htp.formhidden('V_RID_CS', v_rid_cs(j));
    htp.tablerowopen;
     if errmsg(j) is not null
      then
       err_txt := 'style="color:RED;"';
     else
       err_txt := null;
     end if;

  --   htp.formhidden( 'V1', v1(j) );
     open c3( replace(v_rid_cs(j), '~', '+') ) ;
     fetch c3 into v_rid_ss;
     close c3;
--     htp.tabledata( htf.formtext( 'V1',8,15,v1(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     -- Direction & Container
     htp.formhidden( 'V1', v1(j) );   -- movement no
     htp.formhidden( 'V2', v2(j) );   -- seal
     htp.formhidden( 'V14', v14(j) ); -- bol/hb
     htp.formhidden( 'V19', v19(j) ); --  local bol/hb
     htp.formhidden( 'V26', v26(j) ); -- full_mt
     
     -- Added by DB on 9/10/23
    -- htp.formhidden( 'V8', v8(j) );   -- Customs Cleared Date
     htp.formhidden( 'V12', v12(j) ); -- Warehouse Destination
    -- htp.formhidden( 'V16', v16(j) ); -- Intl Transfer Date
    -- htp.formhidden( 'V17', v17(j) ); -- Berth4 Transfer Date
    -- htp.formhidden( 'V21', v21(j) ); -- Shipping Status
    -- htp.formhidden( 'V22', v22(j) ); -- Status Date
    -- htp.formhidden( 'V23', v23(j) ); -- Additional Remark
     
     htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
     htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_ALLN_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- Seal
--     htp.tabledata( htf.formtext( 'V2',8,15,v2(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( to_char(v2(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');

     -- Full or Empty
     htp.tabledata( to_char(v26(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');


     -- Iso Container Type
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'UNCTNTAB', 'V3', v3(j), FALSE, TRUE, FALSE );
       htp.p('</TD>');

     -- Tare
     htp.tabledata( htf.formtext( 'V4',8,15,v4(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- VGM
     htp.tabledata( htf.formtext( 'V5',8,15,v5(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- URGENCY
       if v6(j) is null then
        v6(j) := 'STANDARD';
       end if;
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'URGENCY', 'V6', v6(j), FALSE, FALSE, FALSE );
       htp.p('</TD>');

     -- CURRENT LOCATION
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'LOCATIONS', 'V7', v7(j), FALSE, TRUE, FALSE );
       htp.p('</TD>');
       
     -- Local Ship -- moved by DB on 9/10/2023
     if v18(j) is null then
        v18(j):= 2;
     end if;

     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     if vaccess = 'EDIT' and nvl(v18(j),'INCOMPLETE') <> 'ARCHIVED'
        then
         lov_ship_local( 'V18', 'S', v18(j),'I', p_filter=>'ARCHIVED'  );
      else
       if vaccess = 'EDIT' then htp.formhidden( 'V18', v18(j) ); end if;
       lov_ship_local( 'V18', 'S', v18(j),'I', isedit=>FALSE, p_filter=>'ARCHIVED' );
     end if;
     htp.p( '</TD>' );
     
     htp.tabledata( to_char(v19(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');

    -- Container 1st repeat  -- Removed by DB on 9/1//2023
    --  htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_ALLN_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- CUSTOMS CLEARED DATE
     --htp.tabledata( htf.formtext( 'V8',8,15,v8(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- CUSTOMS AUTH NO
     htp.tabledata( htf.formtext( 'V9',8,15,v9(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- CONSIGNEE
     htp.tabledata( htf.formtext( 'V10',8,15,v10(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- CONSIGNEE LOCATION
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'LOCATIONS', 'V11', v11(j), FALSE, TRUE, FALSE );
       htp.p('</TD>');

     -- WAREHOUSE DESTINATION
     
      htp.tabledata( to_char(v12(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
--       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
--       lov_list_warehouse( 'LOCATIONS', 'V12', v12(j), FALSE, TRUE, FALSE );
--       htp.p('</TD>');

     -- Container 2nd repeat - removed by DB on 9/10/23
     -- htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_ALLN_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- International Ship
     if v13(j) is null then
        v13(j):= 1;
     end if;

--     htp.tabledata( to_char(v13(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');

     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
--     if vaccess = 'EDIT' and nvl(v13(j),'INCOMPLETE') <> 'ARCHIVED'
--        then
--         lov_ship_intl( 'V13', 'S', v13(j),'I' );
--      else
       if vaccess = 'EDIT' then htp.formhidden( 'V13', v13(j) ); end if;
       lov_ship_intl( 'V13', 'S', v13(j), 'I', isedit=>FALSE );
--     end if;
     htp.p( '</TD>' );

     -- INTL BOL
     htp.tabledata( to_char(v14(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
--     htp.tabledata( htf.formtext( 'V14',8,15,v14(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

    -- INTL SHIP DISCHARGE DATE - V15
     htp.tabledata( htf.formtext( 'V15',8,15,to_char(to_date(v15(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

    -- International Wharf Transfer Date - V16
    -- htp.tabledata( htf.formtext( 'V16',8,15,to_char(to_date(v16(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');


    -- Berth4 Date - V17
    -- htp.tabledata( htf.formtext( 'V17',8,15,to_char(to_date(v17(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- STORAGE DAYS
     --  htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
/*
     if v15(j) is null then
       htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     elsif v16(j) is null and v17(j) is null then  -- discharged on Berth#4 and awaiting local shipping
       htp.tabledata( htf.bold( to_char(TRUNC(nvl(to_date(v16(j)),sysdate) - nvl(to_date(v15(j)),sysdate)-5))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     elsif v16(j) is not null and v17(j) is null then  -- discharged on Berth#4 and awaiting local shipping
       htp.tabledata( htf.bold('INTL WHARF: '|| to_char(TRUNC(nvl(to_date(v16(j)),sysdate) - nvl(to_date(v15(j)),sysdate)-5))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
       htp.tabledata( '&nbsp;',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
*/
     -- Container 3rd repeat removed by DB on 09/10/2023
     -- htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_ALLN_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- Local Ship
--     if v18(j) is null then
--        v18(j):= 2;
--     end if;
     
    -- removed by DB on 9/10/2023

--     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
--     if vaccess = 'EDIT' and nvl(v18(j),'INCOMPLETE') <> 'ARCHIVED'
--        then
--         lov_ship_local( 'V18', 'S', v18(j),'I' );
--      else
--       if vaccess = 'EDIT' then htp.formhidden( 'V18', v18(j) ); end if;
--       lov_ship_local( 'V18', 'S', v18(j),'I', isedit=>FALSE );
--     end if;
--     htp.p( '</TD>' );

     -- LOCAL BOL
--     htp.tabledata( htf.formtext( 'V19',8,15,v19(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--     htp.tabledata( to_char(v19(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');

     -- COMMENT
     htp.tabledata( htf.formtext( 'V20',40,40,v20(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- Container 4th repeat - removed by DB on 09/10/2023
     -- htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_ALLN_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- REMARK
    -- htp.tabledata( htf.formtext( 'V21',40,40,v21(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- REMARK DATE
    -- htp.tabledata( htf.formtext( 'V22',8,15,to_char(to_date(v22(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');


     -- REMARK DETAIL
     --htp.tabledata( htf.formtext( 'V23',40,40,v23(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- OVERDIMENSIONAL
     htp.tabledata( htf.formtext( 'V24',40,40,v24(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- SET POINT
     htp.tabledata( htf.formtext( 'V25',8,15,v25(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');


/*
     -- Full/Empty
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
      htp.formselectopen( 'V7' );
      if upper(nvl(v7(j), 'EMPTY')) = 'FULL'
      then
       htp.formselectoption( 'Full', 'SELECTED', cattributes=>'VALUE="FULL"' );
       htp.formselectoption( 'Empty', cattributes=>'VALUE="EMPTY"' );
      else
       htp.formselectoption( 'Full', cattributes=>'VALUE="FULL"' );
       htp.formselectoption( 'Empty', 'SELECTED', cattributes=>'VALUE="EMPTY"' );
      end if;
     htp.formselectclose;
     htp.p( '</TD>' );
*/

     -- Container 5th repeat -- removed by DB on 9/10/2023
     -- htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_ALLN_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');


     -- Error message
     htp.tabledata( errmsg(j),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );

    htp.tablerowclose;
   end loop;

  htp.tableclose; -- Table 2
  htp.p('</TD>');
  htp.tablerowclose;

 -- Submit Buttons

  htp.tablerowopen;
  htp.p('<TD VALIGN="TOP" COLSPAN="2">');
   htp.formsubmit( 'ACTION', lngs.STR_TXT_358 ); -- Modify Values
   htp.p('&nbsp;');
   htp.formsubmit( 'ACTION', lngs.STR_STH_011 ); -- Cancel
   htp.p('&nbsp;');
  htp.p('</TD>');

  htp.tablerowclose;

  htp.formclose;
  htp.tableclose; -- Table 1

exception when others then
 glbx.error_details( 'STRANGP', 'ctrs_mass_png_alln_UPDATE',null,null,errmsg=>sqlerrm,extdet=>stp );
end ctrs_mass_png_alln_update;

procedure accept_ctrs_mass_png_alln_up( surl in varchar2
                                       , parm in varchar2
                                       , access_id in varchar2
                                       , call_name in varchar2
                                       , v_rid_cs in owa.vc_arr
                                       , v1 in owa.vc_arr
                                       , v2 in owa.vc_arr
                                       , v3 in out owa.vc_arr
                                       , v4 in out owa.vc_arr
                                       , v5 in out owa.vc_arr
                                       , v6 in out owa.vc_arr
                                       , v7 in out owa.vc_arr
                                     --  , v8 in out owa.vc_arr
                                       , v9 in out owa.vc_arr
                                       , v10 in out owa.vc_arr
                                       , v11 in out owa.vc_arr
                                       , v12 in out owa.vc_arr
                                       , v13 in out owa.vc_arr
                                       , v14 in out owa.vc_arr
                                       , v15 in out owa.vc_arr
                                     --  , v16 in out owa.vc_arr
                                     --  , v17 in out owa.vc_arr
                                       , v18 in out owa.vc_arr
                                       , v19 in out owa.vc_arr
                                       , v20 in out owa.vc_arr
                                     --  , v21 in out owa.vc_arr
                                     --  , v22 in out owa.vc_arr
                                     --  , v23 in out owa.vc_arr
                                       , v24 in out owa.vc_arr
                                       , v25 in out owa.vc_arr
                                       , v26 in out owa.vc_arr
                                       , action in varchar2
                                       )
is

 cursor c1(rid ROWID) is select * from strang.movements where rowid = rid FOR UPDATE;

 cursor c2(cdesc varchar2) is select code from strang.lov where lov_name='UNCTNTAB' and code = cdesc;


/* cursor c4 (rid_cs rowid) is
  select ds.*
  from  strang.dan_details_southbound ds, strang.containers_southbound cs
  where cs.rowid = rid_cs
     and upper(ds.ship) = upper(cs.ship)
     and upper(ds.voyage) = upper(cs.voyage)
     and upper(ds.container) = upper(cs.container)
     and ds.container is not null
 ;

-- cursor c5 (rid_ss rowid) is select * from strang.ships_airway where rowid = rid_ss;

 cursor c6 (v_ctr varchar2, v_dte date) is
  select *
  from   strang.movements
  where  upper(replace(replace(trim(movement_no), ' ', ''), '-', '')) = upper(replace(replace(trim(v_ctr), ' ', ''), '-', ''))
         and trunc(datehired) <= v_dte
         and trunc(offdate + 1) >= v_dte
 ;
*/
 c2rec	     C2%ROWTYPE;
 stype       integer;
 ltype       varchar2(100);
 owner_id    integer;
 sts         varchar2(100);
 v_rid_ss    rowid;
 v_rid_bs    rowid;
 error_found boolean;
 ctrrec      strang.movements%ROWTYPE;
-- c4rec       c4%ROWTYPE;
-- c5rec       c5%ROWTYPE;
-- c6rec       c6%ROWTYPE;
 v_date      date;
 v_number    number;
 errmsg      owa.vc_arr;
 ctr         integer;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ctrs_mass_png_alln' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;

 error_found := FALSE;

 if action = lngs.STR_STH_011 -- Cancel
  then
     strangp.menu(surl=>surl,rnd=>NULL,MTYPE=>'TRAC');
     return;
 end if;

 for j in v1.first..v1.last loop
  errmsg(j) := null;
  open c1(replace(v_rid_cs(j), '~', '+'));
  fetch c1 into ctrrec;
   for k in 1..1 loop
    if c1%NOTFOUND
     then
      error_found := TRUE;
      errmsg(j) := 'Container record not found. ROWID = ' || v_rid_cs(j);
      exit;
    end if;

    -- iso_container_type - V3
    open c2(v3(j));
    fetch c2 into c2rec;
    if C2%FOUND then
      ctrrec.iso_container_type := c2rec.code;
    end if;
    close c2;

    -- Tare - V4
    ctrrec.tare := v4(j);

    -- VGM - V5
    ctrrec.VGM := v5(j);


    -- URGENCY - V6
    ctrrec.Urgency := v6(j);


    -- Current Location - V7
    ctrrec.current_location := v7(j);


    -- Customs Cleared Date - V8
    -- ctrrec.customs_cleared_date := v8(j);


    -- Customs Auth No - V9
    ctrrec.customs_auth_no := v9(j);


    -- Consignee - V10
    ctrrec.consignee := v10(j);

    -- Consignee Location - V11
    ctrrec.consignee_location := v11(j);

    -- Warehouse Destination - V12
    ctrrec.warehouse_destination := v12(j);

    if ctrrec.ship_id <> v13(j)
    then
     ctrrec.bol := null;
     ctrrec.hb := null;
    end if;

    -- Ship_id - V13
    ctrrec.ship_id := v13(j);

    -- Intl Bol - V14
 --   ctrrec.bol := v14(j);

    -- Intl Discharge Date - V15
    begin
     v_date := to_date(v15(j),LNGS.STR_DATE_02);
     if to_char(v_date, 'yyyy') like '0%'
      then
       errmsg(j) := errmsg(j) || '[Intl Discharge Date] ' || LNGS.STR_TXT_152 || ': ' || v15(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
       error_found := TRUE;
     else
       ctrrec.INT_SHIP_DISCHARGE_DATE := v_date;
     end if;
    exception when others then
     v15(j) := ctrrec.INT_SHIP_DISCHARGE_DATE;
     errmsg(j) := errmsg(j) || '[Intl Discharge Date] ' || LNGS.STR_TXT_152 || ': ' || v15(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
     error_found := TRUE;
    end;

    -- Intl Wharf Transfer Date - V16
--    begin
--     v_date := to_date(v16(j),LNGS.STR_DATE_02);
--     if to_char(v_date, 'yyyy') like '0%'
--      then
--       errmsg(j) := errmsg(j) || '[Intl Wharf Transfer Date] ' || LNGS.STR_TXT_152 || ': ' || v16(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
--       error_found := TRUE;
--     else
--       ctrrec.intl_wharf_transfer_date := v_date;
--     end if;
--    exception when others then
--     v16(j) := ctrrec.intl_wharf_transfer_date;
--     errmsg(j) := errmsg(j) || '[Intl Wharf Transfer Date] ' || LNGS.STR_TXT_152 || ': ' || v16(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
--     error_found := TRUE;
--    end;

    -- Berth4 Date - V17
--    begin
--     v_date := to_date(v17(j),LNGS.STR_DATE_02);
--     if to_char(v_date, 'yyyy') like '0%'
--      then
--       errmsg(j) := errmsg(j) || '[Berth#4 Transfer Date] ' || LNGS.STR_TXT_152 || ': ' || v17(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
--       error_found := TRUE;
--     else
--       ctrrec.berth4_transfer_date := v_date;
--     end if;
--    exception when others then
--     v17(j) := ctrrec.berth4_transfer_date;
--     errmsg(j) := errmsg(j) || '[Berth4 Transfer Date] ' || LNGS.STR_TXT_152 || ': ' || v17(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
--     error_found := TRUE;
--    end;

    if ctrrec.local_ship_id <> v18(j)
    then
     ctrrec.local_bol := null;
     ctrrec.local_hb := null;
    end if;

    -- Local Ship_id - V18
    ctrrec.local_ship_id := v18(j);

    -- Local Bol - V19

--    ctrrec.local_bol := v19(j);

    -- Cmt - V20
    ctrrec.cmt := v20(j);

    -- Remark - V21
--    ctrrec.remark := v21(j);
--
--    -- Remark_date - V22
--    ctrrec.remark_date := v22(j);
--
--    -- Remark_detail - V23
--    ctrrec.remark_detail := v23(j);

    -- Overdimensional - V24
    ctrrec.overdimensional := v24(j);

    -- Set point - V25
    ctrrec.set_point := v25(j);

    -- David Banjo Interface4_date field cleared
    ctrrec.interface4_date := NULL;
    if errmsg(j) is null
     then
      ctrrec.date_modified := sysdate;
	  update strang.movements set row = ctrrec where current of c1;
      commit;
    end if;

  end loop;
  close c1;
 end loop;


 if error_found
  then
   ctrs_mass_png_alln_update(surl, parm, action, v_rid_cs, v1, v2, v3, v4, v5, v6, v7,  v9, v10, v11, v12, v13, v14, v15,
   v18, v19, v20,  v24, v25, v26, errmsg, access_id, 'Errors Found: Check Messages', call_name);
   return;
 else
   ctrs_mass_png_alln_update(surl, parm, action, v_rid_cs, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v15,
   v18, v19, v20, v24, v25, v26, errmsg, access_id, 'All Records Successfully Updated', call_name);
   return;
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_ctrs_mass_png_alln_UP',null,null,errmsg=>sqlerrm );
end accept_ctrs_mass_png_alln_up;

procedure download_cargo_csv(surl in varchar2, action in varchar2) is

ltype         varchar2(100);
stype         integer;
owner_id      integer;
sts           varchar2(100);
v_parms_1     column_array;
v_query_1     varchar2(4000);
v_parms_2     column_array;
v_query_2     varchar2(4000);
v_union_2     varchar2(100);
date_mask     CONSTANT varchar2(100) := ', ''dd-MON-yyyy''';
csv_blob      BLOB;
f_name        varchar2(1000);
NL_CHAR       constant char(1) := chr(10);

begin
  glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.DOWNLOAD_CARGO_CSV' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  dbms_lob.createtemporary(csv_blob,TRUE);

  case upper(trim(action))
  when 'INBOUND: KIUNGA CARGO'
   then
    f_name := 'cargo_kiunga.csv';
    
    v_parms_1(1).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''SHIP_ID'')'; -- Added by DB
    v_parms_1(2).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''SHIPNAME'')';
    v_parms_1(3).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''VOY'')';
    v_parms_1(4).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''ESTARRIVE'')';-- || date_mask;
    v_parms_1(5).v_col := 'm.int_ship_discharge_date';
    v_parms_1(6).v_col := 'm.intl_wharf_transfer_date';  
    v_parms_1(7).v_col := 'm.berth4_transfer_date';  -- Added by DB
    v_parms_1(8).v_col := 'trunc(nvl(nvl(m.berth4_transfer_date,nvl(m.intl_wharf_transfer_date,sysdate))-nvl(m.int_ship_discharge_date,sysdate),0))'; -- added by db
    v_parms_1(9).v_col := 'trunc(nvl(sysdate-nvl(m.berth4_transfer_date,nvl(m.intl_wharf_transfer_date,sysdate)),0))'; -- added by DB
    v_parms_1(10).v_col := 'm.customs_cleared_date' || date_mask;
    v_parms_1(11).v_col := 'm.ptl_date';  -- added by DB  
    v_parms_1(12).v_col := 'm.bol';
    v_parms_1(13).v_col := 'm.movement_no';
    v_parms_1(14).v_col := 'm.seal';
    v_parms_1(15).v_col := 'nvl(strang.f_getLovColumn( ''UNCTNTAB'', ''COLA'', m.iso_container_type),m.iso_container_type)';
    v_parms_1(16).v_col := 'm.owner';
    v_parms_1(17).v_col := 'decode(m.iso_container_type,null,''BBULK'',''FCL'') ';
    v_parms_1(18).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''DESCRIPTION'')';
    v_parms_1(19).v_col := 'round((nvl(m.vgm,(nvl(m.sumweight,0)+nvl(m.tare,0)))/1000),3)';
    v_parms_1(20).v_col := 'nvl(m.sumvolume,0)';
    v_parms_1(21).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''PO'')';
    v_parms_1(22).v_col := 'case when m.urgency = ''VMR'' THEN strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''INVENTORYNO'') else null end'; -- ADDED BY DB
    v_parms_1(23).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''VENDOR'')';
    v_parms_1(24).v_col := 'm.consignee||'' ''||strang.f_getlocdesc(m.consignee_location)||'' ''||strang.f_getlocdesc(m.warehouse_destination)||'' ''||m.warehouse_destination';
    v_parms_1(25).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''HAZARDOUS'')';
    v_parms_1(26).v_col := 'm.urgency';
    v_parms_1(27).v_col := 'strang.f_getlocdesc(m.current_location)';
    v_parms_1(28).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIP_ID'')';  -- ADDED BY DB
    v_parms_1(29).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIPNAME'')';
    v_parms_1(30).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''VOY'')';
    v_parms_1(31).v_col := 'm.local_bol';
    v_parms_1(32).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTLOAD''))';
    v_parms_1(33).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTDEPART'')' ;--|| date_mask;
    v_parms_1(34).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTDISC''))';
    v_parms_1(35).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTARRIVE'')' ;--|| date_mask;
    v_parms_1(36).v_col := 'strang.f_storage_days(m.movement_no,m.seal)';
    v_parms_1(37).v_col := 'm.overdimensional';
    v_parms_1(38).v_col := 'm.remark';
    v_parms_1(39).v_col := 'm.remark_detail';

    v_parms_1(1).v_alias := 'Intl Ship ID';  -- Added by db
    v_parms_1(2).v_alias := 'Intl Ship';
    v_parms_1(3).v_alias := 'Intl Voy';
    v_parms_1(4).v_alias := 'Intl ETA';
    v_parms_1(5).v_alias := 'Intl Ship Discharge Date';
    v_parms_1(6).v_alias := 'Intl Wharf Transfer Date';
    v_parms_1(7).v_alias := 'Berth#4 Transfer Date'; -- Added by DB
    v_parms_1(8).v_alias := 'Transfer - Discharge Dates'; -- Added by DB
    v_parms_1(9).v_alias := 'Days Since Transfer'; -- Added by DB
    v_parms_1(10).v_alias := 'Customs Cleared Date';
    v_parms_1(11).v_alias := 'PTL Date';  -- Added by DB
    v_parms_1(12).v_alias := 'Intl Bol';
    v_parms_1(13).v_alias := 'Container';
    v_parms_1(14).v_alias := 'Seal';
    v_parms_1(15).v_alias := 'ISO Container Type';
    v_parms_1(16).v_alias := 'Container Owner';
    v_parms_1(17).v_alias := 'Cargo';
    v_parms_1(18).v_alias := 'Description';
    v_parms_1(19).v_alias := 'Gross Weight in Tonne';
    v_parms_1(20).v_alias := 'Cargo Volume';
    v_parms_1(21).v_alias := 'Purchase Order';
    v_parms_1(22).v_alias := 'Material Number';  -- Added by DB
    v_parms_1(23).v_alias := 'Vendor';
    v_parms_1(24).v_alias := 'Consignee';
    v_parms_1(25).v_alias := 'Hazardous Codes';
    v_parms_1(26).v_alias := 'Priority';
    v_parms_1(27).v_alias := 'Current Location';
    v_parms_1(28).v_alias := 'Local Ship ID';  -- Added by DB
    v_parms_1(29).v_alias := 'Local Ship';
    v_parms_1(30).v_alias := 'Local Voyage';
    v_parms_1(31).v_alias := 'Local Bol';
    v_parms_1(32).v_alias := 'Local Port of Loading';
    v_parms_1(33).v_alias := 'Local ETD';
    v_parms_1(34).v_alias := 'Local Port of Discharge';
    v_parms_1(35).v_alias := 'Local ETA';
    v_parms_1(36).v_alias := 'Storage';
    v_parms_1(37).v_alias := 'Overdimensional';
    v_parms_1(38).v_alias := 'Shipping Status';
    v_parms_1(39).v_alias := 'Shipping Status - Add. Remarks';

    for j in v_parms_1.first..v_parms_1.last loop
     if v_parms_1(j).v_alias is null
      then
       v_parms_1(j).v_alias := replace(substr(v_parms_1(j).v_col, 1, 30), date_mask, '');
     end if;
     v_parms_2(j).v_alias := v_parms_1(j).v_alias;
    end loop;

    v_query_1 :=              ' from strang.movements m';
    v_query_1 := v_query_1 || ' where  nvl(m.complete,''S'') NOT IN (''H'',''J'') ';
    v_query_1 := v_query_1 || ' and m.io=''I'' and m.current_location in (select code from strang.lov where lov_name=''LOCATIONS'' and colc = ''KIUNGA'') ';
    v_query_1 := v_query_1 || ' order by m.int_ship_discharge_date desc, m.ship_id, m.movement_no ';

-- 20190110 BEGIN
  when 'INBOUND: KIUNGA CTRS AWAITING CONVOY'
   then
    f_name := 'containers_kiunga.csv';
    v_parms_1(1).v_col := 'c.customer';
    v_parms_1(2).v_col := 's.shipname||'' ''||s.voy';
    v_parms_1(3).v_col := 'm.movement_no';
    v_parms_1(4).v_col := 'm.seal';
--    v_parms_1(5).v_col := 'm.consignee||'' ''||strang.f_getlocdesc(m.consignee_location)||'' ''||strang.f_getlocdesc(m.warehouse_destination)';
    v_parms_1(5).v_col := 'strang.f_getlocdesc(m.warehouse_destination)||'' ''||m.warehouse_destination';
    v_parms_1(6).v_col := 'replace(strang.f_getShipDates(dr.deliveryno,dr.itemno,''C''),''<BR>'','' '')';
    v_parms_1(7).v_col := 'm.urgency';
    v_parms_1(8).v_col := 'trunc(sysdate-trunc(nvl(m.local_ship_discharge_date,nvl(s.discharge_date,nvl(s.estarrive,sysdate)))))';
    v_parms_1(9).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTDEPART'')' ;--|| date_mask;
    v_parms_1(10).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTARRIVE'')' ;--|| date_mask;

    v_parms_1(1).v_alias := 'Consignee';
    v_parms_1(2).v_alias := 'Local Ship and Voyage';
    v_parms_1(3).v_alias := 'Container';
    v_parms_1(4).v_alias := 'Seal';
    v_parms_1(5).v_alias := 'Destination';
    v_parms_1(6).v_alias := 'Convoy Date Scheduled';
    v_parms_1(7).v_alias := 'Priority';
    v_parms_1(8).v_alias := 'Days At Wharf';
    v_parms_1(9).v_alias := 'Local ETD';
    v_parms_1(10).v_alias := 'Local ETA';

    for j in v_parms_1.first..v_parms_1.last loop
     if v_parms_1(j).v_alias is null
      then
       v_parms_1(j).v_alias := replace(substr(v_parms_1(j).v_col, 1, 30), date_mask, '');
     end if;
     v_parms_2(j).v_alias := v_parms_1(j).v_alias;
    end loop;

v_query_1 :=              ' from strang.receivals r, strang.detailrs dr, strang.movements m, strang.customers c, strang.ships_airway s';
v_query_1 := v_query_1 || ' where r.deliveryno = dr.deliveryno and ';
v_query_1 := v_query_1 || ' dr.movement_no = m.movement_no and ';
v_query_1 := v_query_1 || ' nvl(dr.camov_seal,''|'') = nvl(m.seal,''|'') and ';
v_query_1 := v_query_1 || ' nvl(m.complete,''S'') NOT IN (''H'',''J'') and ';
v_query_1 := v_query_1 || ' m.io=''I'' and m.current_location in (select code from strang.lov where lov_name=''LOCATIONS'' and colc = ''KIUNGA'') and ';
v_query_1 := v_query_1 || ' m.local_ship_id  = s.ship_id and ';
v_query_1 := v_query_1 || ' m.movement_type = ''CARGO'' and ';
v_query_1 := v_query_1 || ' ((m.local_ship_discharge_date is not null) or (s.estarrive <= sysdate) or (s.discharge_date is not null)) and ';
v_query_1 := v_query_1 || ' r.cust_customer_id = c.customer_id ';
v_query_1 := v_query_1 || ' order by 1,8 desc ';


  when 'INBOUND: POM CTRS AWAITING LOCAL SHIP'
   then
    f_name := 'containers_pom.csv';
    v_parms_1(1).v_col := 'c.customer';
    v_parms_1(2).v_col := 's.shipname||'' ''||s.voy';
    v_parms_1(3).v_col := 'm.movement_no';
    v_parms_1(4).v_col := 'm.seal';
    v_parms_1(5).v_col := 'm.consignee||'' ''||strang.f_getlocdesc(m.consignee_location)||'' ''||strang.f_getlocdesc(m.warehouse_destination)||'' ''||m.warehouse_destination';
    v_parms_1(6).v_col := 'm.customs_cleared_date';
    v_parms_1(7).v_col := 'm.urgency';
    v_parms_1(8).v_col := 'trunc(sysdate-trunc(nvl(m.int_ship_discharge_date,nvl(s.discharge_date,nvl(s.estarrive,sysdate)))))';

    v_parms_1(1).v_alias := 'Consignee';
    v_parms_1(2).v_alias := 'International Ship and Voyage';
    v_parms_1(3).v_alias := 'Container';
    v_parms_1(4).v_alias := 'Seal';
    v_parms_1(5).v_alias := 'Destination';
    v_parms_1(6).v_alias := 'Customs Cleared Date';
    v_parms_1(7).v_alias := 'Priority';
    v_parms_1(8).v_alias := 'Days At Wharf';

    for j in v_parms_1.first..v_parms_1.last loop
     if v_parms_1(j).v_alias is null
      then
       v_parms_1(j).v_alias := replace(substr(v_parms_1(j).v_col, 1, 30), date_mask, '');
     end if;
     v_parms_2(j).v_alias := v_parms_1(j).v_alias;
    end loop;

v_query_1 :=              ' from strang.receivals r, strang.detailrs dr, strang.movements m, strang.customers c, strang.ships_airway s';
v_query_1 := v_query_1 || ' where r.deliveryno = dr.deliveryno and ';
v_query_1 := v_query_1 || ' dr.movement_no = m.movement_no and ';
v_query_1 := v_query_1 || ' nvl(dr.camov_seal,''|'') = nvl(m.seal,''|'') and ';
v_query_1 := v_query_1 || ' nvl(m.complete,''S'') NOT IN (''H'',''J'') and ';
v_query_1 := v_query_1 || ' m.current_location in (select code from strang.lov where lov_name=''LOCATIONS'' and colc = ''MOTUKEA'') and ';
v_query_1 := v_query_1 || ' m.ship_id in (select s.ship_id from strang.ships_airway s where s.shipname <> ''LOCAL SHIPPING ONLY'') and ';
v_query_1 := v_query_1 || ' m.ship_id  = s.ship_id and ';
v_query_1 := v_query_1 || ' m.io=''I'' and m.movement_type = ''CARGO'' and ';
v_query_1 := v_query_1 || ' ((m.int_ship_discharge_date is not null) or (s.estarrive <= sysdate) or (s.discharge_date is not null)) and ';
v_query_1 := v_query_1 || ' r.cust_customer_id = c.customer_id ';
v_query_1 := v_query_1 || ' order by 1,8 desc ';

-- -------------------------------W131 PROJECT CARGO ------------------------------------------------------------------------
  when 'INBOUND: W131 CTRS AWAITING CONVOY'
   then
    f_name := 'w131_kiunga.csv';
    v_parms_1(1).v_col := 'c.customer';
    v_parms_1(2).v_col := 's.shipname||'' ''||s.voy';
    v_parms_1(3).v_col := 'm.movement_no';
    v_parms_1(4).v_col := 'm.seal';
    v_parms_1(5).v_col := 'm.consignee||'' ''||strang.f_getlocdesc(m.consignee_location)||'' ''||strang.f_getlocdesc(m.warehouse_destination)||'' ''||m.warehouse_destination';
    v_parms_1(6).v_col := 'replace(strang.f_getShipDates(dr.deliveryno,dr.itemno,''C''),''<BR>'','' '')';
    v_parms_1(7).v_col := 'm.urgency';
    v_parms_1(8).v_col := 'trunc(sysdate-trunc(nvl(m.local_ship_discharge_date,nvl(s.discharge_date,nvl(s.estarrive,sysdate)))))';

    v_parms_1(1).v_alias := 'Consignee';
    v_parms_1(2).v_alias := 'Local Ship and Voyage';
    v_parms_1(3).v_alias := 'Container';
    v_parms_1(4).v_alias := 'Seal';
    v_parms_1(5).v_alias := 'Destination';
    v_parms_1(6).v_alias := 'Convoy Date Scheduled';
    v_parms_1(7).v_alias := 'Priority';
    v_parms_1(8).v_alias := 'Days At Wharf';

    for j in v_parms_1.first..v_parms_1.last loop
     if v_parms_1(j).v_alias is null
      then
       v_parms_1(j).v_alias := replace(substr(v_parms_1(j).v_col, 1, 30), date_mask, '');
     end if;
     v_parms_2(j).v_alias := v_parms_1(j).v_alias;
    end loop;

v_query_1 :=              ' from strang.receivals r, strang.detailrs dr, strang.movements m, strang.customers c, strang.ships_airway s';
v_query_1 := v_query_1 || ' where r.deliveryno = dr.deliveryno and ';
v_query_1 := v_query_1 || ' dr.movement_no = m.movement_no and ';
v_query_1 := v_query_1 || ' nvl(dr.camov_seal,''|'') = nvl(m.seal,''|'') and ';
v_query_1 := v_query_1 || ' nvl(m.complete,''S'') NOT IN (''H'',''J'') and ';
v_query_1 := v_query_1 || ' m.current_location in (select code from strang.lov where lov_name=''LOCATIONS'' and colc = ''KIUNGA'') and ';
v_query_1 := v_query_1 || ' m.local_ship_id  = s.ship_id and ';
v_query_1 := v_query_1 || ' m.movement_type = ''CARGO'' and m.io=''I'' and';
v_query_1 := v_query_1 || ' ((m.local_ship_discharge_date is not null) or (s.estarrive <= sysdate) or (s.discharge_date is not null)) and ';
v_query_1 := v_query_1 || ' r.cust_customer_id = c.customer_id and ';
v_query_1 := v_query_1 || ' m.warehouse_destination = ''W131'' ';
v_query_1 := v_query_1 || ' order by 1,8 desc ';


  when 'INBOUND: W131 CTRS AWAITING LOCAL SHIP'
   then
    f_name := 'w131_pom.csv';
    v_parms_1(1).v_col := 'c.customer';
    v_parms_1(2).v_col := 's.shipname||'' ''||s.voy';
    v_parms_1(3).v_col := 'm.movement_no';
    v_parms_1(4).v_col := 'm.seal';
    v_parms_1(5).v_col := 'm.consignee||'' ''||strang.f_getlocdesc(m.consignee_location)||'' ''||strang.f_getlocdesc(m.warehouse_destination)||'' ''||m.warehouse_destination';
    v_parms_1(6).v_col := 'm.customs_cleared_date';
    v_parms_1(7).v_col := 'm.urgency';
    v_parms_1(8).v_col := 'trunc(sysdate-trunc(nvl(m.int_ship_discharge_date,nvl(s.discharge_date,nvl(s.estarrive,sysdate)))))';

    v_parms_1(1).v_alias := 'Consignee';
    v_parms_1(2).v_alias := 'International Ship and Voyage';
    v_parms_1(3).v_alias := 'Container';
    v_parms_1(4).v_alias := 'Seal';
    v_parms_1(5).v_alias := 'Destination';
    v_parms_1(6).v_alias := 'Customs Cleared Date';
    v_parms_1(7).v_alias := 'Priority';
    v_parms_1(8).v_alias := 'Days At Wharf';

    for j in v_parms_1.first..v_parms_1.last loop
     if v_parms_1(j).v_alias is null
      then
       v_parms_1(j).v_alias := replace(substr(v_parms_1(j).v_col, 1, 30), date_mask, '');
     end if;
     v_parms_2(j).v_alias := v_parms_1(j).v_alias;
    end loop;

v_query_1 :=              ' from strang.receivals r, strang.detailrs dr, strang.movements m, strang.customers c, strang.ships_airway s';
v_query_1 := v_query_1 || ' where r.deliveryno = dr.deliveryno and ';
v_query_1 := v_query_1 || ' dr.movement_no = m.movement_no and ';
v_query_1 := v_query_1 || ' nvl(dr.camov_seal,''|'') = nvl(m.seal,''|'') and ';
v_query_1 := v_query_1 || ' nvl(m.complete,''S'') NOT IN (''H'',''J'') and ';
v_query_1 := v_query_1 || ' m.current_location in (select code from strang.lov where lov_name=''LOCATIONS'' and colc = ''MOTUKEA'') and ';
v_query_1 := v_query_1 || ' m.ship_id  = s.ship_id and ';
v_query_1 := v_query_1 || ' m.io=''I'' and m.movement_type = ''CARGO'' and ';
v_query_1 := v_query_1 || ' r.cust_customer_id = c.customer_id  and ';
v_query_1 := v_query_1 || ' m.warehouse_destination = ''W131'' ';
v_query_1 := v_query_1 || ' order by 1,8 desc ';

-- 20190110 END
  when 'INBOUND: CRP SITE'
   then
    f_name := 'import_cargo_crp.csv';
    v_parms_1(1).v_col := 'strang.f_getlocdesc(m.current_location)';
    v_parms_1(2).v_col := 'm.movement_no';
    v_parms_1(3).v_col := 'm.seal';
    v_parms_1(4).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''PO'')';
    v_parms_1(5).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''VENDOR'')';
    v_parms_1(6).v_col := 'nvl(strang.f_getLovColumn( ''UNCTNTAB'', ''COLA'', m.iso_container_type),m.iso_container_type)';
    v_parms_1(7).v_col := 'decode(m.iso_container_type,null,''BBULK'',''FCL'') ';
    v_parms_1(8).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''DESCRIPTION'')';
    v_parms_1(9).v_col := 'round((nvl(m.vgm,(nvl(m.sumweight,0)+nvl(m.tare,0)))/1000),3)';
    v_parms_1(10).v_col := 'nvl(m.sumvolume,0)';
    v_parms_1(11).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''HAZARDOUS'')';
    v_parms_1(12).v_col := 'm.urgency';
    v_parms_1(13).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIPNAME'')';
    v_parms_1(14).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''VOY'')';
    v_parms_1(15).v_col := 'm.overdimensional';

    v_parms_1(1).v_alias := 'Current Location';
    v_parms_1(2).v_alias := 'Container';
    v_parms_1(3).v_alias := 'Seal';
    v_parms_1(4).v_alias := 'Purchase Order';
    v_parms_1(5).v_alias := 'Vendor';
    v_parms_1(6).v_alias := 'ISO Container Type';
    v_parms_1(7).v_alias := 'Cargo';
    v_parms_1(8).v_alias := 'Description';
    v_parms_1(9).v_alias := 'Gross Weight (Tonne)';
    v_parms_1(10).v_alias := 'Cargo Volume';
    v_parms_1(11).v_alias := 'Hazardous Codes';
    v_parms_1(12).v_alias := 'Priority';
    v_parms_1(13).v_alias := 'Local Ship';
    v_parms_1(14).v_alias := 'Local Voyage';
    v_parms_1(15).v_alias := 'Overdimensional';

    for j in v_parms_1.first..v_parms_1.last loop
     if v_parms_1(j).v_alias is null
      then
       v_parms_1(j).v_alias := replace(substr(v_parms_1(j).v_col, 1, 30), date_mask, '');
     end if;
    end loop;

    v_query_1 :=              ' from strang.movements m';
    v_query_1 := v_query_1 || ' where (m.warehouse_destination = ''CRP'') and m.io=''I'' ';
    v_query_1 := v_query_1 || ' order by 1,2';

  when 'INBOUND: POM IMPORT INTERNATIONAL CARGO - SEA'
   then
    f_name := 'import_cargo_in_pom_sea.csv';
    v_parms_1(1).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''SHIP_ID'')';
    v_parms_1(2).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''SHIPNAME'')';
    v_parms_1(3).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''VOY'')';
    v_parms_1(4).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''ESTARRIVE'')';-- || date_mask;
    v_parms_1(5).v_col := 'm.int_ship_discharge_date';
    v_parms_1(6).v_col := 'm.intl_wharf_transfer_date';
    v_parms_1(7).v_col := 'm.berth4_transfer_date';
    v_parms_1(8).v_col := 'trunc(nvl(nvl(m.berth4_transfer_date,nvl(m.intl_wharf_transfer_date,sysdate))-nvl(m.int_ship_discharge_date,sysdate),0))';
    v_parms_1(9).v_col := 'trunc(nvl(sysdate-nvl(m.berth4_transfer_date,nvl(m.intl_wharf_transfer_date,sysdate)),0))';
    v_parms_1(10).v_col := 'm.customs_cleared_date' || date_mask;
    v_parms_1(11).v_col := 'm.ptl_date';
    v_parms_1(12).v_col := 'm.bol';
    v_parms_1(13).v_col := 'm.movement_no';
    v_parms_1(14).v_col := 'm.seal';
    v_parms_1(15).v_col := 'nvl(strang.f_getLovColumn( ''UNCTNTAB'', ''COLA'', m.iso_container_type),m.iso_container_type)';
    v_parms_1(16).v_col := 'm.owner';
    v_parms_1(17).v_col := 'decode(m.iso_container_type,null,''BBULK'',''FCL'') ';
    v_parms_1(18).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''DESCRIPTION'')';
    v_parms_1(19).v_col := 'round((nvl(m.vgm,(nvl(m.sumweight,0)+nvl(m.tare,0)))/1000),3)';
    v_parms_1(20).v_col := 'nvl(m.sumvolume,0)';
    v_parms_1(21).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''PO'')';
    v_parms_1(22).v_col := 'case when m.urgency = ''VMR'' THEN strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''INVENTORYNO'') else null end';
   -- v_parms_1(22).v_col := 'replace(decode(l1.colc,null,substr(strang.f_display_container(m.ship_id,m.bol,m.container_type,''DESCRIPTION''),1,200),l1.colc),''&nbsp'','''') ';
    v_parms_1(23).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''VENDOR'')';
    v_parms_1(24).v_col := 'm.consignee||'' ''||strang.f_getlocdesc(m.consignee_location)||'' ''||strang.f_getlocdesc(m.warehouse_destination)||'' ''||m.warehouse_destination';
    v_parms_1(25).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''HAZARDOUS'')';
    v_parms_1(26).v_col := 'm.urgency';
    v_parms_1(27).v_col := 'strang.f_getlocdesc(m.current_location)';
    v_parms_1(28).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIP_ID'')';
    v_parms_1(29).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIPNAME'')';
    v_parms_1(30).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''VOY'')';
    v_parms_1(31).v_col := 'm.local_bol';
    v_parms_1(32).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTLOAD''))';
    v_parms_1(33).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTDEPART'')' ;--|| date_mask;
    v_parms_1(34).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTDISC''))';
    v_parms_1(35).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTARRIVE'')' ;--|| date_mask;
    v_parms_1(36).v_col := 'm.overdimensional';
    v_parms_1(37).v_col := 'm.remark';
    v_parms_1(38).v_col := 'm.remark_detail';
    v_parms_1(39).v_col := 'm.move_description';
    
    
--    v_parms_1(21).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''PO'')';
--    v_parms_1(22).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''VENDOR'')';
--    v_parms_1(23).v_col := 'm.consignee||'' ''||strang.f_getlocdesc(m.consignee_location)||'' ''||strang.f_getlocdesc(m.warehouse_destination)';
--    v_parms_1(24).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''HAZARDOUS'')';
--    v_parms_1(25).v_col := 'm.urgency';
--    v_parms_1(26).v_col := 'strang.f_getlocdesc(m.current_location)';
--    v_parms_1(27).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIP_ID'')';
--    v_parms_1(28).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIPNAME'')';
--    v_parms_1(29).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''VOY'')';
--    v_parms_1(30).v_col := 'm.local_bol';
--    v_parms_1(31).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTLOAD''))';
--    v_parms_1(32).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTDEPART'')' ;--|| date_mask;
--    v_parms_1(33).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTDISC''))';
--    v_parms_1(34).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTARRIVE'')' ;--|| date_mask;
--    v_parms_1(35).v_col := 'm.overdimensional';
--    v_parms_1(36).v_col := 'm.remark';
--    v_parms_1(37).v_col := 'm.remark_detail';
--    v_parms_1(38).v_col := 'm.move_description';

    v_parms_1(1).v_alias := 'Intl Ship ID';
    v_parms_1(2).v_alias := 'Intl Ship';
    v_parms_1(3).v_alias := 'Intl Voy';
    v_parms_1(4).v_alias := 'Intl ETA';
    v_parms_1(5).v_alias := 'Intl Ship Discharge Date';
    v_parms_1(6).v_alias := 'Intl Wharf Transfer Date';
    v_parms_1(7).v_alias := 'Berth#4 Transfer Date';
    v_parms_1(8).v_alias := 'Transfer - Discharge Dates';
    v_parms_1(9).v_alias := 'Days Since Transfer';
    v_parms_1(10).v_alias := 'Customs Cleared Date';
    v_parms_1(11).v_alias := 'PTL Date';
    v_parms_1(12).v_alias := 'Intl Bol';
    v_parms_1(13).v_alias := 'Container';
    v_parms_1(14).v_alias := 'Seal';
    v_parms_1(15).v_alias := 'ISO Container Type';
    v_parms_1(16).v_alias := 'Container Owner';
    v_parms_1(17).v_alias := 'Cargo';
    v_parms_1(18).v_alias := 'Description';
    v_parms_1(19).v_alias := 'Gross Weight in Tonne';
    v_parms_1(20).v_alias := 'Cargo Volume';
    v_parms_1(21).v_alias := 'Purchase Order';
    v_parms_1(22).v_alias := 'Material Number';
    v_parms_1(23).v_alias := 'Vendor';
    v_parms_1(24).v_alias := 'Consignee';
    v_parms_1(25).v_alias := 'Hazardous Codes';
    v_parms_1(26).v_alias := 'Priority';
    v_parms_1(27).v_alias := 'Current Location';
    v_parms_1(28).v_alias := 'Local Ship ID';
    v_parms_1(29).v_alias := 'Local Ship';
    v_parms_1(30).v_alias := 'Local Voyage';
    v_parms_1(31).v_alias := 'Local Bol';
    v_parms_1(32).v_alias := 'Local Port of Loading';
    v_parms_1(33).v_alias := 'Local ETD';
    v_parms_1(34).v_alias := 'Local Port of Discharge';
    v_parms_1(35).v_alias := 'Local ETA';
    v_parms_1(36).v_alias := 'Overdimensional';
    v_parms_1(37).v_alias := 'Shipping Status';
    v_parms_1(38).v_alias := 'Shipping Status - Add. Remarks';
    v_parms_1(39).v_alias := 'Cargo Comments';
    
    
--    v_parms_1(22).v_alias := 'Vendor';
--    v_parms_1(23).v_alias := 'Consignee';
--    v_parms_1(24).v_alias := 'Hazardous Codes';
--    v_parms_1(25).v_alias := 'Priority';
--    v_parms_1(26).v_alias := 'Current Location';
--    v_parms_1(27).v_alias := 'Local Ship ID';
--    v_parms_1(28).v_alias := 'Local Ship';
--    v_parms_1(29).v_alias := 'Local Voyage';
--    v_parms_1(30).v_alias := 'Local Bol';
--    v_parms_1(31).v_alias := 'Local Port of Loading';
--    v_parms_1(32).v_alias := 'Local ETD';
--    v_parms_1(33).v_alias := 'Local Port of Discharge';
--    v_parms_1(34).v_alias := 'Local ETA';
--    v_parms_1(35).v_alias := 'Overdimensional';
--    v_parms_1(36).v_alias := 'Shipping Status';
--    v_parms_1(37).v_alias := 'Shipping Status - Add. Remarks';
--    v_parms_1(38).v_alias := 'Cargo Comments';

    for j in v_parms_1.first..v_parms_1.last loop
     if v_parms_1(j).v_alias is null
      then
       v_parms_1(j).v_alias := replace(substr(v_parms_1(j).v_col, 1, 30), date_mask, '');
     end if;
    end loop;
     
    v_query_1 :=              ' from strang.movements m';
    v_query_1 := v_query_1 || ' where  nvl(m.complete,''S'') NOT IN (''H'',''J'') and m.io=''I'' ';
    v_query_1 := v_query_1 || ' and m.current_location in (select code from strang.lov where lov_name=''LOCATIONS'' and colc = ''MOTUKEA'') ';
    v_query_1 := v_query_1 || ' and m.ship_id in (select s.ship_id from strang.ships_airway s where s.shipname <> ''INBOUND LOCAL SHIPPING ONLY'') ';
  --  v_query_1 := v_query_1 || ' and (( l1.lov_name (+) = ''CTRTYPE'' and l1.code (+) = m.container_type)) ';  -- removed by DB.
    v_query_1 := v_query_1 || ' and NVL(m.movement_type, ''XXXXX'') IN (''CARGO'', ''CONMOV'')';
    v_query_1 := v_query_1 || ' order by m.int_ship_discharge_date desc, m.ship_id, m.movement_no ';
  
  when 'INBOUND: POM IMPORT INTERNATIONAL CARGO - AIR'
   then
    f_name := 'import_cargo_in_pom_air.csv';
    v_parms_1(1).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''SHIP_ID'')';
    v_parms_1(2).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''SHIPNAME'')';
    v_parms_1(3).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''VOY'')';
    v_parms_1(4).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''ESTARRIVE'')';-- || date_mask;
    v_parms_1(5).v_col := 'm.int_ship_discharge_date';
    v_parms_1(6).v_col := 'm.intl_wharf_transfer_date';
    v_parms_1(7).v_col := 'm.berth4_transfer_date';
    v_parms_1(8).v_col := 'trunc(nvl(nvl(m.berth4_transfer_date,nvl(m.intl_wharf_transfer_date,sysdate))-nvl(m.int_ship_discharge_date,sysdate),0))';
    v_parms_1(9).v_col := 'trunc(nvl(sysdate-nvl(m.berth4_transfer_date,nvl(m.intl_wharf_transfer_date,sysdate)),0))';
    v_parms_1(10).v_col := 'm.customs_cleared_date' || date_mask;
    v_parms_1(11).v_col := 'm.ptl_date';
    v_parms_1(12).v_col := 'm.bol';
    v_parms_1(13).v_col := 'm.movement_no';
    v_parms_1(14).v_col := 'm.seal';
    v_parms_1(15).v_col := 'nvl(strang.f_getLovColumn( ''UNCTNTAB'', ''COLA'', m.iso_container_type),m.iso_container_type)';
    v_parms_1(16).v_col := 'm.owner';
    v_parms_1(17).v_col := 'decode(m.iso_container_type,null,''BBULK'',''FCL'') ';
    v_parms_1(18).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''DESCRIPTION'')';
    v_parms_1(19).v_col := 'round((nvl(m.vgm,(nvl(m.sumweight,0)+nvl(m.tare,0)))/1000),3)';
    v_parms_1(20).v_col := 'nvl(m.sumvolume,0)';
    v_parms_1(21).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''PO'')';
    v_parms_1(22).v_col := 'case when m.urgency = ''VMR'' THEN strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''INVENTORYNO'') else null end';
   -- v_parms_1(22).v_col := 'replace(decode(l1.colc,null,substr(strang.f_display_container(m.ship_id,m.bol,m.container_type,''DESCRIPTION''),1,200),l1.colc),''&nbsp'','''') ';
    v_parms_1(23).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''VENDOR'')';
    v_parms_1(24).v_col := 'm.consignee||'' ''||strang.f_getlocdesc(m.consignee_location)||'' ''||strang.f_getlocdesc(m.warehouse_destination)||'' ''||m.warehouse_destination';
    v_parms_1(25).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''HAZARDOUS'')';
    v_parms_1(26).v_col := 'm.urgency';
    v_parms_1(27).v_col := 'strang.f_getlocdesc(m.current_location)';
    v_parms_1(28).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIP_ID'')';
    v_parms_1(29).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIPNAME'')';
    v_parms_1(30).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''VOY'')';
    v_parms_1(31).v_col := 'm.local_bol';
    v_parms_1(32).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTLOAD''))';
    v_parms_1(33).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTDEPART'')' ;--|| date_mask;
    v_parms_1(34).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTDISC''))';
    v_parms_1(35).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTARRIVE'')' ;--|| date_mask;
    v_parms_1(36).v_col := 'm.overdimensional';
    v_parms_1(37).v_col := 'm.remark';
    v_parms_1(38).v_col := 'm.remark_detail';
    v_parms_1(39).v_col := 'm.move_description';
    
    
--    v_parms_1(21).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''PO'')';
--    v_parms_1(22).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''VENDOR'')';
--    v_parms_1(23).v_col := 'm.consignee||'' ''||strang.f_getlocdesc(m.consignee_location)||'' ''||strang.f_getlocdesc(m.warehouse_destination)';
--    v_parms_1(24).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''HAZARDOUS'')';
--    v_parms_1(25).v_col := 'm.urgency';
--    v_parms_1(26).v_col := 'strang.f_getlocdesc(m.current_location)';
--    v_parms_1(27).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIP_ID'')';
--    v_parms_1(28).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIPNAME'')';
--    v_parms_1(29).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''VOY'')';
--    v_parms_1(30).v_col := 'm.local_bol';
--    v_parms_1(31).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTLOAD''))';
--    v_parms_1(32).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTDEPART'')' ;--|| date_mask;
--    v_parms_1(33).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTDISC''))';
--    v_parms_1(34).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTARRIVE'')' ;--|| date_mask;
--    v_parms_1(35).v_col := 'm.overdimensional';
--    v_parms_1(36).v_col := 'm.remark';
--    v_parms_1(37).v_col := 'm.remark_detail';
--    v_parms_1(38).v_col := 'm.move_description';

    v_parms_1(1).v_alias := 'Intl Ship ID';
    v_parms_1(2).v_alias := 'Intl Ship';
    v_parms_1(3).v_alias := 'Intl Voy';
    v_parms_1(4).v_alias := 'Intl ETA';
    v_parms_1(5).v_alias := 'Intl Ship Discharge Date';
    v_parms_1(6).v_alias := 'Intl Wharf Transfer Date';
    v_parms_1(7).v_alias := 'Berth#4 Transfer Date';
    v_parms_1(8).v_alias := 'Transfer - Discharge Dates';
    v_parms_1(9).v_alias := 'Days Since Transfer';
    v_parms_1(10).v_alias := 'Customs Cleared Date';
    v_parms_1(11).v_alias := 'PTL Date';
    v_parms_1(12).v_alias := 'Intl Bol';
    v_parms_1(13).v_alias := 'Container';
    v_parms_1(14).v_alias := 'Seal';
    v_parms_1(15).v_alias := 'ISO Container Type';
    v_parms_1(16).v_alias := 'Container Owner';
    v_parms_1(17).v_alias := 'Cargo';
    v_parms_1(18).v_alias := 'Description';
    v_parms_1(19).v_alias := 'Gross Weight in Tonne';
    v_parms_1(20).v_alias := 'Cargo Volume';
    v_parms_1(21).v_alias := 'Purchase Order';
    v_parms_1(22).v_alias := 'Material Number';
    v_parms_1(23).v_alias := 'Vendor';
    v_parms_1(24).v_alias := 'Consignee';
    v_parms_1(25).v_alias := 'Hazardous Codes';
    v_parms_1(26).v_alias := 'Priority';
    v_parms_1(27).v_alias := 'Current Location';
    v_parms_1(28).v_alias := 'Local Ship ID';
    v_parms_1(29).v_alias := 'Local Ship';
    v_parms_1(30).v_alias := 'Local Voyage';
    v_parms_1(31).v_alias := 'Local Bol';
    v_parms_1(32).v_alias := 'Local Port of Loading';
    v_parms_1(33).v_alias := 'Local ETD';
    v_parms_1(34).v_alias := 'Local Port of Discharge';
    v_parms_1(35).v_alias := 'Local ETA';
    v_parms_1(36).v_alias := 'Overdimensional';
    v_parms_1(37).v_alias := 'Shipping Status';
    v_parms_1(38).v_alias := 'Shipping Status - Add. Remarks';
    v_parms_1(39).v_alias := 'Cargo Comments';
    
    
--    v_parms_1(22).v_alias := 'Vendor';
--    v_parms_1(23).v_alias := 'Consignee';
--    v_parms_1(24).v_alias := 'Hazardous Codes';
--    v_parms_1(25).v_alias := 'Priority';
--    v_parms_1(26).v_alias := 'Current Location';
--    v_parms_1(27).v_alias := 'Local Ship ID';
--    v_parms_1(28).v_alias := 'Local Ship';
--    v_parms_1(29).v_alias := 'Local Voyage';
--    v_parms_1(30).v_alias := 'Local Bol';
--    v_parms_1(31).v_alias := 'Local Port of Loading';
--    v_parms_1(32).v_alias := 'Local ETD';
--    v_parms_1(33).v_alias := 'Local Port of Discharge';
--    v_parms_1(34).v_alias := 'Local ETA';
--    v_parms_1(35).v_alias := 'Overdimensional';
--    v_parms_1(36).v_alias := 'Shipping Status';
--    v_parms_1(37).v_alias := 'Shipping Status - Add. Remarks';
--    v_parms_1(38).v_alias := 'Cargo Comments';

    for j in v_parms_1.first..v_parms_1.last loop
     if v_parms_1(j).v_alias is null
      then
       v_parms_1(j).v_alias := replace(substr(v_parms_1(j).v_col, 1, 30), date_mask, '');
     end if;
    end loop;
     
    v_query_1 :=              ' from strang.movements m';
    v_query_1 := v_query_1 || ' where  nvl(m.complete,''S'') NOT IN (''H'',''J'') and m.io=''I'' ';
    v_query_1 := v_query_1 || ' and m.current_location in (select code from strang.lov where lov_name=''LOCATIONS'' and colc = ''MOTUKEA'') ';
    v_query_1 := v_query_1 || ' and m.ship_id in (select s.ship_id from strang.ships_airway s where s.shipname <> ''INBOUND LOCAL SHIPPING ONLY'') ';
  --  v_query_1 := v_query_1 || ' and (( l1.lov_name (+) = ''CTRTYPE'' and l1.code (+) = m.container_type)) ';  -- ADDED by DB.
    v_query_1 := v_query_1 || ' and NVL(m.movement_type, ''XXXXX'') = ''AIRWAY''';
    v_query_1 := v_query_1 || ' order by m.int_ship_discharge_date desc, m.ship_id, m.movement_no ';

  when 'INBOUND: PROJECT CARGO'
   then
    f_name := 'import_cargo_w131.csv';
    v_parms_1(1).v_col := 'strang.f_getlocdesc(m.current_location)';
    v_parms_1(2).v_col := 'm.movement_no';
    v_parms_1(3).v_col := 'm.seal';
    v_parms_1(4).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''PO'')';
    v_parms_1(5).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''VENDOR'')';
    v_parms_1(6).v_col := 'nvl(strang.f_getLovColumn( ''UNCTNTAB'', ''COLA'', m.iso_container_type),m.iso_container_type)';
    v_parms_1(7).v_col := 'decode(m.iso_container_type,null,''BBULK'',''FCL'') ';
    v_parms_1(8).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''DESCRIPTION'')';
    v_parms_1(9).v_col := 'round((nvl(m.vgm,(nvl(m.sumweight,0)+nvl(m.tare,0)))/1000),3)';
    v_parms_1(10).v_col := 'nvl(m.sumvolume,0)';
    v_parms_1(11).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''HAZARDOUS'')';
    v_parms_1(12).v_col := 'm.urgency';
    v_parms_1(13).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIPNAME'')';
    v_parms_1(14).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''VOY'')';
    v_parms_1(15).v_col := 'm.overdimensional';

    v_parms_1(1).v_alias := 'Current Location';
    v_parms_1(2).v_alias := 'Container';
    v_parms_1(3).v_alias := 'Seal';
    v_parms_1(4).v_alias := 'Purchase Order';
    v_parms_1(5).v_alias := 'Vendor';
    v_parms_1(6).v_alias := 'ISO Container Type';
    v_parms_1(7).v_alias := 'Cargo';
    v_parms_1(8).v_alias := 'Description';
    v_parms_1(9).v_alias := 'Gross Weight (Tonne)';
    v_parms_1(10).v_alias := 'Cargo Volume';
    v_parms_1(11).v_alias := 'Hazardous Codes';
    v_parms_1(12).v_alias := 'Priority';
    v_parms_1(13).v_alias := 'Local Ship';
    v_parms_1(14).v_alias := 'Local Voyage';
    v_parms_1(15).v_alias := 'Overdimensional';

    for j in v_parms_1.first..v_parms_1.last loop
     if v_parms_1(j).v_alias is null
      then
       v_parms_1(j).v_alias := replace(substr(v_parms_1(j).v_col, 1, 30), date_mask, '');
     end if;
    end loop;

    v_query_1 :=              ' from strang.movements m';
    v_query_1 := v_query_1 || ' where (m.warehouse_destination = ''W131'') and m.io=''I'' ';
    v_query_1 := v_query_1 || ' order by 1,2';

  when 'INBOUND: POM LOCAL DELIVERIES'
   then
    f_name := 'deliveries_pom.csv';
 -- Added by David Banjo 27/5/2023
     v_parms_1(1).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''SHIP_ID'')';
    v_parms_1(2).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''SHIPNAME'')';
    v_parms_1(3).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''VOY'')';
    v_parms_1(4).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''I'',''ESTARRIVE'')';-- || date_mask;
    v_parms_1(5).v_col := 'm.int_ship_discharge_date';
    v_parms_1(6).v_col := 'm.intl_wharf_transfer_date';
    v_parms_1(7).v_col := ''' ''';
    v_parms_1(8).v_col := ''' ''';
    v_parms_1(9).v_col := ''' ''';
    v_parms_1(10).v_col := 'm.customs_cleared_date' || date_mask;
    v_parms_1(11).v_col := 'm.ptl_date';
    v_parms_1(12).v_col := 'm.bol';
------------------------------------------------------------------------------ 
    v_parms_1(13).v_col := 'm.movement_no';
    v_parms_1(14).v_col := 'm.seal';
    v_parms_1(15).v_col := 'nvl(strang.f_getLovColumn( ''UNCTNTAB'', ''COLA'', m.iso_container_type),m.iso_container_type)';
    v_parms_1(16).v_col := 'm.owner';
    v_parms_1(17).v_col := 'decode(m.iso_container_type,null,''BBULK'',''FCL'') ';
    v_parms_1(18).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''DESCRIPTION'')';
    v_parms_1(19).v_col := 'round((nvl(m.vgm,(nvl(m.sumweight,0)+nvl(m.tare,0)))/1000),3)';
    v_parms_1(20).v_col := 'nvl(m.sumvolume,0)';
    v_parms_1(21).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''PO'')';
    v_parms_1(22).v_col := 'case when m.urgency = ''VMR'' THEN strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''INVENTORYNO'') else null end'; -- added by DB
    v_parms_1(23).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''VENDOR'')';
    v_parms_1(24).v_col := 'm.consignee||'' ''||strang.f_getlocdesc(m.consignee_location)||'' ''||strang.f_getlocdesc(m.warehouse_destination)||'' ''||m.warehouse_destination';
    v_parms_1(25).v_col := 'strang.f_get_info(m.movement_no,nvl(m.seal,''|''),''HAZARDOUS'')';
    v_parms_1(26).v_col := 'm.urgency';
    v_parms_1(27).v_col := 'strang.f_getlocdesc(m.current_location)';
    v_parms_1(28).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIP_ID'')';  -- added by DB
    v_parms_1(29).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''SHIPNAME'')';
    v_parms_1(30).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''VOY'')';
    v_parms_1(31).v_col := 'm.local_bol';
    v_parms_1(32).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTLOAD''))';
    v_parms_1(33).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTDEPART'')' ;--|| date_mask;
    v_parms_1(34).v_col := 'strang.f_getlocdesc(strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''PORTDISC''))';
    v_parms_1(35).v_col := 'strang.f_getshipfields_mv(m.movement_no,m.seal,''L'',''ESTARRIVE'')' ;--|| date_mask;
    v_parms_1(36).v_col := 'm.overdimensional';
    v_parms_1(37).v_col := 'm.remark';
    v_parms_1(38).v_col := 'm.remark_detail';
    v_parms_1(39).v_col := 'strang.f_storage_days(m.movement_no,m.seal)';   -- moved by DB on 27/5/2023
---------------------------------------------------------------------------------
-- Added by DB on 27/5/2023
    v_parms_1(1).v_alias := 'Intl Ship ID';
    v_parms_1(2).v_alias := 'Intl Ship';
    v_parms_1(3).v_alias := 'Intl Voy';
    v_parms_1(4).v_alias := 'Intl ETA';
    v_parms_1(5).v_alias := 'Intl Ship Discharge Date';
    v_parms_1(6).v_alias := 'Intl Wharf Transfer Date';
    v_parms_1(7).v_alias := 'Berth#4 Transfer Date';
    v_parms_1(8).v_alias := 'Transfer - Discharge Dates';
    v_parms_1(9).v_alias := 'Days Since Transfer';
    v_parms_1(10).v_alias := 'Customs Cleared Date';
    v_parms_1(11).v_alias := 'PTL Date';
    v_parms_1(12).v_alias := 'Intl Bol';
---------------------------------------------------------------------------------------
    v_parms_1(13).v_alias := 'Container';
    v_parms_1(14).v_alias := 'Seal';
    v_parms_1(15).v_alias := 'ISO Container Type';
    v_parms_1(16).v_alias := 'Container Owner';
    v_parms_1(17).v_alias := 'Cargo';
    v_parms_1(18).v_alias := 'Description';
    v_parms_1(19).v_alias := 'Gross Weight in Tonne';
    v_parms_1(20).v_alias := 'Cargo Volume';
    v_parms_1(21).v_alias := 'Purchase Order';
    v_parms_1(22).v_alias := 'Material Number';  -- Added by DB
    v_parms_1(23).v_alias := 'Vendor';
    v_parms_1(24).v_alias := 'Consignee';
    v_parms_1(25).v_alias := 'Hazardous Codes';
    v_parms_1(26).v_alias := 'Priority';
    v_parms_1(27).v_alias := 'Current Location';
    v_parms_1(28).v_alias := 'Local Ship ID';  -- Added by DB
    v_parms_1(29).v_alias := 'Local Ship';
    v_parms_1(30).v_alias := 'Local Voyage';
    v_parms_1(31).v_alias := 'Local Bol';
    v_parms_1(32).v_alias := 'Local Port of Loading';
    v_parms_1(33).v_alias := 'Local ETD';
    v_parms_1(34).v_alias := 'Local Port of Discharge';
    v_parms_1(35).v_alias := 'Local ETA';
    v_parms_1(36).v_alias := 'Overdimensional';
    v_parms_1(37).v_alias := 'Shipping Status';
    v_parms_1(38).v_alias := 'Shipping Status - Add. Remarks';
    v_parms_1(39).v_alias := 'Storage';

    for j in v_parms_1.first..v_parms_1.last loop
     if v_parms_1(j).v_alias is null
      then
       v_parms_1(j).v_alias := replace(substr(v_parms_1(j).v_col, 1, 30), date_mask, '');
     end if;
    end loop;

    v_query_1 :=              ' from strang.movements m';
    v_query_1 := v_query_1 || ' where   m.ship_id = (select s.ship_id from strang.ships_airway s where s.shipname = ''INBOUND LOCAL SHIPPING ONLY'') ';
    v_query_1 := v_query_1 || ' and m.io=''I'' and nvl(m.complete,''S'') not in (''H'',''J'') ';
    v_query_1 := v_query_1 || ' and m.current_location in (select code from strang.lov where lov_name=''LOCATIONS'' and colc = ''MOTUKEA'') ';
    v_query_1 := v_query_1 || ' order by m.int_ship_discharge_date desc, m.ship_id, m.movement_no ';
 -- added by db on 28/5/2021
 when 'CURRENT RECEIPTED PURCHASE ORDERS'
   then 
   f_name := 'receipted_purchase_orders.csv';
   v_parms_1(1).v_col := 'p.deliveryno';
   v_parms_1(2).v_col := 'p.recno';
   v_parms_1(3).v_col := 'p.po';
   v_parms_1(4).v_col := 'p.po_item_no';
   v_parms_1(5).v_col := 'p.inventoryno';
   v_parms_1(6).v_col := 'p.supinv';
   v_parms_1(7).v_col := 'p.sap_delno_qty';
   v_parms_1(8).v_col := 'p.sap_delno_unit';
   v_parms_1(9).v_col := 'p.grn';
   v_parms_1(10).v_col := 'p.off_site_receipt';
   v_parms_1(11).v_col := 'c.customer';
   v_parms_1(12).v_col := 'dr.logno';
   v_parms_1(13).v_col := 'dr.itemno';
   v_parms_1(14).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''WAREHOUSE_DESTINATION'')';
   v_parms_1(15).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''CURRENT_LOCATION'')';
   v_parms_1(16).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''URGENCY'')';
   v_parms_1(17).v_col := 'nvl(p.shipping_text,(decode(dr.sa,''S'',''Pack for Sea Freight'',''A'',''Pack for Air Freight'')))';
   v_parms_1(18).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''MOVEMENT_NO'')';
   v_parms_1(19).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''SEAL'')';
   v_parms_1(20).v_col := 'nvl(to_char(dr.hawb_hawbno),'' '')';
   v_parms_1(21).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''INTL SHIP ID'')';
   v_parms_1(22).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''INTL SHIPNAME'')';
   v_parms_1(23).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''INTL VOYAGE'')';
   v_parms_1(24).v_col := 'to_char(dr.line_no)';
   v_parms_1(25).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''INTL ESTARRIVE'')';
   v_parms_1(26).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''BOL'')';
   v_parms_1(27).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''CUSTOMS_CLEARED_DATE'')';
   v_parms_1(28).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''LOCAL SHIP ID'')';
   v_parms_1(29).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''LOCAL SHIPNAME'')';
   v_parms_1(30).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''LOCAL VOYAGE'')';
   v_parms_1(31).v_col := 'to_char(dr.local_line_no)';
   v_parms_1(32).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''LOCAL BOL'')';
   v_parms_1(33).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''LOCAL ESTARRIVE'')';
   v_parms_1(34).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''SCHEDULED CONVOY'')';
   v_parms_1(35).v_col := 'strang.f_get_info_for_po(p.deliveryno,dr.itemno,''SCHEDULED CONVOY DATE'')';
    v_parms_1(1).v_alias := 'Delivery No';
    v_parms_1(2).v_alias := 'PO Rno';
    v_parms_1(3).v_alias := 'Purchase Order';
    v_parms_1(4).v_alias := 'PO Item No';
    v_parms_1(5).v_alias := 'Material No';
    v_parms_1(6).v_alias := 'Invoice';
    v_parms_1(7).v_alias := 'Quantity';
    v_parms_1(8).v_alias := 'Unit';
    v_parms_1(9).v_alias := 'GRN';
    v_parms_1(10).v_alias := 'Receipted Date';
    v_parms_1(11).v_alias := 'Vendor';
    v_parms_1(12).v_alias := 'Log No';
    v_parms_1(13).v_alias := 'Delivery Item';
    v_parms_1(14).v_alias := 'Warehouse Destination';
    v_parms_1(15).v_alias := 'Current Location';
    v_parms_1(16).v_alias := 'Priority';
    v_parms_1(17).v_alias := 'Mode';
    v_parms_1(18).v_alias := 'Container';
    v_parms_1(19).v_alias := 'Seal';
    v_parms_1(20).v_alias := 'HAWB';
    v_parms_1(21).v_alias := 'Intl Ship ID';
    v_parms_1(22).v_alias := 'Intl Ship/MAWB';
    v_parms_1(23).v_alias := 'Intl Voyage';
    v_parms_1(24).v_alias := 'Intl Line No';
    v_parms_1(25).v_alias := 'Intl ETA';
    v_parms_1(26).v_alias := 'Intl Bol';
    v_parms_1(27).v_alias := 'Customs Cleared Date';
    v_parms_1(28).v_alias := 'Local Ship ID';
    v_parms_1(29).v_alias := 'Local Ship';
    v_parms_1(30).v_alias := 'Local Voyage';
    v_parms_1(31).v_alias := 'Local Line No';
    v_parms_1(32).v_alias := 'Local Bol';
    v_parms_1(33).v_alias := 'Local ETA';
    v_parms_1(34).v_alias := 'Scheduled Convoy';
    v_parms_1(35).v_alias := 'Scheduled Convoy Date';
    for j in v_parms_1.first..v_parms_1.last loop
     if v_parms_1(j).v_alias is null
      then
       v_parms_1(j).v_alias := replace(substr(v_parms_1(j).v_col, 1, 30), date_mask, '');
     end if;
    end loop;
    v_query_1 :=              ' from strang.pos p, strang.detailrs dr, strang.receivals r, strang.customers c ';
    v_query_1 := v_query_1 || ' where p.deliveryno = dr.deliveryno and ';
    v_query_1 := v_query_1 || ' p.deliveryno = r.deliveryno and ';
    v_query_1 := v_query_1 || ' r.cust_customer_id = 1 and ';
    v_query_1 := v_query_1 || ' dr.io = ''I'' and ';
    v_query_1 := v_query_1 || ' p.grn_status in (1,8,9) and ';
    v_query_1 := v_query_1 || ' nvl(r.supplier_customer_id,0) = c.customer_id and ';
 --   v_query_1 := v_query_1 || ' r.currdate >  sysdate - 365 and ';
    v_query_1 := v_query_1 || ' r.currdate >  sysdate - 180 and ';
    v_query_1 := v_query_1 || ' c.customer_type = ''SUPPLIER'' and ';
    v_query_1 := v_query_1 || ' not exists ';
    v_query_1 := v_query_1 || ' ( select  p1.deliveryno ';
    v_query_1 := v_query_1 || ' from strang.pos p1, strang.detailrs dr, strang.receivals r, strang.movements m, strang.lov l1, strang.lov l2 ';
    v_query_1 := v_query_1 || ' where p1.deliveryno = r.deliveryno and ';
    v_query_1 := v_query_1 || ' p1.deliveryno = dr.deliveryno and ';
    v_query_1 := v_query_1 || ' p1.deliveryno = p.deliveryno and ';
    v_query_1 := v_query_1 || ' r.cust_customer_id = 1 and ';
    v_query_1 := v_query_1 || ' dr.io = ''I'' and ';
    v_query_1 := v_query_1 || ' dr.movement_no = m.movement_no and ';
    v_query_1 := v_query_1 || ' nvl(dr.camov_seal,''|'') = nvl(m.seal,''|'') and ';
    v_query_1 := v_query_1 || ' m.warehouse_destination = l1.code and ';
    v_query_1 := v_query_1 || ' l1.lov_name = ''LOCATIONS'' and ';
    v_query_1 := v_query_1 || ' m.current_location = l2.code and ';
    v_query_1 := v_query_1 || ' l2.lov_name = ''LOCATIONS'' and ';
    v_query_1 := v_query_1 || ' l1.colc = l2.colc ) ';
  else
   null;
  end case;

  if v_parms_1.count > 0 and v_query_1 is not null
   then
    if upper(trim(action)) in ('INBOUND: KIUNGA CTRS AWAITING CONVOY','INBOUND: POM CTRS AWAITING LOCAL SHIP','INBOUND: W131 CTRS AWAITING CONVOY','INBOUND: W131 CTRS AWAITING LOCAL SHIP', 'CURRENT RECEIPTED PURCHASE ORDERS') then
     fetch_csv_rows(csv_blob, v_parms_1, v_query_1, v_parms_2, v_query_2, v_union_2, TRUE);
    else
     fetch_csv_rows(csv_blob, v_parms_1, v_query_1, v_parms_2, v_query_2, v_union_2);
    end if;
    if dbms_lob.getlength(csv_blob) = 0
     then
      htp.p('No rows returned');
      -- trac_search(surl, action || ': no data returned');
    else
     htp.prn('Content-type: ' || 'text/csv' || NL_CHAR);
     htp.prn('Content-Disposition: attachment; filename=' || f_name || NL_CHAR);
     htp.prn('Content-Transfer-Encoding: binary' || NL_CHAR);
     htp.prn(NL_CHAR);
     wpg_docload.download_file(csv_blob);
    end if;
  elsif v_query_1 is null
   then
    trac_search(surl, action || ': No SELECT statement provided');
  elsif v_parms_1.count = 0
   then
    trac_search(surl, action || ': No columns defined');
  end if;

 dbms_lob.freetemporary(csv_blob);

exception when others then
 glbx.error_details( 'STRANGP', 'DOWNLOAD_CARGO_CSV', null, null, errmsg=>sqlerrm, extdet=>'');
end download_cargo_csv;

procedure detail_items(surl in varchar2, rid in varchar2, recctr integer, parm in varchar2 default null, msg in varchar2 default null )
as

 -- cursor c2(vrid rowid) is
 --  select rowid, d.*
 --  from   strang.detailrs d
 --  where  rowid = vrid
 --  ;
 cursor c2(vrid rowid) is
  select dl.rowid
       , dl.deliveryno
       , dl.itemno
       , dl.qty
	   , c1.customer CLIENT
  	   , c2.customer SUPPLIER
  	   , p.po PO_NO
  	   , p.supinv INVOICE
  from   strang.receivals r, strang.customers c1, strang.customers c2, strang.detailrs dl, strang.pos p
  where  dl.deliveryno = r.deliveryno
         and p.deliveryno = dl.deliveryno
  	     and c1.customer_id = r.cust_customer_id
  	     and c2.customer_id = r.supplier_customer_id
  	     and dl.rowid=vrid
  ;

 cursor c3(vrid rowid, vitm integer) is
  select di.*
    from strang.detailrs_item di, strang.detailrs d
   where d.rowid = vrid
     and di.deliveryno = d.deliveryno
     and di.item_no = d.itemno
  order  by di.order_by
  ;

 cursor c4(v_aid integer, vdelno integer ) is
  select pr.parameter_name
  from   customer_roles cr, piction_roles pr
  where  1 = 1
   and cr.aid = v_aid
   and cr.role_id = pr.role_id
   and pr.role_type = 'PARAMETER'
   --and pr.role_name like 'BARCODE!_PRINTER!_%' escape '!'
   and REGEXP_LIKE(role_name,'BARCODE[_]PRINTER[_](1|2|3|4|5)')
   and to_number(substr(role_name,17,length(role_name))) < 6
  union all
  select  distinct 'Warehouse Printers'
  from   customer_roles cr, piction_roles pr, main_object mo, main_value mv
  where cr.aid = v_aid
   and  cr.role_id = pr.role_id
   and mo.mid = mv.mid
   and mo.theme_type = 'OKTEDI_WAREHOUSE_PRINTERS'
   and pr.parameter_name = mo.name
   and pr.role_type = 'PARAMETER'
  -- and pr.role_name like 'BARCODE!_PRINTER!_%' escape '!'
   and REGEXP_LIKE(role_name,'BARCODE[_]PRINTER[_](6|7|8|9|10)')
   and exists (select 1
                from strang.pos p, main_object mo1, main_value mv1
               where p.deliveryno = vdelno
                and  mo1.mid = mv1.mid
                and  mv.mid =  mv1.mid
                and  mo1.theme_type = 'OKTEDI_WAREHOUSE_PRINTERS'
                and  'W'||mv1.name_default = ltrim(REGEXP_SUBSTR(p.warehouse_plant ,'(^[DI])?([[:digit:]]{4})?(/[A-Z]{1}[[:digit:]]{3})?',1,1,'i',3),'/')
                and  'W'||mv.name_default = ltrim(REGEXP_SUBSTR(p.warehouse_plant ,'(^[DI])?([[:digit:]]{4})?(/[A-Z]{1}[[:digit:]]{3})?',1,1,'i',3),'/'))
  order  by 1; 
  
 cursor c5(o_name varchar2) is
  select uo.object_name
  from   user_objects uo, piction_roles pr
  where  pr.role_name = o_name
         and pr.role_type = 'PARAMETER'
         and pr.parameter_name = uo.object_name
         and uo.object_type = 'FUNCTION';

 INVALID_RID exception;
 PRAGMA EXCEPTION_INIT(INVALID_RID, -1410);

 c1rec        customer_account%ROWTYPE;
 c2rec        c2%ROWTYPE;
 pfx          THEME%ROWTYPE;
 ltype        varchar2(100);
 stype        integer;
 owner_id     integer;
 sts          varchar2(100);
 vaccess      varchar2(20);
 vste         varchar2(10);
 seclevel     varchar2(100);
 ctr          integer;
 file_error   boolean;
 v_err        varchar2(1000);
 v_api        varchar2(100);

begin
 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.DETAIL_ITEMS' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'DETAIL_ITEMS', null );
 seclevel := oltp.security_role( owner_id );

 begin
 open c2(replace(rid, '~', '+'));
 fetch c2 into c2rec;
 close c2;
 exception
  when INVALID_RID then
   htp.htmlopen;
    htp.header(2,'Detail Item not found, ROWID: ' || replace(rid, '~', '+'), 'CENTER' );
    htp.header(3,'Hit the back button and retry', 'CENTER' );
    htp.header(3,'If problem persists, please contact the administrator', 'CENTER' );
   htp.htmlclose;
   return;
 end;
 -- Check for Saved Files
 file_error := FALSE;
 
 if nvl(parm, 'PRINT') = 'ADD' then
    null;
 else
    if msg is null then
   open c5('STRANG_FILE_CHECK_API');
   fetch c5 into v_api;
   if c5%FOUND
    then
     execute immediate 'begin :v_err := ' || v_api || '(:fname); end;' using in out v_err, c2rec.deliveryno;
	 -- v_err := strang_file_check(c2rec.deliveryno);
   end if;
   close c5;
   if v_err is not null
    then
     file_error := TRUE;
   end if;
 end if;
 end if; 

 htp.p('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"');
 htp.p('"http://www.w3.org/TR/html4/strict.dtd"> ');

 htp.htmlopen;
 htp.headopen;
 htp.p('<TITLE>Dimension Entry Screen</TITLE>');
 htp.p('<link rel="stylesheet" type="text/css" href="/images/str/style.css" />');
 htp.p('<script type="text/javascript" src="/images/js/js_functions.js"></script>');
 if file_error
  then
   htp.p('<script>function StrangFileWarning(){alert("' || replace(v_err, '<br>', '\n') || '");}</script>'); htp.nl;
 end if;
 htp.headclose;

 if file_error
  then
   htp.p('<body onload="StrangFileWarning()">'); htp.nl;
 else
 htp.bodyopen;
 end if;

 htp.p('<CENTER>');
 if nvl(parm, 'PRINT') = 'ADD' then
   htp.header(1,'Add Package Dimensions', 'CENTER' );
   htp.nl;
 else
 htp.header(1,'Label Print', 'CENTER' );
 htp.nl;
 end if;
 if msg is not null
  then
   htp.header(1, msg, cattributes=>'style="color: red;"');
 end if;
 if file_error
 then
    htp.header(1, v_err, cattributes=>'style="color: red;"');
 end if;
 htp.tableopen;
  htp.tablerowopen;
  htp.tabledata('Delivery No: ');
  htp.tabledata(c2rec.deliveryno);
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tabledata('Item No: ');
  htp.tabledata(c2rec.itemno);
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tabledata('Item Qty: ');
  htp.tabledata(c2rec.qty);
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tabledata('Client: ');
  htp.tabledata(c2rec.client);
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tabledata('Supplier: ');
  htp.tabledata(c2rec.supplier);
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tabledata('Invoice: ');
  htp.tabledata(c2rec.invoice);
  htp.tablerowclose;
  htp.tablerowopen;
  htp.tabledata('PO No: ');
  htp.tabledata(c2rec.po_no);
  htp.tablerowclose;
 htp.tableclose;

 htp.nl; htp.nl;
 htp.formopen( 'strangp.detail_items_accept', cattributes=>'name="item_box"' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', rid );
 htp.formhidden( 'RECCTR', recctr );
 htp.formhidden( 'PARM', nvl(parm,'PRINT' ));

 htp.tableopen(cattributes=>'id="DetailItem"');
 htp.tablerowopen;
  htp.p('<TH>Print<br>');
   htp.p('<input type="checkbox" onClick="toggle(this)" checked />');
  htp.p('</TH>');
  htp.tableheader('#');
  htp.tableheader('Pack Type');
  htp.tableheader('Length (cm)');
  htp.tableheader('Width (cm)');
  htp.tableheader('Height (cm)');
  htp.tableheader('Weight (kg)');
  htp.tableheader('SMP');
  htp.tableheader('Movement No');
  htp.tableheader('Seal');
  htp.tableheader('<a href="javascript:;" onclick="insRow_DetailItem(this,''DetailItem'')">[Insert Row]</a>');
 htp.tablerowclose;
 ctr := 0;
 for c3rec in c3(replace(rid, '~', '+'), recctr) loop
  htp.tablerowopen;
   htp.tabledata('<input type="hidden" name="recItm" value="0" />' || htf.formcheckbox( 'recItm', 'T', cattributes=>'CHECKED' ) );
   htp.p('<td>'||c3rec.order_by||'</td>');
   htp.p('<td>');
    htp.formselectopen('PKTPE_PACKTYPE',cattributes=>'onchange="selectOption(this)"');
     if c3rec.pktpe_packtype = 'BAG' then htp.formselectoption('Bag', 'SELECTED', cattributes=>'value="BAG"'); else htp.formselectoption( 'Bag', cattributes=>'value="BAG"'); end if;
     if c3rec.pktpe_packtype = 'BDL' then htp.formselectoption('Bundle', 'SELECTED', cattributes=>'value="BDL"'); else htp.formselectoption( 'Bundle', cattributes=>'value="BDL"'); end if;
     if c3rec.pktpe_packtype = 'CRTE' then htp.formselectoption('Crate', 'SELECTED', cattributes=>'value="CRTE"'); else htp.formselectoption( 'Crate', cattributes=>'value="CRTE"'); end if;
     if c3rec.pktpe_packtype = 'CTN' then htp.formselectoption('Carton', 'SELECTED', cattributes=>'value="CTN"'); else htp.formselectoption( 'Carton', cattributes=>'value="CTN"'); end if;
     -- if c3rec.pktpe_packtype = 'CTNS' then htp.formselectoption('Cartons', 'SELECTED', cattributes=>'value="CTNS"'); else htp.formselectoption( 'Cartons', cattributes=>'value="CTNS"'); end if;
     if c3rec.pktpe_packtype = 'ITEM' then htp.formselectoption('Item', 'SELECTED', cattributes=>'value="ITEM"'); else htp.formselectoption( 'Item', cattributes=>'value="ITEM"'); end if;
     if c3rec.pktpe_packtype = 'PLT' then htp.formselectoption('Pallet', 'SELECTED', cattributes=>'value="PLT"'); else htp.formselectoption( 'Pallet', cattributes=>'value="PLT"'); end if;
     -- if c3rec.pktpe_packtype = 'PLTS' then htp.formselectoption('Pallets', 'SELECTED', cattributes=>'value="PLTS"'); else htp.formselectoption( 'Pallets', cattributes=>'value="PLTS"'); end if;
     if c3rec.pktpe_packtype = 'PCL' then htp.formselectoption('Parcel', 'SELECTED', cattributes=>'value="PCL"'); else htp.formselectoption( 'Parcel', cattributes=>'value="PCL"'); end if;
     if c3rec.pktpe_packtype = 'SKID' then htp.formselectoption('Skid', 'SELECTED', cattributes=>'value="SKID"'); else htp.formselectoption( 'Skid', cattributes=>'value="SKID"'); end if;
     if c3rec.pktpe_packtype = 'TOTE' then htp.formselectoption('Tote', 'SELECTED', cattributes=>'value="TOTE"'); else htp.formselectoption( 'Tote', cattributes=>'value="TOTE"'); end if;
     if c3rec.pktpe_packtype = 'TIE' then htp.formselectoption('Tie', 'SELECTED', cattributes=>'value="TIE"'); else htp.formselectoption( 'Tie', cattributes=>'value="TIE"'); end if;
   htp.formselectclose;
   htp.p('</td>');
   htp.tabledata( htf.formtext('LNGTH', 10, 10, c3rec.lngth));
   htp.tabledata( htf.formtext('WIDTH', 10, 10, c3rec.width));
   htp.tabledata( htf.formtext('HEIGHT', 10, 10, c3rec.height));
   htp.tabledata( htf.formtext('WEIGHT', 10, 10, c3rec.weight));
   htp.tabledata(c3rec.smp_no);
   htp.formhidden( 'SMP', nvl(c3rec.smp_no,' '));
   htp.tabledata(c3rec.movement_no);
   htp.formhidden( 'CONTAINER', nvl(c3rec.movement_no,' '));
   htp.tabledata(c3rec.seal);
   htp.formhidden( 'SEAL', nvl(c3rec.seal,' '));
   htp.formhidden( 'PACKED_BY', nvl(c3rec.packed_by,' '));  -- added by david Banjo
   htp.formhidden( 'PACKED_DATE', nvl(to_char(c3rec.packed_date,'DD-MON-YYYY HH24:MI:SS'),' '));  -- added by david Banjo  TO_CHAR(tsltz_col, 'DD-MON-YYYY HH24:MI:SS)
   htp.tabledata('<a href="javascript:;" onclick="cloneRow(''DetailItem'', this)">[Copy]</a><a href="javascript:;" onclick="deleteRow(''DetailItem'', this)">[Delete]</a>');
  htp.tablerowclose;
  ctr := ctr + 1;
 end loop;
 htp.tableclose;
 htp.nl;

if nvl(parm,'PRINT') <> 'ADD' then
   for c4rec in c4(c1rec.aid, c2rec.deliveryno  ) loop
  htp.p('<INPUT TYPE="button" NAME="action" VALUE="Print on ' || initcap (replace(c4rec.parameter_name, '_', ' ')) || '" onClick="validateItems(this.form, ''' || c4rec.parameter_name || ''')">');
 end loop;
end if;
 htp.p('<INPUT TYPE="button" NAME="action" VALUE="Update" onClick="validateItems(this.form, ''Update'')">');
 htp.formsubmit('action','Back');
 htp.formsubmit('action','Cancel');

 htp.p('</CENTER>');

 htp.formclose;
 htp.bodyclose;
 htp.htmlclose;
 return;

 exception
  when others then
  htp.p('Error: ' || sqlerrm);
end detail_items;

procedure detail_items_accept(  surl in varchar2
                               , rid in varchar2
							   , recctr integer
							   , recItm in owa.vc_arr default glbx.empty_array
							   , pktpe_packtype in owa.vc_arr default glbx.empty_array
							   , lngth in owa.vc_arr default glbx.empty_array
							   , width in owa.vc_arr default glbx.empty_array
							   , height in owa.vc_arr default glbx.empty_array
							   , weight in owa.vc_arr default glbx.empty_array
							   , smp in owa.vc_arr default glbx.empty_array
							   , container in owa.vc_arr default glbx.empty_array
							   , seal in owa.vc_arr default glbx.empty_array
							   , packed_date in owa.vc_arr default glbx.empty_array
                               , packed_by in owa.vc_arr default glbx.empty_array
							   , action in varchar2
							   , parm in varchar2 default null
							   )
 as

 cursor c2(vrid rowid) is
  select dl.deliveryno
       , dl.itemno
       , dl.warehouse
	   , c1.customer CLIENT
  	   , c2.customer SUPPLIER
  	   , p.po PO_NO
  	   , p.supinv INVOICE
  from   strang.receivals r, strang.customers c1, strang.customers c2, strang.detailrs dl, strang.pos p
  where  dl.deliveryno = r.deliveryno
         and p.deliveryno = dl.deliveryno
  	     and c1.customer_id = r.cust_customer_id
  	     and c2.customer_id = r.supplier_customer_id
  	     and dl.rowid=vrid
  ;
 cursor c3(v_aid integer, vprt varchar2) is
  select pr.*
  from   customer_roles cr, piction_roles pr
  where  1 = 1
         and cr.aid = v_aid
         and cr.role_id = pr.role_id
         and pr.role_type = 'PARAMETER'
         and pr.role_name like 'BARCODE!_PRINTER!_%' escape '!'
		 and pr.parameter_name = vprt
  ;

 cursor c4(vdir varchar2) is
  select * from all_directories where upper(directory_path) = vdir;
  
  cursor c5(vrid rowid) is
  select max(di.movement_no) movement_no , max(di.seal) seal, max(di.smp_no) smp_no
    from strang.detailrs dl, strang.detailrs_item di
   where dl.deliveryno = di.deliveryno
     and dl.itemno = di.item_no
     and dl.rowid = vrid;

  cursor c6(vmovid varchar2, vseal varchar2) is
  select m.rowid as rid, movement_no, seal, container_type, movement_type, io
    from strang.movements m 
   where m.movement_no = vmovid 
     and nvl(m.seal,'|') = nvl(vseal,'|') ;

 cursor c7(smp varchar2) is
  select rowid rid 
   from strang.smp 
  where upper(smp) = upper(smp_no);

cursor c8( sname varchar2 ) is select screen_id from oltp_overview where screen_name = sname;
 cursor c9(v_aid integer, vdelno integer) is
  select distinct pr.parameter_name, pr.parameter_value, mv.name_default, mo.name 
  from   customer_roles cr, piction_roles pr, main_object mo, main_value mv
  where cr.aid = v_aid
   and cr.role_id = pr.role_id
   and mo.mid = mv.mid
   and mo.theme_type = 'OKTEDI_WAREHOUSE_PRINTERS'
   and pr.parameter_name = mo.name
   and pr.role_type = 'PARAMETER'
   and pr.role_name like 'BARCODE!_PRINTER!_%' escape '!'
   and exists (select 1
                from strang.pos p, main_object mo1, main_value mv1
               where p.deliveryno = vdelno
                 and mo1.mid = mv1.mid
                 and mv.mid = mv1.mid
                 and mo1.theme_type = 'OKTEDI_WAREHOUSE_PRINTERS'
                 and 'W'||mv1.name_default = ltrim(REGEXP_SUBSTR(p.warehouse_plant ,'(^[DI])?([[:digit:]]{4})?(/[A-Z]{1}[[:digit:]]{3})?',1,1,'i',3),'/')
                 and 'W'||mv.name_default = ltrim(REGEXP_SUBSTR(p.warehouse_plant ,'(^[DI])?([[:digit:]]{4})?(/[A-Z]{1}[[:digit:]]{3})?',1,1,'i',3),'/')
                 ) 
  order  by parameter_name;
  
  
   cursor c10(vdelno integer, p_warehouse varchar2) is
   select count(distinct preq_no) cnt,
          max(preq_no) preq_no
    from  strang.pos p
   where  p.deliveryno = vdelno
    and   ltrim(REGEXP_SUBSTR(p.warehouse_plant ,'(^[DI])?([[:digit:]]{4})?(/[A-Z]{1}[[:digit:]]{3})?',1,1,'i',3),'/') = 'W'||p_warehouse
    and   p.warehouse_plant is not null;

 INVALID_RID exception;
 PRAGMA EXCEPTION_INIT(INVALID_RID, -1410);

 c1rec        customer_account%ROWTYPE;
 c2rec        c2%ROWTYPE;
 c3rec        c3%ROWTYPE;
 c4rec        c4%ROWTYPE;
 c5rec        c5%ROWTYPE;
 c6rec        c6%ROWTYPE;
 c7rec        c7%ROWTYPE;
 c8rec        c8%ROWTYPE;
 c10rec       c10%ROWTYPE;
 itmrec       strang.detailrs_item%ROWTYPE;
 f            utl_file.file_type;
 v_file       varchar2(100);

 pfx          THEME%ROWTYPE;
 ltype        varchar2(100);
 stype        integer;
 owner_id     integer;
 sts          varchar2(100);
 vaccess      varchar2(20);
 vste         varchar2(10);
 seclevel     varchar2(100);

 msg          varchar2(1000);
 itm_ctr      integer;
 stp          varchar2(100);
 v_recitm     owa.vc_arr;
 v_buf        varchar2(32000);
 print_ok     boolean;
 v_dir        varchar2(1000);
 tot_wt       number;
 tot_l        number;
 tot_w        number;
 tot_h        number;
 tot_v        number;
 vqty         integer := 0;
 v_preq_no    varchar2(50);

 begin

 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.DETAIL_ITEMS' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'DETAIL_ITEMS', null );
 seclevel := oltp.security_role( owner_id );

 open c8( 'Receival' );
 fetch c8 into c8rec;
 close c8;

 case upper(action)
 when 'CANCEL'
  then
   if NVL(parm,'PRINT') = 'ADD' then
      receive(surl, rid, scid=>c8rec.screen_id, call_name=>null, parm=>'DETAILRS', access_id=>'x', msg=>'Add Dimensions Cancelled', vrecctr=>recctr );
   else
   receive(surl, rid, scid=>c8rec.screen_id, call_name=>null, parm=>'DETAILRS', access_id=>'x', msg=>'Label Printing Cancelled', vrecctr=>recctr );
   end if;
   return;
 when 'BACK'
  then
   receive(surl, rid, scid=>c8rec.screen_id, call_name=>null, parm=>'DETAILRS', access_id=>'x', msg=>NULL, vrecctr=>recctr );
   return;
 else null;
 end case;

begin
 open c2(replace(rid, '~', '+'));
 fetch c2 into c2rec;
 close c2;
 exception
  when INVALID_RID then
   htp.htmlopen;
    htp.header(2,'Detail Item not found, ROWID: ' || replace(rid, '~', '+'), 'CENTER' );
    htp.header(3,'Hit the back button and retry', 'CENTER' );
    htp.header(3,'If problem persists, please contact the administrator', 'CENTER' );
   htp.htmlclose;
   return;
 end;
 
-- Added by David Banjo
 open c5 (replace(rid, '~', '+'));
 fetch c5 into c5rec;
 close c5;

 itm_ctr := 0;
 print_ok := FALSE;
 tot_wt := 0;
 tot_l := 0;
 tot_w := 0;
 tot_h := 0;
 tot_v := 0;

 if recitm.count > 1
  then
   for j in recitm.first..recitm.last-1 loop
	if recitm(j) = '0' and recitm(j + 1) <> '0'
	 then
	  itm_ctr := itm_ctr + 1; v_recitm(itm_ctr) := recitm(j + 1);
	  if v_recitm(itm_ctr) = 'T' then print_ok := TRUE; end if;
	elsif recitm(j) = '0'
	 then
	  itm_ctr := itm_ctr + 1; v_recitm(itm_ctr) := 'F';
	end if;
   end loop;
   if recitm(recitm.last) = '0'
    then
	 itm_ctr := itm_ctr + 1;
	 v_recitm(itm_ctr) := 'F';
   end if;
 elsif recitm.count = 1
  then
   v_recitm(1) := 'F';
 end if;

 delete from strang.detailrs_item where deliveryno = c2rec.deliveryno and item_no = c2rec.itemno;
 if v_recitm.count > 0
  then
   for j in v_recitm.first..v_recitm.last loop
    itmrec := null;
    itmrec.deliveryno := c2rec.deliveryno;
    itmrec.item_no := c2rec.itemno;
    itmrec.pktpe_packtype := pktpe_packtype(j);
    itmrec.smp_no :=  replace(smp(j),' ',null);
    itmrec.movement_no := replace(container(j),' ',null);
    itmrec.seal := replace(seal(j),' ',null);
    itmrec.packed_date := TO_DATE(replace(packed_date(j),' ',null),'DD-MON-YYYY HH24:MI:SS');
    itmrec.packed_by := replace(packed_by(j),' ',null);
    itmrec.lngth := lngth(j);
	tot_l := tot_l + nvl(glbx.guess_number(lngth(j)), 0);
    itmrec.width := width(j);
	tot_w := tot_w + nvl(glbx.guess_number(width(j)), 0);
    itmrec.height := height(j);
	tot_h := tot_h + nvl(glbx.guess_number(height(j)), 0);
    itmrec.weight := ceil(weight(j)); -- Added by David Banjo 13/6/2022
    itmrec.modified_by := c1rec.username;
    itmrec.modified_date := sysdate;
	tot_wt := tot_wt + ceil(nvl(glbx.guess_number(weight(j)), 0)); -- Added by David Banjo 13/6/2022
	tot_v := tot_v + (nvl(glbx.guess_number(lngth(j)), 0)/100)*(nvl(glbx.guess_number(width(j)), 0)/100)*( nvl(glbx.guess_number(height(j)), 0)/100);
    itmrec.order_by := j;
    vqty := j;
    glbx.dbg('I am in the detailrs loop');
    if nvl(glbx.guess_number(lngth(j)), 0) > 1000 or nvl(glbx.guess_number(width(j)), 0) > 1000 or  nvl(glbx.guess_number(height(j)), 0) > 1000 then
       msg:= 'Unit '||j||' is very large! Please check measurements again.';  
    end if;
    
    insert into strang.detailrs_item values itmrec;
   end loop;
 end if;

 update strang.detailrs
 set    partvolume = tot_v
 --   , lngth = tot_l/100
 --   , width = tot_w/100
 --   , height = tot_h/100
	  , partweight = tot_wt
	  , dim_calc_qty = itm_ctr
	  , qty = case when vqty > 0 then vqty else qty end
 where  rowid = replace(rid, '~', '+')
 ;
 -- clear movement_no if packing units not complete
 update strang.detailrs dr
    set movement_no = null, camov_seal = null
  where exists (select 'x'
                 from strang.detailrs_item di
                  where di.deliveryno = dr.deliveryno
                    and di.item_no   = dr.itemno 
                    and di.movement_no is null)
     and rowid = replace(rid, '~', '+')	;
 -- clear smp_no if packing units not complete
  update strang.detailrs dr
    set smp_no = null
  where exists (select 'x'
                 from strang.detailrs_item di
                  where di.deliveryno = dr.deliveryno
                    and di.item_no   = dr.itemno 
                    and di.smp_no is null)
     and rowid = replace(rid, '~', '+')	;
 commit;
 
  -- add movement_no if packing units now complete
 if c5rec.movement_no is not null then
   update strang.detailrs dr
    set movement_no = c5rec.movement_no, camov_seal = c5rec.seal
  where not exists (select 'x'
                 from strang.detailrs_item di
                  where di.deliveryno = dr.deliveryno
                    and di.item_no   = dr.itemno 
                    and di.movement_no is null)
     and rowid = replace(rid, '~', '+')	;
 
  end if;

   -- add smp_no if packing units now complete
 if c5rec.smp_no is not null then
    update strang.detailrs dr
    set smp_no = c5rec.smp_no
     where not exists (select 'x'
                 from strang.detailrs_item di
                  where di.deliveryno = dr.deliveryno
                    and di.item_no   = dr.itemno 
                    and di.smp_no is null)
     and rowid = replace(rid, '~', '+')	;
   end if;   
 commit;

 if c5rec.movement_no is not null then
     open c6(c5rec.movement_no,c5rec.seal);
     fetch c6 into c6rec;
       if c6%found then
          strangp.recalc_weight(  c6rec.movement_no, c6rec.container_type, c6rec.seal, c6rec.movement_type, c6rec.rid );
       end if;
     close c6;
  end if;
  
  if c5rec.smp_no is not null then
    open c7(c5rec.smp_no);
     fetch c7 into c7rec;
       if c7%found then
          strangp.recalc_weight_smp( c7rec.rid, null);
       end if;
     close c7;
  end if;


 if upper(action) like 'PRINT%' and upper(action) not like '%WAREHOUSE%'  and  print_ok                     ---- Modified by David Banjo on 11/08/2023.
  then
 --  v_buf := 'DEL_NO,PACKAGE_TYPE,CLIENT,SUPPLIER,DIMMS_L,DIMMS_W,DIMMS_H,PO_NO,INVOICE,WEIGHT,LABEL_NO';
   v_buf := 'DEL_NO,ITEM_NO,PACKAGE_TYPE,CLIENT,SUPPLIER,DIMMS_L,DIMMS_W,DIMMS_H,PO_NO,INVOICE,WEIGHT,UNIT_NO,LABEL_NO,WAREHOUSE';
   itm_ctr := 0;
   for j in v_recitm.first..v_recitm.last loop
    if v_recitm(j) = 'T'
	 then
	  v_buf := v_buf || chr(10) || '"' || c2rec.deliveryno
	                 || '","' || c2rec.itemno
	  	             || '","' || pktpe_packtype(j)
	  	             || '","' || c2rec.client
	  	             || '","' || c2rec.supplier
	  	             || '","' || lngth(j)
	  	             || '","' || width(j)
	  	             || '","' || height(j)
	  	             || '","' || c2rec.po_no
	  	             || '","' || c2rec.invoice
	  	             || '","' || weight(j)
	  	             || '","' || j
	  	             || '","' || j || ' of ' || v_recitm.count
	  	             || '","' ||c2rec.warehouse
	  	             || '"';
      itm_ctr := itm_ctr + 1;
	end if;
   end loop;
   open c3(c1rec.aid, action);
   fetch c3 into c3rec;
   if c3%NOTFOUND
    then
	 print_ok := FALSE;
   end if;
   close c3;
   if print_ok
    then
-- $IF DBMS_DB_VERSION.VER_LE_12_1 $THEN
     v_dir := c3rec.parameter_value;
-- $ELSE
--      open c4(c3rec.parameter_value);
-- 	 fetch c4 into c4rec;
-- 	 if c4%FOUND
-- 	  then
-- 	   v_dir := c4rec.directory_name;
-- 	 else
-- 	   v_dir := c3rec.role_name;
-- 	   execute immediate ' create or replace directory ' || v_dir || ' as ''' || c3rec.parameter_value || '''';
-- 	 end if;
--      close c4;
-- $END
	 v_file := c2rec.deliveryno || '_' || to_char(sysdate, 'yyyy_mm_dd_hhmiss') || '.csv';
	 f := utl_file.fopen(v_dir, v_file, 'w', 32767);
	 utl_file.put(f, v_buf);
	 utl_file.fclose(f);
 	 msg := itm_ctr || ' label' || (case when itm_ctr <> 1 then 's' end) ||' printed on ' || c3rec.parameter_name;
 	 -- msg := itm_ctr || ' label' || (case when itm_ctr <> 1 then 's' end) ||' printed on ' || c3rec.parameter_name || '<br>File: ' || v_dir || '\' || v_file;
   else
     msg := 'Printer not found: ' || action;
   end if;
 elsif upper(action) like '%WAREHOUSE%' and  print_ok -- Added by DB on 11/8/2023
  then 
   for c9rec in c9(c1rec.aid, c2rec.deliveryno ) loop
      open c10( c2rec.deliveryno, c9rec.name_default);
      fetch c10 into c10rec;
      close c10;
      if c10rec.cnt = 1 then
        v_preq_no := c10rec.preq_no;
      else  
        v_preq_no := ' ';
      end if;
      itm_ctr := 0;
      v_buf := 'DEL_NO,ITEM_NO,PACKAGE_TYPE,PO_NO,UNIT_NO,LABEL_NO,WAREHOUSE,PREQ_NO';
      for j in v_recitm.first..v_recitm.last loop
         if v_recitm(j) = 'T' then
	        v_buf := v_buf || chr(10) || '"' || c2rec.deliveryno
	                 || '","' || c2rec.itemno
	  	             || '","' || pktpe_packtype(j)
	  	             || '","' || c2rec.po_no
	  	             || '","' || j
	  	             || '","' || j || ' of ' || v_recitm.count
	  	             || '","' ||CASE WHEN c9rec.name_default is not null then 'W'||c9rec.name_default ELSE ' ' end
	  	             || '","' || nvl(v_preq_no, ' ')
	  	             || '"';
             itm_ctr := itm_ctr + 1;
	     end if;
	   v_preq_no := null;
      end loop;
      open c3(c1rec.aid, c9rec.parameter_name);
      fetch c3 into c3rec;
      if c3%NOTFOUND then
	     print_ok := FALSE;
      end if;
      close c3;
      if print_ok then
         v_dir := c3rec.parameter_value;
	     v_file := c2rec.deliveryno || '_' || to_char(sysdate, 'yyyy_mm_dd_hhmiss') || '.csv';
	     f := utl_file.fopen(v_dir, v_file, 'w', 32767);
	     utl_file.put(f, v_buf);
	     utl_file.fclose(f);
 	     --msg :=  itm_ctr || ' label' || (case when itm_ctr <> 1 then 's' end) ||' printed on ' || c3rec.parameter_name;
 	     msg :=  nvl(msg,'')||itm_ctr || ' warehouse label' || (case when itm_ctr <> 1 then 's' end) ||' printed on ' || c3rec.parameter_name||htf.nl;
      else
         msg := nvl(msg,'')||'Printer not found: ' || c9rec.parameter_name||htf.nl;
      end if;
   end loop;
 elsif upper(action) like 'PRINT%' and not print_ok
  then
   msg := '0 labels printed<br>' || v_recitm.count || ' record' || (case when v_recitm.count <> 1 then 's' end) || ' saved' ;
 else
   if v_recitm.count > 0
    then
     msg := (case when msg is not null then msg ||htf.nl else '' end) ||v_recitm.count || ' record' || (case when v_recitm.count <> 1 then 's' end) || ' saved';
   else
     msg := 'All records deleted';
   end if;
 end if;

 detail_items(surl, rid, recctr, parm, msg);
 return;

exception when others then
 utl_file.fclose_all;
 rollback;
 msg := 'Error: ' || sqlerrm;
 detail_items(surl, rid, recctr, msg);
end detail_items_accept;

procedure load_files(surl in varchar2, rid in varchar2, vtyp varchar2 default 'INVOICE', msg in varchar2 default null) as

 cursor c2(vrid rowid) is
  select r.*
  from   strang.receivals r
  where  r.rowid = vrid
  ;

 cursor c3 is
  select mo.name, mv.name_default
  from   main_object mo, main_value mv
  where  mo.mid = mv.mid
         and mo.theme_type = 'STRANG_RECEIVALS_FOLDERS'
  ;

 INVALID_RID exception;
 PRAGMA EXCEPTION_INIT(INVALID_RID, -1410);

 c1rec        customer_account%ROWTYPE;
 c2rec        c2%ROWTYPE;
 pfx          THEME%ROWTYPE;
 ltype        varchar2(100);
 stype        integer;
 owner_id     integer;
 sts          varchar2(100);
 vaccess      varchar2(20);
 vste         varchar2(10);
 seclevel     varchar2(100);

 v_url        varchar2(1000);
 file_types   CONSTANT varchar2(1000) := '.pdf,image/x-png,image/gif,image/jpeg,.csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel';

begin
 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.LOAD_FILES' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'LOAD_FILES', null );
 seclevel := oltp.security_role( owner_id );

 begin
 open c2(replace(rid, '~', '+'));
 fetch c2 into c2rec;
 close c2;
 exception
  when INVALID_RID then
   htp.htmlopen;
    htp.headopen;
     htp.p('<link rel="stylesheet" type="text/css" href="/images/str/style.css" />');
    htp.headclose;
	htp.bodyopen;
     htp.header(2,'Receival Item not found, ROWID: ' || replace(rid, '~', '+'), 'CENTER' );
     htp.header(3,'Please close this window and retry', 'CENTER' );
     htp.header(3,'If problem persists, please contact the administrator', 'CENTER' );
     htp.center(htf.bold('<a href="" onClick="self.close()">[Close Window]</a>'));
	htp.bodyclose;
   htp.htmlclose;
   return;
 end;

 htp.htmlopen;

 htp.headopen;
 htp.p('<link rel="stylesheet" type="text/css" href="/images/str/style.css" />');
 htp.headclose;

 htp.bodyopen;
  htp.p('<CENTER>');
  htp.header(1,'Load Files', 'CENTER' );
  v_url := htf.anchor( 'javascript: window.open(''' || '/' || glbx.extract_master_parameter('APACHE_RECEIVALS_DIR') || '/' || c2rec.deliveryno || '/'  || ''',''' || 'vtyp' || ''',''height=800,width=600,scrollbars=yes,resizable=yes'');void('''');', c2rec.deliveryno );
  htp.header(2,'Delivery Number:  ' ||v_url, 'CENTER' );
  htp.nl;

  if msg is not null
   then
    htp.header(1, msg, cattributes=>'style="color: red;"');
  end if;
  htp.formopen('strangp.load_files_accept', 'POST', null, 'multipart/form-data');
  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'RID', rid );
  -- htp.formhidden( 'RECCTR', recctr );
  htp.formhidden( 'VTYP', vtyp );
  htp.tableopen;
   for c3rec in c3 loop
   v_url := htf.anchor( 'javascript: window.open(''' || '/' || glbx.extract_master_parameter('APACHE_RECEIVALS_DIR') || '/' || c2rec.deliveryno || '/'  || c3rec.name || '/' || ''',''' || 'vtyp' || ''',''height=800,width=600,scrollbars=yes,resizable=yes'');void('''');', 'Listing' );
   htp.tablerowopen;
    if c3%ROWCOUNT = 1
	 then
	  htp.tabledata(htf.formfile('infile', file_types, 'multiple'));
	else
      htp.tabledata('&nbsp;');
	end if;
	htp.tabledata(htf.formsubmit('action', 'Load into ' || c3rec.name_default));
	htp.tabledata(v_url);
   htp.tablerowclose;
   end loop;
  htp.tableclose;

  htp.formclose;
  htp.bold('<a href="" onClick="self.close()">[Close Window]</a>');
  htp.p('</CENTER>');

 htp.bodyclose;
 htp.htmlclose;
end load_files;

-- entire procedure added by mchannon 28/05/2020
procedure load_files_accept(surl in varchar2, rid in varchar2, vtyp varchar2, infile owa.vc_arr, action varchar2) as

cursor c2(vrid rowid) is
 select r.*
 from   strang.receivals r
 where  r.rowid = vrid
 ;

cursor c3(v_file varchar2) is select * from apache_ows_content where name = v_file;

INVALID_RID exception;
PRAGMA EXCEPTION_INIT(INVALID_RID, -1410);

c1rec         customer_account%ROWTYPE;
c2rec         c2%ROWTYPE;
c3rec         c3%ROWTYPE;
status        number;
deliveryno    number := 123456;
v_dir         varchar2(64);
v_file        varchar2(1000);

pfx           THEME%ROWTYPE;
ltype         varchar2(100);
stype         integer;
owner_id      integer;
sts           varchar2(100);
vaccess       varchar2(20);
vste          varchar2(10);
seclevel      varchar2(100);
chkval        varchar2(1000);
msg           varchar2(1000);
-- added by DB on 25/3/2022
 f             utl_file.file_type;
 jobno         NUMBER;
 qpdf_path     CONSTANT VARCHAR2(100) := 'C:\Program Files\qpdf';     
 qpdf_prog     CONSTANT VARCHAR2(100) := 'qpdf';
 work_dir      VARCHAR2(1000);
 work_file     VARCHAR2(1000);


-- Start inline functions
function check_file_name(v_name varchar2, v_del varchar2, v_type varchar2) return varchar2 is
begin
 case v_type
 when 'INVOICE' then
  if upper(v_name) <> upper(v_del || '_INVOICE.PDF')
   then
    return('Invoice attachment must be named ' || v_del || '_invoice.pdf. File not loaded');
  else
    return(null);
  end if;
 when 'MO41' then
  if upper(v_name) <> upper(v_del || '_MO41.PDF')
   then
    return('MO41 attachment must be named ' || v_del || '_MO41.pdf. File not loaded');
  else
    return(null);
  end if;
 when 'MSDS' then
  if upper(v_name) <> upper(v_del || '_MSDS.PDF')
   then
    return('MSDS attachment must be named ' || v_del || '_MSDS.pdf. File not loaded');
  else
    return(null);
  end if;
 else return(null);
 end case;
 return(null);
exception when others then return(null);
end check_file_name;
-- End inline functions

begin

 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.DETAIL_ITEMS' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'DETAIL_ITEMS', null );
 seclevel := oltp.security_role( owner_id );


 begin
 open c2(replace(rid, '~', '+'));
 fetch c2 into c2rec;
 close c2;
 exception
  when INVALID_RID then
   htp.htmlopen;
    htp.headopen;
     htp.p('<link rel="stylesheet" type="text/css" href="/images/str/style.css" />');
    htp.headclose;
	htp.bodyopen;
     htp.header(2,'Receival Item not found, ROWID: ' || replace(rid, '~', '+'), 'CENTER' );
     htp.header(3,'Please close this window and retry', 'CENTER' );
     htp.header(3,'If problem persists, please contact the administrator', 'CENTER' );
     htp.center(htf.bold('<a href="" onClick="self.close()">[Close Window]</a>'));
	htp.bodyclose;
   htp.htmlclose;
   return;
 end;
 if infile.count < 1
  then
   load_files(surl, rid, vtyp, 'No Files Selected');
 end if;

 if upper (action) not like 'LOAD INTO%'
  then
   load_files(surl, rid, vtyp, 'Invalid action: ' || action);
 end if;

 for j in infile.first..infile.last loop
  open c3(infile(j));
  fetch c3 into c3rec;
  if c3%FOUND
   then
    v_dir := glbx.extract_master_parameter('STRANG_RECEIVALS_DIR') || decs.UNIX_OR_NT || c2rec.deliveryno || decs.UNIX_OR_NT || trim(replace(upper(action), 'LOAD INTO', ''));
	v_file :=  glbx.extract_fname(c3rec.name, 'FILE');
	chkval := check_file_name(v_file, c2rec.deliveryno, trim(replace(upper(action), 'LOAD INTO', '')));
    if chkval is not null
	 then
	  msg := msg || chkval || '<br>';
	else
      if utl_os.mkdir(v_dir) then null; end if;
      utl_blob.blobtofile(c3rec.blob_content, v_dir || decs.UNIX_OR_NT || v_file, FALSE);
	  if file_exists(v_dir, v_file)
	   then
	    msg := msg || 'File saved: ' || v_file || '<br>';
	    	    -- start_here
	    if upper(glbx.extract_fname(v_file, 'SUFFIX', 100)) = 'PDF' then
	       select strang.s_decrypt_pdf.nextval into jobno from dual;
	       work_dir := nvl(glbx.extract_master_parameter('WORK_DIRECTORY'), 'c:\temp');
           work_file := 'batch_' || jobno || '.bat';
           f := utl_file.fopen(work_dir, work_file, 'w', 32700);
           utl_file.put_line(f, '@echo off', TRUE);
           utl_file.put_line(f, 'set PATH=%PATH%;' || qpdf_path, TRUE);
           utl_file.put_line(f, qpdf_prog||' --decrypt '||v_dir || decs.UNIX_OR_NT || v_file||' '||v_dir || decs.UNIX_OR_NT || v_file||'.tmp');
           utl_file.put_line(f, 'del '||v_dir || decs.UNIX_OR_NT || v_file);
           utl_file.put_line(f, 'ren '||v_dir ||decs.UNIX_OR_NT || v_file||'.tmp '|| v_file);
           utl_file.put_line(f, 'exit', TRUE);
           utl_file.fclose(f);
           begin utl_os.OsCmdDirectWait(work_dir || decs.UNIX_OR_NT || work_file); exception when others then null; end;
           if utl_os.delete_file(work_dir || decs.UNIX_OR_NT || work_file) then null;  end if;
	    
	    end if;
      else
	    msg := msg || 'File NOT saved: ' || v_file || '<br>';
	  end if;
	end if;
  end if;
  close c3;
 delete from apache_ows_content where name = infile(j); commit;
 end loop;
 load_files(surl, rid, vtyp, msg);
exception when others then
 htp.bold('Error: ' || sqlerrm);
end load_files_accept;

function http_file_listing(u_target varchar2, file_list in out glbx.myarray) return integer
as

p_url         varchar2(1000);
pieces        utl_http.html_pieces;
c_delim_s     CONSTANT varchar2(1000) := '<td><a href="';
c_delim_e     CONSTANT varchar2(1000) := '</a></td>';
v_buf         varchar2(4000);
clb           clob;
is_empty      boolean;
x             integer;
y             integer;
ctr           integer;
file_ctr      integer;
stp           varchar2(100);

begin

 p_url := 'http' || (case when nvl(upper(owa_util.get_cgi_env('HTTPS')), 'OFF') = 'ON' then 's' end) || '://' || owa_util.get_cgi_env('SERVER_NAME')|| ':' || owa_util.get_cgi_env( 'SERVER_PORT' ) || '/' || u_target;
 file_ctr := 0;

 pieces := utl_http.request_pieces( p_url );
 dbms_lob.createtemporary( clb, TRUE );
 stp := 'A';
 is_empty := FALSE;
 for j in pieces.first..pieces.last loop
  if length(pieces(j)) > 0
   then
    if upper(pieces(j)) like '%<!--ERROR-->%'
	 then
	  is_empty := TRUE;
	  exit;
	end if;
	pieces(j) := regexp_replace(pieces(j), '(>)([[:blank:]]+)([^[:blank:]]*)', '\1\3');
	-- htp.p(pieces(j));
	dbms_lob.writeappend(clb,length(pieces(j)),pieces(j));
  end if;
 end loop;
 stp := 'B';

 if is_empty
  then
   file_ctr := 0;
 else
   ctr := 0;
   stp := 'C';
   loop
 stp := 'D';
    x := dbms_lob.instr(clb, c_delim_s, 1, ctr + 1);
	-- htp.p('X: ' || x);
 stp := 'E';
	if x = 0 then exit; end if;
 stp := 'F';
	ctr := ctr + 1;
 stp := 'G';
	y := dbms_lob.instr(clb, c_delim_e, x, 1);
	-- htp.p('Y: ' || y);
 stp := 'H';
	v_buf := regexp_replace(dbms_lob.substr(clb, y-x, x), '(.*)(>)(.*)$', '\3');
	-- htp.p('..' || v_buf); htp.nl;
	if upper(v_buf) <> 'PARENT DIRECTORY'
	 then
	  file_ctr := file_ctr + 1;
	  file_list(file_ctr) := v_buf;
	end if;
   end loop;

 end if;
 dbms_lob.freetemporary( clb );
 return(file_ctr);

exception
 when others then
  glbx.dbg( 'HTTP_FILE_LISTING. Error at stp ' || stp || ': ' || sqlerrm );
  return(0);
end http_file_listing;

-------------------------------------------------------------------20200415
procedure ctrs_mass_png_alls(surl in varchar2, parm in varchar2, action in varchar2, access_id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, shipid number default null, vloc in varchar2 default 'MOTUKEA' )
is

cursor c1 is
 select distinct cs.rowid, cs.*, ss.shipname, ss.voy, ss.status s_status, l.description isodesc
 from  strang.movements cs, strang.ships_airway ss, strang.lov l
 where nvl(cs.complete,'A') not in ('H')
       and cs.ship_id = ss.ship_id
       and nvl(ss.estdepart,sysdate) > sysdate - 180
       and rownum <=  600
       and movement_type in ('CARGO')
       and (shipid is null or (shipid is not null and shipid=cs.ship_id) or(shipid is not null and shipid=cs.local_ship_id) )
       and l.lov_name = 'UNCTNTAB'
       and cs.iso_container_type = l.code
       and cs.io = 'O'
       and cs.current_location in (select code from strang.lov l2 where l2.lov_name='LOCATIONS' and l2.colc=vloc)
 --order by cs.ship_id, cs.bol, cs.movement_no  -- Modified by David Banjo as requested by Annette Northfield
 order by cs.movement_no
;

cursor c1a is
 select distinct cs.rowid, cs.*, ss.shipname, ss.voy, ss.status s_status, l.description isodesc
 from  strang.movements cs, strang.ships_airway ss, strang.lov l
 where (cs.local_ship_id = ss.ship_id or cs.ship_id = ss.ship_id)
       and rownum <= 600
       and movement_type in ('CARGO')
       and shipid = ss.ship_id
       and l.lov_name = 'UNCTNTAB'
       and cs.iso_container_type = l.code
       and ss.io='O'
  order by cs.movement_no
;

cursor c2(vshipid number) is
 select distinct ss.li
 from  strang.ships_airway ss
 where ss.ship_id = vshipid
 and ss.io='O'
 ;

 ltype       varchar2(100);
 owner_id    integer;
 stype       integer;
 sts         varchar2(100);
 c2rec	     c2%ROWTYPE;
 v_rid_cs    owa.vc_arr;
 v1          owa.vc_arr;
 v2          owa.vc_arr;
 v3          owa.vc_arr;
 v4          owa.vc_arr;
 v5          owa.vc_arr;
 v6          owa.vc_arr;
 v7          owa.vc_arr;
 v8          owa.vc_arr;
 v9          owa.vc_arr;
 v10         owa.vc_arr;
 v11         owa.vc_arr;
 v12         owa.vc_arr;
 v13         owa.vc_arr;
 v14         owa.vc_arr;
 v15         owa.vc_arr;
 v16         owa.vc_arr;
 v17         owa.vc_arr;
 v18         owa.vc_arr;
 v19         owa.vc_arr;
 v20         owa.vc_arr;
 v21         owa.vc_arr;
 v22         owa.vc_arr;
 v23         owa.vc_arr;
 v24         owa.vc_arr;
 v25         owa.vc_arr;
 v26         owa.vc_arr;
 v27         owa.vc_arr;
 v28         owa.vc_arr;
 v29         owa.vc_arr;
 errmsg      owa.vc_arr;
 vli	     varchar2(1);
begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ctrs_mass_png_alls' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;

 open c2(shipid);
 fetch c2 into c2rec;
    vli := nvl(c2rec.li,'|');
 close c2;

if nvl(vli,'|') = 'L' then
  for c1arec in c1a loop
   v_rid_cs(c1a%ROWCOUNT) := replace(c1arec.rowid, '+', '~');
   v1(c1a%ROWCOUNT) := c1arec.movement_no;
   v2(c1a%ROWCOUNT) := c1arec.seal;
   v3(c1a%ROWCOUNT) := c1arec.isodesc;
   v4(c1a%ROWCOUNT) := c1arec.tare;
   v5(c1a%ROWCOUNT) := c1arec.vgm;
   v6(c1a%ROWCOUNT) := c1arec.container_volume;
   v7(c1a%ROWCOUNT) := c1arec.marks_numbers;
   v8(c1a%ROWCOUNT) := c1arec.current_location;
   v9(c1a%ROWCOUNT) := c1arec.consignee;
   v10(c1a%ROWCOUNT) := c1arec.consignee_location;
   v11(c1a%ROWCOUNT) := c1arec.local_ship_id;
   v12(c1a%ROWCOUNT) := c1arec.local_bol;
   v13(c1a%ROWCOUNT) := c1arec.local_hb;
   v14(c1a%ROWCOUNT) := to_char(c1arec.local_ship_discharge_date,LNGS.STR_DATE_02);
   v15(c1a%ROWCOUNT) := c1arec.ship_id;
   v16(c1a%ROWCOUNT) := c1arec.bol;
   v17(c1a%ROWCOUNT) := c1arec.hb;
   v18(c1a%ROWCOUNT) := to_char(c1arec.INT_SHIP_DISCHARGE_DATE,LNGS.STR_DATE_02);
   v19(c1a%ROWCOUNT) := c1arec.container_park;
   v20(c1a%ROWCOUNT) := to_char(c1arec.snail_inspect,LNGS.STR_DATE_02);
   v21(c1a%ROWCOUNT) := to_char(c1arec.wharf_collect,LNGS.STR_DATE_02);
   v22(c1a%ROWCOUNT) := c1arec.aqis_depot; --c1arec.remark_date;
   v23(c1a%ROWCOUNT) := c1arec.secondary_transport; --c1arec.remark_detail;
   v24(c1a%ROWCOUNT) := c1arec.del_transport_company;
   v25(c1a%ROWCOUNT) := to_char(c1arec.offhired_date,LNGS.STR_DATE_02);
   v26(c1a%ROWCOUNT) := c1arec.invoiceno;
   v27(c1a%ROWCOUNT) := c1arec.cmt;
   v28(c1a%ROWCOUNT) := c1arec.full_mt;
   v29(c1a%ROWCOUNT) := c1arec.owner;
   errmsg(c1a%ROWCOUNT) := null;
 end loop;
 else
  for c1rec in c1 loop
   v_rid_cs(c1%ROWCOUNT) := replace(c1rec.rowid, '+', '~');
   v1(c1%ROWCOUNT) := c1rec.movement_no;
   v2(c1%ROWCOUNT) := c1rec.seal;
   v3(c1%ROWCOUNT) := c1rec.isodesc;
   v4(c1%ROWCOUNT) := c1rec.tare;
   v5(c1%ROWCOUNT) := c1rec.vgm;
   v6(c1%ROWCOUNT) := c1rec.container_volume;
   v7(c1%ROWCOUNT) := c1rec.marks_numbers;
   v8(c1%ROWCOUNT) := c1rec.current_location;
   v9(c1%ROWCOUNT) := c1rec.consignee;
   v10(c1%ROWCOUNT) := c1rec.consignee_location;
   v11(c1%ROWCOUNT) := c1rec.local_ship_id;
   v12(c1%ROWCOUNT) := c1rec.local_bol;
   v13(c1%ROWCOUNT) := c1rec.local_hb;
   v14(c1%ROWCOUNT) := to_char(c1rec.local_ship_discharge_date,LNGS.STR_DATE_02);
   v15(c1%ROWCOUNT) := c1rec.ship_id;
   v16(c1%ROWCOUNT) := c1rec.bol;
   v17(c1%ROWCOUNT) := c1rec.hb;
   v18(c1%ROWCOUNT) := to_char(c1rec.INT_SHIP_DISCHARGE_DATE,LNGS.STR_DATE_02);
   v19(c1%ROWCOUNT) := c1rec.container_park;
   v20(c1%ROWCOUNT) := to_char(c1rec.snail_inspect,LNGS.STR_DATE_02);
   v21(c1%ROWCOUNT) := to_char(c1rec.wharf_collect,LNGS.STR_DATE_02);
   v22(c1%ROWCOUNT) := c1rec.aqis_depot; --c1arec.remark_date;
   v23(c1%ROWCOUNT) := c1rec.secondary_transport;
   v24(c1%ROWCOUNT) := c1rec.del_transport_company;
   v25(c1%ROWCOUNT) := to_char(c1rec.offhired_date,LNGS.STR_DATE_02);
   v26(c1%ROWCOUNT) := c1rec.invoiceno;
   v27(c1%ROWCOUNT) := c1rec.cmt;
   v28(c1%ROWCOUNT) := c1rec.full_mt;
   v29(c1%ROWCOUNT) := c1rec.owner;
   errmsg(c1%ROWCOUNT) := null;
  end loop;
 end if;
 if v1.count > 0
  then
   ctrs_mass_png_alls_Update(surl, parm, action, v_rid_cs, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15,
   v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, errmsg, access_id, msg, call_name);
 else
   strangp.menu(surl, NULL, 'TRAC');
   return;
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ctrs_mass_png_alls',null,null,errmsg=>sqlerrm );
end ctrs_mass_png_alls;

procedure ctrs_mass_png_alls_Update(surl in varchar2
                               , parm in varchar2
                               , action in varchar2
                               , v_rid_cs in owa.vc_arr
                               , v1 in owa.vc_arr
                               , v2 in owa.vc_arr
                               , v3 in out owa.vc_arr
                               , v4 in out owa.vc_arr
                               , v5 in out owa.vc_arr
                               , v6 in out owa.vc_arr
                               , v7 in out owa.vc_arr
                               , v8 in out owa.vc_arr
                               , v9 in out owa.vc_arr
                               , v10 in out owa.vc_arr
                               , v11 in out owa.vc_arr
                               , v12 in out owa.vc_arr
                               , v13 in out owa.vc_arr
                               , v14 in out owa.vc_arr
                               , v15 in out owa.vc_arr
                               , v16 in out owa.vc_arr
                               , v17 in out owa.vc_arr
                               , v18 in out owa.vc_arr
                               , v19 in out owa.vc_arr
                               , v20 in out owa.vc_arr
                               , v21 in out owa.vc_arr
                               , v22 in out owa.vc_arr
                               , v23 in out owa.vc_arr
                               , v24 in out owa.vc_arr
                               , v25 in out owa.vc_arr
                               , v26 in out owa.vc_arr
                               , v27 in out owa.vc_arr
                               , v28 in out owa.vc_arr
                               , v29 in out owa.vc_arr  -- added container Owner
                               , errmsg in out owa.vc_arr
                               , access_id in varchar2 default null
                               , msg in varchar2 default null
                               , call_name in varchar2 default null )
is

 cursor c3( rid_cs ROWID ) is
  select ss.rowid
  from   strang.ships_airway ss, strang.movements cs
  where  cs.rowid = rid_cs
         and cs.ship_id = ss.ship_id
 ;


 ltype       varchar2(100);
 owner_id    integer;
 stype       integer;
 cusrec      customer_account%ROWTYPE;
 v_action    varchar2(100);
 vste        varchar2(10);
 pfx         THEME%ROWTYPE;
 vaccess     varchar2(20);
 seclevel    varchar2(100);
 sts         varchar2(100);
 v_rid_ss    rowid;
 v_rid_bs    rowid;
 v_rid_bs_1  rowid;
 stp         varchar2(1000);
 err_txt     varchar2(1000);
 scid	     varchar2(100);

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ctrs_mass_png_alls' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;

 cusrec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(cusrec.aid);
 pfx := glbx.get_thm( cusrec.theme_name );
 vaccess := strangp.data_access( owner_id, 'MOVEMENT', replace(v_rid_cs(1), '~', '+'));
 seclevel := oltp.security_role( owner_id );
 select screen_id into scid from oltp_overview where screen_name='Cargo';

 glbx.main_title( surl, 'Outbound Containers',glbx.backimg(surl,cusrec.aid,pfx.text_back,cusrec.background_img,ltype),helpid=>'STR16',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 htp.p( '<CENTER>' );

 if msg is not null
 then
  glbx.header_msg( msg );
 end if;

  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=0' ); -- Table 1
  htp.formopen('STRANGP.accept_ctrs_mass_png_alls_Up');

  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'PARM', parm );
  htp.formhidden( 'ACCESS_ID', access_id );
  htp.formhidden( 'CALL_NAME', call_name );

  htp.tablerowopen;
   htp.tabledata( htf.bold('Outbound Containers'), ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
-- ***

 -- Submit Buttons

  htp.tablerowopen;
  htp.p('<TD VALIGN="TOP" COLSPAN="2">');
   htp.formsubmit( 'ACTION', lngs.STR_TXT_358 ); -- Modify Values
   htp.p('&nbsp;');
   htp.formsubmit( 'ACTION', lngs.STR_STH_011 ); -- Cancel
   htp.p('&nbsp;');
  htp.p('</TD>');

  htp.tablerowclose;


-- ***
  htp.tablerowopen;
  htp.p( '<TD align="LEFT" colspan="2">' );

  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border="1" ' || glbx.TABLE_BACKGROUND ); -- Table 2

   htp.tablerowopen;
    htp.tabledata( htf.bold('Number of Containers'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" colspan="2"');
    htp.tabledata( v1.count, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="33"');
   htp.tablerowclose;

   htp.tablerowopen;
    htp.tabledata(htf.bold('Direction'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Seal'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Full/Empty'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('ISO Container Type'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Tare'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('VGM <BR>Inc. Tare'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Volume'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Marks & Numbers'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Current Location'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Container Owner'), cattributes=>glbx.QUERY_BACKGROUND); -- Added container owner DB 24/2/2021
    htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Consignee'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Destination'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Local Ship'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Local BOL'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Local House<BR>Bill'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Local Ship<BR>Discharge Date'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Intl Ship'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Intl Bol'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Intl House<BR>Bill'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Intl Discharge Date'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Container Park'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Snail Inspect<BR>Date'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Wharf Collect<BR>Date'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('AQIS Depot'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Secondary Transport'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Delivery Transport<BR>Company'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Offhired<BR>Date'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Strang Invoice'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Message'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Error Message'), cattributes=>glbx.QUERY_BACKGROUND);
   htp.tablerowclose;

  -- for j in v1.first..v1.last loop
   for j in 1..v1.count loop
    htp.formhidden('V_RID_CS', v_rid_cs(j));
    htp.tablerowopen;
     if errmsg(j) is not null
      then
       err_txt := 'style="color:RED;"';
     else
       err_txt := null;
     end if;
     -- BOL

     open c3( replace(v_rid_cs(j), '~', '+') ) ;
     fetch c3 into v_rid_ss;
     close c3;

     -- Direction & Container
     htp.formhidden( 'V1', v1(j) );
     htp.formhidden( 'V2', v2(j) );
     htp.formhidden( 'V12', v12(j) );  -- local_bol
     htp.formhidden( 'V13', v13(j) );  -- local hb
     htp.formhidden( 'V16', v16(j) );  -- bol
     htp.formhidden( 'V17', v17(j) );  -- hb
     htp.formhidden( 'V28', v28(j) );  -- full_mt
     htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF"');
     htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_alls_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- Seal
     if ( NVL(to_char(v28(j)), 'FULL') = 'FULL' ) then
        htp.tabledata( to_char(v2(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     else
        htp.tabledata( '',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     end if;

     -- Full or Empty
     htp.tabledata( to_char(v28(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');

     -- Iso Container Type
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'UNCTNTAB', 'V3', v3(j), FALSE, TRUE, FALSE );
       htp.p('</TD>');

     -- Tare
     htp.tabledata( htf.formtext( 'V4',8,15,v4(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- VGM
     htp.tabledata( htf.formtext( 'V5',8,15,v5(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- VOLUME
     htp.tabledata( htf.formtext( 'V6',8,15,v6(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- MARKS & NUMBERS
     htp.tabledata( htf.formtext( 'V7',8,15,v7(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- CURRENT LOCATION
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'LOCATIONS', 'V8', v8(j), FALSE, TRUE, FALSE );
       htp.p('</TD>');
    
     -- Container Owner
     htp.tabledata( htf.formtext( 'V29',8,15,v29(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- Container repeat
     htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_alls_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- CONSIGNEE
     htp.tabledata( htf.formtext( 'V9',8,15,v9(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- CONSIGNEE LOCATION
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'LOCATIONS', 'V10', v10(j), FALSE, TRUE, FALSE );
       htp.p('</TD>');

     -- LOCAL SHIP
     if v11(j) is null then
        v11(j):= 4;
     end if;

     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     if vaccess = 'EDIT' and nvl(v11(j),'INCOMPLETE') <> 'ARCHIVED'
        then
         lov_ship_local( 'V11', 'S', v11(j),'O' );
      else
       if vaccess = 'EDIT' then htp.formhidden( 'V11', v11(j) ); end if;
       lov_ship_local( 'V11', 'S', v11(j),'O', isedit=>FALSE );
     end if;
     htp.p( '</TD>' );

     -- LOCAL BOL
--   htp.tabledata( htf.formtext( 'V12',8,15,v12(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( to_char(v12(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');

     -- LOCAL HOUSE BILL
--   htp.tabledata( htf.formtext( 'V13',8,15,v13(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( to_char(v13(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');

     -- LOCAL SHIP DISCHARGE DATE
     htp.tabledata( htf.formtext( 'V14',8,15,v14(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- Container repeat
     htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_alls_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- INTERNATIONAL SHIP
     if v15(j) is null then
        v15(j):= 3;
     end if;

     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     if vaccess = 'EDIT' and nvl(v15(j),'INCOMPLETE') <> 'ARCHIVED'
        then
         lov_ship_intl( 'V15', 'S', v15(j),'O' );
      else
       if vaccess = 'EDIT' then htp.formhidden( 'V15', v15(j) ); end if;
       lov_ship_intl( 'V15', 'S', v15(j),'O', isedit=>FALSE );
      end if;
     htp.p( '</TD>' );

     -- INTERNATIONAL BOL
--     htp.tabledata( htf.formtext( 'V16',8,15,v16(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( to_char(v16(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');

     -- INTERNATIONAL HOUSE BILL
--     htp.tabledata( htf.formtext( 'V17',8,15,v17(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( to_char(v17(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');

    -- INTL SHIP DISCHARGE DATE
     htp.tabledata( htf.formtext( 'V18',8,15,to_char(to_date(v18(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- CONTAINER PARK
     htp.tabledata( htf.formtext( 'V19',8,15,v19(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- SNAIL INSPECT DATE
     htp.tabledata( htf.formtext( 'V20',8,15,to_char(to_date(v20(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- WHARF COLLECT DATE
     htp.tabledata( htf.formtext( 'V21',8,15,to_char(to_date(v21(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- Container repeat
     htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_alls_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- AQIS DEPOT
     htp.tabledata( htf.formtext( 'V22',8,15,v22(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- SECONDARY TRANSPORT
     htp.tabledata( htf.formtext( 'V23',8,15,v23(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- DELIVERY TRANSPORT COMPANY
     htp.tabledata( htf.formtext( 'V24',8,15,v24(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- Container repeat
     htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_alls_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- OFFHIRED DATE
     htp.tabledata( htf.formtext( 'V25',8,15,to_char(to_date(v25(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- STRANG INVOICE
     htp.tabledata( htf.formtext( 'V26',8,15,v26(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- MESSAGE
     htp.tabledata( htf.formtext( 'V27',8,15,v27(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

     -- Error message
     htp.tabledata( errmsg(j),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );

    htp.tablerowclose;
   end loop;

  htp.tableclose; -- Table 2
  htp.p('</TD>');
  htp.tablerowclose;

 -- Submit Buttons

  htp.tablerowopen;
  htp.p('<TD VALIGN="TOP" COLSPAN="2">');
   htp.formsubmit( 'ACTION', lngs.STR_TXT_358 ); -- Modify Values
   htp.p('&nbsp;');
   htp.formsubmit( 'ACTION', lngs.STR_STH_011 ); -- Cancel
   htp.p('&nbsp;');
  htp.p('</TD>');

  htp.tablerowclose;

  htp.formclose;
  htp.tableclose; -- Table 1

exception when others then
 glbx.error_details( 'STRANGP', 'ctrs_mass_png_alls_UPDATE',null,null,errmsg=>sqlerrm,extdet=>stp );
end ctrs_mass_png_alls_Update;

procedure accept_ctrs_mass_png_alls_Up( surl in varchar2
                                       , parm in varchar2
                                       , access_id in varchar2
                                       , call_name in varchar2
                                       , v_rid_cs in owa.vc_arr
                                       , v1 in owa.vc_arr
                                       , v2 in owa.vc_arr
                                       , v3 in out owa.vc_arr
                                       , v4 in out owa.vc_arr
                                       , v5 in out owa.vc_arr
                                       , v6 in out owa.vc_arr
                                       , v7 in out owa.vc_arr
                                       , v8 in out owa.vc_arr
                                       , v9 in out owa.vc_arr
                                       , v10 in out owa.vc_arr
                                       , v11 in out owa.vc_arr
                                       , v12 in out owa.vc_arr
                                       , v13 in out owa.vc_arr
                                       , v14 in out owa.vc_arr
                                       , v15 in out owa.vc_arr
                                       , v16 in out owa.vc_arr
                                       , v17 in out owa.vc_arr
                                       , v18 in out owa.vc_arr
                                       , v19 in out owa.vc_arr
                                       , v20 in out owa.vc_arr
                                       , v21 in out owa.vc_arr
                                       , v22 in out owa.vc_arr
                                       , v23 in out owa.vc_arr
                                       , v24 in out owa.vc_arr
                                       , v25 in out owa.vc_arr
                                       , v26 in out owa.vc_arr
                                       , v27 in out owa.vc_arr
                                       , v28 in out owa.vc_arr
                                       , v29 in out owa.vc_arr
                                       , action in varchar2
                                       )
is

 cursor c1(rid ROWID) is select * from strang.movements where rowid = rid FOR UPDATE;

 cursor c2(cdesc varchar2) is select code from strang.lov where lov_name='UNCTNTAB' and code = cdesc;


 c2rec	     C2%ROWTYPE;
 stype       integer;
 ltype       varchar2(100);
 owner_id    integer;
 sts         varchar2(100);
 v_rid_ss    rowid;
 v_rid_bs    rowid;
 error_found boolean;
 ctrrec      strang.movements%ROWTYPE;
 v_date      date;
 v_number    number;
 errmsg      owa.vc_arr;
 ctr         integer;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ctrs_mass_png_alls' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;

 error_found := FALSE;

 if action = lngs.STR_STH_011 -- Cancel
  then
     strangp.menu(surl=>surl,rnd=>NULL,MTYPE=>'TRAC');
     return;
 end if;

 for j in v1.first..v1.last loop
  errmsg(j) := null;
  open c1(replace(v_rid_cs(j), '~', '+'));
  fetch c1 into ctrrec;
   for k in 1..1 loop
    if c1%NOTFOUND
     then
      error_found := TRUE;
      errmsg(j) := 'Container record not found. ROWID = ' || v_rid_cs(j);
      exit;
    end if;

    -- iso_container_type - V3
    open c2(v3(j));
    fetch c2 into c2rec;
    if C2%FOUND then
      ctrrec.iso_container_type := c2rec.code;
    end if;
    close c2;

    -- Tare - V4
    ctrrec.tare := v4(j);

    -- VGM - V5
    ctrrec.VGM := v5(j);


    -- Volume - V6
    ctrrec.container_volume := v6(j);


    -- Marks & Numbers - V7
    ctrrec.marks_numbers := v7(j);


    -- Current Location - V8
    ctrrec.current_location := v8(j);

    -- Container Owner - V29
    ctrrec.owner := v29(j);

    -- Consignee - V9
    ctrrec.consignee := v9(j);


    -- Consignee Location - V10
    ctrrec.consignee_location := v10(j);

    -- Local Bol - V12
    if ctrrec.local_ship_id <> v11(j)
    then
     ctrrec.local_bol := null;
    end if;


    -- Local House Bill - V13
    if ctrrec.local_ship_id <> v11(j)
    then
     ctrrec.local_hb := null;
    end if;


    -- Local Ship_id - V11
    ctrrec.local_ship_id := v11(j);


    -- Local Bol - V12
--    ctrrec.local_bol := v12(j);


    -- Local House Bill - V13
--    ctrrec.local_hb := v13(j);


    -- Local Ship Discharge Date - V14
    begin
     v_date := to_date(v14(j),LNGS.STR_DATE_02);
     if to_char(v_date, 'yyyy') like '0%'
      then
       errmsg(j) := errmsg(j) || '[Local Ship Discharge Date] ' || LNGS.STR_TXT_152 || ': ' || v14(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
       error_found := TRUE;
     else
       ctrrec.local_ship_discharge_date := v_date;
     end if;
    exception when others then
     v14(j) := ctrrec.local_ship_discharge_date;
     errmsg(j) := errmsg(j) || '[Local Ship Discharge Date] ' || LNGS.STR_TXT_152 || ': ' || v14(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
     error_found := TRUE;
    end;

    -- Intl Bol - V16
    if ctrrec.ship_id <> v15(j)
    then
     ctrrec.bol := null;
    end if;


    -- Intl House Bill - V17
    if ctrrec.ship_id <> v15(j)
    then
     ctrrec.hb := null;
    end if;

    -- Ship_id - V15
    ctrrec.ship_id := v15(j);


    -- Intl Bol - V16
 --   ctrrec.bol := v16(j);


    -- Intl House Bill - V17
--    ctrrec.hb := v17(j);


    -- Intl Discharge Date - V18
    begin
     v_date := to_date(v18(j),LNGS.STR_DATE_02);
     if to_char(v_date, 'yyyy') like '0%'
      then
       errmsg(j) := errmsg(j) || '[Intl Discharge Date] ' || LNGS.STR_TXT_152 || ': ' || v18(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
       error_found := TRUE;
     else
       ctrrec.INT_SHIP_DISCHARGE_DATE := v_date;
     end if;
    exception when others then
     v18(j) := ctrrec.INT_SHIP_DISCHARGE_DATE;
     errmsg(j) := errmsg(j) || '[Intl Discharge Date] ' || LNGS.STR_TXT_152 || ': ' || v18(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
     error_found := TRUE;
    end;


    -- Container Park - V19
    ctrrec.container_park := v19(j);


    -- Snail Inspect Date - V20
    begin
     v_date := to_date(v20(j),LNGS.STR_DATE_02);
     if to_char(v_date, 'yyyy') like '0%'
      then
       errmsg(j) := errmsg(j) || '[Snail Inspect Date] ' || LNGS.STR_TXT_152 || ': ' || v20(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
       error_found := TRUE;
     else
       ctrrec.snail_inspect := v_date;
     end if;
    exception when others then
     v20(j) := ctrrec.snail_inspect;
     errmsg(j) := errmsg(j) || '[Snail Inspect Date] ' || LNGS.STR_TXT_152 || ': ' || v20(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
     error_found := TRUE;
    end;



    -- Wharf Collect Date - V21
    begin
     v_date := to_date(v21(j),LNGS.STR_DATE_02);
     if to_char(v_date, 'yyyy') like '0%'
      then
       errmsg(j) := errmsg(j) || '[Wharf Collect Date] ' || LNGS.STR_TXT_152 || ': ' || v21(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
       error_found := TRUE;
     else
       ctrrec.wharf_collect := v_date;
     end if;
    exception when others then
     v21(j) := ctrrec.wharf_collect;
     errmsg(j) := errmsg(j) || '[Wharf Collect Date] ' || LNGS.STR_TXT_152 || ': ' || v21(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
     error_found := TRUE;
    end;

    -- Aqis Depot - V22
    ctrrec.aqis_depot := v22(j);

    -- Secondary Transport - V23
    ctrrec.secondary_transport := v23(j);

    -- Delivery Transport Company - V24
    ctrrec.del_transport_company := v24(j);

    -- Offhired Date - V25
    begin
     v_date := to_date(v25(j),LNGS.STR_DATE_02);
     if to_char(v_date, 'yyyy') like '0%'
      then
       errmsg(j) := errmsg(j) || '[Offhired Date] ' || LNGS.STR_TXT_152 || ': ' || v25(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
       error_found := TRUE;
     else
       ctrrec.offhired_date := v_date;
     end if;
    exception when others then
     v17(j) := ctrrec.offhired_date;
     errmsg(j) := errmsg(j) || '[Offhired Date] ' || LNGS.STR_TXT_152 || ': ' || v25(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
     error_found := TRUE;
    end;


   -- Strang Invoice - V26
    ctrrec.invoiceno := v26(j);


    -- Cmt - V27
    ctrrec.cmt := v27(j);

    if errmsg(j) is null
     then
      ctrrec.date_modified := sysdate;
	  update strang.movements set row = ctrrec where current of c1;
      commit;
    end if;

  end loop;
  close c1;
 end loop;


 if error_found
  then
   ctrs_mass_png_alls_Update(surl, parm, action, v_rid_cs, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15,
   v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, errmsg, access_id, 'Errors Found: Check Messages', call_name);
   return;
 else
   ctrs_mass_png_alls_Update(surl, parm, action, v_rid_cs, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15,
   v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, errmsg, access_id, 'All Records Successfully Updated', call_name);
   return;
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_ctrs_mass_png_alls_UP',null,null,errmsg=>sqlerrm );
end accept_ctrs_mass_png_alls_Up;
-------------------------------------------------------- 20200419
procedure bols(surl in varchar2, scid in integer, rid_ss in rowid, rid_bs rowid default null, parm in varchar2, action in varchar2, access_id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null
              , p1 in varchar2 default null, p2 in varchar2 default null, p3 in varchar2 default null, p4 in varchar default null)
is

cursor c1 (rid_ss rowid) is select * from strang.ships_airway where rowid = rid_ss;

cursor c2 (rid_ss rowid) is
 select lngs.STR_STH_005 tot
 from  strang.bols bs, strang.ships_airway ss
 where ss.rowid = rid_ss
    and bs.ship_id = ss.ship_id
;

cursor c3a (rid_ss rowid) is
 select sb.* , sb.rowid, ss.shipname, ss.voy, ss.li
 from  strang.bols sb, strang.ships_airway ss
 where sb.ship_id = ss.ship_id
    and ss.rowid = rid_ss
 order by bol asc
;

cursor c3b (rid_ss rowid) is
 select sb.* , sb.rowid, ss.shipname, ss.voy, ss.li
 from  strang.bols sb, strang.ships_airway ss
 where sb.ship_id = ss.ship_id
    and ss.rowid = rid_ss
 order by bol asc
;

cursor c4 (v_ship_id int, v_bol varchar2, v_li varchar2 ) is
select count(distinct movement_id) cnt
from 
(( select m.movement_no||nvl(m.seal,'|') movement_id
  from strang.movements m 
 where m.ship_id = v_ship_id
   and m.bol = v_bol
   and v_li = 'I'
   and not exists (select 'x'
                     from strang.detailrs dr, strang.receivals r
                    where dr.movement_no = m.movement_no
                      and nvl(dr.camov_seal,'|')  = nvl(m.seal,'|')
                      and dr.deliveryno = r.deliveryno
                      and r.hb is not null))
  union all
 ( select m.movement_no||nvl(m.seal,'|')
  from strang.movements m 
 where m.local_ship_id = v_ship_id
   and m.local_bol = v_bol
   and v_li = 'L'
   and not exists (select 'x'
                     from strang.detailrs dr, strang.receivals r
                    where dr.movement_no = m.movement_no
                      and nvl(dr.camov_seal,'|')  = nvl(m.seal,'|')
                      and dr.deliveryno = r.deliveryno
                      and r.local_hb is not null) 
  )
 );
   
           
cursor c3c (rid_bs rowid) is select sb.*, sb.rowid, ss.shipname, ss.voy, ss.li from strang.bols sb, strang.ships_airway ss where sb.rowid = rid_bs and ss.ship_id = sb.ship_id;

 c1rec    c1%ROWTYPE;
 c3rec    c3a%ROWTYPE;
 c4rec    c4%ROWTYPE;
 ltype    varchar2(100);
 owner_id integer;
 stype    integer;
 cusrec   customer_account%ROWTYPE;
 v_action varchar2(100);
 vste     varchar2(10);
 pfx      THEME%ROWTYPE;
 vaccess  varchar2(20);
 seclevel varchar2(100);
 sts      varchar2(100);
 v_rid_ss rowid;
 v_rid_bs rowid;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.BOLS' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;
 
--glbx.dbg('GOT THERE : ' );
--glbx.dbg('' );
--htp.p( '<BR>' );

 v_rid_ss := replace(rid_ss, '~', '+');
 v_rid_bs := replace(rid_bs, '~', '+');
 cusrec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(cusrec.aid);
 pfx := glbx.get_thm( cusrec.theme_name );
 vaccess := strangp.data_access( owner_id, 'SHP_SB', v_rid_ss );
 seclevel := oltp.security_role( owner_id );

 open c1(v_rid_ss);
 fetch c1 into c1rec;
 if c1%NOTFOUND
 then
  htp.init;
  close c1;
  htp.htmlopen;
  htp.header(3,'Ships', 'CENTER' );
  htp.header(3,'RECORD NOT FOUND', 'CENTER' );
  htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
  htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
  htp.nl;
  htp.header(2,'Extra Information: ROWID = ' || nvl(v_rid_ss, 'NULL'), 'CENTER' );
  htp.htmlclose;
  return;
 end if;
 close c1;

 if action in ( lngs.STR_STH_005, lngs.STR_STH_006, lngs.STR_STH_029, lngs.STR_STH_029)
 then
  open c2 (v_rid_ss);
  fetch c2 into v_action;
  if c2%NOTFOUND
  then
   v_action := lngs.STR_STH_002;
  end if;
  close c2;
 end if;

 v_action := nvl(v_action, action);

 glbx.main_title( surl, lngs.STR_STH_006 ,glbx.backimg(surl,cusrec.aid,pfx.text_back,cusrec.background_img,ltype),helpid=>'STR16',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 htp.p( '<CENTER>' );

 if msg is not null
 then
  glbx.header_msg( msg );
 end if;

 if v_action in (lngs.STR_STH_005, lngs.STR_STH_006) -- List
 then
   htp.p( '<CENTER>' );
   htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=0' ); -- Table 1
   htp.tablerowopen;
   if parm = 'BOLS' then
      htp.tabledata( htf.bold(lngs.STR_STH_024), ' ALIGN="LEFT"');
   else
      htp.tabledata( htf.bold(lngs.STR_STH_025), ' ALIGN="LEFT"');
   end if;
  
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tablerowclose;

   htp.p( '</CENTER>' );
   htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border="1" ' || glbx.TABLE_BACKGROUND ); -- Table 2
   htp.tablerowopen;
   
   if nvl(c1rec.io,'I') = 'I' then
      htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
   else
      htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
   end if;
   htp.tablerowclose;
   htp.tablerowopen;
   htp.tabledata( htf.bold('Ship ID'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold(c1rec.ship_id), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--  htp.tabledata( htf.anchor2( 'strangp.shp?surl=' || surl || '&rid=' || replace(rid_ss, '+', '~') || '&parm=X' || parm || '&scid=' || scid || '&access_id=' || access_id,c1rec.ship_id,ctarget=>'NEWSHIP' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Ship & Voyage'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold(c1rec.shipname||' '||c1rec.voy), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.anchor2( 'strangp.shp?surl=' || surl || '&rid=' || replace(rid_ss, '+', '~') || '&parm=X' || parm || '&scid=' || scid || '&access_id=' || access_id,c1rec.shipname||' '||c1rec.voy,ctarget=>'NEWSHIP' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.tablerowclose;
   htp.p(confirm_delete(script_only=>TRUE));
   for c3rec in c3a(v_rid_ss) loop  
    
      open c4 (c3rec.ship_id, c3rec.bol, c3rec.li);
      fetch c4 into c4rec;
      close c4;
   
      if (c4rec.cnt > 0) then
         htp.tablerowopen;
         htp.tabledata( c3rec.bol, ' ALIGN="LEFT"');
         htp.tabledata( htf.anchor('strangp.bols?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_003 || '&rid_bs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || msg || '&call_name=' || call_name, 'Update') ||
         '&nbsp;' ||
         htf.anchor('strangp.accept_bols?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_004 || '&rid_bs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&p1=&p2=&p3=&p4=&p5=&p6=&p7=', 'Delete', cattributes=>'onClick="return confirmPost(''Delete ' || c3rec.bol || ': Are you sure?'')"') ||
         '&nbsp;' ||
       htf.anchor('strangp.bols?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_015 || '&rid_bs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || msg || '&call_name=' || call_name, 'Rename')
       || '&nbsp;' ||
       htf.anchor('strangp.containers_mass?surl=' || surl ||'&scid=' || scid ||'&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_017 || '&rid_bs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || null || '&call_name=' || LNGS.STR_STH_024, LNGS.STR_STH_017||' ('||c4rec.cnt ||')')
       , cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    else
       htp.tablerowopen;
       htp.tabledata( c3rec.bol, ' ALIGN="LEFT"');
       htp.tabledata( htf.anchor('strangp.bols?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_003 || '&rid_bs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || msg || '&call_name=' || call_name, 'Update') ||
       '&nbsp;' ||
       htf.anchor('strangp.accept_bols?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_004 || '&rid_bs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&p1=&p2=&p3=&p4=&p5=&p6=&p7=', 'Delete', cattributes=>'onClick="return confirmPost(''Delete ' || c3rec.bol || ': Are you sure?'')"') ||
       '&nbsp;' ||
       htf.anchor('strangp.bols?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_015 || '&rid_bs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || msg || '&call_name=' || call_name, 'Rename')
      || '&nbsp;' ||htf.fontOpen(ccolor=>'#808080' )|| LNGS.STR_STH_017||' ('||c4rec.cnt ||')'||htf.fontClose
        , cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       htp.tablerowclose;
       end if;
   end loop;

  -- Submit Buttons

   htp.tablerowopen;

   htp.formopen( 'strangp.bols' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
     htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', 'BOLS' );
   htp.formhidden( 'ACCESS_ID', 'z' );
   htp.formhidden( 'RID_BS', null );
   htp.p('<TD VALIGN="TOP">');
   htp.formsubmit( 'ACTION', lngs.STR_STH_002 ); -- Insert
   htp.p('</TD>');
   htp.formclose;
--   htp.p('<TD>');
--   htp.p('<a href="" onClick="self.close()">[Close Window]</a>');
--   htp.p('</TD>');
   htp.formopen( 'strangp.containers_mass' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
   htp.formhidden( 'PARM', 'BOLS' );
   htp.formhidden( 'ACCESS_ID', 'z' );
   htp.formhidden( 'RID_BS', null );
   htp.p('<TD VALIGN="TOP">');
   htp.formsubmit( 'ACTION', LNGS.STR_STH_018 ); -- Insert
   htp.p('</TD>');
   htp.formclose;
/*
       htp.formopen( 'strangp.edit_bol', ctarget=>'NEWECN' );
       htp.formhidden( 'RID', replace(rid,'~','+') );
       htp.formhidden( 'PARM', parm );
       htp.formhidden( 'ACCESS_ID', access_id );
       htp.formhidden( 'SHPID', c2rec.ship_id );
       htp.formsubmit( null, LNGS.STR_TXT_127 );

*/
   htp.tablerowclose;
-- Copy BOLs from one Ship to another
   htp.tablerowopen;
--   htp.p('<TD>');
   htp.formopen( 'strangp.copy_bols' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'PARM', 'copy_bols' );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
 -- P1 Copy Bills to other Ship ID
--   htp.p('</TD>');
   htp.tablerowclose;
   htp.tablerowopen;
   htp.p('<TD style="display:none;"> ');
  htp.p('</TD>');
   htp.p('<TD style="display:none;" > ');
   htp.p('<CENTER>');
   htp.p('Copy To ');
   htp.formtext( 'P1', 30, 30, '  ' );
   htp.p('<BR>');
   htp.formsubmit( 'ACTION', 'Copy Bills to Ship ID' );
   htp.p('</CENTER>');
   htp.formclose;
   htp.p('</TD>');
   htp.tablerowclose;

   htp.tableclose;
   htp.p('</TD>');

  htp.tablerowclose;
  htp.tableclose; -- Table 1
   htp.nl;
   htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
  return;
 end if;

 if v_action = lngs.STR_STH_002 -- Insert
 or v_action = lngs.STR_STH_007 -- Insert Another Record
 then
  if v_rid_bs is null   -- Default values to pre-populate fields
  then
   open c3b( v_rid_ss );
   fetch c3b into c3rec;
   close c3b;
  else
   open c3c( v_rid_bs );
   fetch c3c into c3rec;
   close c3c;
  end if;

  htp.tableopen; -- Table 1
  htp.tablerowopen;
  htp.p( '<TD align="LEFT" colspan="2">' );
  htp.formopen( 'strangp.accept_bols' );
  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'SCID', scid );
  htp.formhidden( 'PARM', parm );
  htp.formhidden( 'ACCESS_ID', 'z' );
  htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
  htp.formhidden( 'RID_BS', null );
 -- Main Table

  htp.tableopen( calign=> 'CENTER', cattributes=>'cellpadding=2 cellspacing=10 border=0' ); -- Table 1
  htp.tablerowopen;
  htp.tabledata( htf.bold(v_action), ' ALIGN="LEFT"');
  htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
--  htp.tableclose;
--  htp.tablerowopen;
--  htp.p( '<TD align="LEFT" colspan="2">' );
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border="1" ' || glbx.TABLE_BACKGROUND ); -- Table 2
  htp.tablerowopen;
  if nvl(c1rec.io,'I') = 'I' then
     htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="4"');
  else
     htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="4"');
  end if;
  htp.tablerowclose;

  -- Ship
  htp.tablerowopen;
   htp.tabledata( htf.bold('Ship ID'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold(c1rec.ship_id), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.anchor2( 'strangp.shp?surl=' || surl || '&rid=' || replace(rid_ss, '+', '~') || '&parm=X' || parm || '&scid=' || scid || '&access_id=' || access_id,c1rec.ship_id,ctarget=>'NEWSHIP' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;

  -- Voyage
  htp.tablerowopen;
   htp.tabledata( htf.bold('Ship & Voyage'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold(c1rec.shipname||' '||c1rec.voy), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.anchor('strangp.shp?surl=' || surl || '&rid=' || replace(rid_ss, '+', '~') || '&parm=X&access_id=' || access_id, c1rec.shipname||' '|| c1rec.voy), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="12"');
--   htp.tabledata( htf.anchor2( 'strangp.shp?surl=' || surl || '&rid=' || replace(rid_ss, '+', '~') || '&parm=X' || parm || '&scid=' || scid || '&access_id=' || access_id,c1rec.shipname||' '||c1rec.voy,ctarget=>'NEWSHIP' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;

  -- P1: BOL
  htp.tablerowopen;
   htp.tabledata( htf.bold('BOL'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P1', 30, 80), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
  htp.tablerowclose;

  -- P5: Delivery Date and Time
  htp.tablerowopen (cattributes=>'style="display:none;"');
   htp.tabledata( htf.bold('Delivery Date and Time'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P5', 25, 25, to_char(c3rec.del_date,LNGS.STR_DATE_02)) || '&nbsp;' || htf.italic(LNGS.STR_DATE_02), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
  htp.tablerowclose;

  -- P6: Customs Authority Number
  htp.tablerowopen;
   htp.tabledata( htf.bold('Customs Authority no.'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P6', 30, 100, c3rec.customs_auth_no), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
  htp.tablerowclose;

  -- P7: AQIS Clearance
  htp.tablerowopen;
   htp.tabledata( htf.bold('AQIS Clearance'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P7', 25, 25, to_char(c3rec.aqis_clearance,LNGS.STR_DATE_02)) || '&nbsp;' || htf.italic(replace(LNGS.STR_DATE_02, 'HH24:MI', '[HH24:MI]')), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
  htp.tablerowclose;

  -- P2: Shipper
  htp.tablerowopen;
   htp.tabledata( htf.bold('Shipper'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   customer_list( 'SOUTHBOUND', 'P2', c3rec.shipper, FALSE, isedit=>TRUE );
   htp.anchor( 'javascript: window.open(''' || 'oltp.display_screen?surl=' || surl || '&sname=Customers&rnd=63084&access_in=QUERY&rid=' || ''',''CUSTOMER_CODES'',''height=800,width=1200,scrollbars=yes,resizable=yes'');void('''');', '[Customer Codes]'
             , cattributes=>'title="Edit Code in a new window ***NOTE*** Reload this page for new codes to take effect"');
   htp.p( '</TD>' );
  htp.tablerowclose;

  -- P3: Consignee
  htp.tablerowopen;
   htp.tabledata( htf.bold('Consignee'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   customer_list( 'SOUTHBOUND', 'P3', c3rec.consignee, FALSE, isedit=>TRUE );
   htp.anchor( 'strangp.bols?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') || '&rid_bs=&parm=' || parm || '&action=' || v_action || '&access_id=' || access_id || '&msg=' || msg || '&call_name=' || call_name
             , '[Reload Page]'
             , cattributes=>'title="Reload this page"');
   htp.p( '</TD>' );
  htp.tablerowclose;

  -- P4: Notifying Party
  htp.tablerowopen;
   htp.tabledata( htf.bold('Notifying Party'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   customer_list( 'SOUTHBOUND', 'P4', c3rec.notifying_party, FALSE, isedit=>TRUE );
   htp.p( '</TD>' );
  htp.tablerowclose;

  htp.tableclose; -- Table 2
  htp.nl;
  htp.p('</TD>');
  htp.tableopen (calign=>'CENTER');
  htp.tablerowopen;

 -- Submit Buttons

  htp.p('<TD VALIGN="TOP">');
  htp.formsubmit( 'ACTION', lngs.STR_STH_002 ); -- Insert
  if c3rec.bol is not null then
     htp.p('&nbsp;');
    htp.formsubmit( 'ACTION', lngs.STR_STH_005 ); -- List All Records
  end if;
  htp.p('</TD>');
  htp.tablerowclose;
  htp.formclose;
 -- htp.p('</TD>');
  htp.tableclose; -- Table 1
  htp.nl;

 end if;

 if v_action in (lngs.STR_STH_003, lngs.STR_STH_015, lngs.STR_STH_016) -- Update or Rename or Confirm Rename
 then
  open c3c( v_rid_bs );
  fetch c3c into c3rec;
  if c3c%NOTFOUND
  then
   close c3c;
   htp.init;
   htp.htmlopen;
   htp.header(3,lngs.STR_STH_006, 'CENTER' );
   htp.header(3,'RECORD NOT FOUND', 'CENTER' );
   htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
   htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
   htp.nl;
   htp.header(2,'Extra Information: ROWID = ' || nvl(v_rid_bs , 'NULL'), 'CENTER' );
   htp.htmlclose;
   return;
  end if;
  close c3c;

  if v_action in (lngs.STR_STH_016) -- Confirm Rename
   then
    c3rec.bol := P1;
    c3rec.shipper := P2;
    c3rec.consignee := P3;
    c3rec.notifying_party := P4;
  end if;
  htp.p( '<CENTER>' );
--  htp.tableopen; -- Table 1
 -- htp.tablerowopen;
  htp.p( '<TD align="TOP" colspan="4">' );
  htp.formopen( 'strangp.accept_bols' );
  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'SCID', scid );
  htp.formhidden( 'PARM', parm );
  htp.formhidden( 'ACCESS_ID', 'z' );
  htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
  htp.formhidden( 'RID_BS', replace(rid_bs ,'~','+') );
 -- Main Table

  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=0' ); -- Table 1
  htp.tablerowopen;
  htp.tabledata( htf.bold(v_action ), ' ALIGN="LEFT"');
  htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
 -- htp.tableopen;
 -- htp.tablerowopen;
 -- htp.p( '<TD align="LEFT" colspan="2">' );

  -- David Banjo Change to BOLs update
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border="1" ' || glbx.TABLE_BACKGROUND ); -- Table 2
  htp.tablerowopen;
  if nvl(c1rec.io,'I') = 'I' then
     htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="4"');
  else
     htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="4"');
  end if;
  htp.tablerowclose;

  -- Ship
  htp.tablerowopen;
  htp.tabledata( htf.bold('Ship ID'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
  htp.tabledata( htf.bold(c1rec.ship_id), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
 --  htp.tabledata( htf.anchor('strangp.ship?surl=' || surl || '&rid_ss=' || replace(rid_ss, '+', '~') || '&parm=SHIPS&access_id=x', c3rec.ship ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
 --   htp.tabledata( htf.anchor2( 'strangp.shp?surl=' || surl || '&rid=' || replace(rid_ss, '+', '~') || '&parm=X' || parm || '&scid=' || scid || '&access_id=' || access_id,c1rec.ship_id,ctarget=>'NEWSHIP' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;

  -- Voyage
  htp.tablerowopen;
   htp.tabledata( htf.bold('Voyage'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold(c1rec.shipname||' '||c1rec.voy), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tabledata( htf.anchor2( 'strangp.shp?surl=' || surl || '&rid=' || replace(rid_ss, '+', '~') || '&parm=X' || parm || '&scid=' || scid || '&access_id=' || access_id,c1rec.shipname||' '||c1rec.voy,ctarget=>'NEWSHIP' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;

  -- P1: BOL
  htp.tablerowopen;
   htp.tabledata( htf.bold('BOL'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if v_action in (lngs.STR_STH_015) -- Rename
    then
     htp.tabledata( htf.formtext( 'P1', 30, 80, c3rec.bol), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   else
     htp.formhidden( 'P1', c3rec.bol );
     if v_action in (lngs.STR_STH_016) -- Confirm Rename
      then
       htp.tabledata( htf.bold( c3rec.bol ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
     else
       htp.tabledata( htf.anchor('strangp.bols?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_003 || '&rid_bs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || msg || '&call_name=' || call_name, c3rec.bol
                               , cattributes=>'title="Reload This Page"')
                     , cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     end if;
   end if;
  htp.tablerowclose;

  -- P5:
  htp.tablerowopen (cattributes=>'style="display:none;"');
   htp.tabledata( htf.bold('Delivery Date and Time'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P5', 25, 25, to_char(c3rec.del_date,LNGS.STR_DATE_02)) || '&nbsp;' || htf.italic(LNGS.STR_DATE_02), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
  htp.tablerowclose;

  -- P6: Customs Authority Number
  htp.tablerowopen;
   htp.tabledata( htf.bold('Customs Authority no.'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P6', 30, 100, c3rec.customs_auth_no), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
  htp.tablerowclose;

  -- P7: AQIS Clearance
  htp.tablerowopen;
   htp.tabledata( htf.bold('AQIS Clearance'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P7', 25, 25, to_char(c3rec.aqis_clearance,LNGS.STR_DATE_02)) || '&nbsp;' || htf.italic(replace(LNGS.STR_DATE_02, 'HH24:MI', '[HH24:MI]')), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
  htp.tablerowclose;

  -- P2: Shipper
  htp.tablerowopen;
   htp.tabledata( htf.bold('Shipper'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   customer_list( 'SOUTHBOUND', 'P2', c3rec.shipper, FALSE, isedit=>TRUE );
   htp.anchor( 'javascript: window.open(''' || 'oltp.display_screen?surl=' || surl || '&sname=Customers&rnd=63084&access_in=QUERY&rid=' || ''',''CUSTOMER_CODES'',''height=800,width=1200,scrollbars=yes,resizable=yes'');void('''');', '[Customer Codes]'
              , cattributes=>'title="Edit Code in a new window ***NOTE*** Reload this page for new codes to take effect"' );
   htp.p( '</TD>' );
  htp.tablerowclose;

  -- P3: Consignee
  htp.tablerowopen;
   htp.tabledata( htf.bold('Consignee'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   customer_list( 'SOUTHBOUND', 'P3', c3rec.consignee, FALSE, isedit=>TRUE );
   htp.p( '</TD>' );
  htp.tablerowclose;

  -- P4: Notifying Party
  htp.tablerowopen;
   htp.tabledata( htf.bold('Notifying Party'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   customer_list( 'SOUTHBOUND', 'P4', c3rec.notifying_party, FALSE, isedit=>TRUE );
   htp.p( '</TD>' );
  htp.tablerowclose;

  htp.tableclose; -- Table 2
  htp.nl;

  -- htp.p('</TD>');
 -- htp.tableopen(cattributes=>'cellpadding=2 cellspacing=2 border="0"');
 -- htp.tablerowclose;
  --htp.tablerowopen;
  --
 -- htp.tablerowclose;
 -- Submit Buttons
  htp.tablerowopen (cattributes=>'cellpadding=4 cellspacing=4 border="0"');
  if v_action in (lngs.STR_STH_015, lngs.STR_STH_016) -- Rename, Confirm Rename
   then
    htp.p('<TD VALIGN="TOP" WIDTH="25%">');
    htp.formsubmit( 'ACTION', v_action ); -- Rename
    htp.p('</TD>');
    htp.p('<TD VALIGN="TOP" WIDTH="25%">');
    htp.formsubmit( 'ACTION', lngs.STR_STH_005 ); -- List all Records
    htp.p('</TD>');
    htp.tabledata('&nbsp;', cattributes=>'COLSPAN="2"');
    htp.tablerowclose;
    htp.formclose;
  else
    
    htp.p('<TD cellpadding="4" VALIGN="CENTER" WIDTH="23%" COLSPAN=1>');
    htp.formsubmit( 'ACTION', lngs.STR_STH_003 ); -- Update
    htp.p('</TD>');
    htp.p('<TD cellpadding="4" VALIGN="CENTER" WIDTH="23%" COLSPAN=1>');
    htp.p( confirm_delete ( 'ACTION', lngs.STR_STH_004, 'Delete ' || c3rec.bol || ': Are you sure?' )); -- Delete
    htp.p('</TD>');
    htp.p('<TD cellpadding="4" VALIGN="CENTER" WIDTH="23%" COLSPAN=1>');
    htp.formsubmit( 'ACTION', lngs.STR_STH_005 ); -- Multiple Container Maintain
    htp.p('</TD>');
    htp.p('<TD  cellpadding="4" VALIGN="CENTER" WIDTH="23%" COLSPAN=1>');
    htp.formsubmit( 'ACTION', lngs.STR_STH_007 ); -- Insert Another Record
    htp.p('</TD>');
    htp.tablerowclose;
    htp.formclose;

    htp.tablerowopen ;
    --htp.tablerowopen;
/*
    htp.formopen( 'strangp.containers' );
    htp.formhidden( 'SURL', surl );
    htp.formhidden( 'PARM', 'CONTAINERS' );
    htp.formhidden( 'ACCESS_ID', 'z' );
    htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
    htp.formhidden( 'RID_BS', replace(rid_bs ,'~','+') );

    htp.p('<TD VALIGN="TOP">');
    htp.formsubmit( 'ACTION', lngs.STR_STH_008 ); -- Edit Containers
    htp.p('</TD>');
    htp.formclose;
*/
  --   htp.tablerowopen;
  --   htp.p('<TD>');
     htp.p('<CENTER>');
     htp.tableopen; 
     htp.tablerowopen;
    htp.formopen( 'strangp.hbs' );
    htp.formhidden( 'SURL', surl );
    htp.formhidden( 'PARM', 'HBS' );
    htp.formhidden( 'CALL_NAME', 'BOLS' );
    htp.formhidden( 'ACCESS_ID', 'z' );
    htp.formhidden( 'SCID', scid );
    htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
    htp.formhidden( 'RID_BS', replace(rid_bs ,'~','+') );

    htp.p('<TD>');
    htp.formsubmit( 'ACTION', lngs.STR_STH_012 ); -- Edit HBs
    htp.p('</TD>');
  --  htp.tablerowclose;
  --  htp.tablerowopen;
-- David Banjo 5/06/2020 uncommented the next 15 lines.

--    htp.formopen( 'strangp.dans' );
--    htp.formhidden( 'SURL', surl );
--    htp.formhidden( 'PARM', 'DANS' );
--    htp.formhidden( 'SCID', scid );
--    htp.formhidden( 'ACCESS_ID', 'z' );
--    htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
--    htp.formhidden( 'RID_BS', replace(rid_bs ,'~','+') );
--    htp.formhidden( 'RID_HS', null );
-- David Banjo
--    htp.p('<TD VALIGN="TOP">');
--    htp.formsubmit( 'ACTION', lngs.STR_STH_014 ); -- Break-Bulk DANs
--    htp.p('</TD>');
     htp.formclose;

     htp.p('<CENTER>');

    htp.formopen( 'strangp.containers_mass' );
    htp.formhidden( 'SURL', surl );
    htp.formhidden( 'SCID', scid );
    htp.formhidden( 'PARM', 'CONTAINERS_MASS' );
    htp.formhidden( 'ACCESS_ID', access_id );
    htp.p('<TD>');
    htp.formsubmit( 'ACTION', lngs.STR_STH_017 );
    htp.p('</TD>');
    htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
    htp.formhidden( 'RID_BS', replace(rid_bs,'~','+') );
--    htp.p('<TD VALIGN="TOP">');
--    htp.formsubmit( 'ACTION', lngs.STR_STH_017 );
    htp.p('</TD>');
    htp.formclose;
    htp.tablerowclose;

  end if;

  htp.tableclose; -- Table 1
 -- htp.p('</CENTER>');
 else
  null;
 end if;
 htp.nl;
 htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;

exception when others then
 glbx.error_details( 'strangp', 'BOLS',null,null,errmsg=>sqlerrm,extdet=>'RID_SS:' || rid_ss);
end bols;

procedure accept_bols( surl in varchar2, scid in integer, rid_ss in rowid, rid_bs in rowid, parm in varchar2, access_id in varchar2, action in varchar2,
            p1 in varchar2, p2 in varchar2, p3 in varchar2, p4 in varchar2, p5 in varchar2, p6 in varchar2, p7 in varchar2 )
is

 cursor c1 ( rid_bs rowid ) is select * from strang.bols where rowid = rid_bs ;
 cursor c2 ( v_bol varchar2, rid_ss rowid ) is
 select sb.*, sb.rowid
 from  strang.bols sb, strang.ships_airway ss
 where upper(v_bol) = upper(sb.bol)
     and sb.ship_id = ss.ship_id
     and ss.rowid = rid_ss
 ;
 cursor c3( rid_ss rowid ) is select * from strang.ships_airway where rowid = rid_ss;
 cursor c4( rid_bs rowid ) is
 select distinct msg from
  (
   select 'Delete Containers First. ' msg
   from  strang.movements m, strang.bols sb
   where ((m.ship_id = sb.ship_id and upper(m.bol) = upper(sb.bol)) or
       (m.local_ship_id = sb.ship_id and upper(m.local_bol) = upper(sb.bol)))
      and sb.rowid = rid_bs
  )
 ;
/*   UNION ALL
   select 'Delete HBs First. ' msg
   from  strang.hbs_southbound sc, strang.bols sb
   where upper(sc.ship) = upper(sb.ship)
      and upper(sb.voyage) = upper(sb.voyage)
      and upper(sb.bol) = upper(sc.bol)
      and sb.rowid = rid_bs
   UNION ALL
   select 'Delete DANs First. ' msg
   from  strang.dan_details_southbound sc, strang.bols sb
   where upper(sc.ship) = upper(sb.ship)
      and upper(sb.voyage) = upper(sb.voyage)
      and upper(sb.bol) = upper(sc.bol)
      and sb.rowid = rid_bs
*/
 c1rec   c1%rowtype;
 c2rec   c2%rowtype;
 c3rec   c3%rowtype;
 owner_id integer;
 ltype   varchar2(100);
 stype   integer;
 sts    varchar2(100);
 msg    varchar2(4000);
 lrid   rowid;
 v_rid_ss rowid;
 v_rid_bs rowid;

 begin

 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'strangp.ACCEPT_BOLS' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;
 
 v_rid_ss := replace(rid_ss, '~', '+');
 v_rid_bs := replace(rid_bs, '~', '+');

 open c3( v_rid_ss );
 fetch c3 into c3rec;
 if c3%NOTFOUND
  then
   htp.init;
   close c3;
   htp.htmlopen;
   htp.header(3,'Ships', 'CENTER' );
   htp.header(3,'RECORD NOT FOUND', 'CENTER' );
   htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
   htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
   htp.nl;
   htp.header(2,'Extra Information: ROWID = ' || nvl(v_rid_ss, 'NULL'), 'CENTER' );
   htp.htmlclose;
   return;
  end if;
  close c3;

 if action = lngs.STR_STH_004 -- Delete
  then
  open c1(v_rid_bs);
  fetch c1 into c1rec;
  if c1%NOTFOUND
   then
   close c1;
   htp.init;
   htp.htmlopen;
    htp.header(2,lngs.STR_STH_006, 'CENTER' );
    htp.header(2,'RECORD NOT FOUND', 'CENTER' );
    htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
    htp.header(2,LNGS.STR_TXT_290, 'CENTER' );
    htp.nl;
    htp.header(3,'Extra Information: ROWID = ' || nvl(v_rid_bs , 'NULL'), 'CENTER' );
   htp.htmlclose;
   return;
  end if;
  close c1;

  msg := null;
  for c4rec in c4(v_rid_bs ) loop
   msg := msg || c4rec.msg || '<BR>';
  end loop;

  if msg is not null
   then
   bols(surl, scid, v_rid_ss, v_rid_bs, parm, lngs.STR_STH_003, access_id, msg);
   return;
  end if;

  msg := 'Record Deleted: ' || c1rec.bol;


  delete from strang.bols where rowid = v_rid_bs ;
  commit;
  bols(surl,scid, v_rid_ss, null, parm, lngs.STR_STH_006, 'z', msg);
  return;
 elsif action = lngs.STR_STH_002 -- Insert
  then
  if p1 is null
   then
   msg := ('Please Enter BOL Number');
   bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
   return;
  end if;
  open c2(p1, v_rid_ss);
  fetch c2 into c2rec;
  if c2%FOUND
   then
   close c2;
   msg := ('Record already exists: ' || c2rec.bol);
   bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
   return;
  end if;
  close c2;

  -- Date Validation - Delivery Date
  begin
  c1rec.del_date := to_date(p5,LNGS.STR_DATE_02);
  exception when others then
  msg := '[Delivery Date] ' || LNGS.STR_TXT_152 || ': ' || p5 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
  return;
  end;
  if to_char(c1rec.del_date, 'yyyy') like '0%'
   then
    msg := '[Delivery Date] ' || LNGS.STR_TXT_152 || ': ' || p5 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
    bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
    return;
  end if;

  -- Date Validation - AQIS Clearance
  begin
  c1rec.aqis_clearance := to_date(p7,LNGS.STR_DATE_02);
  exception when others then
  msg := '[AQIS Clearance] ' || LNGS.STR_TXT_152 || ': ' || p7 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
  return;
  end;
  if to_char(c1rec.aqis_clearance, 'yyyy') like '0%'
   then
    msg := '[AQIS Clearance] ' || LNGS.STR_TXT_152 || ': ' || p7 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
    bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
    return;
  end if;

  msg := 'Record Inserted';
  insert into strang.bols (
        bol
       , ship_id
       , del_date
       , customs_auth_no
       , aqis_clearance
       , shipper
       , consignee
       , notifying_party)
      values (
        p1
       , c3rec.ship_id
       , c1rec.del_date
       , P6
       , c1rec.aqis_clearance
       , p2
       , p3
       , p4);
  commit;
  open c2(p1, v_rid_ss);
  fetch c2 into c2rec;
  close c2;
  bols(surl, scid, v_rid_ss, c2rec.rowid, parm, lngs.STR_STH_003, access_id, msg);
 elsif action = lngs.STR_STH_003 -- Update
  then
  open c2(p1, v_rid_ss);
  fetch c2 into c2rec;
  if c2%NOTFOUND
   then
   close c2;
   htp.init;
   htp.htmlopen;
    htp.header(3,lngs.STR_STH_006, 'CENTER' );
    htp.header(3,'RECORD NOT FOUND', 'CENTER' );
    htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
    htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
    htp.nl;
    htp.header(2,'Extra Information: ROWID = ' || nvl(v_rid_bs , 'NULL'), 'CENTER' );
   htp.htmlclose;
   bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
   return;
  end if;
  close c2;
  -- Date Validation - Delivery Date
  begin
  c1rec.del_date := to_date(p5,LNGS.STR_DATE_02);
  exception when others then
  msg := '[Delivery Date] ' || LNGS.STR_TXT_152 || ': ' || p5 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
  return;
  end;
  if to_char(c1rec.del_date, 'yyyy') like '0%'
   then
    msg := '[Delivery Date] ' || LNGS.STR_TXT_152 || ': ' || p5 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
    bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
    return;
  end if;

  -- Date Validation - AQIS Clearance
  begin
  c1rec.aqis_clearance := to_date(p7,LNGS.STR_DATE_02);
  exception when others then
  msg := '[AQIS Clearance] ' || LNGS.STR_TXT_152 || ': ' || p7 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
  return;
  end;
  if to_char(c1rec.aqis_clearance, 'yyyy') like '0%'
   then
    msg := '[AQIS Clearance] ' || LNGS.STR_TXT_152 || ': ' || p7 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
    bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
    return;
  end if;

  msg := 'Record Updated';
  update strang.bols
  set  bol = P1
     , del_date = c1rec.del_date
     , customs_auth_no = P6
     , aqis_clearance = c1rec.aqis_clearance
     , shipper = P2
     , consignee = P3
     , notifying_party = P4
  where rowid = v_rid_bs
  ;
  commit;
  bols(surl, scid, v_rid_ss, v_rid_bs, parm, action, access_id, msg);
  return;
 elsif action = lngs.STR_STH_007 -- Insert Another Record
  then
  bols(surl, scid, v_rid_ss, v_rid_bs, parm, lngs.STR_STH_007, 'z', msg);
 elsif action = lngs.STR_STH_015 -- Rename
  then
  if p1 is null
   then
   msg := ('Please Enter BOL Number');
   bols(surl, scid, v_rid_ss, c2rec.rowid, parm, action, access_id, msg);
   return;
  end if;
  open c1(v_rid_bs);
  fetch c1 into c1rec;
  close c1;
  open c2(p1, v_rid_ss);
  fetch c2 into c2rec;
  if c2%FOUND
     and
     c2rec.rowid <> v_rid_bs
   then
   close c2;
   msg := ('Record already exists: ' || c2rec.bol || '<BR>All records for BOL ' || c1rec.bol || ' will be transferred to ' || c2rec.bol || '<BR>Press [' || lngs.STR_STH_016 || '] to confirm');
   bols(surl, scid, v_rid_ss, v_rid_bs, parm, lngs.STR_STH_016, access_id, msg, P1=>P1, P2=>P2, P3=>P3, P4=>P4);
   return;
  end if;
  close c2;
  msg := 'Record Updated';

  update strang.bols
  set  bol = P1
     , shipper = P2
     , consignee = P3
     , notifying_party = P4
  where rowid = v_rid_bs
  ;
  update strang.hbs set bol = P1 where bol = c1rec.bol and ship_id = c1rec.ship_id;
--  update strang.dan_details_southbound set bol = P1 where bol = c1rec.bol and ship = c1rec.ship and voyage = c1rec.voyage;
  if c3rec.li = 'I' then
   update strang.movements set bol = P1 where bol = c1rec.bol and ship_id = c1rec.ship_id;
  else
   update strang.movements set local_bol = P1 where local_bol = c1rec.bol and ship_id = c1rec.ship_id;
  end if;
  commit;
  bols(surl, scid, v_rid_ss, v_rid_bs, parm, lngs.STR_STH_003, access_id, msg);
 elsif action = lngs.STR_STH_016 -- Confirm Rename
  then
  open c1(v_rid_bs );
  fetch c1 into c1rec;
  if c1%NOTFOUND
   then
   close c1;
   htp.init;
   htp.htmlopen;
    htp.header(2,lngs.STR_STH_006, 'CENTER' );
    htp.header(2,'RECORD NOT FOUND', 'CENTER' );
    htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
    htp.header(2,LNGS.STR_TXT_290, 'CENTER' );
    htp.nl;
    htp.header(3,'Extra Information: RID_BS = ' || v_rid_bs );
   htp.htmlclose;
   return;
  end if;
  close c1;
  open c2(p1, v_rid_ss);
  fetch c2 into c2rec;
  if c2%NOTFOUND
   then
   close c1;
   htp.init;
   htp.htmlopen;
    htp.header(2,lngs.STR_STH_006, 'CENTER' );
    htp.header(2,'RECORD NOT FOUND', 'CENTER' );
    htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
    htp.header(2,LNGS.STR_TXT_290, 'CENTER' );
    htp.nl;
    htp.header(3,'Extra Information: BOL = ' || P1 );
   htp.htmlclose;
   return;
  end if;
  close c2;
  msg := 'All records for BOL ' || c1rec.bol || ' merged with BOL ' || c2rec.bol;
  update strang.hbs set bol = c2rec.bol where ship_id = c2rec.ship_id and bol = c1rec.bol;
--  update strang.dan_details_southbound set bol = c2rec.bol where ship = c2rec.ship and voyage = c2rec.voyage and bol = c1rec.bol;
  if c3rec.li = 'I' then
   update strang.movements set bol = c2rec.bol where ship_id = c2rec.ship_id and bol = c1rec.bol;
  else
   update strang.movements set local_bol = c2rec.bol where ship_id = c2rec.ship_id and local_bol = c1rec.bol;
  end if;

  delete from strang.bols where rowid = v_rid_bs;
  update strang.bols
  set  shipper = P2
     , consignee = P3
     , notifying_party = P4
  where rowid = c2rec.rowid
  ;
  bols(surl, scid, v_rid_ss, c2rec.rowid, parm, lngs.STR_STH_003, access_id, msg);
-- David Banjo 15/6/2020
 elsif  action = lngs.STR_STH_017 then -- Multiple Container Maintain
  null;
 else -- List all Records
 
  bols(surl, scid, v_rid_ss, null, parm, lngs.STR_STH_006, 'z', msg);
 end if;

exception when others then
 glbx.error_details( 'strangp', 'ACCEPT_BOLS', null, owner_id, errmsg=>sqlerrm, extdet=>'PARM:' || parm);
end accept_bols;
----------------------------------------------------------------------------20200428
procedure hbs (surl in varchar2, scid in integer, rid_ss in rowid, rid_bs rowid default null, rid_hs rowid default null, parm in varchar2, action in varchar2, access_id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null )
is

cursor c1 ( rid_bs rowid ) is select bs.*,ss.shipname,ss.voy, ss.io from strang.bols bs, strang.ships_airway ss where ss.ship_id = bs.ship_id and bs.rowid = rid_bs ;
cursor c1a ( rid_ss rowid ) is select * from strang.ships_airway where rowid = rid_ss ;

cursor c2 (rid_bs rowid) is
 select lngs.STR_STH_005 tot -- List all Records
 from  strang.hbs hs, strang.bols bs
 where bs.rowid = rid_bs
    and hs.ship_id = bs.ship_id
    and upper(hs.bol) = upper(bs.bol);

cursor c3a (rid_bs rowid, rid_ss rowid) is
 select distinct hs.*, hs.rowid
 from   strang.hbs hs, strang.bols bs, strang.ships_airway ss
 where  (rid_bs is not null
         and bs.rowid = rid_bs
         and hs.ship_id = bs.ship_id
         and upper(hs.bol) = upper(bs.bol)
        )
        or
        (rid_bs is null
	         and ss.rowid = rid_ss
                 and hs.ship_id = bs.ship_id
                 and hs.ship_id = ss.ship_id
        )
 order by hs.house_bill asc
;
cursor c3b (rid_bs rowid) is
 select hs.*, hs.rowid
 from  strang.hbs hs, strang.bols bs
 where bs.rowid = rid_bs
    and hs.ship_id = bs.ship_id
    and upper(hs.bol) = upper(bs.bol)
 order by hs.house_bill desc
;
cursor c3c(rid_hs rowid) is select hs.*, hs.rowid from strang.hbs hs where rowid = rid_hs ;

cursor c4(rid_bs rowid) is select * from strang.bols bs where bs.rowid = rid_bs;

cursor c5(rid_hs rowid) is
 select bs.*, bs.rowid
 from   strang.bols bs, strang.hbs hs
 where  hs.rowid = rid_hs
        and hs.ship_id = bs.ship_id
        and upper(hs.bol) = upper(bs.bol)
;

-- David Banjo 16.06.2020

cursor c6 (v_ship_id int, v_bol varchar2, v_hb varchar2 ) is
select count(distinct movement_id) cnt
from 
(( select m.movement_no||nvl(m.seal,'|') movement_id
  from strang.movements m, strang.detailrs dr1 
 where m.ship_id = v_ship_id
   and m.movement_no = dr1.movement_no (+)
   and nvl(m.seal,'|') = nvl(dr1.camov_seal (+),'|')
   and m.bol = v_bol
   and m.hb = v_hb
   and not exists (select 'x'
                     from strang.detailrs dr2, strang.receivals r
                    where dr2.movement_no = m.movement_no
                      and nvl(dr2.camov_seal,'|')  = nvl(m.seal,'|')
                      and dr1.itemno = dr2.itemno
                      and dr2.deliveryno = r.deliveryno
                      and r.hb is not null))
  union
 ( select m.movement_no||nvl(m.seal,'|')
  from strang.movements m, strang.detailrs dr1 
 where m.local_ship_id = v_ship_id
   and m.movement_no = dr1.movement_no (+)
   and nvl(m.seal,'|') = nvl(dr1.camov_seal(+),'|')
   and m.local_bol = v_bol
   and m.local_hb = v_hb
   and not exists (select 'x'
                     from strang.detailrs dr2, strang.receivals r
                    where dr2.movement_no = m.movement_no
                      and nvl(dr2.camov_seal,'|')  = nvl(m.seal,'|')
                      and dr1.itemno = dr2.itemno
                      and dr2.deliveryno = r.deliveryno
                      and r.local_hb is not null) 
  )
 );

cursor c7 (v_ship_id int, v_bol varchar2, v_hb varchar2 ) is
select count( key_id) cnt
from 
(( select r.deliveryno||dr2.movement_no||nvl(dr2.camov_seal,'|') key_id
  from strang.receivals r, strang.detailrs dr2
  where r.deliveryno = dr2.deliveryno
    and r.hb = v_hb 
   and exists (select 'x'
                 from strang.detailrs dr1, strang.movements m
                where dr1.movement_no = m.movement_no
                  and nvl(dr1.camov_seal,'|') = nvl(m.seal,'|')
                  and m.ship_id = v_ship_id
                  and dr2.itemno = dr1.itemno
                  and dr1.deliveryno = r.deliveryno
                  and m.bol = v_bol)
   and not exists (select 'x'
                     from strang.detailrs dr3, strang.movements m
                    where dr3.movement_no = m.movement_no
                      and nvl(dr3.camov_seal,'|')  = nvl(m.seal,'|')
                      and m.ship_id = v_ship_id
                      and dr3.itemno = dr2.itemno
                      and dr3.deliveryno = r.deliveryno
                      and m.hb is not null))
  union
 ( select r.deliveryno||dr1.movement_no||nvl(dr1.camov_seal,'|') key_id
      from strang.receivals r, strang.detailrs dr1
     where r.deliveryno = dr1.deliveryno
       and r.local_hb = v_hb 
       and exists (select 'x'
                    from strang.detailrs dr2, strang.movements m
                   where dr2.movement_no = m.movement_no
                     and nvl(dr2.camov_seal,'|') = nvl(m.seal,'|')
                     and m.local_ship_id = v_ship_id
                     and dr2.itemno = dr1.itemno
                     and dr2.deliveryno = r.deliveryno
                     and m.local_bol = v_bol)
   and not exists (select 'x'
                     from strang.detailrs dr3, strang.movements m
                    where dr3.movement_no = m.movement_no
                      and nvl(dr3.camov_seal,'|')  = nvl(m.seal,'|')
                      and m.local_ship_id = v_ship_id
                      and dr3.itemno = dr1.itemno
                      and dr3.deliveryno = r.deliveryno
                      and m.local_hb is not null)
  )
 );

 c1rec     c1%rowtype;
 c1arec    c1a%rowtype;
 c3rec     c3a%ROWTYPE;
 c4rec     c4%ROWTYPE;
 c5rec     c5%ROWTYPE;
 c6rec     c6%ROWTYPE;
 c7rec     c7%ROWTYPE;
 ltype     varchar2(100);
 owner_id  integer;
 stype     integer;
 cusrec    customer_account%ROWTYPE;
 v_action  varchar2(100);
 v_prev_action varchar2(100);
 vste      varchar2(10);
 pfx       THEME%ROWTYPE;
 vaccess   varchar2(20);
 seclevel  varchar2(100);
 sts       varchar2(100);
 v_io      varchar2(1);
 v_rid_ss  rowid;
 v_rid_bs  rowid;
 v_rid_hs  rowid;
 v_shipname    strang.ships_airway.shipname%TYPE;
 v_voy     strang.ships_airway.voy%TYPE;
 v_ship_id strang.ships_airway.ship_id%TYPE;

begin

 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.HBS' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;

 v_rid_ss := replace(rid_ss, '~', '+');
 v_rid_bs := replace(rid_bs, '~', '+');
 v_rid_hs := replace(rid_hs, '~', '+');

 cusrec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(cusrec.aid);
 pfx := glbx.get_thm( cusrec.theme_name );
 vaccess := strangp.data_access( owner_id, 'SHP_SB', v_rid_ss );
 seclevel := oltp.security_role( owner_id );

 if rid_bs is not null
  then
   open c1(v_rid_bs );
   fetch c1 into c1rec;
   if c1%NOTFOUND
   then
    htp.init;
    close c1;
    htp.htmlopen;
    htp.header(3,'Bills of Lading', 'CENTER' );
    htp.header(3,'RECORD NOT FOUND', 'CENTER' );
    htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
    htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
    htp.nl;
    htp.header(2,'Extra Information: ROWID = ' || nvl(v_rid_bs , 'NULL'), 'CENTER' );
    htp.htmlclose;
    return;
   end if;
   close c1;
   v_shipname := c1rec.shipname;
   v_voy := c1rec.voy;
   v_ship_id := c1rec.ship_id;
   v_io := c1rec.io;
 else
   open c1a(v_rid_ss );
   fetch c1a into c1arec;
   if c1a%NOTFOUND
   then
    htp.init;
    close c1a;
    htp.htmlopen;
    htp.header(3,'Ships', 'CENTER' );
    htp.header(3,'RECORD NOT FOUND', 'CENTER' );
    htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
    htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
    htp.nl;
    htp.header(2,'Extra Information: ROWID = ' || nvl(v_rid_ss , 'NULL'), 'CENTER' );
    htp.htmlclose;
    return;
   end if;
   close c1a;
   v_shipname := c1arec.shipname;
   v_voy := c1arec.voy;
   v_ship_id := c1arec.ship_id;
   v_io := c1arec.io;
  -- v_action := lngs.STR_STH_005;
 end if;
 
   open c1a(replace(v_rid_ss,'~','+'));
   fetch c1a into c1arec;
   close c1a;
   v_io := c1arec.io;
 

 v_action := nvl(v_action, action);
 v_prev_action := v_action;
 if (v_action = lngs.STR_STH_005 and rid_bs is not null) -- List all Records
 or v_action = lngs.STR_STH_012 -- Edit HBs
 then
  open c2 (v_rid_bs );
  fetch c2 into v_action;
  if c2%NOTFOUND
  then  
     v_action := lngs.STR_STH_023; -- Insert New House Bill
  end if;
  close c2;
 end if;


 glbx.main_title( surl, 'House Bills',glbx.backimg(surl,cusrec.aid,pfx.text_back,cusrec.background_img,ltype),helpid=>'STR16',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 htp.p( '<CENTER>' );

 if msg is not null
 then
    glbx.header_msg( msg );
-- elsif v_action = lngs.STR_STH_023 and v_prev_action = lngs.STR_STH_005 then
--    glbx.header_msg('No House Bills have been created for this Bill of Laden');
 end if;

 if v_action in (lngs.STR_STH_005) -- List and Edit House bill
 then
  htp.p('<CENTER>');
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=0' ); -- Table 1
  htp.tablerowopen;
   htp.tabledata( htf.bold(lngs.STR_STH_025), ' ALIGN="LEFT"');
   htp.formhidden( 'PARM', 'HBS' );
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tableclose;
  htp.p('</CENTER>');
 -- htp.tablerowopen;
  --htp.p( '<TD align="LEFT" colspan="3">' );
  
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border="1" ' || glbx.TABLE_BACKGROUND ); -- Table 2
   htp.tablerowopen;

   if nvl( v_io,'I') = 'I' then
      htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="3"');
   else
      htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="3"');
   end if;

   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Ship ID'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if rid_bs is null
     then
    htp.tabledata( htf.bold(v_ship_id), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3"');
--      htp.tabledata( htf.anchor('strangsb.ship?surl=' || surl || '&rid_ss=' || replace(rid_ss, '+', '~') || '&parm=SHIPS&access_id=x', v_ship), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="2"');
    else
    htp.tabledata( htf.bold(v_ship_id), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--      htp.tabledata( htf.anchor('strangsb.ship?surl=' || surl || '&rid_ss=' || replace(rid_ss, '+', '~') || '&parm=SHIPS&access_id=x', v_ship), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    end if;

   htp.tablerowclose;
   htp.tablerowopen;
    htp.tabledata( htf.bold('Ship & Voyage'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    if rid_bs is null
     then
    htp.tabledata( htf.bold(v_shipname||' '||v_voy), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="2"');
    else
    htp.tabledata( htf.bold(v_shipname||' '||v_voy), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    end if;

   htp.tablerowclose;
   if rid_bs is not null
    then
     htp.tablerowopen;
     htp.tabledata( htf.bold('Bill of Lading'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.anchor('strangP.bols?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || 'BOLS' || '&action=' || lngs.STR_STH_003 || '&rid_bs=' || replace(rid_bs, '+', '~') || '&access_id=x&msg=' || msg || '&call_name=' || call_name, c1rec.bol));
     htp.tablerowclose;
   else
     htp.tablerowopen;
      htp.tabledata( htf.bold('HB'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.bold('BOL'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tablerowclose;
   end if;
   htp.p(confirm_delete(script_only=>TRUE));
   
     htp.tablerowopen;
      htp.tabledata( htf.bold('House Bill(s)'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.bold(''), calign =>'CENTER', cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
 --     htp.tabledata( htf.anchor('strangP.bols?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_003 || '&rid_bs=' || replace(rid_bs, '+', '~') || '&access_id=x&msg=' || msg || '&call_name=' || call_name, c1rec.bol));
     htp.tablerowclose;
   
   
   for c3rec in c3a(v_rid_bs, v_rid_ss) loop
    if rid_bs is null
     then
      open c5(c3rec.rowid);
      fetch c5 into c5rec;
      close c5;
      v_rid_bs := replace(c5rec.rowid, '+', '~');
    else
      v_rid_bs := replace(rid_bs, '+', '~');
    end if;
    htp.tablerowopen;
     htp.tabledata( c3rec.house_bill, ' ALIGN="LEFT"');
     if rid_bs is null
      then
       htp.tabledata( htf.anchor('strangP.bols?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_003 || '&rid_bs=' || v_rid_bs || '&access_id=x&msg=' || msg || '&call_name=' || call_name, c5rec.bol));
     end if;
     
   open c6(c3rec.ship_id,c3rec.bol,c3rec.house_bill);
   fetch c6 into c6rec;
   close c6;
   
   open c7(c3rec.ship_id,c3rec.bol,c3rec.house_bill);
   fetch c7 into c7rec;
   close c7;
   
    if  (c6rec.cnt > 0 and c7rec.cnt > 0 ) then
     -- David Banjo Changed on 08.06.2020
     htp.tabledata( htf.anchor('STRANGP.HBS?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_021 || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || msg || '&call_name=' || call_name, 'Update') ||
            '&nbsp;' ||
            htf.anchor('STRANGP.ACCEPT_HBS?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_004 || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&P1=&P2=&P3=&P4=&P5=&P6=&P7=', 'Delete', cattributes=>'onClick="return confirmPost(''Delete ' || c3rec.house_bill || ': Are you sure?'')"')||
            '&nbsp;' ||
            htf.anchor('STRANGP.containers_mass?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=HBS&action=' || lngs.STR_STH_019 || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || null || '&call_name=' || call_name, 'Container/BBulk ('||c6rec.cnt ||')')||
            '&nbsp;' ||
            htf.anchor('STRANGP.dans?surl='            || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || 'List Contents Allocated To Contents' || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || null || '&call_name=' || call_name, 'Receival Contents ('||c7rec.cnt ||')')
            , cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    elsif (c6rec.cnt = 0 and c7rec.cnt = 0 ) then 
        htp.tabledata( htf.anchor('STRANGP.HBS?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_021 || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || msg || '&call_name=' || call_name, 'Update') ||
            '&nbsp;' ||
            htf.anchor('STRANGP.ACCEPT_HBS?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_004 || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&P1=&P2=&P3=&P4=&P5=&P6=&P7=', 'Delete', cattributes=>'onClick="return confirmPost(''Delete ' || c3rec.house_bill || ': Are you sure?'')"')||
            '&nbsp;' || htf.fontOpen(ccolor=>'#808080' )||'Container/BBulk'||' ('||c6rec.cnt ||')'||htf.fontClose||
            '&nbsp;' || htf.fontOpen(ccolor=>'#808080' )||'Receival Contents'||' ('||c7rec.cnt ||')'||htf.fontClose
            , cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    elsif (c6rec.cnt = 0 and c7rec.cnt > 0 ) then 
         htp.tabledata( htf.anchor('STRANGP.HBS?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_021 || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || msg || '&call_name=' || call_name, 'Update') ||
            '&nbsp;' ||
            htf.anchor('STRANGP.ACCEPT_HBS?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_004 || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&P1=&P2=&P3=&P4=&P5=&P6=&P7=', 'Delete', cattributes=>'onClick="return confirmPost(''Delete ' || c3rec.house_bill || ': Are you sure?'')"')||
            '&nbsp;' || htf.fontOpen(ccolor=>'#808080' )||'Container/BBulk'||' ('||c6rec.cnt ||')'||htf.fontClose||
            '&nbsp;' ||
            htf.anchor('STRANGP.dans?surl='            || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || 'List Contents Allocated To Contents' || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || null || '&call_name=' || call_name, 'Receival Contents ('||c7rec.cnt ||')')
            , cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    elsif (c6rec.cnt > 0 and c7rec.cnt = 0 ) then 
             htp.tabledata( htf.anchor('STRANGP.HBS?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_021 || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || msg || '&call_name=' || call_name, 'Update') ||
            '&nbsp;' ||
            htf.anchor('STRANGP.ACCEPT_HBS?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_004 || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&P1=&P2=&P3=&P4=&P5=&P6=&P7=', 'Delete', cattributes=>'onClick="return confirmPost(''Delete ' || c3rec.house_bill || ': Are you sure?'')"')||
            '&nbsp;' ||
            htf.anchor('STRANGP.containers_mass?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || lngs.STR_STH_019 || '&rid_bs=' || v_rid_bs || '&rid_hs=' || replace(c3rec.rowid, '+', '~') || '&access_id=x&msg=' || null || '&call_name=' || call_name, 'Container/BBulk ('||c6rec.cnt ||')')||
            '&nbsp;' || htf.fontOpen(ccolor=>'#808080' )||'Receival Contents'||' ('||c7rec.cnt ||')'||htf.fontClose
            , cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

    end if;
         
    htp.tablerowclose;
    end loop;

  -- Submit Buttons

   htp.tablerowopen;

   htp.formopen( 'STRANGP.HBS' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
   htp.formhidden( 'RID_BS', replace(rid_bs ,'~','+') );
   htp.formhidden( 'RID_HS', null );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', 'HBS' );  -- Changed from BOLS by David Banjo on 6/7/2020
   htp.formhidden( 'ACCESS_ID', 'z' );
   htp.p('<TD VALIGN="TOP">');
   htp.formsubmit( 'ACTION', lngs.STR_STH_023 ); -- Insert House Bill
   htp.p('</TD>');
   htp.formclose;
   htp.formopen( 'strangp.containers_mass' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
   htp.formhidden( 'PARM', 'HBS' );
   htp.formhidden( 'ACCESS_ID', 'z' );
   htp.formhidden( 'RID_BS', replace(rid_bs,'~','+') );
   htp.p('<TD VALIGN="TOP">');

-- David Banjo 05/06/2020
   htp.formsubmit( 'ACTION', LNGS.STR_STH_019 ); -- Allocate House Bills
   htp.p('</TD>');
   htp.formclose;
   htp.tablerowclose;

--  David Banjo removed Sallies instruction
   htp.tablerowopen;
   htp.p('<TD VALIGN="TOP">');
   htp.p('</TD>');
   htp.formopen( 'strangp.dans' );
   htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
   htp.formhidden( 'PARM', 'DANS' );
   htp.formhidden( 'ACCESS_ID', 'z' );
   htp.formhidden( 'RID_BS', replace(rid_bs,'~','+') );
   htp.p('<TD VALIGN="TOP">');
   -- David Banjo
   htp.formsubmit( 'ACTION', LNGS.STR_STH_020 ); -- 'Allocate House Bills to Contents'
   htp.p('</TD>');
   htp.formclose;
   htp.tablerowclose;

   htp.tableclose;
   htp.p('</TD>');

  htp.tablerowclose;
  htp.tableclose; -- Table 1
   htp.nl;
   htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
  htp.p( '</CENTER>' );
  return;
 end if;

 if v_action in ( lngs.STR_STH_021, lngs.STR_STH_023, lngs.STR_STH_022, lngs.STR_STH_012) -- Insert New Record | Update Record | Insert Another Record
 then

  if v_rid_hs is null   -- Default values to pre-populate fields
  then
   open c3b( v_rid_bs );
   fetch c3b into c3rec;
   close c3b;
  else
   open c3c( v_rid_hs );
   fetch c3c into c3rec;
   if v_action = lngs.STR_STH_021 -- Update Record
   and c3c%NOTFOUND
   then
    close c3c;
    htp.init;
    htp.htmlopen;
    htp.header(3,'House Bills', 'CENTER' );
    htp.header(3,'RECORD NOT FOUND', 'CENTER' );
    htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
    htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
    htp.nl;
    htp.header(2,'Extra Information: ROWID = ' || nvl(v_rid_hs , 'NULL'), 'CENTER' );
    htp.htmlclose;
    return;
   end if;
   close c3c;
  end if;

  htp.tableopen; -- Table 1
  htp.tablerowopen;
 -- htp.p( '<CENTER>' );
  htp.p( '<TD align="CENTER" colspan="3">' );
  htp.formopen( 'STRANGP.ACCEPT_HBS' );
  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'SCID', scid );
  htp.formhidden( 'CALL_NAME', call_name );
  htp.formhidden( 'RID_SS', replace(rid_ss,'~','+') );
  htp.formhidden( 'RID_BS', replace(rid_bs ,'~','+') );
  htp.formhidden( 'RID_HS', replace(rid_hs ,'~','+') );
  htp.formhidden( 'PARM', 'HBS' );
  htp.formhidden( 'ACCESS_ID', 'z' );
 -- Main Table
 
 --  if v_action in ( lngs.STR_STH_003, lngs.STR_STH_021) then
      htp.tableopen( calign=> 'CENTER', cattributes=>'cellpadding=2 cellspacing=10 border=0' ); -- Table 1
      htp.tablerowopen (calign=> 'CENTER');
      htp.tabledata( htf.bold(v_action) , 'ALIGN="RIGHT"');
      htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
      htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
      htp.tablerowclose;
      htp.tableclose;
      htp.tablerowopen;
      htp.p( '<TD align="CENTER" colspan="2">' );
      htp.p( '<CENTER>' );
      htp.tableopen( calign=> 'CENTER', cattributes=>'cellpadding=2 cellspacing=2 border="1" ' || glbx.TABLE_BACKGROUND ); -- Table 2
      htp.tablerowopen;
      if nvl(c1arec.io,'I') = 'I' then
         htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="3"');
      else
         htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="3"');
      end if;
     htp.tablerowclose;


  -- Ship
    htp.tablerowopen;
    htp.tabledata( htf.bold('Ship ID'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold(v_ship_id), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
 --  htp.tabledata( htf.anchor('strangsb.ship?surl=' || surl || '&rid_ss=' || replace(rid_ss, '+', '~') || '&parm=SHIPS&access_id=x', c1rec.ship ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
    htp.tablerowclose;

  -- Voyage
    htp.tablerowopen;
    htp.tabledata( htf.bold('Ship & Voyage'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
    htp.tabledata( htf.bold(v_shipname||' '||v_voy), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--   htp.tabledata( htf.bold( c1rec.voyage ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
    htp.tablerowclose;

  -- BOL
  htp.tablerowopen;
   htp.tabledata( htf.bold('BOL'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
 --  htp.tabledata( htf.anchor('strangsb.bols?surl=' || surl || '&rid_ss=' || replace(rid_ss, '+', '~') || '&parm=BOLS&action=Update Record&rid_bs=' || replace(rid_bs, '+', '~') || '&access_id=x&msg=&call_name=', c1rec.bol), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   htp.tabledata( htf.anchor('strangp.bols?surl=' || surl ||'&scid=' || scid || '&rid_ss=' || replace(rid_ss, '+', '~') || '&parm=BOLS&action=Update Bill of Lading&rid_bs=' || replace(rid_bs, '+', '~') || '&access_id=x&msg=&call_name=', c1rec.bol), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );

  htp.tablerowclose;

  -- P1: House Bill
  htp.tablerowopen;
   htp.tabledata( htf.bold('House Bill'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
/*
   if v_action = lngs.STR_STH_003 -- Update Record
   then
    htp.formhidden( 'P1', c3rec.house_bill );
--    htp.tabledata( htf.bold( c3rec.house_bill ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
    htp.tabledata( htf.anchor( 'STRANGP.HBS?surl=' || surl || '&rid_ss=' || replace(rid_ss, '+', '~') || '&parm=' || parm || '&action=' || v_action || '&rid_bs=' || replace(rid_bs, '+', '~') || '&rid_hs=' || replace(rid_hs, '+', '~') || '&access_id=' || access_id || '&msg=' || msg || '&call_name=' || call_name
                             , c3rec.house_bill
                             , cattributes=>'title="Reload this page"' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   else
*/
    htp.tabledata( htf.formtext( 'P1', 15, 15, c3rec.house_bill)
                                 || '&nbsp;'
                                 || htf.anchor( 'STRANGP.HBS?surl=' || surl || '&scid=' || scid ||'&rid_ss=' || replace(rid_ss, '+', '~') || '&parm=' || parm || '&action=' || v_action || '&rid_bs=' || replace(rid_bs, '+', '~') || '&rid_hs=' || replace(rid_hs, '+', '~') || '&access_id=' || access_id || '&msg=' || msg || '&call_name=' || call_name
                                              , '[Reload]'
                                              , cattributes=>'title="Reload this page"'
                                              )
                               , cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"'
                               );
--   end if;
  htp.tablerowclose;

  open c4(v_rid_bs);
  fetch c4 into c4rec;
  close c4;

  -- P5: Delivery Date and Time
  htp.tablerowopen (cattributes=>'style="display:none;"');
   htp.tabledata( htf.bold('Delivery Date and Time'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P5', 25, 25, to_char(c3rec.del_date,LNGS.STR_DATE_02)) || '&nbsp;' || htf.italic(LNGS.STR_DATE_02), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
  htp.tablerowclose;

  -- P6: Customs Authority Number
  htp.tablerowopen;
   htp.tabledata( htf.bold('Customs Authority no.'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P6', 30, 100, c3rec.customs_auth_no), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
  htp.tablerowclose;

  -- P7: AQIS Clearance
  htp.tablerowopen;
   htp.tabledata( htf.bold('AQIS Clearance'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.formtext( 'P7', 25, 25, to_char(c3rec.aqis_clearance,LNGS.STR_DATE_02)) || '&nbsp;' || htf.italic(replace(LNGS.STR_DATE_02, 'HH24:MI', '[HH24:MI]')), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
  htp.tablerowclose;

  -- P4: Shipper
  htp.tablerowopen;
   htp.tabledata( htf.bold('Shipper'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   customer_list( 'SOUTHBOUND', 'P4', nvl(c3rec.shipper, c4rec.shipper), FALSE, isedit=>TRUE );
   htp.anchor( 'javascript: window.open(''' || 'oltp.display_screen?surl=' || surl || '&sname=Customers&rnd=63084&access_in=QUERY&rid=' || ''',''CUSTOMER_CODES'',''height=800,width=1200,scrollbars=yes,resizable=yes'');void('''');', '[Customer Codes]'
             , cattributes=>'title="Edit Code in a new window ***NOTE*** Reload this page for new codes to take effect"');
   htp.p( '</TD>' );
  htp.tablerowclose;

  -- P2: Consignee
  htp.tablerowopen;
   htp.tabledata( htf.bold('Consignee'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   customer_list( 'SOUTHBOUND', 'P2', nvl(c3rec.consignee, c4rec.consignee), FALSE, isedit=>TRUE );
   if v_action <> lngs.STR_STH_003 -- Update Record
   then
    htp.anchor('STRANGP.HBS?surl=' || surl || '&scid=' || scid ||'&rid_ss=' || replace(rid_ss, '+', '~') || '&rid_bs=' || replace(rid_bs, '+', '~') || '&rid_hs=&parm=' || parm || '&action=' || v_action || '&access_id=' || access_id || '&msg=' || msg || '&call_name=' || call_name, '[Reload Page]'
              , cattributes=>'title="Reload page with any new codes"');
   end if;
   htp.p( '</TD>' );
  htp.tablerowclose;

  -- P3: Notifying Party
  htp.tablerowopen;
   htp.tabledata( htf.bold('Notifying Party'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   customer_list( 'SOUTHBOUND', 'P3', nvl(c3rec.notifying_party, c4rec.notifying_party), FALSE, isedit=>TRUE );
   htp.p( '</TD>' );
  htp.tablerowclose;

  htp.tableclose; -- Table 2
 -- htp.p('</TD>');

 -- htp.tableopen; 
   
 -- htp.p( '</CENTER>' );
 -- htp.tablerowclose;
  htp.nl;
  htp.tableopen(calign => 'CENTER');
  htp.tablerowopen;
  if v_action = lngs.STR_STH_023 and msg = 'Record Inserted' -- Insert House Bill Update House Bill Record
  then
     htp.p('<TD VALIGN="TOP">');
     htp.formsubmit( 'ACTION', lngs.STR_STH_022 ); -- Insert Another House Bill
     htp.p('</TD>');
     htp.p('<TD VALIGN="TOP" >');
     htp.formsubmit( 'ACTION', lngs.STR_STH_005 ); -- List All Records
    htp.p('</TD>');   
   elsif v_action = lngs.STR_STH_023 then
     htp.p('<TD VALIGN="TOP">');
     htp.formsubmit( 'ACTION', lngs.STR_STH_023 ); -- Insert House Bill
     htp.p('</TD>');  
     htp.p('<TD VALIGN="TOP" >');
     htp.formsubmit( 'ACTION', lngs.STR_STH_011 ); -- Cancel
     htp.p('</TD>');
  else -- v_action = lngs.STR_STH_023 then
     htp.p('<TD VALIGN="TOP">');
     htp.formsubmit( 'ACTION', lngs.STR_STH_021 ); -- Update House Bill
     htp.p('</TD>');
   --  htp.p('&nbsp;');
     htp.p('<TD VALIGN="TOP" >');
     htp.formsubmit( 'ACTION', lngs.STR_STH_023 ); -- Insert another house Bill
     htp.p('</TD>');
    -- htp.p('&nbsp;');
--     htp.p('<TD VALIGN="TOP" >');
--     htp.formsubmit( 'ACTION', lngs.STR_STH_005 ); -- List All Records
--     htp.p('</TD>');
     htp.p('<TD VALIGN="TOP" >');
     htp.p( confirm_delete ( 'ACTION', lngs.STR_STH_004, 'Delete ' || c3rec.house_bill || ': Are you sure?' )); -- Delete
     htp.p('</TD>');
     htp.p('<TD VALIGN="TOP" >');
     htp.formsubmit( 'ACTION', lngs.STR_STH_011 ); -- Cancel
     htp.p('</TD>');
  end if;
  
 -- htp.p('&nbsp;');
     if v_action <> lngs.STR_STH_023 then
       htp.p('<TD VALIGN="TOP" >');
       htp.formsubmit( 'ACTION', lngs.STR_STH_005 ); -- List All Records
       htp.p('</TD>');
     end if;
     htp.tablerowclose;
    -- htp.nl;
    htp.tableclose;
--    htp.tableopen;
--    htp.tablerowopen;
--     htp.p( '<CENTER>' );
--    -- htp.tabledata(cattributes=>'COLSPAN="3"');
--     htp.p('<TD VALIGN="TOP">');
--     htp.formsubmit( 'ACTION', lngs.STR_STH_019 ); -- Multiple Container Maintain - name changed by David Banjo 10.6.2020
--     htp.p('</TD>');
--     htp.tablerowclose;
     htp.tableclose; -- Table 1
     htp.formclose;
 

 else
  null;
 end if;
 htp.nl;
 --htp.p('<CENTER><a href="" onClick="self.close()">[Close Window]</a></CENTER>');
 htp.bold( '<CENTER><a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a></CENTER>'); 
 htp.nl;

exception when others then
 glbx.error_details( 'STRANGSB', 'HBS',null,null,errmsg=>sqlerrm,extdet=>'RID_SS:' || rid_ss || '; RID_BS :' || rid_bs);
end hbs;

procedure accept_hbs( surl in varchar2, scid in integer, rid_ss in rowid, rid_bs in rowid, rid_hs in rowid, parm in varchar2, access_id in varchar2, action in varchar2, call_name in varchar2 default null,  p1 in varchar2, p2 in varchar2, p3 in varchar2, p4 in varchar2, p5 in varchar2, p6 in varchar2, p7 in varchar2 )
is

cursor c1 (rid_hs rowid) is select hs.*, hs.rowid from strang.hbs hs where rowid = rid_hs;
cursor c2 (rid_bs rowid) is select * from strang.bols where rowid = rid_bs;
cursor c3 (rid_bs rowid, hb varchar2) is
 select hs.rowid
 from  strang.hbs hs, strang.bols bs
 where upper(hs.house_bill) = upper(hb)
    and hs.ship_id = bs.ship_id
    and upper(hs.bol) = upper(bs.bol)
    and bs.rowid = rid_bs
;

 c1rec    c1%ROWTYPE;
 c2rec    c2%ROWTYPE;
 c3rec    c3%ROWTYPE;
 owner_id integer;
 ltype    varchar2(100);
 stype    integer;
 sts      varchar2(100);
 msg      varchar2(4000);
 v_rid_ss rowid;
 v_rid_bs rowid;
 v_rid_hs rowid;

begin

 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_HBS' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 v_rid_ss := replace(rid_ss, '~', '+');
 v_rid_bs := replace(rid_bs, '~', '+');
 v_rid_hs := replace(rid_hs, '~', '+');

 open c2( v_rid_bs );
 fetch c2 into c2rec;
 if c2%NOTFOUND
  then
  htp.init;
  close c2;
  htp.htmlopen;
   htp.header(3,'Bills of Lading', 'CENTER' );
   htp.header(3,'RECORD NOT FOUND', 'CENTER' );
   htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
   htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
   htp.nl;
   htp.header(2,'Extra Information: ROWID = ' || nvl(v_rid_bs , 'NULL'), 'CENTER' );
  htp.htmlclose;
  return;
 end if;
 close c2;

 if action in (lngs.STR_STH_005) -- List All Records
  then
  hbs(surl, scid, v_rid_ss, v_rid_bs, null, parm, lngs.STR_STH_005, 'z', null);
  return;
-- elsif action = lngs.STR_STH_022 -- Insert Another Record
--  then
--  hbs(surl, scid, v_rid_ss, v_rid_bs, v_rid_hs, 'HB', lngs.STR_STH_022, 'z', null);
--  return;
 elsif action = lngs.STR_STH_011 and  parm = 'HBS' and nvl(call_name,'###') <> 'BOLS' -- Cancel
 then
 
    hbs(surl, scid, v_rid_ss, v_rid_bs, v_rid_hs, 'HBS', lngs.STR_STH_012, 'x', null);
    return;
 elsif action = lngs.STR_STH_011 and  parm = 'HBS' and nvl(call_name,'###') = 'BOLS'  -- Cancel
 then
    bols(surl, scid, v_rid_ss, v_rid_bs, 'BOLS', lngs.STR_STH_003, 'x', null);
    return;
 end if;

 if action = lngs.STR_STH_004 -- Delete
  then
  open c1 (v_rid_hs );
  fetch c1 into c1rec;
  if c1%NOTFOUND
   then
   close c1;
   htp.init;
   htp.htmlopen;
    htp.header(3,'House Bills', 'CENTER' );
    htp.header(3,'RECORD NOT FOUND', 'CENTER' );
    htp.header(2,LNGS.STR_TXT_289, 'CENTER' );
    htp.header(3,LNGS.STR_TXT_290, 'CENTER' );
    htp.nl;
    htp.header(2,'Extra Information: ROWID = ' || nvl(v_rid_hs , 'NULL'), 'CENTER' );
   htp.htmlclose;
   return;
  else
   msg := 'House Bill [' || c1rec.house_bill || '] DELETED';
   delete from strang.hbs where rowid = c1rec.rowid;
   commit;
   hbs(surl, scid, v_rid_ss, v_rid_bs , null, parm, lngs.STR_STH_005, 'x', msg);
   return;
  end if;
 end if;

 if action in ( lngs.STR_STH_023, lngs.STR_STH_022) -- Insert New Record
  then

  if P1 is null
   then
   msg := msg || 'Please Enter House Bill Number<BR>';
  else -- Check for existing House Bill number
   open c3 (v_rid_bs , trim(P1));
   fetch c3 into c3rec;
   if c3%FOUND
    then
    msg := msg || 'Record already exists for House Bill [' || P1 || ']<BR>';
   end if;
   close c3;
  end if;

  -- Date Validation - Delivery Date
  begin
  c1rec.del_date := to_date(p5,LNGS.STR_DATE_02);
  exception when others then
  msg := msg || '[Delivery Date] ' || LNGS.STR_TXT_152 || ': ' || p5 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  end;
  if to_char(c1rec.del_date, 'yyyy') like '0%'
   then
    msg := msg || '[Delivery Date] ' || LNGS.STR_TXT_152 || ': ' || p5 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  end if;

  -- Date Validation - AQIS Clearance
  begin
  c1rec.aqis_clearance := to_date(p7,LNGS.STR_DATE_02);
  exception when others then
  msg := msg || '[AQIS Clearance] ' || LNGS.STR_TXT_152 || ': ' || p7 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  end;
  if to_char(c1rec.aqis_clearance, 'yyyy') like '0%'
   then
    msg := msg || '[AQIS Clearance] ' || LNGS.STR_TXT_152 || ': ' || p7 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  end if;

  if msg is not null
   then
   hbs(surl, scid, v_rid_ss, v_rid_bs, null, 'HBS', lngs.STR_STH_023, 'e', msg );
   return;
  end if;

  insert into strang.hbs (
      house_bill
     , bol
     , ship_id
     , del_date
     , customs_auth_no
     , aqis_clearance
     , shipper
     , consignee
     , notifying_party
      )
  values (
      P1
     , c2rec.bol
     , c2rec.ship_id
     , c1rec.del_date
     , P6
     , c1rec.aqis_clearance
     , P4
     , P2
     , P3
      )
  returning rowid into c3rec.rowid ;

  commit;

  hbs(surl, scid, v_rid_ss, v_rid_bs, c3rec.rowid, 'HBS', lngs.STR_STH_023, 'x', 'Record Inserted');
 elsif action = lngs.STR_STH_021 -- Update House Bill
  then

  open c1 (v_rid_hs );
  fetch c1 into c1rec;
  close c1;

  -- Date Validation - Delivery Date
  begin
  c1rec.del_date := to_date(p5,LNGS.STR_DATE_02);
  exception when others then
  msg := msg || '[Delivery Date] ' || LNGS.STR_TXT_152 || ': ' || p5 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  end;
  if to_char(c1rec.del_date, 'yyyy') like '0%'
   then
    msg := msg || '[Delivery Date] ' || LNGS.STR_TXT_152 || ': ' || p5 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  end if;

  -- Date Validation - AQIS Clearance
  begin
  c1rec.aqis_clearance := to_date(p7,LNGS.STR_DATE_02);
  exception when others then
  msg := msg || '[AQIS Clearance] ' || LNGS.STR_TXT_152 || ': ' || p7 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  end;
  if to_char(c1rec.aqis_clearance, 'yyyy') like '0%'
   then
    msg := msg || '[AQIS Clearance] ' || LNGS.STR_TXT_152 || ': ' || p7 || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
  end if;

  -- Change HB value - heck for duplicates

  if P1 is not null and upper(trim(P1)) <> upper(c1rec.house_bill)
   then
    open c3 (v_rid_bs , trim(P1));
    fetch c3 into c3rec;
    if c3%FOUND
     then
     msg := msg || 'Record already exists for House Bill [' || P1 || ']<BR>';
    else
      c1rec.house_bill := nvl(trim(P1), c1rec.house_bill);
    end if;
    close c3;
  end if;

  if msg is not null
   then
   hbs(surl, scid, v_rid_ss, v_rid_bs, v_rid_hs, 'HBS', lngs.STR_STH_021, 'e', msg);
   return;
  end if;

  update strang.hbs
  set  del_date = c1rec.del_date
     , house_bill = c1rec.house_bill
     , customs_auth_no = P6
     , aqis_clearance = c1rec.aqis_clearance
     , shipper = P4
     , consignee = P2
     , notifying_party = P3
  where rowid=v_rid_hs ;
  commit;
  hbs(surl, scid, v_rid_ss, v_rid_bs, v_rid_hs, 'HBS', lngs.STR_STH_021, 'x', 'Record Updated');
 end if;

exception when others then
 glbx.error_details( 'STRANGSB', 'ACCEPT_HBS',null,null,errmsg=>sqlerrm,extdet=>'RID_SS:' || v_rid_ss || '; RID_BS :' || v_rid_bs);
end accept_hbs;

----------------------------------------------------------------------------20200419
function confirm_delete( v_action in varchar2 default 'ACTION', btn in varchar2 default 'Delete', msg in varchar2 default 'Are you sure you want to delete?', script_only in boolean default FALSE )
 return varchar2

as

 v_txt varchar2(32767);

begin
v_txt := '<script LANGUAGE="JavaScript">';
v_txt := v_txt || chr(10) || '<!--';
v_txt := v_txt || chr(10) || 'function confirmPost(vmsg)';
v_txt := v_txt || chr(10) || '{';
v_txt := v_txt || chr(10) || 'var txtConfirm=confirm(vmsg);';
v_txt := v_txt || chr(10) || 'if (txtConfirm)';
v_txt := v_txt || chr(10) || 'return true ;';
v_txt := v_txt || chr(10) || 'else';
v_txt := v_txt || chr(10) || 'return false ;';
v_txt := v_txt || chr(10) || '}';
v_txt := v_txt || chr(10) || '// -->';
v_txt := v_txt || chr(10) || '</script>';
if script_only
 then
 return( v_txt );
end if;
v_txt := v_txt || chr(10) || '<INPUT TYPE="submit" NAME="' || v_action || '" VALUE="' || btn || '" onClick="return confirmPost(''' || msg || ''')">';

return( v_txt );

exception when others then
 return('<INPUT TYPE="submit" NAME="ACTION" VALUE="Delete">');
end confirm_delete;

procedure hb_list( rid_bs in rowid, parm in varchar2, vhb in varchar2, ismand in boolean default FALSE, isedit in boolean default TRUE )
as

 cursor c1(rid rowid) is
 select hs.house_bill
 from  strang.hbs hs, strang.bols bs
 where upper(hs.bol) = upper(bs.bol)
     and hs.ship_id = bs.ship_id
     and bs.rowid = rid
 order by house_bill
 ;

 cursor c2(vhb varchar2, rid rowid) is
 select hs.house_bill
 from  strang.hbs hs, strang.bols bs
 where upper(hs.bol) = upper(bs.bol)
     and hs.ship_id = bs.ship_id
     and bs.rowid = rid
     and hs.house_bill = vhb
 order by house_bill
 ;

c2rec    c2%ROWTYPE;

begin

 if isedit then
    htp.formselectopen( parm );
    if not ismand then htp.formselectoption( NULL ); end if;
    for c1rec in c1( rid_bs ) loop
    if (vhb is not null) and (vhb = c1rec.house_bill)
     then
     htp.formselectoption( c1rec.house_bill, 'SELECTED', cattributes=>'VALUE="' || c1rec.house_bill || '"' );
     else
     htp.formselectoption( c1rec.house_bill, cattributes=>'VALUE="' || c1rec.house_bill || '"' );
    end if;
    end loop;
    htp.formselectclose;
 else
    open c2(vhb,rid_bs);
    fetch c2 into c2rec;
    close c2;
    htp.bold(c2rec.house_bill);
  end if;
exception
 when others then htp.p( sqlerrm );
end hb_list;
---------------------------------------------------------------------------------------20200502
procedure containers_mass (surl in varchar2, scid in integer, rid_ss in rowid, rid_bs rowid default null, rid_hs rowid default null, parm in varchar2, action in varchar2, access_id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, lrange in varchar2 default '*' )
is

cursor c1 ( rid_ss rowid, rid_bs rowid, rid_hs rowid ) is
 select distinct cs.rowid, bs.rowid as bs_rowid, STRANG.f_get_party_name (bs.consignee) consignee1, cs.*
 from  strang.movements cs, strang.ships_airway ss, strang.bols bs
 where (ss.rowid = rid_ss
        and cs.ship_id = ss.ship_id
        and cs.ship_id = bs.ship_id (+)
        and cs.bol = bs.bol (+)
        and ( (rid_bs is null)
               or
              (rid_bs is not null
               and bs.rowid = rid_bs
               and bs.bol = cs.bol
               and bs.ship_id = cs.ship_id
               and not exists (select 'x'
                                 from strang.receivals r, strang.detailrs dr
                                where r.deliveryno = dr.deliveryno
                                  and r.hb is not null
                                  and bs.bol = cs.bol
                                  and dr.movement_no = cs.movement_no
                                  and nvl(dr.camov_seal,'|') = nvl(cs.seal,'|')
                               )
               )
            )
       )       
  and  (rid_hs is null
        or
        exists ( select 'x'
                   from  strang.hbs h 
                  where  h.rowid = rid_hs
                    and  cs.hb = h.house_bill
                    and  cs.ship_id = h.ship_id
                    and  cs.bol = h.bol)
        )  
 --  and rownum < 167                               
 order  by cs.bol,  case when nvl(cs.io,'I') = 'O' then cs.FULL_MT else null end desc, case when cs.io = 'O' then cs.owner else cs.container_type end   , cs.movement_no, cs.seal;

cursor c1a ( rid_ss rowid, rid_bs rowid, rid_hs rowid ) is
 select distinct cs.rowid, bs.rowid as bs_rowid, STRANG.f_get_party_name (bs.consignee) consignee1, cs.*
 from  strang.movements cs, strang.ships_airway ss, strang.bols bs
 where (ss.rowid = rid_ss
       and cs.local_ship_id = ss.ship_id
       and cs.local_ship_id = bs.ship_id (+)
       and cs.local_bol = bs.bol (+)
       and ( (rid_bs is null)
             or
             ( rid_bs is not null
               and bs.rowid = rid_bs
               and bs.bol = cs.local_bol
               and bs.ship_id = cs.local_ship_id
               and not exists (select 'x'
                                 from strang.receivals r, strang.detailrs dr
                                where r.deliveryno = dr.deliveryno
                                  and r.local_hb is not null
                                  and bs.bol = cs.local_bol
                                  and dr.movement_no = cs.movement_no
                                  and nvl(dr.camov_seal,'|') = nvl(cs.seal,'|')
                                )
             )
           )
        )
  and  (rid_hs is null
       or
       exists ( select 'x'
                 from  strang.hbs h 
                where  h.rowid = rid_hs
                  and  cs.local_hb = h.house_bill
                  and  cs.local_ship_id = h.ship_id
                  and  cs.local_bol = h.bol))         
 order  by cs.local_bol, case when nvl(cs.io,'I') = 'O' then cs.FULL_MT else null end desc, case when cs.io = 'O' then cs.owner else cs.container_type end, cs.movement_no, cs.seal;

-- cs.container_type, cs.movement_no, cs.seal


 cursor c2 ( rid_ss rowid ) is
  select distinct ss.li, ss.io
  from  strang.ships_airway ss
  where ss.rowid = rid_ss
 ;

 TYPE t_bulk_collect_c1_tab IS TABLE OF c1%ROWTYPE;
 l_tab         t_bulk_collect_c1_tab;
 v_lrange      varchar2(20);

 limit_records limit_records_type := limit_records_type(); 


 c2rec         c2%ROWTYPE;
 c1records     c1%ROWTYPE;
 c1arecords    c1a%ROWTYPE;
 
 ltype         varchar2(100);
 owner_id      integer;
 stype         integer;
 sts           varchar2(100);
 j             int;
 k             int := 1;
 intervals     int := 400;
 max_limit     int := 410;
 grand_total   int;
 l_limit       int;
 u_limit       int;
 v_rid_cs      owa.vc_arr;
 v1            owa.vc_arr; --    movement_no
 v2            owa.vc_arr; --    seal
 v2a           owa.vc_arr; --    Tare 
 v3            owa.vc_arr; --    full_mt
 v4            owa.vc_arr; --    container_type
 v5            owa.vc_arr; --    iso_container_type
 v6            owa.vc_arr; --    bol
 v7            owa.vc_arr; --    hb
 v8            owa.vc_arr; --    local_bol
 v9            owa.vc_arr; --    local_hb
 v10           owa.vc_arr; --    consignee
 v11           owa.vc_arr; --    booking_ref
 errmsg        owa.vc_arr;
 v_found       boolean  := FALSE;
 v_rid_ss      rowid;
 v_rid_bs      rowid;
 v_rid_hs      rowid;  

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.CONTAINERS_MASS' );
 if sts is not null
 then
    glbx.redisplay_login_page( sts, TRUE );
    return;
 end if;
 l_tab := null;
 v_lrange := lrange;
 v_rid_ss := replace(rid_ss, '~', '+');
 v_rid_bs := replace(rid_bs, '~', '+');
 v_rid_hs := replace(rid_hs, '~', '+');
 
 open c2(v_rid_ss);
 fetch c2 into c2rec;
 close c2;
 
 if c2rec.li = 'I' then
    OPEN c1( v_rid_ss, v_rid_bs,v_rid_hs);
    FETCH c1  BULK COLLECT INTO l_tab;
    CLOSE c1;
 elsif c2rec.li = 'L' then
    OPEN c1a( v_rid_ss, v_rid_bs,v_rid_hs);
    FETCH c1a  BULK COLLECT INTO l_tab;
    CLOSE c1a;
 end if;
    
 if not (l_tab.count < max_limit and lrange = '*') then
    grand_total := l_tab.count;
    l_tab := null;
    if c2rec.li = 'I' then
       OPEN c1( v_rid_ss, v_rid_bs,v_rid_hs);
       FETCH c1  BULK COLLECT INTO l_tab limit 1000 ;
       CLOSE c1;
    elsif c2rec.li = 'L' then
       OPEN c1a( v_rid_ss, v_rid_bs,v_rid_hs);
       FETCH c1a  BULK COLLECT INTO l_tab limit 1000 ;
       CLOSE c1a;
    end if;
 
    if lrange = '*' then
       l_limit := 1;
       u_limit := intervals;
       v_lrange := l_limit||'-'|| u_limit;
    else
       l_limit := to_number(regexp_substr(lrange,'[^-]+', 1, 1));
       u_limit := to_number(regexp_substr(lrange,'[^-]+', 1, 2));
    end if;
 
    k:= 1;
 
    for j in 1..l_tab.COUNT loop
       if ( call_name like 'MOVEMENTS%' and (NOT v_found) and lrange = '*' ) then
          if ( l_tab(j).movement_no = regexp_substr(call_name,'[^:]+', 1, 2) ) then
             if k <> 1 then
                l_limit := limit_records(k-1).upper_limit+1;
                if ( limit_records(k-1).upper_limit+intervals <= l_tab.COUNT ) then
                   u_limit := limit_records(k-1).upper_limit+intervals;
                   v_lrange := to_char(limit_records(k-1).upper_limit+1)||'-'||to_char(limit_records(k-1).upper_limit+intervals);
                else 
                   u_limit := l_tab.COUNT;
                   v_lrange := to_char(limit_records(k-1).upper_limit+1)||'-'||to_char(l_tab.COUNT);
                end if;
             end if;
             v_found := TRUE;
           end if;
       end if;
  
       if MOD(j, intervals) = 0 then
          limit_records.extend;
          limit_records(k).bol1 := case when c2rec.li = 'I' then l_tab(j-intervals +1).bol else l_tab(j-intervals +1).local_bol end;
          limit_records(k).movement_no1 := l_tab(j-intervals +1).movement_no;
          limit_records(k).seal1 := nvl(l_tab(j-intervals +1).seal,'');
          limit_records(k).lower_limit := j-intervals +1;
          limit_records(k).upper_limit := j;
          limit_records(k).bol2 := case when c2rec.li = 'I' then l_tab(j).bol else l_tab(j).local_bol end;
          limit_records(k).movement_no2 := l_tab(j).movement_no;
          limit_records(k).seal2 := l_tab(j).seal;
          limit_records(k).grand_total := grand_total;    
          k := k + 1 ;
       end if;
 
    end loop; 
    if limit_records(k-1).upper_limit < l_tab.count then 
       limit_records.extend;
       limit_records(k).bol1 := case when c2rec.li = 'I' then l_tab(limit_records(k-1).upper_limit+1).bol else l_tab(limit_records(k-1).upper_limit+1).local_bol end;
       limit_records(k).movement_no1 := l_tab(limit_records(k-1).upper_limit+1).movement_no;
       limit_records(k).seal1 := l_tab(limit_records(k-1).upper_limit+1).seal;
       limit_records(k).lower_limit := limit_records(k-1).upper_limit+1;
       limit_records(k).upper_limit := l_tab.COUNT;
       limit_records(k).bol2 := case when c2rec.li = 'I' then l_tab(l_tab.COUNT).bol else l_tab(l_tab.COUNT).local_bol end; 
       limit_records(k).movement_no2 := l_tab(l_tab.COUNT).movement_no;
       limit_records(k).seal2 := l_tab(l_tab.COUNT).seal;
       limit_records(k).grand_total := grand_total;  
    end if;
 else
    l_limit := 1;
    u_limit := l_tab.count; 
 end if;
 
 for j in l_limit..u_limit loop
    v_rid_cs(j) := replace(l_tab(j).rowid, '+', '~');
    v1(j) := l_tab(j).movement_no;
    v2(j) := l_tab(j).seal;
    v2a(j):= l_tab(j).tare;
    v3(j) := l_tab(j).full_mt;
    v4(j) := l_tab(j).container_type;
    v5(j) := l_tab(j).iso_container_type;
    v6(j) := l_tab(j).bol;
    v7(j) := l_tab(j).hb;
    v8(j) := l_tab(j).local_bol;
    v9(j) := l_tab(j).local_hb;
    v10(j) := l_tab(j).consignee1;
    v11(j) := l_tab(j).owner;
    errmsg(j) := null;
 end loop;

 if v1.count > 0
 then
    containers_mass_update(surl, scid, v_rid_ss, v_rid_bs, v_rid_hs, parm, action, v_rid_cs, v1, v2, v2a, v3, v4, v5, v6, v7, v8, v9, v10, v11, v_lrange, limit_records, errmsg, access_id, msg, call_name);
 else
    if (v_rid_bs is null and v_rid_hs is null ) then
       glbx.header_msg( 'No Containers & Breakbulk Allocated To This Ship' );
    elsif (v_rid_bs is not null and v_rid_hs is null)  then
       glbx.header_msg( 'No Containers & Breakbulk Allocated to this BOL' );
    elsif (v_rid_bs is not null and v_rid_hs is not null) then 
       glbx.header_msg( 'No Containers & Breakbulk Allocated to this House Bill' );
    end if;
    
 htp.p('<CENTER><a href="" onClick="self.close()">[Close Window]</a></CENTER>');
 end if;

exception when others then
 glbx.error_details( 'STRANGP', 'CONTAINERS_MASS',null,null,null,errmsg=>sqlerrm );
end containers_mass;

procedure containers_mass_update(surl in varchar
                               , scid in integer
                               , rid_ss in rowid
                               , rid_bs rowid default null
                               , rid_hs rowid default null
                               , parm in varchar2
                               , action in varchar2
                               , v_rid_cs in owa.vc_arr
                               , v1 in owa.vc_arr
                               , v2 in owa.vc_arr
                               , v2a in owa.vc_arr
                               , v3 in out owa.vc_arr
                               , v4 in out owa.vc_arr
                               , v5 in out owa.vc_arr
                               , v6 in out owa.vc_arr
                               , v7 in out owa.vc_arr
                               , v8 in out owa.vc_arr
                               , v9 in out owa.vc_arr
                               , v10 in out owa.vc_arr
                               , v11 in out owa.vc_arr
                               , lrange in varchar2 default '*' 
                               , limit_records in limit_records_type default null
                               , errmsg in out owa.vc_arr
                               , access_id in varchar2 default null
                               , msg in varchar2 default null
                               , call_name in varchar2 default null )
is

 cursor c1( rid_ss ROWID ) is select * from strang.ships_airway where rowid = rid_ss;

 cursor c2( v_rid_ss ROWID, rid_cs ROWID, v_li varchar2) is
  select bs.rowid
  from   strang.bols bs, strang.movements cs, strang.ships_airway ss
  where  cs.rowid = rid_cs
    and  cs.ship_id = bs.ship_id
    and  ss.ship_id = bs.SHIP_ID 
    and  ss.rowid = v_rid_ss
    and  ss.li = v_li
    and  upper(cs.bol) = upper(bs.bol)
  union
  select bs.rowid
    from strang.bols bs, strang.movements cs, strang.ships_airway ss
   where cs.rowid = rid_cs
     and cs.local_ship_id = bs.ship_id
     and  ss.ship_id = bs.ship_id 
     and  ss.rowid = v_rid_ss
     and  ss.li = v_li
     and upper(cs.local_bol) = upper(bs.bol);

cursor c3 (v_ship_id int, v_bol varchar2, v_movement_no varchar2, v_seal varchar2 ) is
select count( key_id) cnt, case when max(cnt_hb) > 1 then 'Multiple' else max(max_hb) end as hb
from 
(( select r.deliveryno||dr2.movement_no||nvl(dr2.camov_seal,'|') key_id
        , max(r.hb) over (partition by dr2.movement_no, dr2.camov_seal)  max_hb
        , count(distinct r.hb) over (partition by dr2.movement_no, dr2.camov_seal) cnt_hb
  from strang.receivals r, strang.detailrs dr2
  where r.deliveryno = dr2.deliveryno
    and r.hb is not null
    and dr2.movement_no = v_movement_no
    and nvl(dr2.camov_seal,'|') = nvl(v_seal,'|') 
   and exists (select 'x'
                 from strang.detailrs dr1, strang.movements m
                where dr1.movement_no = m.movement_no
                  and nvl(dr1.camov_seal,'|') = nvl(m.seal,'|')
                  and m.ship_id = v_ship_id
                  and dr2.itemno = dr1.itemno
                  and dr1.deliveryno = r.deliveryno
                  and m.bol = v_bol)
   and not exists (select 'x'
                     from strang.detailrs dr3, strang.movements m
                    where dr3.movement_no = m.movement_no
                      and nvl(dr3.camov_seal,'|')  = nvl(m.seal,'|')
                      and m.ship_id = v_ship_id
                      and dr3.itemno = dr2.itemno
                      and dr3.deliveryno = r.deliveryno
                      and m.hb is not null))
  union
 ( select r.deliveryno||dr1.movement_no||nvl(dr1.camov_seal,'|') key_id
          , max(r.local_hb) over (partition by dr1.movement_no, dr1.camov_seal) max_hb 
          , count(distinct r.local_hb) over (partition by dr1.movement_no, dr1.camov_seal) cnt_hb
      from strang.receivals r, strang.detailrs dr1
     where r.deliveryno = dr1.deliveryno
       and r.local_hb is not null
       and dr1.movement_no = v_movement_no
       and nvl(dr1.camov_seal,'|') = nvl(v_seal,'|')  
       and exists (select 'x'
                    from strang.detailrs dr2, strang.movements m
                   where dr2.movement_no = m.movement_no
                     and nvl(dr2.camov_seal,'|') = nvl(m.seal,'|')
                     and m.local_ship_id = v_ship_id
                     and dr2.itemno = dr1.itemno
                     and dr2.deliveryno = r.deliveryno
                     and m.local_bol = v_bol)
   and not exists (select 'x'
                     from strang.detailrs dr3, strang.movements m
                    where dr3.movement_no = m.movement_no
                      and nvl(dr3.camov_seal,'|')  = nvl(m.seal,'|')
                      and m.local_ship_id = v_ship_id
                      and dr3.itemno = dr1.itemno
                      and dr3.deliveryno = r.deliveryno
                      and m.local_hb is not null)
  )
 );

 cursor c4 ( v_rid_cs rowid ) is select * from strang.movements where rowid = v_rid_cs;

 c1rec       c1%ROWTYPE;
 c3rec       c3%ROWTYPE;
 c2rec       c2%ROWTYPE;
 c4rec       c4%ROWTYPE;
 ltype       varchar2(100);
 owner_id    integer;
 stype       integer;
 cusrec      customer_account%ROWTYPE;
 v_action    varchar2(100);
 vste        varchar2(10);
 pfx         THEME%ROWTYPE;
 vaccess     varchar2(20);
 seclevel    varchar2(100);
 sts         varchar2(100);
 v_rid_ss    rowid;
 v_rid_bs    rowid;
 v_rid_bs_1  rowid;
 v_rid_hs    rowid;
 k int;
 v_range     varchar2(50);
 v_range_label varchar2(200);
 no_of_records int;
 stp         varchar2(1000);
 err_txt     varchar2(1000);
 v_movement_no varchar2(100);
 grand_total int;
 v_limit_records owa.vc_arr;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.CONTAINERS_MASS' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;
 

 v_rid_ss := replace(rid_ss, '~', '+');
 v_rid_bs := replace(rid_bs, '~', '+');
 v_rid_hs := replace(rid_hs, '~', '+');
 cusrec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(cusrec.aid);
 pfx := glbx.get_thm( cusrec.theme_name );
 vaccess := strangp.data_access( owner_id, 'SHP_SB', v_rid_ss );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, 'Allocate Bills',glbx.backimg(surl,cusrec.aid,pfx.text_back,cusrec.background_img,ltype),helpid=>'STR16',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 htp.p( '<CENTER>' );

 if msg is not null
 then
  glbx.header_msg( msg );
 end if;
 
 if (limit_records is not null or lrange <> '*')
     then
    --  htp.nl;
      htp.tableopen( cattributes=>'cellspacing=4 cellpadding=4 border=0' );
      htp.tablerowopen;
      for k in 1..limit_records.COUNT loop
         
         if grand_total is null then grand_total := limit_records(k).grand_total; end if;
         v_range := to_char(limit_records(k).lower_limit)||'-'||to_char(limit_records(k).upper_limit);
         v_range_label := '['||limit_records(k).bol1||': '||limit_records(k).movement_no1||']'||htf.nl||' to '||htf.nl||'['||limit_records(k).bol2||': '||limit_records(k).movement_no2||']';

         if lrange = '*' then
            if limit_records(k).lower_limit = 1 then
               htp.tabledata(htf.anchor2( 'strangp.containers_mass?surl=' || surl ||'&scid=' || scid ||'&rid_ss='||  v_rid_ss ||'&rid_bs='||v_rid_bs ||'&rid_hs='||v_rid_hs ||'&parm=' || parm || '&action=' || action || '&access_id='|| access_id||'&msg=' || null ||'&lrange='||v_range||'&call_name='||call_name ,  htf.center(htf.fontopen( ccolor=>'#00468C', csize=>'3')||v_range_label||htf.fontclose)), ' ALIGN="CENTER" COLSPAN=1' );
            else 
               htp.tabledata(htf.anchor2( 'strangp.containers_mass?surl=' || surl ||'&scid=' || scid ||'&rid_ss='||  v_rid_ss ||'&rid_bs='||v_rid_bs ||'&rid_hs='||v_rid_hs ||'&parm=' || parm || '&action=' || action || '&access_id='|| access_id||'&msg=' || null ||'&lrange='||v_range||'&call_name='||call_name ,  htf.center(htf.fontopen( csize=>'3')||v_range_label||htf.fontclose)), ' ALIGN="CENTER" COLSPAN=1' );           
            end if;
         else
            if limit_records(k).lower_limit =  to_number(regexp_substr(lrange,'[^-]+', 1, 1)) 
              and limit_records(k).upper_limit = to_number(regexp_substr(lrange,'[^-]+', 1, 2)) then
              htp.tabledata(htf.anchor2( 'strangp.containers_mass?surl=' || surl ||'&scid=' || scid ||'&rid_ss='||v_rid_ss||'&rid_bs='||v_rid_bs||'&rid_hs='||v_rid_hs ||'&parm=' || parm || '&action=' || action || '&access_id='|| access_id||'&msg=' || null ||'&lrange='||v_range||'&call_name='||call_name ,  htf.center(htf.fontopen( ccolor=>'#00468C',csize=>'3')||v_range_label||htf.fontclose)), ' ALIGN="CENTER" COLSPAN=1' );           
            else 
               htp.tabledata(htf.anchor2( 'strangp.containers_mass?surl=' || surl ||'&scid='|| scid ||'&rid_ss='||v_rid_ss||'&rid_bs='||v_rid_bs||'&rid_hs='||v_rid_hs ||'&parm=' || parm || '&action=' || action || '&access_id='|| access_id||'&msg=' || null ||'&lrange='||v_range||'&call_name='||call_name ,  htf.center(htf.fontopen( csize=>'3')||v_range_label||htf.fontclose)), ' ALIGN="CENTER" COLSPAN=1' );             
            end if;        
         end if;
      end loop;
      htp.tablerowclose;     
      htp.tablerowopen;
      for k in 1..limit_records.COUNT loop
         no_of_records := limit_records(k).upper_limit - limit_records(k).lower_limit + 1;
         htp.tabledata(  htf.center(htf.fontopen(csize=>'3')||to_char(no_of_records)||htf.fontclose),calign=>'CENTER');      
      end loop;
      htp.tablerowclose;
      htp.tableclose;
  end if;
 
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=0' ); -- Table 1
  htp.formopen('STRANGP.accept_containers_mass_update');
  htp.formhidden( 'LRANGE', lrange );
  if limit_records is not null then 
     htp.formhidden( 'LIMIT_EXCEEDED', 'TRUE');   
  end if;
  
  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'SCID', scid );
  htp.formhidden( 'RID_SS', replace(v_rid_ss,'~','+') ); 
  htp.formhidden( 'RID_BS', replace(v_rid_bs ,'~','+') );
  htp.formhidden( 'RID_HS', replace(v_rid_Hs ,'~','+') );
  htp.formhidden( 'ACCESS_ID', access_id );
  htp.formhidden( 'CALL_NAME', call_name );

   htp.tablerowopen;
   if action in  (LNGS.STR_STH_018, LNGS.STR_STH_017) then
      htp.tabledata( htf.bold(LNGS.STR_STH_018), ' ALIGN="LEFT"');
      htp.formhidden( 'PARM', 'BOLS' );
   elsif action in(LNGS.STR_STH_019) then
      htp.tabledata( htf.bold(LNGS.STR_STH_019), ' ALIGN="LEFT"');
      htp.formhidden( 'PARM', 'HBS' );
   elsif parm = 'BOLS' then
      htp.tabledata( htf.bold(action), ' ALIGN="LEFT"');
      htp.formhidden( 'PARM', 'BOLS' );
   elsif parm = 'HBS'  then
      htp.tabledata( htf.bold(action), ' ALIGN="LEFT"');
      htp.formhidden( 'PARM', 'HBS' );
   elsif  v_rid_bs is null then   
      htp.tabledata( htf.bold(action), ' ALIGN="LEFT"');
      htp.formhidden( 'PARM', 'SHIP' );
   end if;
   
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tablerowclose;

   htp.tablerowopen;
   htp.p( '<TD align="LEFT" colspan="2">' );

   htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border="1" ' || glbx.TABLE_BACKGROUND ); -- Table 2

   open c1(v_rid_ss);
   fetch c1 into c1rec;
   close c1;
   
   htp.tablerowopen;
   
   if nvl(c1rec.io,'I') = 'I' then
      htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
   else
      htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
   end if;
   htp.tablerowclose;
   htp.tablerowopen;  
   htp.tabledata( htf.bold('Ship & Voyage'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" colspan="2"');
   htp.tabledata( htf.bold(c1rec.shipname||' '||c1rec.voy), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="22"');
--    htp.tabledata( htf.anchor('strangsb.ship?surl=' || surl || '&rid_ss=' || replace(rid_ss, '+', '~') || '&parm=SHIPS&access_id=x', c1rec.ship), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="12"');
   htp.tablerowclose;

   htp.tablerowopen;
   htp.tabledata( htf.bold('Number of Containers & '||htf.nl||'Breakbulk Consignments'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" colspan="2"');
   
   if grand_total is null then 
      htp.tabledata( v1.count, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="20"');
   else
      htp.tabledata( to_char(v1.count)||' of '|| to_char(grand_total), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="20"');
   end if;
   htp.tablerowclose;
   htp.tablerowopen;
     htp.tabledata(htf.bold('Container/BBulk'), cattributes=>glbx.QUERY_BACKGROUND);	 --    movement_no
     htp.tabledata(htf.bold('Seal'), cattributes=>glbx.QUERY_BACKGROUND);		 --    seal
     htp.tabledata(htf.bold('Tare(kg)'), cattributes=>glbx.QUERY_BACKGROUND);	 --    tare
     htp.tabledata(htf.bold('Full or Empty'), cattributes=>glbx.QUERY_BACKGROUND);	 --    full_mt
     htp.tabledata(htf.bold('Container Group'), cattributes=>glbx.QUERY_BACKGROUND);	 --    container_type
     htp.tabledata(htf.bold('ISO Container Type'), cattributes=>glbx.QUERY_BACKGROUND);	 --    iso_container_type
     if c1rec.li = 'I' 
      then
     htp.tabledata(htf.bold('Bill of Lading'), cattributes=>glbx.QUERY_BACKGROUND);	 --    bol+hb  or local_bol+local_hb
     htp.tabledata(htf.bold('House Bill'), cattributes=>glbx.QUERY_BACKGROUND);	-- House bill
     else
      htp.tabledata(htf.bold('Local Bill of Lading'), cattributes=>glbx.QUERY_BACKGROUND);	 --    bol+hb  or local_bol+local_hb
      htp.tabledata(htf.bold('Local House Bill'), cattributes=>glbx.QUERY_BACKGROUND);	-- House bill
     end if;
     htp.tabledata(htf.bold('Consignee (BOL)'), cattributes=>glbx.QUERY_BACKGROUND, ccolspan=>2);	         --    consignee
     htp.tabledata(htf.bold('Container Owner'), cattributes=>glbx.QUERY_BACKGROUND);	         --    consignee
  --   htp.tabledata(htf.bold('Message'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tablerowclose;

    for j in v1.first..v1.last loop
       htp.formhidden('V_RID_CS', v_rid_cs(j));
       htp.tablerowopen;
       if errmsg(j) is not null
       then
          err_txt := 'style="color:RED;"';
       else
          err_txt := null;
       end if;
      
       open c2(v_rid_ss,replace(v_rid_cs(j),'~','+'), c1rec.li);
       fetch c2 into c2rec;
       close c2;

       open c4(replace(v_rid_cs(j),'~','+'));
       fetch c4 into c4rec;
       close c4;
     

       if (c1rec.li = 'I') then
          open c3(c1rec.ship_id, v6(j), v1(j), v2(j));
          fetch c3 into c3rec;
          close c3;
       else 
          open c3(c1rec.ship_id, v8(j), v1(j), v2(j));
          fetch c3 into c3rec;
          close c3;        
       end if;
      
      -- BOL
  /*    if v_rid_bs is null
       then
        open c2(replace(v_rid_cs(j), '~', '+'));
        fetch c2 into v_rid_bs_1;
        close c2;
      else
        v_rid_bs_1 := v_rid_bs;
      end if;
*/
      -- Container
      htp.formhidden( 'V1', v1(j) );
      if replace(replace(replace(call_name,'MOVEMENTS:',''),'--','&'),'__','#') = replace(v1(j),chr(9),'') then
         v_movement_no := htf.fontOpen(ccolor=>'Red')|| htf.bold(v1(j))||htf.fontClose;
      else
         v_movement_no := htf.bold(v1(j));
      end if;
      
      
     -- htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CONTAINERS_MASS_UPDATE&parm='||c4rec.movement_type||'&access_id=x&msg=&call_name=' || call_name, v_movement_no, cattributes=>err_txt), ccolspan=>1, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CONTAINERS_MASS_UPDATE&parm='||c4rec.movement_type||'&access_id=x&msg=', v_movement_no, cattributes=>err_txt), ccolspan=>1, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

      -- Seal
      htp.formhidden( 'V2', v2(j) );
      if (v3(j) = 'FULL') then
       htp.tabledata( to_char(v2(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      else
       htp.tabledata( ' ',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      end if;
      
      -- Tare
      if upper(c4rec.movement_type) = 'CONMOV' then
         htp.tabledata( ' ',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
         htp.formhidden( 'V2a', to_char(c4rec.tare) );
      else 
         htp.tabledata( htf.formtext( 'V2a',6,NULL,v2a(j), cattributes=>'style="background-color: #E0E0D0;" readonly' ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');  
      end if;
      
      -- Full/Empty
      htp.formhidden( 'V3', v3(j));
      htp.tabledata ( to_char(v3(j)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      
      -- Container Type
        if (v3(j) is not null) then
         htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
          lov_list( 'CTRTYPE', 'V4', nvl(v4(j),'GENERAL'), TRUE, FALSE, FALSE );
         htp.p('</TD>');
        else
         htp.formhidden( 'V4', v4(j) );
         htp.tabledata( 'BREAKBULK',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
        end if;

      -- ISO Container Type
       if (v3(j) is not null) then
        htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
         lov_list( 'UNCTNTAB', 'V5', nvl(v5(j),'22G1'), TRUE, FALSE, TRUE );
        htp.p('</TD>');
       else
        htp.formhidden( 'V5', v5(j) );
        htp.tabledata( ' ',cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       end if;

       
     if c1rec.li = 'I' then

     -- International Bill of lading
        if parm <> 'HBS' then
           htp.p('<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
           bol_list( v_rid_ss, 'V6', v6(j), FALSE, TRUE );
           htp.p('</TD>');
        else
           htp.formhidden( 'V6', v6(j) );
           htp.tabledata( v6(j),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');        
        end if;

     -- International House Bill
        if parm <> 'HBS' then
           if c3rec.cnt > 0 then
              htp.tabledata(htf.anchor('STRANGP.dans?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(v_rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || 'List Contents Allocated To Container' || '&rid_bs=' ||c2rec.rowid||'&rid_cs='||replace(v_rid_cs(j),'+','~') ||'&access_id=x&msg=' || null || '&call_name=' ||call_name, htf.fontopen( ccolor=>'Blue')|| c3rec.hb ||' ('||c3rec.cnt||')'||htf.fontclose), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' ); 
              v7(j) := null;
              htp.formhidden( 'V7', v7(j) );
           else 
             htp.tabledata( v7(j),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
             htp.formhidden( 'V7', v7(j) );
           end if;
          
        else
           htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
           hb_list( v_rid_bs, 'V7', v7(j), FALSE, TRUE );         
           htp.p('</TD>');
        end if;
        htp.formhidden( 'V8', v8(j) );
        htp.formhidden( 'V9', v9(j) );
       
     else
        htp.formhidden( 'V6', v6(j) );
        htp.formhidden( 'V7', v7(j) );

      -- Local Bill of lading
         if parm <> 'HBS' then
            htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
            bol_list( v_rid_ss, 'V8', v8(j), FALSE, TRUE );
            htp.p('</TD>');
         else
            htp.tabledata( v8(j),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');        
            htp.formhidden( 'V8', v8(j) );
         end if;

     -- Local House Bill
         if parm <> 'HBS' then
             if c3rec.cnt > 0 then   
                htp.tabledata(htf.anchor('STRANGP.dans?surl=' || surl || '&scid=' || scid || '&rid_ss=' || replace(v_rid_ss, '+', '~') ||'&parm=' || parm || '&action=' || 'List Contents Allocated To Container' || '&rid_bs=' ||c2rec.rowid||'&rid_cs='||replace(v_rid_cs(j),'+','~') ||'&access_id=x&msg=' || null || '&call_name=' ||call_name, htf.fontopen( ccolor=>'Blue')||c3rec.hb ||' ('||c3rec.cnt||')'||htf.fontclose), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' ); 
                v9(j) := null;
                htp.formhidden( 'V9', v9(j) );
             else 
                htp.tabledata( v9(j),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
                htp.formhidden( 'V9', v9(j) );
             end if;
         else
        htp.p('<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
           hb_list( v_rid_bs, 'V9', v9(j), FALSE, TRUE );         
        htp.p('</TD>');

         end if;
      end if;

     -- Consignee (Now using the BOL consignee)
         htp.tabledata( htf.formtext( 'V10', 30, null, v10(j), cattributes=>'style="background-color: #E0E0D0;" readonly'), ccolspan=>2, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        -- htp.formhidden( 'V10', v10(j) );
     -- Now Container owenr (Booking ref removed) - CASS 4/12/2020
         htp.tabledata( htf.formtext( 'V11', null, null, v11(j),cattributes=>'style="background-color: #E0E0D0;" readonly'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        -- htp.formhidden( 'V11', v11(j) );

         
/*      
      -- BOL (Repeated)
      htp.tabledata( htf.anchor('STRANGP.bols?surl=' || surl || '&rid_ss=' || rid_ss || '&parm=BOLS&action=Update Record&rid_bs=' || replace(v_rid_bs_1, '+', '~') || '&access_id=x&msg=&call_name=', htf.bold(v1(j))), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
      -- Container (Repeated)
      htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CONTAINERS_MASS_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v2(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
*/
      -- Error Message
--         htp.formhidden( 'ERRMSG', errmsg(j));
--         htp.tabledata( errmsg(j) );
--         htp.tablerowclose;
    end loop;


  htp.tableclose; -- Table 2
  htp.p('</TD>');
  htp.tablerowclose;

 -- Submit Buttons

   htp.tablerowopen;
   htp.p('<TD VALIGN="TOP" COLSPAN="2">');
   htp.formsubmit( 'ACTION', lngs.STR_TXT_358 ); -- Modify Values
   htp.p('&nbsp;');
   
-- Removed by David Banjo 5/6/2020
   if rid_bs is null then
      if c1rec.li = 'I' then
         htp.formsubmit( 'ACTION', 'Repeat Int. Bill From Previous Row' ); -- Repeat Values
         htp.p('&nbsp;');
      else
         htp.formsubmit( 'ACTION', 'Repeat Local Bill From Previous Row' ); -- Repeat Values
         htp.p('&nbsp;');
      end if;
    end if;

   if rid_bs is not null and parm = 'HBS' then
      if c1rec.li = 'I' then
         htp.formsubmit( 'ACTION', 'Repeat Int. House Bill From First Row' ); -- Repeat Values
         htp.p('&nbsp;');
      else
         htp.formsubmit( 'ACTION', 'Repeat Local House Bill From First Row' ); -- Repeat Values
         htp.p('&nbsp;');
      end if;
    end if;

   -- htp.formsubmit( 'ACTION', 'Repeat Booking Ref From First Row' ); -- Repeat Booking Ref Values -- REMOVED per CASS instruction 4/12/2020
   -- htp.p('&nbsp;');
    if parm = 'HBS' then
       htp.formsubmit( 'ACTION', lngs.STR_STH_011); -- Cancel   
    else
       htp.formsubmit( 'ACTION', lngs.STR_STH_006); -- Edit Bill of Laden
    end if;
    --- David Banjo add 9.6.2020
    htp.p('&nbsp;');
    if call_name like 'MOVEMENTS%' then
       htp.p ('<button type="button" onclick="javascript:window.close()">'||lngs.STR_STH_011||'</button>'); 
    else  
       htp.p('<INPUT TYPE="button" VALUE="Back" onClick="history.go(-1);">');
    end if;
    htp.p('&nbsp;');
    htp.p('</TD>');

    htp.tablerowclose;

  htp.formclose;
  htp.tableclose; -- Table 1
  


exception when others then
 glbx.error_details( 'STRANGP', 'CONTAINERS_MASS_UPDATE',null,null,errmsg=>sqlerrm,extdet=>stp );
end containers_mass_update;

procedure accept_containers_mass_update( surl in varchar2
                                       , scid in integer
                                       , rid_ss in rowid
                                       , rid_bs in rowid default null
                                       , rid_hs in rowid default null
                                       , parm in varchar2
                                       , access_id in varchar2
                                       , call_name in varchar2 default null
                                       , v_rid_cs in owa.vc_arr
                                       , v1 in owa.vc_arr
                                       , v2 in out owa.vc_arr
                                       , v2a in out owa.vc_arr
                                       , v3 in out owa.vc_arr
                                       , v4 in out owa.vc_arr
                                       , v5 in out owa.vc_arr
                                       , v6 in out owa.vc_arr
                                       , v7 in out owa.vc_arr
                                       , v8 in out owa.vc_arr
                                       , v9 in out owa.vc_arr
                                       , v10 in out owa.vc_arr
                                       , v11 in out owa.vc_arr
                                       , lrange in varchar2 default '*' 
                                       , limit_exceeded  in varchar2 default 'FALSE'
                                   --    , v_limit_records in out owa.vc_arr
                                       , action in varchar2
                                       )
is

 cursor c1( rid ROWID ) is select * from strang.movements where rowid = rid FOR UPDATE;
 cursor c2( rid_ss rowid, vbl varchar2, vhb varchar2 )
 is
  select bol
  from strang.hbs hb,strang.ships_airway ss
  where ss.ship_id = hb.ship_id
        and ss.rowid = rid_ss
        and hb.bol = vbl
        and hb.house_bill = vhb
  ;

                    
 cursor c5 (rid_ss rowid) is select * from strang.ships_airway where rowid = rid_ss;

/* 20200503

 cursor c6 (v_ctr varchar2, v_dte date) is
  select *
  from   strang.containers
  where  upper(replace(replace(trim(containerno), ' ', ''), '-', '')) = upper(replace(replace(trim(v_ctr), ' ', ''), '-', ''))
         and trunc(datehired) <= v_dte
         and trunc(offdate + 1) >= v_dte
 ;
*/
 stype         integer;
 ltype         varchar2(100);
 owner_id      integer;
 sts           varchar2(100);
 v_rid_ss      rowid;
 v_rid_bs      rowid;
 v_rid_hs      rowid;
 error_found   boolean;
 ctrrec        strang.movements%ROWTYPE;
 c2rec         c2%ROWTYPE;
 --c3rec       c3%ROWTYPE;
 c5rec         c5%ROWTYPE;
-- c6rec       c6%ROWTYPE;
 v_date        date;
 v_number      number;
 errmsg        owa.vc_arr;
 --limit_records limit_records_type := limit_records_type(); 
 ctr           integer;
 v_intbol	   varchar2(120);
 v_localbol	   varchar2(120);
 v_booking_ref varchar2(120);
 k             integer;

begin

 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.CONTAINERS_MASS' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;
 v_intbol := null;
 v_localbol := null;
 v_booking_ref := null;
 v_rid_ss := replace(rid_ss, '~', '+');
 v_rid_bs := replace(rid_bs, '~', '+');
 v_rid_hs := replace(rid_hs, '~', '+');
 error_found := FALSE;


 if action in (lngs.STR_STH_011,lngs.STR_STH_006)  -- Cancel
  then
   if v_rid_bs is not null and call_name = lngs.STR_STH_024 
   then
      bols(surl, scid, v_rid_ss, null, 'BOLS', lngs.STR_STH_006, 'z', '');
      return;
   elsif v_rid_bs is not null and PARM = 'BOLS'
   then
      bols(surl, scid, v_rid_ss, v_rid_bs, 'BOLS', lngs.STR_STH_003, 'z', '' ); --  LNGS.STR_STH_018 ||' Cancelled');
      return;
   elsif v_rid_bs is not null and PARM = 'HBS' 
   then 
      hbs(surl, scid, v_rid_ss, v_rid_bs, null, 'HBS', lngs.STR_STH_005, 'z','' ); -- LNGS.STR_STH_019 ||' Cancelled');
      return;
   else
    bols(surl, scid, v_rid_ss, null, 'BOLS', lngs.STR_STH_006, 'z', '') ; --LNGS.STR_STH_018 ||' Cancelled');
    -- shp(surl,v_rid_ss , scid, 'SHIPS_AIRWAY', 'x', 'Container Update Cancelled' );
     return;
   end if;
 end if;

open c5(v_rid_ss);
 fetch c5 into c5rec;
close c5;

  ctr := 1;

 for j in v1.first..v1.last loop
 --BEGIN
  errmsg(j) := null;
  open c1(replace(v_rid_cs(j), '~', '+'));
  fetch c1 into ctrrec;
  for k in 1..1 loop
   
    if c1%NOTFOUND
     then
      error_found := TRUE;
      errmsg(j) := 'Container record not found. ROWID = ' || v_rid_cs(j);
      exit;
    end if;
   
   ctrrec.tare := v2a(j); 
   ctrrec.container_type := v4(j);  	    --    container_type
   ctrrec.iso_container_type := v5(j);  	    --    iso_container_type

  if j > 1 and action = 'Repeat Int. Bill From Previous Row' and v6(j) is  null and v6(j-1) is not null
 -- if ctr = 1 and action = 'Repeat Int. Bill From First Row' and v6(j) is  null and v6(1) is not null
  then
--   v_intbol := v6(1);
--   v6(j) := v6(1);
     v_intbol := v6(j-1);
     v6(j) := v6(j-1);
  end if;
   
  if ( nvl(ctrrec.bol,'###') <> nvl(nvl(v6(j),nvl(v_intbol,v6(j))),'##') ) 
  then
     ctrrec.hb := null;
     v7(j) := null;
     v10(j) := null;

     update strang.receivals r1
        set  hb = null
      where exists (select 'x'
                   from strang.receivals r2, strang.detailrs dr, strang.movements m
                  where r2.hb is not null
                    and r2.rowid = r1.rowid
                    and r2.deliveryno = dr.deliveryno
                    and dr.movement_no = m.movement_no
                    and nvl(dr.camov_seal,'|') = nvl(m.seal,'|')
                    and m.rowid = replace(v_rid_cs(j), '~', '+')) ;  
     commit;              
  else 

	 --    international house bill
     If (v7(j) is null and action = 'Repeat Int. House Bill From First Row' and parm = 'HBS' and v7(1) is not null) then
        v7(j) := v7(1);
        ctrrec.hb := v7(j);
     else 
        ctrrec.hb := v7(j);
     end if;
	         	    
  end if;
  
  ctrrec.bol := nvl(v6(j),nvl(v_intbol,v6(j)));     		    --    international bill

  ---if ctr = 1 and action = 'Repeat Local Bill From First Row' and v8(j) is null 
  if j > 1 and action = 'Repeat Local Bill From Previous Row' and v8(j) is null and v8(j-1) is not null
  then
--     v_localbol := v8(1);
--     v8(j) := v8(1);
     v_localbol := v8(j-1);
     v8(j) := v8(j-1);
  end if; 
  
  if (nvl(ctrrec.local_bol,'###') <> nvl(nvl(v8(j),nvl(v_localbol,v8(j))),'##')  ) 
  then
   ctrrec.local_hb := null;
   v9(j) := null;
   v10(j) := null;
   update strang.receivals r1
     set  local_hb = null
    where exists (select 'x'
                   from strang.receivals r2, strang.detailrs dr, strang.movements m
                  where r2.local_hb is not null
                    and r2.rowid = r1.rowid
                    and r2.deliveryno = dr.deliveryno
                    and dr.movement_no = m.movement_no
                    and nvl(dr.camov_seal,'|') = nvl(m.seal,'|')
                    and m.rowid = replace(v_rid_cs(j), '~', '+')) ;    
     commit;              
   
  else
     --  Local house bill
     if (v9(j) is null and action = 'Repeat Local House Bill From First Row' and parm = 'HBS' and v9(1) is not null) then
        v9(j) := v9(1);
        ctrrec.local_hb := v9(j);
     else
        ctrrec.local_hb := v9(j); 
     end if;

  end if;

  ctrrec.local_bol := nvl(v8(j),nvl(v_localbol,v8(j))); 		    --    local bill

  
   if errmsg(j) is null
     then
      update strang.movements set row = ctrrec where current of c1;
      commit;
   end if;
   
 
 end loop;
 close c1;
  --  ctr := ctr + 1;
 v_intbol := null;
 v_localbol := null;
 v_booking_ref := null;

 end loop;

  if error_found
  then
     containers_mass_update(surl, scid, v_rid_ss, v_rid_bs, v_rid_hs, parm, action, v_rid_cs, v1, v2, v2a, v3, v4, v5, v6, v7, v8, v9, v10, v11, lrange, NULL, errmsg, access_id, 'Errors Found: Check Messages', call_name);
     return;
  elsif not (lrange = '*' or limit_exceeded = 'FALSE') then  
     containers_mass(surl, scid, v_rid_ss, v_rid_bs, v_rid_hs, parm, action,  access_id, 'All Records Successfully Updated' , call_name, lrange);   
   --  containers_mass_update(surl, scid, v_rid_ss, v_rid_bs, v_rid_hs, parm, action, v_rid_cs, v1, v2, v2a, v3, v4, v5, v6, v7, v8, v9, v10, v11, lrange, limit_records, errmsg, access_id, 'All Records Successfully Updated' , call_name);
  else
  

     containers_mass_update(surl, scid, v_rid_ss, v_rid_bs, v_rid_hs, parm, action, v_rid_cs, v1, v2, v2a, v3, v4, v5, v6, v7, v8, v9, v10, v11, lrange, NULL, errmsg, access_id, 'All Records Successfully Updated' , call_name);
  end if;
 

exception WHEN NO_DATA_FOUND THEN
            NULL;
          when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_CONTAINERS_MASS_UPDATE',null,null,errmsg=>sqlerrm );
end accept_containers_mass_update;
----------------------------------------------------------------------20200503
procedure bol_list( rid_ss in rowid, parm in varchar2, vbol in varchar2 default null, ismand in boolean default FALSE, isedit in boolean default TRUE )
as

 cursor c1(rid rowid) is
 select bs.bol
 from  strang.bols bs, strang.ships_airway ss
 where ss.rowid = rid
       and ss.ship_id = bs.ship_id
 order by bol
 ;

 cursor c2(vbol varchar2, rid rowid) is
 select bol
 from  strang.bols bs, strang.ships_airway ss
 where ss.rowid = rid
       and ss.ship_id = bs.ship_id
       and bol = vbol
 order by bol
 ;

c2rec    c2%ROWTYPE;

begin

 if isedit
   then
   -- htp.formselectopen( parm, cattributes=>'style="width: 100px;"' );
    htp.formselectopen( parm, cattributes=>'style="min-width: 100px;"' );
    if not ismand then htp.formselectoption( NULL ); end if;
    for c1rec in c1( rid_ss ) loop
    if (vbol is not null) and (vbol = c1rec.bol)
     then
     htp.formselectoption( c1rec.bol, 'SELECTED', cattributes=>'VALUE="' || c1rec.bol || '"' );
     else
     htp.formselectoption( c1rec.bol, cattributes=>'VALUE="' || c1rec.bol || '"' );
    end if;
    end loop;
    htp.formselectclose;
 else
    open c2(vbol,rid_ss);
    fetch c2 into c2rec;
 close c2;
    htp.bold(c2rec.bol);
  end if;
exception
 when others then htp.p( sqlerrm );
end bol_list;
--

procedure copy_bols(surl in varchar2, scid in integer, rid_ss in rowid, p1 in varchar2, parm in varchar2, access_id in varchar2 default null, action in varchar2 )
 is

 cursor c1 ( rid_ss rowid ) is select * from strang.ships_airway where rowid = rid_ss;           -- current
 cursor c1a ( nshpid integer ) is select rowid from strang.ships_airway where ship_id = nshpid;  -- new  COPY TO EXISTING nshpid = 'P1'
 cursor c1b ( nshpid integer ) is select * from strang.bols where ship_id = nshpid;              -- checking if new one already has records
 cursor c1c ( nshpid integer ) is select * from strang.hbs where ship_id = nshpid;               -- checking if new one already has records

 cursor c2 ( cshpid integer ) is select * from strang.bols where ship_id = cshpid;               -- retrieve existing records from current ship
 cursor c4 ( cshpid integer ) is select * from strang.hbs where ship_id = cshpid;                -- retrieve existing records from current ship

 s_rec     c2%ROWTYPE;
 s1_rec     c4%ROWTYPE;
 c1rec     c1%ROWTYPE;
 c1arec     c1a%ROWTYPE;
 c1brec     c1b%ROWTYPE;
 c1crec     c1c%ROWTYPE;
 c2rec     c2%ROWTYPE;
 c4rec     c4%ROWTYPE;
 lrid      rowid;
 msg       varchar2(1000);
 owner_id  integer;
 ltype     varchar2(100);
 stype     integer;
 sts       varchar2(100);
 cship_id  integer;
 nship_id  integer;

begin

 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.copy_bols' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 nship_id := to_number(trim( p1 ));

 open c1( rid_ss );
 fetch c1 into c1rec;
 if c1%NOTFOUND
  then
  msg := ('Record not found<BR>Ship ID: ' || c1rec.ship_id  || '<BR>Extra Details: [ROWID] = ' || rid_ss);
  close c1;
  -- bols(surl,scid, rid_ss, null, parm, lngs.STR_STH_006, access_id, 'No action taken');
  bols(surl,scid, rid_ss, null, parm, lngs.STR_STH_006, 'e', msg);
  return;
 end if;
  cship_id := c1rec.ship_id;
 close c1;

 open c1a( nship_id );  -- nship_id is the ship_id of the ship/voy that will receive a copy of  bols and hb records from rid_ss
 fetch c1a into lrid;
 if c1a%NOTFOUND
  then
   close c1a;
   msg := 'Ship ID does not exist: ' || p1 ;
   --bols(surl,scid, rid_ss, null, parm, lngs.STR_STH_006,access_id, 'No action taken');
   bols(surl,scid, rid_ss, null, parm, lngs.STR_STH_006, 'e', msg);
   return;
 end if;
 close c1a;

 open c1b( nship_id );  -- nship_id is the ship_id of the ship/voy that will receive a copy of  bols and hb records from rid_ss
 fetch c1b into c1brec;
 if c1b%FOUND
  then
   close c1b;
   msg := 'Bills of Lading exist already: ' || p1 ;
   --bols(surl,scid, rid_ss, null, parm, lngs.STR_STH_006, access_id, 'No action taken');
   bols(surl,scid, rid_ss, null, parm, lngs.STR_STH_006, 'e', msg);
   return;
 end if;
 close c1b;
 
 open c1c( nship_id );  -- nship_id is the ship_id of the ship/voy that will receive a copy of  bols and hb records from rid_ss
 fetch c1c into c1crec;
 if c1c%FOUND
  then
   close c1c;
   msg := 'House Bills exist already: ' || p1 ;
  -- bols(surl,scid, rid_ss, null, parm, lngs.STR_STH_006, access_id, 'No action taken');
   bols(surl,scid, rid_ss, null, parm, lngs.STR_STH_006, 'e', msg);
   return;
 end if;
 close c1c;


-- s_rec := c2rec;
-- s1_rec := c4rec;

   for c2rec in c2(cship_id) loop
   -- c2rec.ship_id := s_rec.ship_id;
    c2rec.ship_id := nship_id;
    insert into strang.bols values c2rec;
   end loop;
   for c4rec in c4(cship_id) loop
  --  c4rec.ship_id := s1_rec.ship_id;
    c4rec.ship_id := nship_id;
    insert into strang.hbs values c4rec;
   end loop;
   commit;
  bols(surl,scid, rid_ss, null, parm, lngs.STR_STH_006, access_id, 'Bill of Lading Copied to Ship: '||nship_id);
  
exception when others then
 glbx.error_details( 'STRANGP', 'copy_bols',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end copy_bols;
-------------------------------------------------------------------------------------------- still to debug 20200523
procedure Dans(surl in varchar2, scid in integer, rid_ss in rowid, rid_bs rowid, rid_cs rowid default null, rid_hs rowid default null, parm in varchar2, action in varchar2, access_id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, lrange in varchar2 default '*')
is
-- Inbound or Outbound International
cursor c1 ( rid_bs rowid, rid_cs rowid,rid_hs rowid ) is
 select distinct r.rowid, r.*, m.movement_no, m.rowid cs_rowid, m.seal, m.current_location, m.local_bol, m.local_ship_discharge_date, m.int_ship_discharge_date, m.bol, bs.ship_id, c.customer
 from  strang.receivals r, strang.detailrs dr, strang.movements m, strang.bols bs, strang.hbs hs, strang.customers c
 where bs.rowid = rid_bs
       and m.ship_id = bs.ship_id
       and m.bol = bs.bol
       and ( rid_cs is null
             or (rid_cs is not null and rid_cs = m.rowid))
       and ( rid_hs is null
             or
             ( rid_hs is not null
               and hs.rowid = rid_hs
               and hs.bol = m.bol
               and hs.ship_id = m.ship_id
               and r.hb = hs.house_bill
             )
           )
       and dr.movement_no = m.movement_no
       and nvl(dr.camov_seal,'|') = nvl(m.seal,'|')
       and dr.deliveryno = r.deliveryno
       and m.hb is null
       and r.cust_customer_id = c.customer_id (+)
 order  by m.bol, m.movement_no, r.deliveryno;
 
-- Inbound or Outbound Local 
cursor c1a ( rid_bs rowid, rid_cs rowid, rid_hs rowid ) is
 select distinct r.rowid, r.*, m.movement_no, m.rowid cs_rowid, m.seal, m.current_location, m.local_bol, m.local_ship_discharge_date, m.int_ship_discharge_date, m.bol, bs.ship_id, c.customer
 from  strang.receivals r, strang.detailrs dr, strang.movements m, strang.bols bs, strang.hbs hs, strang.customers c
 where bs.rowid = rid_bs
       and m.local_ship_id = bs.ship_id
       and m.local_bol = bs.bol
       and ( rid_cs is null
             or (rid_cs is not null and rid_cs = m.rowid))
       and ( rid_hs is null
             or
             ( rid_hs is not null
               and hs.rowid = rid_hs
               and hs.bol = m.local_bol
               and hs.ship_id = m.local_ship_id
               and r.local_hb = hs.house_bill
             )
           )
       and dr.movement_no = m.movement_no
       and nvl(dr.camov_seal,'|') = nvl(m.seal,'|')
       and dr.deliveryno = r.deliveryno
       and m.local_hb is null
       and r.cust_customer_id = c.customer_id (+)
 order  by m.bol, m.movement_no, r.deliveryno;
 
 
 cursor c2 ( rid_ss rowid ) is
  select distinct ss.li, ss.io
  from  strang.ships_airway ss
  where ss.rowid = rid_ss
 ;
 
TYPE t_bulk_collect_c1_tab IS TABLE OF c1%ROWTYPE;
l_tab t_bulk_collect_c1_tab;
v_lrange varchar2(20);

limit_records limit_dans_records_type := limit_dans_records_type(); 
 
 ltype       varchar2(100);
 owner_id    integer;
 stype       integer;
 sts         varchar2(100);
 c2rec	     c2%ROWTYPE; 
 j           int;
 k           int := 1;
 intervals   int := 300;
 max_limit   int := 310;
 grand_total int;
 l_limit     int;
 u_limit     int;
 v_found     boolean  := FALSE;
 v1          owa.vc_arr;	-- deliveryno
 v2          owa.vc_arr;	-- direction
 v3          owa.vc_arr;	-- container
 v4          owa.vc_arr;	-- seal
 v5          owa.vc_arr;	-- receivals' customer
 v6          owa.vc_arr;	-- current_location
 v7          owa.vc_arr;	-- international bol
 v8          owa.vc_arr; 	-- internation hb
 v9          owa.vc_arr;	-- international discharge date
 v10         owa.vc_arr;	-- local bol
 v11         owa.vc_arr;	-- local hb
 v12         owa.vc_arr;	-- local discharge date
 v13         owa.vc_arr;	-- snail inspect
 v14         owa.vc_arr;	-- wharf collect
 v15         owa.vc_arr;	-- aqis_depot
 v16         owa.vc_arr;	-- secondary transport
 v17         owa.vc_arr;	-- delivery transport company
 v18         owa.vc_arr;	-- strang invoice
 v19         owa.vc_arr;	-- r_notes
 errmsg      owa.vc_arr;
 vli	     varchar2(1); 
 v_rid_ss    rowid;
 v_rid_bs    rowid;
 v_rid_hs    rowid;
 v_rid_cs1   rowid;
-- v_rid_r    rowid;
 v_rid_r     owa.vc_arr;
 v_rid_cs    owa.vc_arr;
 
 
begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.dans' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;
 
 v_lrange := lrange;
 v_rid_ss := replace(rid_ss, '~', '+');
 v_rid_bs := replace(rid_bs, '~', '+');
 v_rid_hs := replace(rid_hs, '~', '+');
 v_rid_cs1 := replace(rid_cs, '~', '+');
  
 open c2(v_rid_ss);
 fetch c2 into c2rec;
    vli := nvl(c2rec.li,'|');
 close c2;
 
 ---   START HERE - DAVID BANJO
 if c2rec.li = 'I' then
    OPEN c1( v_rid_bs, v_rid_cs1, v_rid_hs ); 
    FETCH c1  BULK COLLECT INTO l_tab;
    CLOSE c1;
 elsif c2rec.li = 'L' then
    OPEN c1a( v_rid_bs, v_rid_cs1, v_rid_hs );
    FETCH c1a  BULK COLLECT INTO l_tab;
    CLOSE c1a;
 end if;
 
 if not (l_tab.count < max_limit and lrange = '*') then
    grand_total := l_tab.count;
    l_tab := null;
    if c2rec.li = 'I' then
       OPEN c1(v_rid_bs, v_rid_cs1, v_rid_hs);
       FETCH c1  BULK COLLECT INTO l_tab limit 1000 ;
       CLOSE c1;
    elsif c2rec.li = 'L' then
       OPEN c1a(v_rid_bs, v_rid_cs1, v_rid_hs);
       FETCH c1a  BULK COLLECT INTO l_tab limit 1000 ;
       CLOSE c1a;
    end if;

    if lrange = '*' then
       l_limit := 1;
       u_limit := intervals;
    else
       l_limit := to_number(regexp_substr(lrange,'[^-]+', 1, 1));
       u_limit := to_number(regexp_substr(lrange,'[^-]+', 1, 2));
    end if;
 
    k:= 1;
    
    for j in 1..l_tab.COUNT loop  
       if MOD(j, intervals) = 0 then
          limit_records.extend;
          limit_records(k).movement_no1 := l_tab(j-intervals +1).movement_no;
          limit_records(k).seal1 := nvl(l_tab(j-intervals +1).seal,'');
          limit_records(k).deliveryno1 := l_tab(j-intervals +1).deliveryno;
          limit_records(k).hb1 := case when c2rec.li = 'I' then l_tab(j-intervals +1).hb else l_tab(j-intervals +1).local_hb end;
          limit_records(k).lower_limit := j-intervals +1;
          limit_records(k).upper_limit := j;
          limit_records(k).movement_no2 := l_tab(j).movement_no;
          limit_records(k).seal2 := l_tab(j).seal;
          limit_records(k).deliveryno2 := l_tab(j).deliveryno;
          limit_records(k).hb2 := case when c2rec.li = 'I' then l_tab(j).hb else l_tab(j).local_hb end;
          limit_records(k).grand_total := grand_total;    
          k := k + 1 ;
       end if; 
    end loop; 
    
    if limit_records(k-1).upper_limit < l_tab.count then 
       limit_records.extend;
       limit_records(k).movement_no1 := l_tab(limit_records(k-1).upper_limit+1).movement_no;
       limit_records(k).seal1 := l_tab(limit_records(k-1).upper_limit+1).seal;     
       limit_records(k).deliveryno1 := l_tab(limit_records(k-1).upper_limit+1).deliveryno;
       limit_records(k).hb1 := case when c2rec.li = 'I' then l_tab(limit_records(k-1).upper_limit+1).hb else l_tab(limit_records(k-1).upper_limit+1).local_hb end;      
       limit_records(k).lower_limit := limit_records(k-1).upper_limit+1;
       limit_records(k).upper_limit := l_tab.COUNT;
       limit_records(k).movement_no2 := l_tab(l_tab.COUNT).movement_no;
       limit_records(k).seal2 := l_tab(l_tab.COUNT).seal;
       limit_records(k).deliveryno2 := l_tab(l_tab.COUNT).deliveryno;
       limit_records(k).hb2 := case when c2rec.li = 'I' then l_tab(l_tab.COUNT).hb else l_tab(l_tab.COUNT).local_hb end;        
       limit_records(k).grand_total := grand_total;  
    end if;
 else
    l_limit := 1;
    u_limit := l_tab.count; 
 end if;
 
 for j in l_limit..u_limit loop
    v_rid_r(j) := replace(l_tab(j).rowid, '+', '~');
    v_rid_cs(j) := replace(l_tab(j).cs_rowid, '+', '~');  
    v1(j) := l_tab(j).deliveryno;
    v2(j) := l_tab(j).io;
    v3(j) := l_tab(j).movement_no;
    v4(j) := l_tab(j).seal;
    v5(j) := l_tab(j).customer;
    v6(j) := l_tab(j).current_location;
    v7(j) := l_tab(j).bol;
    v8(j) := l_tab(j).hb;
    v9(j)  := to_char(l_tab(j).int_ship_discharge_date,LNGS.STR_DATE_02);
    v10(j) := l_tab(j).local_bol;
    v11(j) := l_tab(j).local_hb;     
    v12(j) := to_char(l_tab(j).local_ship_discharge_date,LNGS.STR_DATE_02);
    v13(j) := to_char(l_tab(j).snail_inspect,LNGS.STR_DATE_02);
    v14(j) := to_char(l_tab(j).wharf_collect,LNGS.STR_DATE_02);
    v15(j) := l_tab(j).aqis_depot;
    v16(j) := l_tab(j).secondary_transport;
    v17(j) := l_tab(j).del_transport_company;
    v18(j) := l_tab(j).strang_invoice;
    v19(j) := l_tab(j).cmt;
    errmsg(j) := null; 
 end loop;
 
  if v1.count > 0
   then
   Dans_Update(surl, scid, v_rid_ss, v_rid_bs, v_rid_cs1, v_rid_hs, parm, action, v_rid_r, v_rid_cs, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16,v17, v18, v19, v_lrange, limit_records, errmsg, access_id, msg, call_name);
  else
   glbx.header_msg( 'No Contents Allocated To House Bill' );
   htp.p('<CENTER><a href="" onClick="self.close()">[Close Window]</a></CENTER>');
  end if;
exception when others then
 glbx.error_details( 'STRANGP', 'Dans',null,null,errmsg=>sqlerrm );
end Dans;
procedure Dans_Update(surl in varchar2
                    , scid in integer
                    , rid_ss in rowid
                    , rid_bs rowid
                    , rid_cs rowid default null
                    , rid_hs rowid default null
                    , parm in varchar2
                    , action in varchar2
                    , v_rid_r in out owa.vc_arr
                    , v_rid_cs in out owa.vc_arr
                    , v1 in out owa.vc_arr
                    , v2 in out owa.vc_arr
                    , v3 in out owa.vc_arr
                    , v4 in out owa.vc_arr
                    , v5 in out owa.vc_arr
                    , v6 in out owa.vc_arr
                    , v7 in out owa.vc_arr
                    , v8 in out owa.vc_arr
                    , v9 in out owa.vc_arr
                    , v10 in out owa.vc_arr
                    , v11 in out owa.vc_arr
                    , v12 in out owa.vc_arr
                    , v13 in out owa.vc_arr
                    , v14 in out owa.vc_arr
                    , v15 in out owa.vc_arr
                    , v16 in out owa.vc_arr
                    , v17 in out owa.vc_arr
                    , v18 in out owa.vc_arr
                    , v19 in out owa.vc_arr
                    , lrange in varchar2 default '*' 
                    , limit_records in limit_dans_records_type default null
                    , errmsg in out owa.vc_arr
                    , access_id in varchar2 default null
                    , msg in varchar2 default null
                    , call_name in varchar2 default null )
is
 cursor c1( rid_ss ROWID ) is select * from strang.ships_airway where rowid = rid_ss;
 cursor c2( rid_cs ROWID ) is select * from strang.movements where rowid = rid_cs;
 cursor c3( v_code  varchar2) is select description from strang.lov where lov_name = 'LOCATIONS' and code = v_code;
 
 
 vli	       varchar2(1); 
 c1rec         c1%ROWTYPE;
 c2rec         c2%ROWTYPE;
 c3rec         c3%ROWTYPE;
 ltype         varchar2(100);
 owner_id      integer;
 stype         integer;
 cusrec        customer_account%ROWTYPE;
 v_action      varchar2(100);
 vste          varchar2(10);
 pfx           THEME%ROWTYPE;
 vaccess       varchar2(20);
 seclevel      varchar2(100);
 sts           varchar2(100);
 v_rid_ss      rowid;
 v_rid_bs      rowid;
 v_rid_bs_1    rowid;
 v_rid_hs      rowid;
 v_rid_cs1     rowid;
 
 --v_rid_r     owa.vc_arr;
 stp           varchar2(1000);
 err_txt       varchar2(1000);
 k             int;
 no_of_records int;
 v_range       varchar2(50);
 v_range_label varchar2(200);
 grand_total   int;



begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.dans' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;
 v_rid_ss := replace(rid_ss, '~', '+');
 v_rid_bs := replace(rid_bs, '~', '+');
 v_rid_hs := replace(rid_hs, '~', '+');
 v_rid_cs1 := replace(rid_cs, '~', '+'); 
-- v_rid_r := replace(v_rid_r, '~', '+');
 cusrec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(cusrec.aid);
 pfx := glbx.get_thm(cusrec.theme_name );
 vaccess := strangp.data_access( owner_id, 'SHP_SB', v_rid_ss );
 seclevel := oltp.security_role( owner_id );
 
 glbx.main_title( surl, 'Allocate Bills To DANs',glbx.backimg(surl,cusrec.aid,pfx.text_back,cusrec.background_img,ltype),helpid=>'STR16',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 htp.p( '<CENTER>' );
 
  if msg is not null
  then
     glbx.header_msg( msg );
  end if;

  if (limit_records is not null or lrange <> '*')
     then
    --  htp.nl;
      htp.tableopen( cattributes=>'cellspacing=4 cellpadding=4 border=0' );
      htp.tablerowopen;
      for k in 1..limit_records.COUNT loop
      
         if grand_total is null then grand_total := limit_records(k).grand_total; end if;
         v_range := to_char(limit_records(k).lower_limit)||'-'||to_char(limit_records(k).upper_limit);
         v_range_label := '['||limit_records(k).movement_no1||': '||limit_records(k).deliveryno1||']'||htf.nl||' to '||htf.nl||'['||limit_records(k).movement_no2||': '||limit_records(k).deliveryno2||']';

         if lrange = '*' then
            if limit_records(k).lower_limit = 1 then
               htp.tabledata(htf.anchor2( 'strangp.dans?surl=' || surl ||'&scid=' || scid ||'&rid_ss='||  v_rid_ss ||'&rid_bs='||v_rid_bs ||'&rid_cs='||v_rid_cs1 ||'&rid_hs='||v_rid_hs ||'&parm=' || parm || '&action=' || action || '&access_id='|| access_id||'&msg=' || null ||'&lrange='||v_range||'&call_name='||call_name ,  htf.center(htf.fontopen( ccolor=>'#00468C', csize=>'3')||v_range_label||htf.fontclose)), ' ALIGN="CENTER" COLSPAN=1' );
            else 
               htp.tabledata(htf.anchor2( 'strangp.dans?surl=' || surl ||'&scid=' || scid ||'&rid_ss='||  v_rid_ss ||'&rid_bs='||v_rid_bs ||'&rid_cs='||v_rid_cs1 ||'&rid_hs='||v_rid_hs ||'&parm=' || parm || '&action=' || action || '&access_id='|| access_id||'&msg=' || null ||'&lrange='||v_range||'&call_name='||call_name ,  htf.center(htf.fontopen( csize=>'3')||v_range_label||htf.fontclose)), ' ALIGN="CENTER" COLSPAN=1' );           
            end if;
         else
            if limit_records(k).lower_limit =  to_number(regexp_substr(lrange,'[^-]+', 1, 1)) 
              and limit_records(k).upper_limit = to_number(regexp_substr(lrange,'[^-]+', 1, 2)) then
              htp.tabledata(htf.anchor2( 'strangp.dans?surl=' || surl ||'&scid=' || scid ||'&rid_ss='||v_rid_ss||'&rid_bs='||v_rid_bs||'&rid_cs='||v_rid_cs1 ||'&rid_hs='||v_rid_hs ||'&parm=' || parm || '&action=' || action || '&access_id='|| access_id||'&msg=' || null ||'&lrange='||v_range||'&call_name='||call_name ,  htf.center(htf.fontopen( ccolor=>'#00468C',csize=>'3')||v_range_label||htf.fontclose)), ' ALIGN="CENTER" COLSPAN=1' );           
            else 
               htp.tabledata(htf.anchor2( 'strangp.dans?surl=' || surl ||'&scid='|| scid ||'&rid_ss='||v_rid_ss||'&rid_bs='||v_rid_bs||'&rid_cs='||v_rid_cs1 ||'&rid_hs='||v_rid_hs ||'&parm=' || parm || '&action=' || action || '&access_id='|| access_id||'&msg=' || null ||'&lrange='||v_range||'&call_name='||call_name ,  htf.center(htf.fontopen( csize=>'3')||v_range_label||htf.fontclose)), ' ALIGN="CENTER" COLSPAN=1' );             
            end if;
         end if;
      end loop;
      htp.tablerowclose;     
      htp.tablerowopen;
      for k in 1..limit_records.COUNT loop
         no_of_records := limit_records(k).upper_limit - limit_records(k).lower_limit + 1;
          if lrange = '*' then
            if limit_records(k).lower_limit = 1 then  
               htp.tabledata(  htf.center(htf.fontopen(csize=>'3', ccolor=>'#00468C')||to_char(no_of_records)||htf.fontclose),calign=>'CENTER');
            else 
               htp.tabledata(  htf.center(htf.fontopen(csize=>'3')||to_char(no_of_records)||htf.fontclose),calign=>'CENTER');
            end if;
          else
            if limit_records(k).lower_limit =  to_number(regexp_substr(lrange,'[^-]+', 1, 1)) 
              and limit_records(k).upper_limit = to_number(regexp_substr(lrange,'[^-]+', 1, 2)) then
               htp.tabledata(  htf.center(htf.fontopen(csize=>'3', ccolor=>'#00468C')||to_char(no_of_records)||htf.fontclose),calign=>'CENTER');
            else 
               htp.tabledata(  htf.center(htf.fontopen(csize=>'3')||to_char(no_of_records)||htf.fontclose),calign=>'CENTER');
            end if;
         end if;

      end loop;
      htp.tablerowclose;
      htp.tableclose;
    end if;

 open c1( replace(v_rid_ss, '~', '+') ) ;
 fetch c1 into c1rec;
 close c1;
 
--  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=0' ); -- Table 1
--  htp.formopen('STRANGP.accept_dans_update');
  htp.nl;
  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_STH_020), ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=10 border=0' ); -- Table 1
  htp.formopen('STRANGP.accept_dans_update');
  htp.formhidden( 'LRANGE', lrange );
  if limit_records is not null then 
     htp.formhidden( 'LIMIT_EXCEEDED', 'TRUE');   
  end if;
  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'SCID', scid );
  htp.formhidden( 'RID_SS', replace(v_rid_ss,'~','+') );
  htp.formhidden( 'RID_BS', replace(v_rid_bs ,'~','+') );
  htp.formhidden( 'RID_HS', replace(v_rid_hs ,'~','+') );
  htp.formhidden( 'RID_CS', replace(v_rid_cs1 ,'~','+') );
 -- htp.formhidden( 'V_RID_R', replace(v_rid_r ,'~','+') );
 -- htp.formhidden( 'V_RID_R', v_rid_r );
  htp.formhidden( 'PARM', parm );
  htp.formhidden( 'ACCESS_ID', access_id );
  htp.formhidden( 'CALL_NAME', call_name );
  htp.tablerowopen;
   htp.tabledata( htf.bold('Cargo Requiring House Bills'), ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
   htp.tabledata( '&nbsp;', ' ALIGN="LEFT"');
  htp.tablerowclose;
-- ***
 -- Submit Buttons
  htp.tablerowopen;
  htp.p('<TD VALIGN="TOP" COLSPAN="2">');
   htp.formsubmit( 'ACTION', lngs.STR_TXT_358 ); -- Modify Values
   htp.p('&nbsp;');
   htp.formsubmit( 'ACTION', lngs.STR_STH_011 ); -- Cancel
   htp.p('&nbsp;');
   
  htp.p('<INPUT TYPE="button" VALUE="Back" onClick="history.go(-1);">');
  htp.p('&nbsp;');
  htp.p('</TD>');
  htp.tablerowclose;
-- ***
  htp.tablerowopen;
  htp.p( '<TD align="LEFT" colspan="2">' );
  htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border="1" ' ||glbx.QUERY_CELL_BACKGROUND );         -- glbx.TABLE_BACKGROUND ); -- Table 2
   htp.tablerowopen;
    htp.tabledata( htf.bold('Number of Possible Items'), cattributes=>glbx.QUERY_BACKGROUND || ' style="text-align:left;" colspan="2"');
-- David Banjo Changed 07.06.2020
--   htp.tabledata( v1.count, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" colspan="30"');

    if grand_total is null then
       htp.tabledata( v1.count , cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" colspan="1"');
    else
       htp.tabledata(  to_char(v1.count)||' of '||to_char(grand_total), cnowrap=>1, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" colspan="1"');
    end if;
    
    htp.tabledata(htf.bold('Direction'), cattributes=>glbx.QUERY_BACKGROUND);
    if c1rec.io = 'O' then
       htp.tabledata( htf.bold('OUTBOUND'),cattributes=>' BGCOLOR=":#4EB5E2" style="text-align:center; COLOR:#FFFFFF" colspan="3"');     
     else
       htp.tabledata( htf.bold('INBOUND'),cattributes=>' BGCOLOR=":#00468C" style="text-align:center; COLOR:#FFFFFF" colspan="3"');          
     end if;
   htp.tablerowclose;
   htp.tablerowopen;
 --   htp.tabledata(htf.bold('Direction'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Delivery No'), cattributes=>glbx.QUERY_BACKGROUND);                    
    htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);                       
    htp.tabledata(htf.bold('Seal'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Consignee/<BR>Receivals<BR>Customer'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Current Location'), cattributes=>glbx.QUERY_BACKGROUND);
    if c1rec.li = 'I'
    then
     htp.tabledata(htf.bold('Intl Bol'), cattributes=>glbx.QUERY_BACKGROUND);
     htp.tabledata(htf.bold('Intl House<BR>Bill'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Intl Discharge Date<BR>DD-MON-YYYY'), cattributes=>glbx.QUERY_BACKGROUND);
    else
     htp.tabledata(htf.bold('Local Bol'), cattributes=>glbx.QUERY_BACKGROUND);
     htp.tabledata(htf.bold('Local House<BR>Bill'), cattributes=>glbx.QUERY_BACKGROUND);
     htp.tabledata(htf.bold('Local Discharge Date<BR>DD-MON-YYYY'), cattributes=>glbx.QUERY_BACKGROUND);
    end if;
--    htp.tabledata(htf.bold('Delivery No'), cattributes=>glbx.QUERY_BACKGROUND);
--    htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Snail Inspect Date<BR>DD-MON-YYYY'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Wharf Collect Date<BR>DD-MON-YYYY'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('AQIS Depot'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Secondary Transport<BR>'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Delivery Transport<BR>Company'), cattributes=>glbx.QUERY_BACKGROUND);
--    htp.tabledata(htf.bold('Delivery No'), cattributes=>glbx.QUERY_BACKGROUND);
--    htp.tabledata(htf.bold('Container'), cattributes=>glbx.QUERY_BACKGROUND);                  
    htp.tabledata(htf.bold('Strang Invoice'), cattributes=>glbx.QUERY_BACKGROUND);
    htp.tabledata(htf.bold('Remarks'), cattributes=>glbx.QUERY_BACKGROUND);    -- v16
    htp.tabledata(htf.bold('Message'), cattributes=>glbx.QUERY_BACKGROUND);
   htp.tablerowclose;
   for j in v1.first..v1.last loop
    htp.formhidden('V_RID_R', v_rid_r(j));
    htp.formhidden('V_RID_CS', v_rid_cs(j));
    htp.tablerowopen;
     if errmsg(j) is not null
      then
       err_txt := 'style="color:RED;"';
     else
       err_txt := null;
     end if;
     -- Obtain the MOVEMENT TYPE
     open c2 ( replace(v_rid_cs(j), '~', '+') ) ;
     fetch c2 into c2rec;
     close c2;
     
     open c3( v6(j) ) ;
     fetch c3 into c3rec;
     close c3;
     
     -- Direction & Container
     htp.formhidden( 'V1', v1(j) );   -- deliveryno
     htp.formhidden( 'V2', v2(j) );   -- direction
     htp.formhidden( 'V3', v3(j) );   -- container
     htp.formhidden( 'V4', v4(j) );   -- seal
     htp.formhidden( 'V5', v5(j) );   -- receivals' customer
     htp.formhidden( 'V6', v6(j) );   -- current location
     htp.formhidden( 'V7', v7(j) );   -- international bol
     htp.formhidden( 'V10', v10(j) ); -- local bol
      
     -- Delivery 
 --    htp.tabledata( to_char(v1(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.anchor('STRANGP.receive?surl=' || surl || '&rid=' || replace(v_rid_r(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.DANS_UPDATE&parm=RECEIVALS&access_id=x&msg=&call_name=' || call_name, htf.bold(to_char(v1(j))), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       
     -- Container/BB
 --    htp.tabledata( to_char(v3(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.DANS_UPDATE&parm='||c2rec.movement_type||'&access_id=x&msg=&call_name=' || call_name, htf.bold(to_char(v3(j))), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     -- Seal
     htp.tabledata( to_char(v4(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     -- receivals' customer
     htp.tabledata( to_char(v5(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     -- CURRENT LOCATION
      htp.tabledata( to_char(c3rec.description),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
--       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
--       lov_list( 'LOCATIONS', 'V6', v6(j), FALSE, TRUE, FALSE );
--       htp.p('</TD>');
-- D Banjo

--htp.tabledata(  to_char(v1.count)||' of '||to_char(grand_total), cnowrap=>1, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" colspan="1"');
   
     if c1rec.li = 'I' then
      -- INTERNATIONAL BOL
      htp.tabledata( to_char(v7(j)), cnowrap=>1, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      -- INTERNATIONAL HOUSE BILL
      -- David Banjo changed 7.6.2020
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
           hb_list( v_rid_bs, 'V8', v8(j), FALSE, TRUE );         
       htp.p('</TD>');
       htp.formhidden( 'V11', v11(j) ); -- local hb
      -- htp.tabledata( htf.formtext( 'V8',8,15,v8(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      -- INTL SHIP DISCHARGE DATE
      htp.tabledata( htf.formtext( 'V9',12,15,to_char(to_date(v9(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.formhidden( 'V12', v12(j) ); -- local discharge date
     else
      -- LOCAL BOL
      htp.tabledata( to_char(v10(j)), cnowrap=>1 ,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
    --  htp.tabledata( htf.formtext( 'V10',8,15,v10(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      -- LOCAL HOUSE BILL
      -- David Banjo changed 7.6.2020
      htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
         hb_list( v_rid_bs, 'V11', v11(j), FALSE, TRUE );         
      htp.p('</TD>');   
      htp.formhidden( 'V8', v8(j) );   -- international hb
      htp.formhidden( 'V9', v9(j) );   -- International discharge date
     -- htp.tabledata( to_char(v13(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
      -- LOCAL SHIP DISCHARGE DATE
      htp.tabledata( htf.formtext( 'V12',12,15,to_char(to_date(v12(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     -- htp.formhidden( 'V12', v12(j) ); -- local discharge date
     end if;
     -- Container repeat
 --    htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_alls_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     -- SNAIL INSPECT DATE
     htp.tabledata( htf.formtext( 'V13',12,15,to_char(to_date(v13(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    -- htp.formhidden( 'V13', v13(j) ); -- snail inspect
         -- Consignee
    -- htp.tabledata( htf.formtext( 'V10',null,null,v10(j) ),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     -- WHARF COLLECT DATE
     htp.tabledata( htf.formtext( 'V14',12,15,to_char(to_date(v14(j),LNGS.STR_DATE_02),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   --  htp.formhidden( 'V14', v14(j) ); -- wharf collect
     -- Container repeat
 --    htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_alls_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');

  -- AQIS DEPOT
     htp.tabledata( htf.formtext( 'V15',8,15,v15(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    -- htp.formhidden( 'V15', v15(j) ); -- aqis depot 
     -- SECONDARY TRANSPORT
     htp.tabledata( htf.formtext( 'V16',8,15,v16(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   --  htp.formhidden( 'V16', v16(j) ); -- secondary transport
     -- DELIVERY TRANSPORT COMPANY
     htp.tabledata( htf.formtext( 'V17',8,15,v17(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   --  htp.formhidden( 'V17', v17(j) ); -- delivery transport company 
     -- Container repeat
     --htp.tabledata( htf.anchor('STRANGP.movement?surl=' || surl || '&rid=' || replace(v_rid_cs(j), '+', '~') ||'&scid='||scid||'&call_name=STRANGP.CTRS_MASS_PNG_alls_UPDATE&parm=CARGO&access_id=x&msg=&call_name=' || call_name, htf.bold(v1(j)), cattributes=>err_txt), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     -- STRANG INVOICE
     htp.tabledata( htf.formtext( 'V18',8,15,v18(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   --  htp.formhidden( 'V18', v18(j) ); -- strang invoice 
     -- RECEIVAL REMARKS
     htp.tabledata( htf.formtext( 'V19',8,15,v19(j)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    -- htp.formhidden( 'V19', v19(j) ); -- receival remarks
     -- Error message
     htp.tabledata( errmsg(j),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
    htp.tablerowclose;
   end loop;
   htp.tableclose; -- Table 2
   htp.p('</TD>');
   htp.tablerowclose;
 -- Submit Buttons
   htp.tablerowopen;
   htp.p('<TD VALIGN="TOP" COLSPAN="2">');
   htp.formsubmit( 'ACTION', lngs.STR_TXT_358 ); -- Modify Values
   htp.p('&nbsp;');
   htp.formsubmit( 'ACTION', lngs.STR_STH_011 ); -- Cancel
   htp.p('&nbsp;');
   htp.formsubmit( 'ACTION', lngs.STR_STH_027 ); -- Repeat First House Bill for All
   htp.p('&nbsp;');
   htp.p('</TD>');
   htp.tablerowclose;
   htp.formclose;
   htp.tableclose; -- Table 1
exception when others then
 glbx.error_details( 'STRANGP', 'DANS_UPDATE',null,null,errmsg=>sqlerrm,extdet=>stp );
end Dans_Update;
procedure accept_dans_update( surl in varchar2
                                       , scid in integer
                                       , rid_ss in rowid
                                       , rid_bs in rowid
                                       , rid_cs in rowid
                                       , rid_hs in rowid default null
                                       , parm in varchar2
                                       , access_id in varchar2
                                       , call_name in varchar2
                                       , v_rid_r in out owa.vc_arr 
                                       , v_rid_cs in out owa.vc_arr 
                                       , v1 in out owa.vc_arr
                                       , v2 in out owa.vc_arr
                                       , v3 in out owa.vc_arr
                                       , v4 in out owa.vc_arr
                                       , v5 in out owa.vc_arr
                                       , v6 in out owa.vc_arr
                                       , v7 in out owa.vc_arr
                                       , v8 in out owa.vc_arr
                                       , v9 in out owa.vc_arr
                                       , v10 in out owa.vc_arr
                                       , v11 in out owa.vc_arr
                                       , v12 in out owa.vc_arr
                                       , v13 in out owa.vc_arr
                                       , v14 in out owa.vc_arr
                                       , v15 in out owa.vc_arr
                                       , v16 in out owa.vc_arr
                                       , v17 in out owa.vc_arr
                                       , v18 in out owa.vc_arr
                                       , v19 in out owa.vc_arr
                                       , lrange in varchar2 default '*' 
                                       , limit_exceeded in varchar2 default 'FALSE'
                                       , action in varchar2                                   
                                       )
is

 cursor c1(rid ROWID) is select * from strang.receivals where rowid = rid FOR UPDATE;
 cursor c2( rid_ss rowid, vbl varchar2, vhb varchar2 )
 is 
  select hb.house_bill
  from strang.hbs hb,strang.ships_airway ss
  where ss.ship_id = hb.ship_id
        and ss.rowid = rid_ss
        and hb.bol = vbl
        and hb.house_bill = vhb
  ;      
 cursor c5 (rid_ss rowid) is select * from strang.ships_airway where rowid = rid_ss;
 c2rec	     C2%ROWTYPE;
 c5rec	     C5%ROWTYPE;
 stype       integer;
 ltype       varchar2(100);
 owner_id    integer;
 sts         varchar2(100);
 v_rid_ss    rowid;
 v_rid_bs    rowid;
 v_rid_hs    rowid;
 v_rid_cs1   rowid;
-- v_rid_r    owa.vc_arr;
 error_found boolean;
 ctrrec      strang.receivals%ROWTYPE;
 v_date      date;
 v_number    number;
 errmsg      owa.vc_arr;
 ctr         integer;
 vli	     varchar2(1);
begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.dans' );
 if sts is not null
 then
 glbx.redisplay_login_page( sts, TRUE );
 return;
 end if;
 
 v_rid_ss := replace(rid_ss, '~', '+'); 
 v_rid_bs := replace(rid_bs, '~', '+');
 v_rid_hs := replace(rid_hs, '~', '+');
 v_rid_cs1 := replace(rid_cs, '~', '+');
  
 error_found := FALSE;
 if action = lngs.STR_STH_011 -- Cancel
  then
    -- David Banjo to Change
    -- strangp.menu(surl=>surl,rnd=>NULL,MTYPE=>'TRAC');
      hbs(surl, scid, rid_ss, rid_bs, null,'HBS', lngs.STR_STH_005, 'z' , null);
     return;
 end if;
open c5( replace(v_rid_ss, '~', '+') ) ;
 fetch c5 into c5rec;
close c5;
vli := nvl(c5rec.li,'I');
 for j in v1.first..v1.last loop
  errmsg(j) := null;
  open c1(replace(v_rid_r(j), '~', '+'));
  fetch c1 into ctrrec;
   for k in 1..1 loop
    if c1%NOTFOUND
     then
      error_found := TRUE;
      errmsg(j) := 'Receival record not found. ROWID = ' || v_rid_r(j);
      exit;
    end if;
   if vli = 'L' then
      if action = LNGS.STR_STH_027 and v11(j) is  null 
      then
       v11(j) := v11(1);
      end if;
    -- Local House Bill - V11
     ctrrec.local_hb := v11(j);
   else
    -- International House Bill - V8
      if action = LNGS.STR_STH_027 and v8(j) is  null 
      then
       v8(j) := v8(1);
      end if;
      ctrrec.hb := v8(j);  
     
  end if;
    -- Snail Inspect Date - V13
    begin
     v_date := to_date(v13(j),LNGS.STR_DATE_02);
     if to_char(v_date, 'yyyy') like '0%'
      then
       errmsg(j) := errmsg(j) || '[Snail Inspect Date] ' || LNGS.STR_TXT_152 || ': ' || v13(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
       error_found := TRUE;
     else
       ctrrec.snail_inspect := v_date;
     end if;
    exception when others then
     v13(j) := ctrrec.snail_inspect;
     errmsg(j) := errmsg(j) || '[Snail Inspect Date] ' || LNGS.STR_TXT_152 || ': ' || v13(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
     error_found := TRUE;
    end;
    -- Wharf Collect Date - V14
    begin
     v_date := to_date(v14(j),LNGS.STR_DATE_02);
     if to_char(v_date, 'yyyy') like '0%'
      then
       errmsg(j) := errmsg(j) || '[Wharf Collect Date] ' || LNGS.STR_TXT_152 || ': ' || v14(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
       error_found := TRUE;
     else
       ctrrec.wharf_collect := v_date;
     end if;
    exception when others then
     v14(j) := ctrrec.wharf_collect;
     errmsg(j) := errmsg(j) || '[Wharf Collect Date] ' || LNGS.STR_TXT_152 || ': ' || v14(j) || '. ' || initcap(LNGS.STR_TXT_153) || ': ' || LNGS.STR_DATE_02 || '<BR>';
     error_found := TRUE;
    end;
    
    -- Aqis Depot - V15
    ctrrec.aqis_depot := v15(j);
    -- Secondary Transport - V16
    ctrrec.secondary_transport := v16(j);
    -- Delivery Transport Company - V17
    ctrrec.del_transport_company := v17(j);
   -- Strang Invoice - V18
    ctrrec.strang_invoice := v18(j);
    -- Receival Remarks - V19  David Banjo added CMT to Receivals
    ctrrec.cmt := v19(j);
    if errmsg(j) is null
     then
	  update strang.receivals set row = ctrrec where current of c1;
      commit;
    end if;
  end loop;
  close c1;
  v_date:= NULL;
 end loop;
 
 if error_found
 then 
   dans_Update(surl, scid, v_rid_ss, v_rid_bs, v_rid_cs1, v_rid_hs, parm, action, v_rid_r, v_rid_cs, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15,
   v16, v17, v18, v19, lrange, NULL, errmsg, access_id, 'Errors Found: Check Messages', call_name);
   return;
 elsif lrange <> '*' or limit_exceeded = 'TRUE' then
    dans(surl, scid, v_rid_ss, v_rid_bs, v_rid_cs1, v_rid_hs, parm, action, access_id, 'All Records Successfully Updated' , call_name, lrange);  
 else 
   dans_Update(surl, scid, v_rid_ss, v_rid_bs, v_rid_cs1, v_rid_hs, parm, action, v_rid_r, v_rid_cs, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15,
   v16, v17, v18, v19, lrange, NULL, errmsg, access_id, 'All Records Successfully Updated', call_name);
   return;
 end if;
exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_DANS_UPDATE',null,null,errmsg=>sqlerrm );
end accept_dans_update;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure mng_smp( surl in varchar2, rid in varchar2 default null, access_id in varchar2 default null, msg in varchar2 default null, call_name in varchar2 default null, parm in varchar2 default null, scid in varchar2 default null)
as

 cursor c2( rid rowid ) is select s.*, case when c.customer_id is not null then '('||c.suburb||' '||c.country||')' else '' end as s_address  
 from strang.smp s, strang.customers c 
 where s.rowid = rid
   and c.customer_id (+) = s.client_id;
   
--  alter table strang.smp add location_in_warehouse varchar2(50);
-- alter table strang.smp drop column currdate;
  
 cursor c2a is select sm.rowid row_id, sm.* from strang.smp sm where rownum < 2 order by smp_no;
 cursor c2b( smpid integer) is select rowid from strang.smp where smp_id = smpid;
 cursor c3 (v_movement_no varchar2, v_seal varchar2)  is select m.rowid, m.* from strang.movements m where m.movement_no = v_movement_no and nvl(m.seal,'|') = nvl(v_seal, '|');
 cursor c4 is select * from (select  a.*, row_number() over (order by smp_id desc) rnk from strang.smp a ) tmp where tmp.rnk < 10 order by smp_id desc;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c2arec		c2a%ROWTYPE;
 c2brec		c2b%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 vaccess	varchar2(20);
 seclevel	varchar2(100);
 v_seq      integer;
 smpno      integer;

begin
 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.MNG_SMP' );
 if sts is not null
 then
   glbx.redisplay_login_page( sts, TRUE );
   return;
 end if;
 
 vaccess := data_access( owner_id, 'SMP', rid );
 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 seclevel := oltp.security_role( owner_id );

 glbx.main_title( surl, LNGS.STR_STH_030,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR21',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;  -- good message.
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 --htp.p( '<CENTER>' );
 
 if vaccess = 'READ' and nvl(access_id,'x') = 'z' then
   open c2a;
   fetch c2a into c2arec;
   close c2a;
   open c2(replace(c2arec.row_id,'~','+'));
   fetch c2 into c2rec;
   close c2;
 elsif access_id is null and rid is not null
  then
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
 elsif access_id is null
  then
   open c2a;
   fetch c2a into c2arec;
   close c2a;
   open c2b(c2rec.smp_id);
   fetch c2b into c2brec;
   close c2b;
 elsif nvl(access_id,'x') <> 'z'
  then
   open c2(replace(rid,'~','+'));
   fetch c2 into c2rec;
   close c2;
 end if;
 
 if c2rec.movement_no is not null then
  open c3(c2rec.movement_no, c2rec.seal);
  fetch c3 into c3rec;
  close c3;
 end if;

 begin select max(smp_id)+1 into v_seq from strang.smp; exception when others then v_seq := ''; end;
 
 begin select max(TO_NUMBER(replace(smp_no,'SMP','')))+1 into smpno from strang.smp; exception when others then smpno := ''; end;
 

 htp.p( '<CENTER>' );
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 htp.p('<td>');
  search( surl, 'SMP' , rid, samerow=>TRUE );
 htp.p('</td>');
 -------------------------------------------------------------------------------------
   htp.p( '<datalist id="SMP">' );
  --  htp.formselectopen( parm );
  --  if not ismand then htp.formselectoption( NULL ); end if;
   -- if c2rec.io = 'I' then 
       for c4rec in c4 loop
          htp.formselectoption( c4rec.smp_no||' ('|| case when c4rec.sa = 'A' then 'Air' else 'Sea' end||') ', cattributes=>'VALUE="' || c4rec.smp_no || '"' );
       end loop;
  --  end if;
    htp.p( '</datalist>' );
 --------------------------------------------------------------------------------------
 htp.tablerowclose;
 htp.tableclose;

 htp.formopen( 'strangp.accept_mng_smp', ctarget=>'_top' );
 htp.formhidden( 'SURL', surl );
 htp.formhidden( 'RID', replace(nvl(rid,c2brec.rowid),'~','+') );
 htp.formhidden( 'ACCESS_ID', access_id );
  htp.formhidden( 'PARM', parm );
 htp.tableopen;
 htp.tablerowopen;
 htp.p( '<TD align="LEFT">' );


 htp.tableopen;
 htp.tablerowopen;
 htp.p( '<TD align="LEFT">' );
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
 
 htp.tablerowopen;
 htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
 htp.tablerowclose;

-- if c2rec.smp_id is not null
--   then
--   htp.tablerowopen;
--   htp.tabledata( htf.bold(LNGS.STR_STH_033),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
--   htp.tabledata( htf.bold(c2rec.smp_id),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--   htp.tablerowclose;
--  end if;
  htp.tablerowopen;
  -- The SMP No.
  htp.tabledata( htf.bold(LNGS.STR_STH_034),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
       if  seclevel in ('LEVEL 1','LEVEL 2','LEVEL 3','LEVEL 4','LEVEL 5') and nvl(access_id,'x') = 'x' then
          htp.tabledata( htf.formtext('P1', 30, 100, nvl(c2rec.smp_no,'SMP'||to_char(smpno)), cattributes=>'style="background-color: #E0E0D0;" readonly'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       else
          htp.tabledata( htf.formtext('P1', 30, 100, nvl(c2rec.smp_no,'SMP'||to_char(smpno))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
       end if;
    --  htp.tabledata( htf.formtext('P1', 30, 100, nvl(c2rec.smp_no,'SMP'||to_char(smpno))),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    else
      htp.tabledata( htf.bold(c2rec.smp_no),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
      htp.formhidden('P1',c2rec.smp_no);
   end if;
  htp.tablerowclose;
  
  -- The Urgency
--------------------------------------------------------------------------------------------------------------------------

  htp.tablerowopen;
    htp.tabledata( htf.bold('SMP Type'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then

         htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
         lov_list( 'SMP_PACKTYPES', 'P2', c2rec.smp_type, TRUE, TRUE, FALSE, xtr_b=>'OT' );
         htp.p( '</TD>' );
      else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'SMP_PACKTYPES', 'P2', c2rec.smp_type, TRUE, TRUE, FALSE, isedit=>FALSE );
       htp.p( '</TD>' );
     end if;
  htp.tablerowclose;
  
   htp.tablerowopen;
   if c2rec.urgency is null then c2rec.urgency := 'STANDARD'; end if;
    htp.tabledata( htf.bold('Urgency'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
         htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
         lov_list( 'URGENCY', 'P3', c2rec.urgency, TRUE, FALSE, FALSE );
         htp.p( '</TD>' );
      else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       lov_list( 'URGENCY', 'P3', c2rec.urgency, TRUE, FALSE, FALSE, isedit=>FALSE );
       htp.p( '</TD>' );
     end if;
  htp.tablerowclose;
  
  
  htp.tablerowopen;
 -- htp.tabledata( htf.bold(LNGS.STR_TXT_027),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.tabledata( htf.bold('Client'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
  
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
       customer_list( 'CUSTOMER', 'P4', c2rec.client_id, FALSE );
       htp.p(htf.bold('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||'Client ID  '|| c2rec.client_id||' '||c2rec.s_address||'&nbsp;&nbsp;&nbsp;'));
       htp.p( '</TD>' );
    else
     htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
     customer_list( 'CUSTOMER', 'P4', c2rec.client_id, FALSE, isedit=>FALSE );
     htp.p(htf.bold('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'||'Client ID  '|| c2rec.client_id||' '||c2rec.s_address||'&nbsp;&nbsp;&nbsp;'));
     htp.p( '</TD>' );
   end if;
   htp.tablerowclose;
  
   htp.tablerowopen;
   htp.tabledata( htf.bold('Date Created ' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');  
   htp.tabledata( htf.bold(to_char(nvl(c2rec.currdate,sysdate),LNGS.STR_DATE_02)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');  
   htp.tablerowclose;
   
   htp.tablerowopen;

   htp.tabledata( htf.bold('Notes'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if vaccess = 'EDIT'
    then
     htp.tabledata( htf.formtext( 'P5', 70, 203, c2rec.remarks),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1');
    else
     htp.tabledata( c2rec.remarks,cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=1 ');
     htp.formhidden('P5',c2rec.remarks);
   end if;
   htp.tablerowclose;
   htp.tableclose;
   
   htp.nl;
   htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );

   htp.tablerowopen;
   htp.tabledata( htf.bold('Current Location'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   if nvl(c2rec.complete,'F') <> 'H' and vaccess = 'EDIT'
   then
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   lov_list( 'LOCATIONS', 'P6', c2rec.current_location, FALSE, TRUE, FALSE );
   htp.p( '</TD>' );
  else
   htp.tabledata( htf.bold(c2rec.current_location),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
   htp.formhidden( 'P6', c2rec.current_location);
  end if;
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
   htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_STH_032 ),cattributes=>'VALIGN="TOP"');
   htp.p( '</TD>' );
  htp.tablerowclose;

  htp.tablerowopen;
   htp.tabledata( htf.bold(LNGS.STR_TXT_130),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
   htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN=2>');
   if vaccess = 'EDIT'
    then
   -- htp.formselectopen( cname=>cd, cattributes=>'id="'||cd||'"' );
     htp.formselectopen( 'P7', cattributes=>'id="P7"'  );
     if c2rec.complete = 'F'
      then
       htp.formselectoption( 'INCOMPLETE', 'SELECTED', cattributes=>'VALUE="F"' );
      else
       htp.formselectoption( 'INCOMPLETE', cattributes=>'VALUE="F"' );
     end if;
     if c2rec.complete = 'P'
      then
       htp.formselectoption( 'PACKING COMPLETE', 'SELECTED', cattributes=>'VALUE="P"' );
      else
       htp.formselectoption( 'PACKING COMPLETE', cattributes=>'VALUE="P"' );
     end if;
     if c2rec.complete = 'A'
      then
       htp.formselectoption( 'ARRIVED AT PORT', 'SELECTED', cattributes=>'VALUE="A"' );
      else
       htp.formselectoption( 'ARRIVED AT PORT', cattributes=>'VALUE="A"' );
     end if;
     if c2rec.complete = 'H'
      then
       htp.formselectoption( 'ARCHIVED', 'SELECTED', cattributes=>'VALUE="H"' );
      else
       htp.formselectoption( 'ARCHIVED', cattributes=>'VALUE="H"' );
     end if;
     if c2rec.complete = 'D'
     then
       htp.formselectoption( 'READ-ONLY', 'SELECTED', cattributes=>'VALUE="D"' );
      else
       htp.formselectoption( 'READ-ONLY', cattributes=>'VALUE="D"' );
     end if;
     if c2rec.complete = 'W'
     then
       htp.formselectoption( 'AWAITING SHIPMENT', 'SELECTED', cattributes=>'VALUE="W"' );
      else
       htp.formselectoption( 'AWAITING SHIPMENT', cattributes=>'VALUE="W"' );
     end if;
     if c2rec.complete = 'S'
     then
       htp.formselectoption( 'SHIPPED', 'SELECTED', cattributes=>'VALUE="S"' );
      else
       htp.formselectoption( 'SHIPPED', cattributes=>'VALUE="S"' );
     end if;
   else
     htp.formhidden( 'P7',c2rec.complete );
    if c2rec.complete = 'F' then htp.bold( LNGS.STR_TXT_131 ); elsif c2rec.complete = 'H' then htp.bold( 'ARCHIVED' ); elsif c2rec.complete = 'P' then htp.bold( LNGS.STR_TXT_132 ); elsif c2rec.complete = 'A' then htp.bold( LNGS.STR_TXT_133 ); else htp.bold( LNGS.STR_TXT_134 ); end if;
   end if;

   if (access_id <> 'z'  ) then   
      
      htp.tabledata( htf.anchor2( 'strangp.assign_smp_det?surl=' || surl || '&FL=T&rid=' || translate(rid,'+ ','~+') || '&scid=' || scid || '&parm=' || parm || '&access_id=' || access_id, '[' || LNGS.STR_TXT_130 || ']',ctarget=>'ASSIGN_SMP' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   else
      htp.tabledata( htf.bold(' '), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
   end if;
  htp.tablerowclose;
  htp.tableclose;
 -- htp.nl;
htp.tableopen( cattributes=>'cellpadding=4 cellspacing=4 border=1 ' || glbx.TABLE_BACKGROUND);
  htp.tablerowopen;
  htp.tabledata( htf.bold(LNGS.STR_TXT_090),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" '); 
  htp.tabledata( htf.bold(to_char(c2rec.sumweight,LNGS.STR_FRMT_04)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" ');
  htp.tabledata( htf.bold(LNGS.STR_TXT_091),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" ');
  htp.tabledata( htf.bold(to_char(c2rec.sumvolume,LNGS.STR_FRMT_03)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" ');
  htp.tabledata( htf.bold('Tare(kg)'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" ');
  htp.tabledata( htf.bold(to_char(c2rec.tare,LNGS.STR_FRMT_04)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" ');
  htp.tabledata( htf.bold('Gross Weight'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" ');
  htp.tabledata( htf.bold(to_char(c2rec.grossweight,LNGS.STR_FRMT_04)),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT" ');
  htp.tablerowclose;
  htp.tableclose;
  htp.nl;

--------------------------------------------------------------------------------------------------------------------------------
-- new table start here

 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 width=900 border-collapse: separate; style="background-color:"#c0c0c0" ' || glbx.TABLE_BACKGROUND );

 htp.tablerowopen;
 htp.tabledata( htf.bold( LNGS.STR_TXT_049 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
        if c2rec.sa = 'A'
         then
          htp.tabledata( htf.formhidden( 'P8', c2rec.sa ) || LNGS.STR_TXT_050, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"' );
         else
          htp.tabledata( htf.formhidden( 'P8', c2rec.sa ) || LNGS.STR_TXT_051, cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"' );
        end if;
       else
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT">' );
        htp.formselectopen( 'P8' );
        if c2rec.sa = 'A'
         then
          htp.formselectoption( LNGS.STR_TXT_050, 'SELECTED', cattributes=>'VALUE="A"' );
          htp.formselectoption( LNGS.STR_TXT_051, cattributes=>'VALUE="S"' );
         else
          htp.formselectoption( LNGS.STR_TXT_050, cattributes=>'VALUE="A"' );
          htp.formselectoption( LNGS.STR_TXT_051, 'SELECTED', cattributes=>'VALUE="S"' );
        end if;
        htp.formselectclose;
       htp.p( '</TD>' );
       end if;
      else
         htp.tabledata( c2rec.sa, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
         htp.formhidden( 'P8', c2rec.sa);
     end if;
     -- Put Scan Key here !!!
     htp.tabledata( htf.bold('Scan Key'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT" width="25%"');
     if vaccess = 'EDIT' then
        htp.tabledata( htf.formtext('P12', 8, 8, c2rec.scan_key, cattributes=>'style="background-color: #E0E0D0;" readonly'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     else
        htp.tabledata( htf.bold(c2rec.scan_key),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
        htp.formhidden( 'P12', c2rec.scan_key);
   end if;
     
     htp.tablerowclose;
     htp.tablerowopen;
      htp.tabledata( htf.bold( 'Hazardous Class' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if vaccess = 'EDIT'
      then
      if seclevel in ( 'LEVEL 8' )
       then
        htp.tabledata( htf.formhidden( 'P9', c2rec.hazard_class ) || c2rec.hazard_class, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3"' );
       else       
          htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3">' );
          lov_list( 'HAZARD_CLASS', 'P9', c2rec.hazard_class, FALSE, TRUE, FALSE );
          htp.p( '</TD>' );      
      -- htp.tabledata( htf.formtext( 'P9', 30, 120, c2rec.hazard_class), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );
      end if;
      else
       htp.tabledata( c2rec.hazard_class, cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3"' );
       htp.formhidden( 'P9', c2rec.hazard_class);
     end if;
	      
 htp.tablerowclose;
 --htp.tableclose;

    htp.tablerowopen;
     htp.tabledata( htf.bold('Warehouse'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     if nvl(c2rec.complete,'F') <> 'H' and vaccess = 'EDIT'
      then
       htp.p( '<TD ' || glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3">' );
       lov_list_warehouse( 'LOCATIONS', 'P10', c2rec.location_in_warehouse, FALSE, TRUE, FALSE );
       htp.p( '</TD>' );
      else
       htp.tabledata( htf.bold(c2rec.location_in_warehouse),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="3"');
       htp.formhidden( 'P10', c2rec.location_in_warehouse);
     end if;
    htp.tablerowclose;
    -- Add Dimensions Here:
     htp.tablerowopen;
     htp.tabledata( htf.bold('SMP Dimensions'),cattributes=>glbx.QUERY_BACKGROUND || 'ALIGN="LEFT" WIDTH="17%"');
     if vaccess = 'EDIT'
      then   
        htp.tabledata('Volume '||htf.formtext( 'P13', 7, 7, ltrim(to_char(c2rec.smp_volume_in_mtrs,LNGS.STR_FRMT_07)),  cattributes=>'style="background-color: #E0E0D0;" readonly')||htf.bold(' in m3'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" WIDTH="25%" COLSPAN="1"' );
        htp.tabledata(htf.bold('Length ')||htf.formtext( 'P11L', 5, 5, ltrim(to_char(c2rec.smp_length_in_cmtrs,LNGS.STR_FRMT_04)))||htf.bold(' x Width ')||htf.formtext( 'P11W', 5, 5, ltrim(to_char(c2rec.smp_width_in_cmtrs,LNGS.STR_FRMT_04)))||htf.bold(' x Height ')||htf.formtext( 'P11H', 5, 5, ltrim(to_char(c2rec.smp_height_in_cmtrs,LNGS.STR_FRMT_04)))||htf.bold(' in cms'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" WIDTH="50%" COLSPAN="2"' );
      else
       htp.tabledata( htf.bold('Length ')||ltrim(to_char(c2rec.smp_length_in_cmtrs,LNGS.STR_FRMT_04))||htf.bold(' x Width ')||ltrim(to_char(c2rec.smp_width_in_cmtrs,LNGS.STR_FRMT_04))||htf.bold(' x Height ')||ltrim(to_char(c2rec.smp_width_in_cmtrs,LNGS.STR_FRMT_04))||htf.bold(' in cms  ')||ltrim(to_char(c2rec.smp_volume_in_mtrs,LNGS.STR_FRMT_04))||htf.bold(' in m3 '), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" WIDTH="55%" COLSPAN="3"' );
       htp.formhidden( 'P11L',c2rec.smp_length_in_cmtrs );
       htp.formhidden( 'P11W',c2rec.smp_width_in_cmtrs );
       htp.formhidden( 'P11H',c2rec.smp_height_in_cmtrs );
     end if;
     htp.tablerowclose;
     htp.tablerowopen;
     htp.tabledata( htf.bold( 'Revenue ton (R/T)' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( nvl(to_char(c2rec.revton,LNGS.STR_FRMT_07),'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="1"' );
     if NVL(c2rec.sa,'S') = 'A' then
       htp.tabledata( htf.bold( 'Chargeable Weight' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( htf.bold(to_char(c2rec.chargeweight,LNGS.STR_FRMT_04)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="1"' );	
     else
       htp.tabledata( htf.bold( 'Tare' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
       htp.tabledata( htf.formtext('P14', 8, 8, c2rec.tare),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');       
     --  htp.tabledata( htf.bold( '&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="1"' );	
     end if;
    htp.tablerowclose;
     -- End Dimensions here
     htp.tablerowopen;
     if NVL(c2rec.sa,'S') = 'A' then
        htp.tabledata( htf.bold('MAWB'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     else
     htp.tabledata( htf.bold( LNGS.STR_TXT_062 ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     end if;
     if c2rec.movement_no is not null then
        htp.tabledata(htf.anchor2('STRANGP.movement?surl=' || surl || '&rid=' || replace(c3rec.rowid, '+', '~') ||'&scid='||scid||'&call_name=STRANGP.SMP&parm='||c3rec.movement_type||'&access_id=x&msg=', c3rec.movement_no, ctarget=>'NEWECN'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="1"');
     else
        htp.tabledata( nvl(c2rec.movement_no,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="1"' );
     end if;
     if NVL(c2rec.sa,'S') = 'A' then
        htp.tabledata( htf.bold('Tare'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
        htp.tabledata( htf.formtext('P14', 8, 8, c2rec.tare),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
     --   htp.tabledata( htf.bold('&nbsp;'),cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" ');
     else
        htp.tabledata( htf.bold('Seal'),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
        htp.tabledata( nvl(c2rec.seal,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"' );	 
     end if;
     htp.tablerowclose;
     htp.tablerowopen;
     htp.tabledata( htf.bold( 'Packed By' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( nvl(c2rec.packed_by,'&nbsp;'), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="1"' );
     htp.tabledata( htf.bold( 'Packed Date' ),cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="LEFT"');
     htp.tabledata( htf.bold(to_char(c2rec.packed_date,LNGS.STR_DATE_02)), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT" COLSPAN="1"' );	 	 
     htp.tablerowclose;
htp.tableclose;
htp.nl;
htp.nl;
htp.p( '<CENTER>' );
 -- ============================================================================================================================
 htp.tableopen( cattributes=>'cellspacing=0 cellpadding=0 border=0' );
 htp.tablerowopen;
 if vaccess = 'EDIT' and nvl(access_id,'x') = 'z'
  then
   htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_STH_031),cattributes=>'VALIGN="TOP"');
 elsif vaccess = 'EDIT' and nvl(access_id,'x') <> 'z'
  then
   htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_STH_032 ),cattributes=>'VALIGN="TOP"');
   if seclevel in ('LEVEL 5', 'LEVEL 7') then htp.tabledata( htf.formsubmit( 'ACTION', LNGS.STR_STH_040),cattributes=>'VALIGN="TOP"'); end if;
 end if;
 htp.formclose;
 if vaccess = 'EDIT' and nvl(access_id,'x') <> 'z'
  then
   htp.tabledata( htf.formopen( 'strangp.mng_smp', ctarget=>'SMP_WINDOW' ) || htf.formhidden( 'SURL', surl ) || htf.formhidden( 'access_id', 'z' ) || htf.formhidden( 'RID', null ) || htf.formsubmit( null, LNGS.STR_STH_031 ) || htf.formclose,cattributes=>'VALIGN="TOP"');
 end if;
 htp.tablerowclose;
 htp.tableclose;
 search( surl, 'SMP', rid );
 htp.nl;
 if call_name is null then htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl; end if;
 -------------------------------------------------------------------------------------------------------------------------
 htp.tableclose;
 htp.p( '</CENTER>' );
exception when others then
 glbx.error_details( 'STRANGP', 'MNG_SMP',null,null,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end mng_smp;

procedure accept_mng_smp( surl in varchar2, rid in varchar2, access_id in varchar2, p1 in varchar2 default null, p2 in varchar2 default null, p3 in varchar2 default null, p4 in varchar2 default null,
                           p5 in varchar2 default null, p6 in varchar2 default null, p7 in varchar2 default null, p8 in varchar2 default null, p9 in varchar2 default null,
                           p10 in varchar2 default null,  p11L in varchar2 default null, p11W in varchar2 default null, p11H in varchar2 default null, p12 in varchar2 default null,
                           p13 in varchar2 default null, p14 in varchar2 default null,
                           action in varchar2, parm in varchar2 default null )
as

 cursor c1( smp varchar2 ) is select smp_no, movement_no from strang.smp where upper(smp) = upper(smp_no);
 --cursor c2( sto varchar2 ) is select max(customer_id) + 1 cnt from strang.customers;
 cursor c2( rid rowid ) is select * from strang.smp where rowid = rid;
 cursor c11(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'DELIVERYNO' and cola = vste;
 cursor c3( rid rowid) is select 'x'
                            from strang.smp sm, strang.detailrs_item di
                           where sm.rowid = rid
                             and sm.smp_no = di.smp_no
                             and di.deliveryno is not null;
  cursor c4(vsmp_no varchar2) is
   select *
   from 
   (select (select max(di1.order_by) from strang.detailrs_item di1 where di1.deliveryno = dr.deliveryno and di1.item_no = dr.itemno) max_unit
        , count(*) over ( partition by dr.deliveryno, dr.itemno) cnt
        , to_char(di.lngth)||'cm X '||to_char(di.width)||'cm X '||to_char(di.height)||'cm'  as unit_dimms  
        , di.deliveryno
        , di.item_no 
   from strang.smp sm 
   left join strang.detailrs_item di on (sm.smp_no = di.smp_no)
   left join strang.detailrs dr on (dr.deliveryno = di.deliveryno and di.item_no = dr.itemno)
   left join strang.receivals r on (dr.deliveryno = r.deliveryno)
   where (( sm.complete in ('A','D','F','P','W','S')))
    and  sm.smp_no = vsmp_no
   ) tmp
  where tmp.max_unit <> cnt;

 cusrec		customer_account%ROWTYPE;
 c1rec		c1%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c3rec		c3%ROWTYPE;
 c4rec		c4%ROWTYPE;
 c11rec 	c11%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 newrid		rowid;
 vste		varchar2(10);
 newsmpid	integer;
 v_smp_no   varchar2(100); 
 v_sa       varchar2(1);
 v_weight   number;
 v_tare     number;
 v_volume   number(15,3);
 v_lngth    number;
 v_width    number;
 v_height   number;
 v_scan_key number;
 v_packed_date date;
 v_revton   number(15,3);
 v_chgwgt   number;

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'ACCEPT_MNG_SMP' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

  cusrec := glbx.get_aid( owner_id, 'C', ltype );
  vste := customer_state(cusrec.aid);


  if action = LNGS.STR_STH_040
   then
   open c3(chartorowid(rid));
   fetch c3 into c3rec;
   if c3%FOUND
   then
     close c3;
     mng_smp (surl,rid,'x',LNGS.STR_STH_046, parm=>parm);
   --  movement( surl, rid, scid, null, parm, access_id, LNGS.STR_TXT_158a );
     return;
   end if;
   close c3;

	delete from strang.smp where rowid = chartorowid( replace(rid,'~','+') );
    commit;
   mng_smp(surl,null,'z',LNGS.STR_STH_047, parm=>parm);
  -- menu( surl, to_char(sysdate,'SSSS'), 'SMP');
    return;
  end if;


  begin select to_number(p12) into v_scan_key from dual; exception when others then v_scan_key := NULL; end;
  
  if p14 is null then
    begin select sum(to_number(cold)) into v_tare from strang.lov where lov_name = 'SMP_PACKTYPES' and code = p2 ; exception when others then v_tare := NULL; end;
  else 
    begin select to_number(p14) into v_tare from dual; exception when others then v_tare := NULL; end;
  end if;
  if p11L is null then
     begin select sum(to_number(colf)) into v_lngth from strang.lov where lov_name = 'SMP_PACKTYPES' and code = p2 ; exception when others then v_lngth := NULL; end;
  else 
    begin select to_number(p11L) into v_lngth from dual; exception when others then v_lngth := NULL; end;
  end if;
  if p11W is null then
     begin select sum(to_number(colg)) into v_width from strang.lov where lov_name = 'SMP_PACKTYPES' and code = p2 ; exception when others then v_width := NULL; end;
  else 
    begin select to_number(p11W) into v_width from dual; exception when others then v_width := NULL; end;
  end if;
  if p11H is null then
     begin select sum(to_number(colh)) into v_height from strang.lov where lov_name = 'SMP_PACKTYPES' and code = p2 ; exception when others then v_height := NULL; end;
  else 
     begin select to_number(p11H) into v_height from dual; exception when others then v_height := NULL; end;
  end if;

  begin select sum(to_number(weight)) into v_weight from strang.detailrs_item where smp_no = p1 ; exception when others then v_weight := NULL; end;
--  begin select sum((lngth/100)* (width/100) * (height/100)) into v_volume from strang.detailrs_item where smp_no = p1 ; exception when others then v_volume := NULL; end;
 -- begin select sum(to_number(partvolume)) into v_volume from strang.detailrs where smp_no = p1 ; exception when others then v_volume := NULL; end;
--------------------------------------------------------------------------------
  v_volume := nvl(((v_lngth/100) * (v_width/100) * (v_height/100)),0.000);
 if action = LNGS.STR_STH_031
  then
   if p1 is null
    then
     mng_smp(surl,null,'z',LNGS.STR_STH_041);
     return;
   end if;
   open c1(p1);
   fetch c1 into c1rec;
   if c1%FOUND
    then
     close c1;
     mng_smp(surl,null,'z',LNGS.STR_STH_042||' - '||c1rec.smp_no, parm=>parm);
     return;
   end if;
   close c1;

   v_revton := strang.revenue_tonne(v_tare, v_volume);
   v_chgwgt := strang.chargeable_weight(v_tare, v_volume);
   select strang.s_smp_id.nextval into newsmpid from dual;

   insert into strang.smp(smp_id, smp_no,smp_type, urgency, client_id, remarks
                        , current_location, complete, sa, hazard_class, location_in_warehouse
                        , currdate, created_by, io,smp_length_in_cmtrs, smp_width_in_cmtrs
                        , smp_height_in_cmtrs, tare, scan_key, smp_volume_in_mtrs, revton, chargeweight) values
    ( newsmpid, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, sysdate, cusrec.username, 'I', v_lngth
    , v_width, v_height, v_tare, v_scan_key, v_volume, v_revton, v_chgwgt) returning rowid into newrid;
   commit;
   mng_smp (surl,newrid,'x',LNGS.STR_STH_043, parm=>parm);
   return;
 end if;
 
 
 if NVL(action,'XXX') = LNGS.STR_STH_032 then
 
    if p1 is null then
       mng_smp(surl,rid,'x',LNGS.STR_STH_041, parm=>parm);
       return;
    end if;
    
    open c2( chartorowid( replace(rid,'~','+') ));
    fetch c2 into c2rec;
    close c2;
    
    if NVL(action,'XXX') = LNGS.STR_STH_032 and p7 = 'P' and c2rec.complete = 'F' then
       open c4(c2rec.smp_no);
       fetch c4 into c4rec;
       if c4%FOUND then
         close c4;
         mng_smp(surl,rid,'x','Error: Unable to complete SMP! '||c2rec.smp_no||' contains missing units', parm=>parm);
         return;
       end if;
       close c4;
    end if;
    
    
    if p1 <> c2rec.smp_no then
       open c1(p1);
       fetch c1 into c1rec;
       if c1%FOUND then
          close c1;
          mng_smp(surl,rid,'x',LNGS.STR_STH_045,parm=>parm);
          return;
       end if;
       close c1;
    end if;

    open c1(p1);
    fetch c1 into c1rec;
    if c1%FOUND then
       if c1rec.movement_no is not null and strang.f_getlovColumn('MOVEMENT_STATUS','DESCRIPTION',p7) = 'INCOMPLETE' then
          close c1;
          mng_smp(surl,rid,'x','SMP cannot be INCOMPLETE and still in a CONTAINER!',parm=>parm);
          return;
       end if;
    end if;
    close c1;
    recalc_weight_smp( rid, null);
    
    update strang.smp set
       smp_no = p1,
       smp_type= p2, 
       urgency = p3, 
       client_id = p4, 
       remarks = p5, 
       current_location = p6, 
       complete = p7, 
       sa = p8, 
       io = 'I',
       hazard_class = p9, 
       location_in_warehouse = p10,
       modified_date = sysdate,
       modified_by = cusrec.username,
      -- sumweight = nvl(v_weight,0.0),
      -- sumvolume = nvl(v_volume,0.0),
       tare = nvl(v_tare,0.0),
       grossweight = nvl(sumweight,0.0) + nvl(v_tare,0.0),
       smp_length_in_cmtrs = v_lngth,
       smp_width_in_cmtrs = v_width,
       smp_height_in_cmtrs = v_height,
       scan_key = v_scan_key,
       smp_volume_in_mtrs = v_volume,
       revton = strang.revenue_tonne(nvl(sumweight,0.0) + nvl(v_tare,0.0),v_volume),
       chargeweight = strang.chargeable_weight(nvl(sumweight,0.0) + nvl(v_tare,0.0),v_volume)
    where rowid = chartorowid( replace(rid,'~','+') );
    commit;

    if c2rec.complete = 'F' and p7 = 'P' then
    
       update strang.smp
       set packed_date = sysdate 
        ,  packed_by  = cusrec.username  
       where rowid = chartorowid( replace(rid,'~','+') );
       
    elsif c2rec.complete = 'P' and p7 = 'F' then
    
       update strang.smp
       set packed_date = null
        ,  packed_by  = null
       where rowid = chartorowid( replace(rid,'~','+') );
       
    end if;
 
    if p1 <> c2rec.smp_no then
       update strang.detailrs_item
       set smp_no = p1
       where smp_no = c2rec.smp_no;
    end if;
    commit;
    
    mng_smp(surl,rid,'x',LNGS.STR_STH_044, parm=>parm);
    return;
 else
    mng_smp(surl,rid,'x','', parm=>parm);
 end if;
 exception when others then
    glbx.error_details( 'STRANGP', 'ACCEPT_MNG_SMP',null,owner_id,errmsg=>sqlerrm,extdet=>'RID:' || rid);
end accept_mng_smp;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure assign_smp_det( surl in varchar2, rid in varchar2, scid in varchar2 default null, parm in varchar2 default null, access_id in varchar2 default null, msg in varchar2 default null, fl in varchar2, lcl in varchar2 default 'F' )
as

 cursor c2( rid rowid ) is
  select sm.seal,sm.movement_no,sm.sa,sm.complete,sm.io, sm.smp_no, sa.shipname,sa.voy
  from strang.smp sm, strang.movements m, strang.ships_airway sa
  where sm.rowid = rid 
  and sm.io = 'I' 
  and sm.movement_no = m.movement_no (+) and nvl(sm.seal,'|')  = nvl(m.seal(+),'|')
  and m.ship_id = sa.ship_id (+);  

 cursor c3( v_smp_no varchar2, v_sa varchar2, cd varchar2, vio varchar2 ) is
  select di.rowid, di.deliveryno, di.item_no, di.order_by unitno, di.smp_no, '1'||' X '||di.pktpe_packtype||' STB '||(select dr.detaildesc from strang.detailrs dr where dr.deliveryno = di.deliveryno and dr.itemno = di.item_no and rownum <2)  drdesc
    from strang.detailrs_item di
    where (di.smp_no =  v_smp_no ) or
    (di.smp_no is null and di.MOVEMENT_NO is null 
    and exists (select 'x'
                from strang.detailrs dr2 
               where ((dr2.sa = v_sa and dr2.sa = 'S' and dr2.cl = 'C') or (v_sa <> 'S'))
                 and ((dr2.sa = v_sa and dr2.sa = 'A' ) or (v_sa <> 'A'))
                 and ((cd is null) or (cd is not null and substr(to_char(dr2.deliveryno),1,1) = cd)) 
                 and dr2.io = vio
                 and di.deliveryno = dr2.deliveryno
                 and di.item_no = dr2.itemno))
  order by di.deliveryno, di.item_no, di.order_by;

 cursor c4( v_smp_no varchar2, cd varchar2, vio varchar2 ) is
  select di.rowid, di.deliveryno, di.item_no, di.order_by unitno, di.smp_no, '1'||' X '||di.PKTPE_PACKTYPE||' STB '||(select dr.detaildesc from strang.detailrs dr where dr.deliveryno = di.deliveryno and dr.itemno = di.item_no and rownum <2)  drdesc
    from strang.detailrs_item di
   where di.smp_no = v_smp_no and
        ((cd is null) or ( cd is not null and substr(to_char(di.deliveryno),1,1) = cd)) and
         vio = 'I'
  order by di.deliveryno,di.item_no, di.order_by;


 cursor c10(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'SEE_ALL_DELIVERIES' and cola = vste;
 cursor c11(vste varchar2) is select description from strang.lov where lov_name = 'CONTROLS' and code = 'DELIVERYNO' and cola = vste;

 c1rec		customer_account%ROWTYPE;
 c2rec		c2%ROWTYPE;
 c10rec 	c10%ROWTYPE;
 c11rec 	c11%ROWTYPE;
 pfx		THEME%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 foundrec	boolean;
 ttl1		number;
 ttl2		number;
 cd		varchar2(10);
 vaccess	varchar2(20);
 vste		varchar2(10);
 vvio		varchar2(1);

begin
  glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.ASSIGN_SMP_DET' );
  if sts is not null
   then
   glbx.redisplay_login_page( sts, TRUE );
   return;
  end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( c1rec.theme_name );
 vste := customer_state(c1rec.aid);
 vaccess := data_access( owner_id, 'ASSIGN', rid );

 glbx.main_title( surl, LNGS.STR_TXT_271,glbx.backimg(surl,c1rec.aid,pfx.text_back,c1rec.background_img,ltype),helpid=>'STR18',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc);

 htp.p( '<CENTER>' );
 if vaccess = 'NONE' then htp.bold( LNGS.STR_TXT_002 ); htp.htmlclose; return; end if;

 if vaccess = 'EDIT'
  then
   htp.formopen( 'strangp.accept_assign_smp_det' );
       htp.formhidden( 'SURL', surl );
   htp.formhidden( 'SCID', scid );
   htp.formhidden( 'PARM', parm );
--   htp.formhidden( 'SCID', 12 );
--   htp.formhidden( 'PARM', 'SMP' );
   htp.formhidden( 'ACCESS_ID', access_id );
   htp.formhidden( 'RID', replace(rid,'~','+') );
   htp.formhidden( 'P1', null );
   htp.formhidden( 'P2', null );
    if fl in ('X','Y')
    then
     htp.formhidden( 'FL', 'T' );
    else
     if fl = 'Y1'
      then
       htp.formhidden( 'FL', 'F' );
      else
       htp.formhidden( 'FL', fl );
     end if;
   end if;
 end if;

 open c2( chartorowid( replace(rid,'~','+') ));
 fetch c2 into c2rec;
 close c2;
 vvio:=c2rec.io;
 open c10(vste);
 fetch c10 into c10rec;
 close c10;
 open c11(vste);
 fetch c11 into c11rec;
 close c11;
 if c10rec.description = 'YES' and c1rec.username <> 'DAWN' and lcl = 'F'
  then
   cd := NULL;
  else
   cd := substr(c11rec.description,1,1);
 end if;
 
 
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
   htp.tabledata( htf.bold( LNGS.STR_STH_034), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');

  htp.tabledata( htf.bold( c2rec.SMP_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
  htp.tablerowclose;
  if c2rec.sa = 'S' and c2rec.movement_no is not null
   then
    htp.tablerowopen;
    htp.tabledata( htf.bold( LNGS.STR_TXT_248), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
    htp.tabledata( htf.bold( c2rec.movement_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    htp.tablerowopen;
    htp.tabledata( htf.bold( LNGS.STR_TXT_063), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
    htp.tabledata( htf.bold( c2rec.seal ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
   elsif c2rec.sa = 'A' and c2rec.movement_no is not null then    
    htp.tablerowopen;
    htp.tabledata( htf.bold( LNGS.STR_TXT_274), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
    htp.tabledata( htf.bold( c2rec.movement_no ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
--    htp.tablerowopen;
--    htp.tabledata( htf.bold( LNGS.STR_TXT_063), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
--    htp.tabledata( htf.bold( c2rec.seal ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
--    htp.tablerowclose;
  end if;
  
  if c2rec.sa = 'A' and c2rec.movement_no is not null then  
    htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_129), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( c2rec.shipname ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_275), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( c2rec.voy ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
   elsif c2rec.sa = 'S' and c2rec.movement_no is not null then  
    htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_169), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( c2rec.shipname ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_276), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tabledata( htf.bold( c2rec.voy ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="LEFT"');
    htp.tablerowclose;
    htp.tablerowopen;
   end if;
    
   if NVL(c2rec.io,'I') = 'I' then
     htp.tabledata( htf.bold('INBOUND DIRECTION'),cattributes=>' BGCOLOR=":#00468C" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
   else
     htp.tabledata( htf.bold('OUTBOUND DIRECTION'),cattributes=>' BGCOLOR=":#4EB5E2" ALIGN="LEFT" STYLE="COLOR:#FFFFFF" COLSPAN ="2"');
   end if;
   htp.tablerowclose;


 htp.tableclose;
 htp.nl;
 htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1 ' || glbx.TABLE_BACKGROUND );
  htp.tablerowopen;
     htp.tabledata( htf.bold( LNGS.STR_TXT_163), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold( LNGS.STR_TXT_164), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     htp.tabledata( htf.bold( LNGS.STR_TXT_164a), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     if c2rec.complete = 'F'
      then
       htp.tabledata( htf.bold( LNGS.STR_TXT_310), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
     end if;
     htp.tabledata( htf.bold( 'Description'), cattributes=>glbx.QUERY_BACKGROUND || ' ALIGN="CENTER"');
  htp.tablerowclose;
  if fl in ('T','X','Y')
   then
--    glbx.dbg ('c2rec.smp_no'||c2rec.smp_no);
--    glbx.dbg ('c2rec.sa'||c2rec.sa);
--    glbx.dbg ('cd'||cd);
--    glbx.dbg ('c2rec.io'||c2rec.io);
    
    for c3rec in c3( c2rec.smp_no, c2rec.sa, cd, c2rec.io ) loop

     
     if (c2rec.complete = 'F') or (c2rec.complete <> 'F' and c3rec.smp_no is not null)
     then
     htp.tablerowopen;
       htp.tabledata( htf.bold( c3rec.deliveryno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.bold( c3rec.item_no), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.bold( c3rec.unitno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       if c2rec.complete = 'F'
        then
         if c3rec.smp_no is null
          then
           if fl = 'X'
            then
             if vaccess = 'EDIT'
              then
               htp.tabledata( htf.formcheckbox( 'P1', c3rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
            else
             if vaccess = 'EDIT'
              then
               htp.tabledata( htf.formcheckbox( 'P1', c3rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
            end if;
          else
           if fl = 'Y'
            then
             if vaccess = 'EDIT'
              then
               htp.tabledata( htf.formcheckbox( 'P1', c3rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
            else
             if vaccess = 'EDIT'
              then
               htp.tabledata( htf.formcheckbox( 'P1', c3rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
           end if;
           htp.formhidden( 'P2', c3rec.rowid );
        end if;
       end if;
     htp.tabledata( htf.bold( c3rec.drdesc), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tablerowclose;
     end if;
    end loop;
  else
    for c4rec in c4( c2rec.smp_no, cd, vvio ) loop
     htp.tablerowopen;
       htp.tabledata( htf.bold( c4rec.deliveryno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.bold( c4rec.item_no), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       htp.tabledata( htf.bold( c4rec.unitno), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
       if c2rec.complete = 'F'
        then
         if c4rec.smp_no is null
          then
           if fl = 'X'
            then
             if vaccess = 'EDIT'
              then
               htp.tabledata( htf.formcheckbox( 'P1', c4rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
            else
             if vaccess = 'EDIT'
              then
               htp.tabledata( htf.formcheckbox( 'P1', c4rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
           end if;
          else
           if fl in ('Y','Y1')
            then
             if vaccess = 'EDIT'
              then
               htp.tabledata( htf.formcheckbox( 'P1', c4rec.rowid ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( '&nbsp;', cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
            else
             if vaccess = 'EDIT'
              then
               htp.tabledata( htf.formcheckbox( 'P1', c4rec.rowid, 'CHECKED' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
              else
               htp.tabledata( htf.bold( 'X' ), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="CENTER"');
             end if;
           end if;
           if vaccess = 'EDIT' then htp.formhidden( 'P2', c4rec.rowid ); end if;
         end if;
       end if;
     htp.tabledata( htf.bold( c4rec.drdesc), cattributes=>glbx.QUERY_CELL_BACKGROUND || ' ALIGN="RIGHT"');
     htp.tablerowclose;
    end loop;
 end if;
 htp.tableclose;
 htp.nl;
 
 if vaccess = 'EDIT'
  then
   if fl in ('T','X','Y') and c2rec.complete = 'F'
    then
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_277 );
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_278 );
     htp.formsubmit( 'ACTION', LNGS.STR_TXT_279 );
     if c10rec.description = 'YES' and c1rec.username <> 'DAWN' and lcl = 'F'
      then
       htp.formsubmit( 'ACTION', LNGS.STR_TXT_416 );
     elsif c10rec.description = 'YES' and c1rec.username <> 'DAWN' and lcl = 'T'
      then
       htp.formsubmit( 'ACTION', LNGS.STR_TXT_417 );
     end if;
    --  htp.formsubmit( 'ACTION', LNGS.STR_TXT_146 );
  end if;
   htp.formclose;
 end if;
 htp.nl;
 htp.nl;
 htp.bold( '<a href="" onClick="self.close()">' || LNG.GLB_TXT_033 || '</a>'); htp.nl;
 if msg is not null
  then
   glbx.header_msg( msg );
 end if;
 htp.p( '</CENTER>' );
 htp.htmlclose;
exception when others then
 glbx.error_details( 'STRANGP', 'ASSIGN_SMP_DET',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end assign_smp_det;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure accept_assign_smp_det( surl in varchar2, scid in integer, parm in varchar2, access_id in varchar2, rid in varchar2, action in varchar2, fl in varchar2, p1 in GLBX.MYARRAY, p2 in GLBX.MYARRAY )
as

 cursor c2( rid rowid ) is select smp_no, movement_no, seal, sa, io from strang.smp sm where sm.rowid = rid;

 c2rec		c2%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 newrid		rowid;
 sts		varchar2(100);
 priority	varchar2(100);
 -- added by David Banjo on 3/8/2021
 c1rec		customer_account%ROWTYPE;

 function isdel( p1 in GLBX.MYARRAY, p2 in varchar2 ) return boolean
 as
 begin
  for j in p1.first..p1.last loop
   if p1(j) = p2
    then
     return( FALSE );
   end if;
  end loop;
  return( TRUE );
 end;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.ACCEPT_ASSIGN_SMP_DET');
 if sts is not null
  then
   glbx.redisplay_login_page( sts, TRUE );
   return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 if action = LNGS.STR_TXT_416 then assign_smp_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_416, fl,'T' ); return; end if;
 if action = LNGS.STR_TXT_417 then assign_smp_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_417, fl,'F' ); return; end if;
 if action = LNGS.STR_TXT_278 then assign_smp_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_418, 'X' ); return; end if;
 if fl = 'F'
  then
   if action = LNGS.STR_TXT_278 then assign_smp_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_418, 'Y1' ); return; end if;
  else
   if action = LNGS.STR_TXT_279 then assign_smp_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_419, 'Y' ); return; end if;
 end if;

 open c2( chartorowid( replace(rid,'~','+') ) );
 fetch c2 into c2rec;
 close c2;

 for j in p2.first..p2.last loop
  -- Check to see if the appropriate record can have its values set to null.
  -- If it is found in P1 it means it has been checked and is not to be deleted
  if isdel(p1,p2(j))
   then
    update strang.detailrs_item 
    set smp_no = null
      , movement_no = null
      , seal = null 
      , packed_date = null
      , packed_by = null
      , modified_date = sysdate
      , modified_by = c1rec.username
    where rowid = chartorowid( p2(j))
    and smp_no is not null;
    update strang.detailrs dr 
     set smp_no = null
       , movement_no = null
       , camov_seal = null
     where dr.smp_no is not null
     and exists (select 'x'
                  from strang.detailrs_item di
                  where di.rowid = chartorowid( p2(j) )
                    and di.deliveryno = dr.deliveryno
                    and di.item_no = dr.itemno);
  end if;
 end loop;

 for j in p1.first..p1.last loop
    update strang.detailrs_item 
       set smp_no = c2rec.smp_no 
         , movement_no = c2rec.movement_no 
         , seal = c2rec.seal
         , packed_date = sysdate
         , packed_by = c1rec.username
         , modified_date = sysdate
         , modified_by = c1rec.username
     where rowid = chartorowid( p1(j))
       and smp_no is null;
    update strang.detailrs dr 
       set smp_no = c2rec.smp_no 
         , movement_no = c2rec.movement_no 
         , camov_seal = c2rec.seal
     where dr.smp_no is null
       and exists (select 'x'
                    from strang.detailrs_item di
                   where di.rowid = chartorowid( p1(j))
                     and di.DELIVERYNO = dr.deliveryno
                     and di.item_no = dr.itemno)
       and not exists (select 'x' 
                       from strang.detailrs_item di2
                       where dr.deliveryno = di2.deliveryno
                         and dr.itemno = di2.item_no
                         and di2.smp_no is null );
 end loop;
 commit;


 recalc_weight_smp( rid, null);
-- delete from strang.hawbs
--  where
--   mawb = c2rec.movement_no and
--   hawb not in
--    (select hawb_hawbno from strang.detailrs where movement_no = c2rec.movement_no);

 commit;

 assign_smp_det( surl, rid, scid, parm, access_id, LNGS.STR_TXT_280, fl );

exception when others then
 glbx.error_details( 'STRANGP', 'ACCEPT_ASSIGN_SMP_DET',null,owner_id,errmsg=>sqlerrm,extdet=>'PARM:' || parm);
end accept_assign_smp_det;
procedure recalc_weight_smp( rid varchar2, mtype in varchar2 default null )
as
 cursor c2( rid rowid ) is select smp_no, sa, smp_type, io from strang.smp sm where sm.rowid = rid;
 c2rec      c2%rowtype;
 v_smp_no   varchar2(100); 
 v_sa       varchar2(1);
 v_weight   number;
 v_tare     number;
 v_volume   number;
 cusrec		customer_account%ROWTYPE;
 ltype		varchar2(100);
 stype		integer;
 owner_id	integer;
 sts		varchar2(100);
 newrid		rowid;
 vste		varchar2(10);
begin
  open c2(chartorowid( replace(rid,'~','+') ));
  fetch c2 into c2rec;
  close c2;
  begin select sum(to_number(cold)) into v_tare from strang.lov where lov_name = 'SMP_PACKTYPES' and code = c2rec.smp_type ; exception when others then v_tare := NULL; end;
  begin select sum(to_number(weight)) into v_weight from strang.detailrs_item where smp_no = c2rec.smp_no ; exception when others then v_weight := NULL; end;
  begin 
--     select sum((lngth/100)* (width/100) * (height/100)) into v_volume 
--       from strang.detailrs_item 
--      where smp_no = c2rec.smp_no ; 
     select sum(round(vol1,3)) into v_volume 
                      from (select sum(nvl((di.lngth/100.0)*(di.width/100.0)*(di.height/100.0),0)) over (partition by di.deliveryno, di.item_no) vol1
                                 , row_number() over (partition by di.deliveryno, di.item_no order by order_by) rnk
                              from strang.detailrs_item di
                             where smp_no = c2rec.smp_no ) tmp
                       where tmp.rnk = 1;
     exception when others then v_volume := NULL; 
  end;
  
  update strang.smp
  set
   modified_date = sysdate,
 -- modified_by = cusrec.username,
   sumweight = nvl(v_weight,0.0),
   sumvolume = nvl(v_volume,0.0),
   tare = nvl(v_tare,0.0),
   grossweight = nvl(v_weight,0.0) + nvl(v_tare,0.0),
   revton = strang.revenue_tonne(nvl(v_weight,0.0) + nvl(v_tare,0.0),greatest(v_volume,(nvl(smp_length_in_cmtrs,0)*nvl(smp_width_in_cmtrs,0)* nvl(smp_height_in_cmtrs,0))/1000000)),
   chargeweight = strang.chargeable_weight(nvl(v_weight,0.0) + nvl(v_tare,0.0),greatest(v_volume,(nvl(smp_length_in_cmtrs,0)*nvl(smp_width_in_cmtrs,0)* nvl(smp_height_in_cmtrs,0))/1000000))
  where rowid = chartorowid( replace(rid,'~','+'));
  
 commit;
end recalc_weight_smp;

procedure part_shipment_window (surl in varchar2, mvid in varchar2, seal in varchar2 default null)
as

cursor c1 (p_mvid varchar2, p_seal varchar2) is
select /*+ ALL_ROWS */ 
      row_number() over (order by dr.deliveryno, dr.itemno) recno3
      , dr.deliveryno
      , dr.itemno
      , strang.f_part_shipments(dr.movement_no, dr.camov_seal, dr.deliveryno, dr.itemno) part_shipment
 from strang.detailrs dr
 where exists (select 'x'
                 from strang.detailrs dr1
                where dr1.deliveryno = dr.deliveryno
                  and dr1.itemno = dr.itemno
                  and dr1.movement_no = p_mvid
                  and nvl(dr1.camov_seal,'|') = nvl( p_seal,'|'))
  and exists (select 'x'
                from strang.detailrs dr2
               where dr2.deliveryno = dr.deliveryno
                and NVL(dr2.movement_no,'XXX') <> NVL(p_mvid,'YYY')) 
order by 1;

 c1rec    c1%ROWTYPE;
 cusrec    customer_account%ROWTYPE;
 stype     integer;
 ltype     varchar2(100);
 owner_id  integer;
 sts       varchar2(100);
 pfx       THEME%ROWTYPE;
 rec_ctr   integer;
 timeout   integer;
 login_cnt integer;
 profid    integer;

begin
 glbx.cookie_id( surl, stype, ltype, owner_id, sts, progcalled=>'STRANGP.PART_SHIPMENT_WINDOW' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 cusrec := glbx.get_aid( owner_id, 'C', ltype );
 pfx := glbx.get_thm( cusrec.theme_name );

 glbx.main_title( surl, 'Part Shipment for '||mvid||' ('||seal||')',glbx.backimg(surl, cusrec.aid,pfx.text_back,cusrec.background_img,ltype),helpid=>'STR02',stype=>stype,sstyle=>pfx.text_font,sclr=>pfx.text_colour,det_sstyle=>pfx.title_text_font,det_sclr=>pfx.title_text_colour,det_font=>pfx.title_colour_font,hover=>pfx.hover_colour, disptop=>pfx.keep_lhf, finc=>pfx.text_font_inc, errclr=>pfx.error_text_colour, errfnt=>pfx.error_text_font, instclr=>pfx.instruct_text_colour, instfnt=>pfx.instruct_text_font, instfntinc=>pfx.instruct_font_inc, title_only=>TRUE);

     htp.nl;
     htp.tableopen( cattributes=>'cellpadding=2 cellspacing=2 border=1' );
     htp.tablerowopen;
     htp.tableheader('#', cattributes=>glbx.QUERY_BACKGROUND);
     htp.tableheader('Delivery No.', cattributes=>glbx.QUERY_BACKGROUND);
     htp.tableheader('Item No.', cattributes=>glbx.QUERY_BACKGROUND);
     htp.tableheader('Part Shipment Details', cattributes=>glbx.QUERY_BACKGROUND);
     htp.tablerowclose;
     for c1rec in c1(mvid, seal) loop
      htp.tablerowopen;
      htp.tabledata(c1rec.recno3, cattributes=>glbx.QUERY_CELL_BACKGROUND);
      htp.tabledata(c1rec.deliveryno, cattributes=>glbx.QUERY_CELL_BACKGROUND);
      htp.tabledata(c1rec.itemno, cattributes=>glbx.QUERY_CELL_BACKGROUND);
      htp.tabledata(substr(c1rec.part_shipment,1,500), cattributes=>glbx.QUERY_CELL_BACKGROUND);
      htp.tablerowclose;
     end loop;
     htp.tableclose;
   htp.nl;
   htp.nl;
   htp.p('<a href="" onClick="self.close()">[Close Window]</a>');
  htp.bodyclose;

 htp.htmlclose;

exception when others then
 glbx.error_details( 'STRANGP', 'PART_SHIPMENT_WINDOW',null,owner_id,errmsg=>sqlerrm);
end part_shipment_window;

procedure load_container_photos(surl in varchar2, rid in varchar2, vtyp varchar2 default 'FRONT', msg in varchar2 default null) as

 cursor c2(vrid rowid) is
  select m.*
  from   strang.movements m
  where  m.rowid = vrid
  ;

 cursor c3 is
  select mo.name, mv.name_default
  from   main_object mo, main_value mv
  where  mo.mid = mv.mid
         and mo.theme_type = 'STRANG_CONTAINER_FOLDERS';
  
  
 INVALID_RID exception;
 PRAGMA EXCEPTION_INIT(INVALID_RID, -1410);

 c1rec        customer_account%ROWTYPE;
 c2rec        c2%ROWTYPE;
 pfx          THEME%ROWTYPE;
 ltype        varchar2(100);
 stype        integer;
 owner_id     integer;
 sts          varchar2(100);
 vaccess      varchar2(20);
 vste         varchar2(10);
 seclevel     varchar2(100);

 v_url        varchar2(1000);
 file_types   CONSTANT varchar2(1000) := '.pdf,image/x-png,image/gif,image/jpeg,.csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel';

begin
 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.LOAD_CONTAINER_PHOTOS' );
 
 
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'LOAD_CONTAINER_PHOTOS', null );
 seclevel := oltp.security_role( owner_id );

 begin
 open c2(replace(rid, '~', '+'));
 fetch c2 into c2rec;
 close c2;
 exception
  when INVALID_RID then
   htp.htmlopen;
    htp.headopen;
     htp.p('<link rel="stylesheet" type="text/css" href="/images/str/style.css" />');
    htp.headclose;
	htp.bodyopen;
     htp.header(2,'Container not found, ROWID: ' || replace(rid, '~', '+'), 'CENTER' );
     htp.header(3,'Please close this window and retry', 'CENTER' );
     htp.header(3,'If problem persists, please contact the administrator', 'CENTER' );
     htp.center(htf.bold('<a href="" onClick="self.close()">[Close Window]</a>'));
	htp.bodyclose;
   htp.htmlclose;
   return;
 end;

 htp.htmlopen;

 htp.headopen;
 htp.p('<link rel="stylesheet" type="text/css" href="/images/str/style.css" />');
 htp.headclose;

 htp.bodyopen;
  htp.p('<CENTER>');
  htp.header(1,'Load Files', 'CENTER' );
  
 -- websys.glbx.extract_master_parameter('STRANG_RECEIVALS_DIR')|| websys.decs.UNIX_OR_NT || v_container||'_'||v_seal || websys.decs.UNIX_OR_NT || v_photo_location;
  v_url := htf.anchor( 'javascript: window.open(''' || '/' || glbx.extract_master_parameter('APACHE_RECEIVALS_DIR') || '/' || c2rec.movement_no||'_'||c2rec.seal || '/'  || ''',''' || 'vtyp' || ''',''height=800,width=600,scrollbars=yes,resizable=yes'');void('''');',  c2rec.movement_no||' ('||c2rec.seal||')');
  htp.header(2,'Container (Seal) :  ' ||v_url, 'CENTER' );
  htp.nl;

  if msg is not null
   then
    htp.header(1, msg, cattributes=>'style="color: red;"');
  end if;
  htp.formopen('strangp.load_container_photos_accept', 'POST', null, 'multipart/form-data');
  htp.formhidden( 'SURL', surl );
  htp.formhidden( 'RID', rid );
  -- htp.formhidden( 'RECCTR', recctr );
  htp.formhidden( 'VTYP', vtyp );
  htp.tableopen;
   for c3rec in c3 loop
   
   v_url := htf.anchor( 'javascript: window.open(''' || '/' || glbx.extract_master_parameter('APACHE_RECEIVALS_DIR') || '/' || c2rec.movement_no||'_'||c2rec.seal  || '/'  || c3rec.name || '/' || ''',''' || 'vtyp' || ''',''height=800,width=600,scrollbars=yes,resizable=yes'');void('''');', 'Listing' );
   htp.tablerowopen;
    if c3%ROWCOUNT = 1
	 then
	  htp.tabledata(htf.formfile('infile', file_types, 'multiple'));
	else
      htp.tabledata('&nbsp;');
	end if;
	htp.tabledata(htf.formsubmit('action', 'Load ' || c3rec.name_default));
	htp.tabledata(v_url);
   htp.tablerowclose;
   end loop;
  htp.tableclose;

  htp.formclose;
  htp.bold('<a href="" onClick="self.close()">[Close Window]</a>');
  htp.p('</CENTER>');

 htp.bodyclose;
 htp.htmlclose;
end load_container_photos;
----------------------------------------------------------
--  procedure adapted from load_files by dbanjo 27/09/2022
procedure load_container_photos_accept(surl in varchar2, rid in varchar2, vtyp varchar2, infile owa.vc_arr, action varchar2) as
cursor c2(vrid rowid) is
 select m.*
 from   strang.movements m
 where  m.rowid = vrid
 ;

cursor c3(v_file varchar2) is select * from apache_ows_content where name = v_file;

INVALID_RID exception;
PRAGMA EXCEPTION_INIT(INVALID_RID, -1410);

c1rec         customer_account%ROWTYPE;
c2rec         c2%ROWTYPE;
c3rec         c3%ROWTYPE;
status        number;
deliveryno    number := 123456;
v_dir         varchar2(1000);
v_file        varchar2(1000);
pfx           THEME%ROWTYPE;
ltype         varchar2(100);
stype         integer;
owner_id      integer;
sts           varchar2(100);
vaccess       varchar2(20);
vste          varchar2(10);
seclevel      varchar2(100);
chkval        varchar2(1000);
msg           varchar2(1000);
v_ext         varchar2(50);
vPicLocation  varchar2(50);
v_flag        integer;


begin

 glbx.cookie_id( surl,stype, ltype, owner_id, sts, progcalled=>'STRANGP.LOAD_CONTAINER_PHOTOS' );
 if sts is not null
  then
  glbx.redisplay_login_page( sts, TRUE );
  return;
 end if;

 c1rec := glbx.get_aid( owner_id, 'C', ltype );
 vste := customer_state(c1rec.aid);
 pfx := glbx.get_thm( c1rec.theme_name );
 vaccess := data_access( owner_id, 'LOAD_CONTAINER_PHOTOS', null );
 seclevel := oltp.security_role( owner_id );
 vPicLocation := trim(replace(upper(action), 'LOAD CONTAINER PHOTO -', ''));


 begin
 open c2(replace(rid, '~', '+'));
 fetch c2 into c2rec;
 close c2;
 exception
  when INVALID_RID then
   htp.htmlopen;
    htp.headopen;
     htp.p('<link rel="stylesheet" type="text/css" href="/images/str/style.css" />');
    htp.headclose;
	htp.bodyopen;
     htp.header(2,'Container not found, ROWID: ' || replace(rid, '~', '+'), 'CENTER' );
     htp.header(3,'Please close this window and retry', 'CENTER' );
     htp.header(3,'If problem persists, please contact the administrator', 'CENTER' );
     htp.center(htf.bold('<a href="" onClick="self.close()">[Close Window]</a>'));
	htp.bodyclose;
   htp.htmlclose;
   return;
 end;
 
 if infile.count < 1
  then
   load_container_photos(surl, rid, vtyp, 'No Files Selected');
   return;
 end if;

 if upper (action) not like 'LOAD %'
  then
   load_container_photos(surl, rid, vtyp, 'Invalid action: ' || action);
   return;
 end if;
 

 for j in infile.first..infile.last loop
  open c3(infile(j));
  fetch c3 into c3rec;
  if c3%FOUND
   then
    
    v_ext := regexp_substr(regexp_substr(c3rec.mime_type, '[^./]+$', 1, 1, 'i'),'[^.-]+$', 1, 1, 'i');
    if v_ext not in ('png','jpg','jpeg','gif') then 
       load_container_photos(surl, rid, vtyp, 'Wrong Image file type: '|| glbx.extract_fname(c3rec.name, 'FILE')||' - Mime type is not png, gif or jpeg');
       return;
    end if;
    
   
    v_dir := glbx.extract_master_parameter('STRANG_RECEIVALS_DIR') || decs.UNIX_OR_NT || c2rec.movement_no||'_'||c2rec.seal || decs.UNIX_OR_NT || trim(replace(upper(action), 'LOAD CONTAINER PHOTO -', ''));
	v_file := glbx.extract_fname(c3rec.name, 'FILE');

    if utl_os.mkdir(v_dir) then null; end if;
    utl_blob.blobtofile(c3rec.blob_content, v_dir || decs.UNIX_OR_NT || v_file, FALSE);
	  
	if file_exists(v_dir, v_file)
	   then
	    
	    msg := msg || 'File saved: ' || v_file || '<br>';  
	    
	    	    
	    if c2rec.attached_photo is null and vPicLocation = 'FRONT' then
           v_flag := 1;
        elsif c2rec.attached_photo is null and vPicLocation = 'INSIDE' then
           v_flag := 2;
        elsif c2rec.attached_photo = 3 then 
           v_flag := 3;
        elsif c2rec.attached_photo = 2 and vPicLocation = 'INSIDE' then
           v_flag := 2;
        elsif c2rec.attached_photo = 1 and vPicLocation = 'INSIDE' then
           v_flag := 3;
        elsif c2rec.attached_photo = 1 and vPicLocation = 'FRONT' then
           v_flag := 1;
        elsif c2rec.attached_photo = 2 and vPicLocation = 'FRONT' then
           v_flag := 3;
        end if;
   
        update strang.movements m
           set attached_photo = v_flag
         where rowid = replace(rid, '~', '+');
         -- m.movement_no = vmov
         --  and nvl(m.seal,'|') = nvl(vseal,'|');  
	    
    else
	    msg := msg || 'File NOT saved: ' || v_file || '<br>';
	end if;
	  
  end if;
  close c3;
 delete from apache_ows_content where name = infile(j); commit;
 end loop;
 load_container_photos(surl, rid, vtyp, msg);

exception when others then
 htp.bold('Error: ' || sqlerrm);
end load_container_photos_accept;


end strangp;
/


GRANT EXECUTE ON WEBSYS.STRANGP TO STRANG;

GRANT EXECUTE ON WEBSYS.STRANGP TO STX1;
