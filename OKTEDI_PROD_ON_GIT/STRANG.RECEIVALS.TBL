DROP TABLE STRANG.RECEIVALS CASCADE CONSTRAINTS;

CREATE TABLE STRANG.RECEIVALS
(
  DELIVERYNO                NUMBER(8)           NOT NULL,
  CURRDATE                  DATE                DEFAULT sysdate,
  CURR                      VARCHAR2(3 BYTE)    DEFAULT 'AUD'                 NOT NULL,
  EXRATE                    NUMBER(6,4),
  GSTC_GSTCODE              VARCHAR2(4 BYTE)    NOT NULL,
  CUST_CUSTOMER_ID          NUMBER(16),
  SUPPLIER_CUSTOMER_ID      NUMBER(16),
  PRIMARY_ROWID             ROWID,
  SITE_OWNER                VARCHAR2(100 BYTE),
  DATE_MODIFIED             DATE,
  OFF_SITE_RECEIPT          DATE,
  SUPPLIER_CUSTOMER_ID_COM  NUMBER(16),
  ORIGINAL_CURR             VARCHAR2(3 BYTE),
  R_NOTES                   VARCHAR2(200 BYTE),
  STATUS                    VARCHAR2(100 BYTE),
  REC_DOCKET                VARCHAR2(50 BYTE),
  REC_TRANS_COMPANY         VARCHAR2(50 BYTE),
  REC_TRUCK_REGO            VARCHAR2(50 BYTE),
  INTERFACE_FLAG            CHAR(1 BYTE),
  AQIS_CLEARANCE            VARCHAR2(30 BYTE),
  AQIS_DEPOT                VARCHAR2(50 BYTE),
  CMT                       VARCHAR2(100 BYTE),
  CUSTOMS_AUTH_NO           VARCHAR2(100 BYTE),
  DEL_DATE                  DATE,
  DEL_TRANSPORT_COMPANY     VARCHAR2(100 BYTE),
  DEL_TRUCK_REGO            VARCHAR2(10 BYTE),
  DESTINATION               VARCHAR2(100 BYTE),
  HB                        VARCHAR2(100 BYTE),
  IO                        VARCHAR2(1 BYTE),
  LOCAL_HB                  VARCHAR2(100 BYTE),
  SECONDARY_TRANSPORT       VARCHAR2(100 BYTE),
  SNAIL_INSPECT             DATE,
  STRANG_INVOICE            VARCHAR2(100 BYTE),
  WHARF_COLLECT             DATE,
  CREATED_BY                VARCHAR2(50 BYTE),
  CREATE_DATE               TIMESTAMP(6),
  MODIFIED_BY               INTEGER,
  MODIFIED_DATE             TIMESTAMP(6),
  CURRTIME                  VARCHAR2(20 BYTE)
)
TABLESPACE PICTION_MED_1
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          9632K
            NEXT             32K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           )
LOGGING 
NOCOMPRESS 
NOCACHE;

COMMENT ON COLUMN STRANG.RECEIVALS.DELIVERYNO IS 'Delivery number';

COMMENT ON COLUMN STRANG.RECEIVALS.CURRDATE IS 'Date';


CREATE UNIQUE INDEX STRANG.P_RECEIVALS ON STRANG.RECEIVALS
(DELIVERYNO)
LOGGING
TABLESPACE PICTION_MED_1
PCTFREE    0
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          6M
            NEXT             256K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      KEEP
           );

ALTER TABLE STRANG.RECEIVALS ADD (
  CONSTRAINT P_RECEIVALS
  PRIMARY KEY
  (DELIVERYNO)
  USING INDEX STRANG.P_RECEIVALS
  ENABLE VALIDATE);


CREATE OR REPLACE TRIGGER STRANG.T_RECEIVALS 
 after insert or update or delete
 ON STRANG.RECEIVALS
 for each row
DISABLE
declare

 mod_type	varchar2(20);
 rid		rowid;
 pk1		varchar2(4000);
 pk2		varchar2(4000);

begin

 if nvl(global_site.disable_trigger,FALSE) then return; end if;
 if inserting
  then
   mod_type := 'I';
   rid := :NEW.ROWID;
   pk1 := :NEW.DELIVERYNO;
   pk2 := NULL;
 elsif updating
  then
   mod_type := 'U';
   rid := :OLD.ROWID;
   pk1 := :NEW.DELIVERYNO;
   pk2 := NULL;
 else
   if global_site.get_name is null then global_site.set_name; end if;
   mod_type := 'D';
   rid := :OLD.ROWID;
   pk1 := :OLD.DELIVERYNO;
   pk2 := NULL;
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'RECEIVALS','SITE_OWNER',rid,sysdate,mod_type,:OLD.SITE_OWNER,:NEW.SITE_OWNER,pk1,pk2);
   return;
 end if;

 if global_site.get_name is null then global_site.set_name; end if;
 if not((:OLD.DELIVERYNO = :NEW.DELIVERYNO) and (:OLD.DELIVERYNO is not null and :NEW.DELIVERYNO is not null)) and not (:OLD.DELIVERYNO is null and :NEW.DELIVERYNO is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'RECEIVALS','DELIVERYNO',rid,sysdate,mod_type,:OLD.DELIVERYNO,:NEW.DELIVERYNO,:OLD.DELIVERYNO,pk2);
 end if;

 if not((:OLD.CURRDATE = :NEW.CURRDATE) and (:OLD.CURRDATE is not null and :NEW.CURRDATE is not null)) and not (:OLD.CURRDATE is null and :NEW.CURRDATE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_date,new_date,data_type,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'RECEIVALS','CURRDATE',rid,sysdate,mod_type,:OLD.CURRDATE,:NEW.CURRDATE,'D',pk1,pk2);
 end if;

 if not((:OLD.CURR = :NEW.CURR) and (:OLD.CURR is not null and :NEW.CURR is not null)) and not (:OLD.CURR is null and :NEW.CURR is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'RECEIVALS','CURR',rid,sysdate,mod_type,:OLD.CURR,:NEW.CURR,pk1,pk2);
 end if;

 if not((:OLD.EXRATE = :NEW.EXRATE) and (:OLD.EXRATE is not null and :NEW.EXRATE is not null)) and not (:OLD.EXRATE is null and :NEW.EXRATE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'RECEIVALS','EXRATE',rid,sysdate,mod_type,:OLD.EXRATE,:NEW.EXRATE,pk1,pk2);
 end if;

 if not((:OLD.GSTC_GSTCODE = :NEW.GSTC_GSTCODE) and (:OLD.GSTC_GSTCODE is not null and :NEW.GSTC_GSTCODE is not null)) and not (:OLD.GSTC_GSTCODE is null and :NEW.GSTC_GSTCODE is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'RECEIVALS','GSTC_GSTCODE',rid,sysdate,mod_type,:OLD.GSTC_GSTCODE,:NEW.GSTC_GSTCODE,pk1,pk2);
 end if;

 if not((:OLD.CUST_CUSTOMER_ID = :NEW.CUST_CUSTOMER_ID) and (:OLD.CUST_CUSTOMER_ID is not null and :NEW.CUST_CUSTOMER_ID is not null)) and not (:OLD.CUST_CUSTOMER_ID is null and :NEW.CUST_CUSTOMER_ID is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'RECEIVALS','CUST_CUSTOMER_ID',rid,sysdate,mod_type,:OLD.CUST_CUSTOMER_ID,:NEW.CUST_CUSTOMER_ID,pk1,pk2);
 end if;

 if not((:OLD.SUPPLIER_CUSTOMER_ID = :NEW.SUPPLIER_CUSTOMER_ID) and (:OLD.SUPPLIER_CUSTOMER_ID is not null and :NEW.SUPPLIER_CUSTOMER_ID is not null)) and not (:OLD.SUPPLIER_CUSTOMER_ID is null and :NEW.SUPPLIER_CUSTOMER_ID is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'RECEIVALS','SUPPLIER_CUSTOMER_ID',rid,sysdate,mod_type,:OLD.SUPPLIER_CUSTOMER_ID,:NEW.SUPPLIER_CUSTOMER_ID,pk1,pk2);
 end if;

 if not((:OLD.SITE_OWNER = :NEW.SITE_OWNER) and (:OLD.SITE_OWNER is not null and :NEW.SITE_OWNER is not null)) and not (:OLD.SITE_OWNER is null and :NEW.SITE_OWNER is null)
  then
   insert into replication(replication_id,site,table_name,column_name,row_changed,date_changed,change_type,old_value,new_value,pk_col1,pk_col2) values
    (s_replication.nextval,nvl(global_site.site_name,'PRIMARY'),'RECEIVALS','SITE_OWNER',rid,sysdate,mod_type,:OLD.SITE_OWNER,:NEW.SITE_OWNER,pk1,pk2);
 end if;

end t_receivals;
/


CREATE OR REPLACE TRIGGER STRANG.T_RECEIVALS_B 
 before insert or update
 ON STRANG.RECEIVALS
 for each row
DISABLE
declare

begin

 if nvl(global_site.disable_trigger,FALSE) then return; end if;
 if global_site.disable_trigger is NULL or :NEW.date_modified is NULL
  then
   :NEW.date_modified := sysdate;
 end if;
 if global_site.get_name is null then global_site.set_name; end if;
 if :NEW.site_owner is not null then return; end if;
 if inserting
  then
   :NEW.site_owner := global_site.site_name;
 elsif updating
  then
   :NEW.site_owner := global_site.site_name;
 end if;

end t_receivals_b;
/


GRANT DELETE, INSERT, SELECT, UPDATE ON STRANG.RECEIVALS TO STX1;

GRANT ALTER, DELETE, INDEX, INSERT, REFERENCES, SELECT, UPDATE, ON COMMIT REFRESH, QUERY REWRITE, DEBUG, FLASHBACK ON STRANG.RECEIVALS TO WEBSYS;
